
magnetic_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008990  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013524  08008b30  08008b30  00018b30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c054  0801c054  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801c054  0801c054  0002c054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c05c  0801c05c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c05c  0801c05c  0002c05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c060  0801c060  0002c060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801c064  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a04  200001dc  0801c240  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001be0  0801c240  00031be0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015516  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000309a  00000000  00000000  00045722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  000487c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  000491b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b0c  00000000  00000000  00049b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6ec  00000000  00000000  0006163c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093a39  00000000  00000000  0006ed28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  00102761  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000385c  00000000  00000000  0010282c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00004df4  00000000  00000000  00106088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008b18 	.word	0x08008b18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008b18 	.word	0x08008b18

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b08b      	sub	sp, #44	; 0x2c
 8000f54:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	size_t uartStringLen = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f5a:	f000 fe25 	bl	8001ba8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f5e:	f000 f9a9 	bl	80012b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f62:	f000 fa8f 	bl	8001484 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000f66:	f000 fa11 	bl	800138c <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8000f6a:	f000 fa61 	bl	8001430 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_IT(&hadc1);
 8000f6e:	48b0      	ldr	r0, [pc, #704]	; (8001230 <main+0x2e0>)
 8000f70:	f000 fed0 	bl	8001d14 <HAL_ADC_Start_IT>
//  HAL_ADC_Start_DMA(hadc, pData, Length)
	while (ARM_MATH_SUCCESS != arm_rfft_fast_init_f32(&fftInstance, FFT_LENGTH))
 8000f74:	bf00      	nop
 8000f76:	2140      	movs	r1, #64	; 0x40
 8000f78:	48ae      	ldr	r0, [pc, #696]	; (8001234 <main+0x2e4>)
 8000f7a:	f002 fd03 	bl	8003984 <arm_rfft_fast_init_f32>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1f8      	bne.n	8000f76 <main+0x26>
		;
	while (ARM_MATH_SUCCESS
 8000f84:	bf00      	nop
			!= arm_rfft_fast_init_f32(&chirpFftInstance, CHIRP_LENGTH))
 8000f86:	2140      	movs	r1, #64	; 0x40
 8000f88:	48ab      	ldr	r0, [pc, #684]	; (8001238 <main+0x2e8>)
 8000f8a:	f002 fcfb 	bl	8003984 <arm_rfft_fast_init_f32>
 8000f8e:	4603      	mov	r3, r0
	while (ARM_MATH_SUCCESS
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1f8      	bne.n	8000f86 <main+0x36>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
//	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//	  HAL_Delay(100);
		if (computeFFT != 0) {
 8000f94:	4ba9      	ldr	r3, [pc, #676]	; (800123c <main+0x2ec>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0fa      	beq.n	8000f94 <main+0x44>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8000f9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa2:	48a7      	ldr	r0, [pc, #668]	; (8001240 <main+0x2f0>)
 8000fa4:	f001 fdad 	bl	8002b02 <HAL_GPIO_TogglePin>

			//if we need to compute FFT with values at both ends of array...
			if (computeFFTLastIndex < FFT_LENGTH) {
 8000fa8:	4ba6      	ldr	r3, [pc, #664]	; (8001244 <main+0x2f4>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	2b3f      	cmp	r3, #63	; 0x3f
 8000fb0:	f200 80b0 	bhi.w	8001114 <main+0x1c4>
				for (int i = computeFFTLastIndex - FFT_LENGTH
						+ FFT_BUFFER_LENGTH, j = 0; i < FFT_BUFFER_LENGTH;
 8000fb4:	4ba3      	ldr	r3, [pc, #652]	; (8001244 <main+0x2f4>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	b29b      	uxth	r3, r3
				for (int i = computeFFTLastIndex - FFT_LENGTH
 8000fba:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8000fbe:	623b      	str	r3, [r7, #32]
						+ FFT_BUFFER_LENGTH, j = 0; i < FFT_BUFFER_LENGTH;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
				for (int i = computeFFTLastIndex - FFT_LENGTH
 8000fc4:	e048      	b.n	8001058 <main+0x108>
						i++, j++) {
					//ADC value mapping
					valueBuffer[i] *= (3300.0 / 4500.0);
 8000fc6:	4aa0      	ldr	r2, [pc, #640]	; (8001248 <main+0x2f8>)
 8000fc8:	6a3b      	ldr	r3, [r7, #32]
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fac1 	bl	8000558 <__aeabi_f2d>
 8000fd6:	a394      	add	r3, pc, #592	; (adr r3, 8001228 <main+0x2d8>)
 8000fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fdc:	f7ff fb14 	bl	8000608 <__aeabi_dmul>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f7ff fde6 	bl	8000bb8 <__aeabi_d2f>
 8000fec:	4602      	mov	r2, r0
 8000fee:	4996      	ldr	r1, [pc, #600]	; (8001248 <main+0x2f8>)
 8000ff0:	6a3b      	ldr	r3, [r7, #32]
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	601a      	str	r2, [r3, #0]
					//sensor conversion
					valueBuffer[i] = valueBuffer[i] - 1680;
 8000ff8:	4a93      	ldr	r2, [pc, #588]	; (8001248 <main+0x2f8>)
 8000ffa:	6a3b      	ldr	r3, [r7, #32]
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	edd3 7a00 	vldr	s15, [r3]
 8001004:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800124c <main+0x2fc>
 8001008:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800100c:	4a8e      	ldr	r2, [pc, #568]	; (8001248 <main+0x2f8>)
 800100e:	6a3b      	ldr	r3, [r7, #32]
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	edc3 7a00 	vstr	s15, [r3]
					valueBuffer[i] = valueBuffer[i] / (4 * 12.2 * 100);
 8001018:	4a8b      	ldr	r2, [pc, #556]	; (8001248 <main+0x2f8>)
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	ed93 7a00 	vldr	s14, [r3]
 8001024:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8001250 <main+0x300>
 8001028:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102c:	4a86      	ldr	r2, [pc, #536]	; (8001248 <main+0x2f8>)
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	edc3 7a00 	vstr	s15, [r3]
					tempValueBuffer[j] = valueBuffer[i];
 8001038:	4a83      	ldr	r2, [pc, #524]	; (8001248 <main+0x2f8>)
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	4984      	ldr	r1, [pc, #528]	; (8001254 <main+0x304>)
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	440b      	add	r3, r1
 800104a:	601a      	str	r2, [r3, #0]
						i++, j++) {
 800104c:	6a3b      	ldr	r3, [r7, #32]
 800104e:	3301      	adds	r3, #1
 8001050:	623b      	str	r3, [r7, #32]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3301      	adds	r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
				for (int i = computeFFTLastIndex - FFT_LENGTH
 8001058:	6a3b      	ldr	r3, [r7, #32]
 800105a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800105e:	dbb2      	blt.n	8000fc6 <main+0x76>
				}

				for (int i = 0, j = FFT_LENGTH - computeFFTLastIndex;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
 8001064:	4b77      	ldr	r3, [pc, #476]	; (8001244 <main+0x2f4>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	b29b      	uxth	r3, r3
 800106a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	e048      	b.n	8001104 <main+0x1b4>
						i < computeFFTLastIndex; i++, j++) {
					valueBuffer[i] *= (3300.0 / 4500.0);
 8001072:	4a75      	ldr	r2, [pc, #468]	; (8001248 <main+0x2f8>)
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa6b 	bl	8000558 <__aeabi_f2d>
 8001082:	a369      	add	r3, pc, #420	; (adr r3, 8001228 <main+0x2d8>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff fabe 	bl	8000608 <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fd90 	bl	8000bb8 <__aeabi_d2f>
 8001098:	4602      	mov	r2, r0
 800109a:	496b      	ldr	r1, [pc, #428]	; (8001248 <main+0x2f8>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	601a      	str	r2, [r3, #0]
					//sensor conversion
					valueBuffer[i] = valueBuffer[i] - 1680;
 80010a4:	4a68      	ldr	r2, [pc, #416]	; (8001248 <main+0x2f8>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	edd3 7a00 	vldr	s15, [r3]
 80010b0:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800124c <main+0x2fc>
 80010b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010b8:	4a63      	ldr	r2, [pc, #396]	; (8001248 <main+0x2f8>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	edc3 7a00 	vstr	s15, [r3]
					valueBuffer[i] = valueBuffer[i] / (4 * 12.2 * 100);
 80010c4:	4a60      	ldr	r2, [pc, #384]	; (8001248 <main+0x2f8>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	ed93 7a00 	vldr	s14, [r3]
 80010d0:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8001250 <main+0x300>
 80010d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d8:	4a5b      	ldr	r2, [pc, #364]	; (8001248 <main+0x2f8>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	edc3 7a00 	vstr	s15, [r3]
					tempValueBuffer[j] = valueBuffer[i];
 80010e4:	4a58      	ldr	r2, [pc, #352]	; (8001248 <main+0x2f8>)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4959      	ldr	r1, [pc, #356]	; (8001254 <main+0x304>)
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	440b      	add	r3, r1
 80010f6:	601a      	str	r2, [r3, #0]
						i < computeFFTLastIndex; i++, j++) {
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	3301      	adds	r3, #1
 80010fc:	61bb      	str	r3, [r7, #24]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3301      	adds	r3, #1
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	4b4f      	ldr	r3, [pc, #316]	; (8001244 <main+0x2f4>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	b29b      	uxth	r3, r3
 800110a:	461a      	mov	r2, r3
				for (int i = 0, j = FFT_LENGTH - computeFFTLastIndex;
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	4293      	cmp	r3, r2
 8001110:	dbaf      	blt.n	8001072 <main+0x122>
 8001112:	e073      	b.n	80011fc <main+0x2ac>

				}
			} else {
				for (int i = 0; i < FFT_LENGTH; i++) {
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	e06d      	b.n	80011f6 <main+0x2a6>
					valueBuffer[i + computeFFTLastIndex - FFT_LENGTH] *= (3300.0
 800111a:	4b4a      	ldr	r3, [pc, #296]	; (8001244 <main+0x2f4>)
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	b29c      	uxth	r4, r3
 8001120:	4622      	mov	r2, r4
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	4413      	add	r3, r2
 8001126:	3b40      	subs	r3, #64	; 0x40
 8001128:	4a47      	ldr	r2, [pc, #284]	; (8001248 <main+0x2f8>)
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fa11 	bl	8000558 <__aeabi_f2d>
 8001136:	a33c      	add	r3, pc, #240	; (adr r3, 8001228 <main+0x2d8>)
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f7ff fa64 	bl	8000608 <__aeabi_dmul>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	4622      	mov	r2, r4
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	4413      	add	r3, r2
 800114e:	f1a3 0440 	sub.w	r4, r3, #64	; 0x40
 8001152:	f7ff fd31 	bl	8000bb8 <__aeabi_d2f>
 8001156:	4602      	mov	r2, r0
 8001158:	493b      	ldr	r1, [pc, #236]	; (8001248 <main+0x2f8>)
 800115a:	00a3      	lsls	r3, r4, #2
 800115c:	440b      	add	r3, r1
 800115e:	601a      	str	r2, [r3, #0]
							/ 4500.0);
					//sensor conversion
					valueBuffer[i + computeFFTLastIndex - FFT_LENGTH] =
							valueBuffer[i + computeFFTLastIndex - FFT_LENGTH]
 8001160:	4b38      	ldr	r3, [pc, #224]	; (8001244 <main+0x2f4>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	b29b      	uxth	r3, r3
 8001166:	461a      	mov	r2, r3
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4413      	add	r3, r2
 800116c:	3b40      	subs	r3, #64	; 0x40
 800116e:	4a36      	ldr	r2, [pc, #216]	; (8001248 <main+0x2f8>)
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	edd3 7a00 	vldr	s15, [r3]
					valueBuffer[i + computeFFTLastIndex - FFT_LENGTH] =
 8001178:	4b32      	ldr	r3, [pc, #200]	; (8001244 <main+0x2f4>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	b29b      	uxth	r3, r3
 800117e:	461a      	mov	r2, r3
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4413      	add	r3, r2
 8001184:	3b40      	subs	r3, #64	; 0x40
									- 1680;
 8001186:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800124c <main+0x2fc>
 800118a:	ee77 7ac7 	vsub.f32	s15, s15, s14
					valueBuffer[i + computeFFTLastIndex - FFT_LENGTH] =
 800118e:	4a2e      	ldr	r2, [pc, #184]	; (8001248 <main+0x2f8>)
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	edc3 7a00 	vstr	s15, [r3]
					valueBuffer[i + computeFFTLastIndex - FFT_LENGTH] =
							valueBuffer[i + computeFFTLastIndex - FFT_LENGTH]
 8001198:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <main+0x2f4>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4413      	add	r3, r2
 80011a4:	3b40      	subs	r3, #64	; 0x40
 80011a6:	4a28      	ldr	r2, [pc, #160]	; (8001248 <main+0x2f8>)
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	ed93 7a00 	vldr	s14, [r3]
					valueBuffer[i + computeFFTLastIndex - FFT_LENGTH] =
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <main+0x2f4>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	461a      	mov	r2, r3
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4413      	add	r3, r2
 80011bc:	3b40      	subs	r3, #64	; 0x40
 80011be:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001250 <main+0x300>
 80011c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011c6:	4a20      	ldr	r2, [pc, #128]	; (8001248 <main+0x2f8>)
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	edc3 7a00 	vstr	s15, [r3]
									/ (4 * 12.2 * 100);

					tempValueBuffer[i] = valueBuffer[i + computeFFTLastIndex
 80011d0:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <main+0x2f4>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	461a      	mov	r2, r3
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4413      	add	r3, r2
							- FFT_LENGTH];
 80011dc:	3b40      	subs	r3, #64	; 0x40
					tempValueBuffer[i] = valueBuffer[i + computeFFTLastIndex
 80011de:	4a1a      	ldr	r2, [pc, #104]	; (8001248 <main+0x2f8>)
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	491b      	ldr	r1, [pc, #108]	; (8001254 <main+0x304>)
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	440b      	add	r3, r1
 80011ee:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < FFT_LENGTH; i++) {
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	3301      	adds	r3, #1
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	2b3f      	cmp	r3, #63	; 0x3f
 80011fa:	dd8e      	ble.n	800111a <main+0x1ca>
				}
			}
			arm_rfft_fast_f32(&fftInstance, tempValueBuffer, fftBuffer, 0);
 80011fc:	2300      	movs	r3, #0
 80011fe:	4a16      	ldr	r2, [pc, #88]	; (8001258 <main+0x308>)
 8001200:	4914      	ldr	r1, [pc, #80]	; (8001254 <main+0x304>)
 8001202:	480c      	ldr	r0, [pc, #48]	; (8001234 <main+0x2e4>)
 8001204:	f002 fca2 	bl	8003b4c <arm_rfft_fast_f32>
			arm_cmplx_mag_f32(fftBuffer, magnitudes, FFT_LENGTH / 2);
 8001208:	2220      	movs	r2, #32
 800120a:	4914      	ldr	r1, [pc, #80]	; (800125c <main+0x30c>)
 800120c:	4812      	ldr	r0, [pc, #72]	; (8001258 <main+0x308>)
 800120e:	f003 fb31 	bl	8004874 <arm_cmplx_mag_f32>
			maxValue = magnitudes[0];
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <main+0x30c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
			maxValueIndex = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]

			for (int i = 1; i < FFT_LENGTH / 2 - 1; i++) {
 800121c:	2301      	movs	r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	e036      	b.n	8001290 <main+0x340>
 8001222:	bf00      	nop
 8001224:	f3af 8000 	nop.w
 8001228:	77777777 	.word	0x77777777
 800122c:	3fe77777 	.word	0x3fe77777
 8001230:	2000190c 	.word	0x2000190c
 8001234:	20001ab4 	.word	0x20001ab4
 8001238:	20001954 	.word	0x20001954
 800123c:	200014fc 	.word	0x200014fc
 8001240:	40020800 	.word	0x40020800
 8001244:	200014fe 	.word	0x200014fe
 8001248:	200001f8 	.word	0x200001f8
 800124c:	44d20000 	.word	0x44d20000
 8001250:	45988000 	.word	0x45988000
 8001254:	20001808 	.word	0x20001808
 8001258:	200011fc 	.word	0x200011fc
 800125c:	20001a30 	.word	0x20001a30
				if (magnitudes[i] > maxValue) {
 8001260:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <main+0x358>)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	edd3 7a00 	vldr	s15, [r3]
 800126c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001270:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	d507      	bpl.n	800128a <main+0x33a>
					maxValue = magnitudes[i];
 800127a:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <main+0x358>)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
					maxValueIndex = i;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	607b      	str	r3, [r7, #4]
			for (int i = 1; i < FFT_LENGTH / 2 - 1; i++) {
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	3301      	adds	r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2b1e      	cmp	r3, #30
 8001294:	dde4      	ble.n	8001260 <main+0x310>
//			sprintf(&uartBuffer[strlen(uartBuffer)], "%+011.*f\n",
//			FLOAT_PRECISION, magnitudes[FFT_LENGTH / 2 - 1]);
//			HAL_UART_Transmit(&huart1, (uint8_t*) uartBuffer,
//					strlen(uartBuffer), 1000);
//			uartBuffer[0] = 0;
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8001296:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800129a:	4804      	ldr	r0, [pc, #16]	; (80012ac <main+0x35c>)
 800129c:	f001 fc31 	bl	8002b02 <HAL_GPIO_TogglePin>
			computeFFT = 0;
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <main+0x360>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
		if (computeFFT != 0) {
 80012a6:	e675      	b.n	8000f94 <main+0x44>
 80012a8:	20001a30 	.word	0x20001a30
 80012ac:	40020800 	.word	0x40020800
 80012b0:	200014fc 	.word	0x200014fc

080012b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b094      	sub	sp, #80	; 0x50
 80012b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012ba:	f107 0320 	add.w	r3, r7, #32
 80012be:	2230      	movs	r2, #48	; 0x30
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 ff5e 	bl	8006184 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	4b29      	ldr	r3, [pc, #164]	; (8001384 <SystemClock_Config+0xd0>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	4a28      	ldr	r2, [pc, #160]	; (8001384 <SystemClock_Config+0xd0>)
 80012e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e6:	6413      	str	r3, [r2, #64]	; 0x40
 80012e8:	4b26      	ldr	r3, [pc, #152]	; (8001384 <SystemClock_Config+0xd0>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012f4:	2300      	movs	r3, #0
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	4b23      	ldr	r3, [pc, #140]	; (8001388 <SystemClock_Config+0xd4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001300:	4a21      	ldr	r2, [pc, #132]	; (8001388 <SystemClock_Config+0xd4>)
 8001302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <SystemClock_Config+0xd4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001314:	2302      	movs	r3, #2
 8001316:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001318:	2301      	movs	r3, #1
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800131c:	2310      	movs	r3, #16
 800131e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001320:	2302      	movs	r3, #2
 8001322:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001324:	2300      	movs	r3, #0
 8001326:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 10;
 8001328:	230a      	movs	r3, #10
 800132a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 800132c:	2354      	movs	r3, #84	; 0x54
 800132e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001330:	2302      	movs	r3, #2
 8001332:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001334:	2304      	movs	r3, #4
 8001336:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001338:	f107 0320 	add.w	r3, r7, #32
 800133c:	4618      	mov	r0, r3
 800133e:	f001 fbfb 	bl	8002b38 <HAL_RCC_OscConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <SystemClock_Config+0x98>
		Error_Handler();
 8001348:	f000 fa36 	bl	80017b8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800134c:	230f      	movs	r3, #15
 800134e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001350:	2302      	movs	r3, #2
 8001352:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800135e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001362:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001364:	f107 030c 	add.w	r3, r7, #12
 8001368:	2102      	movs	r1, #2
 800136a:	4618      	mov	r0, r3
 800136c:	f001 fe5c 	bl	8003028 <HAL_RCC_ClockConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <SystemClock_Config+0xc6>
		Error_Handler();
 8001376:	f000 fa1f 	bl	80017b8 <Error_Handler>
	}
}
 800137a:	bf00      	nop
 800137c:	3750      	adds	r7, #80	; 0x50
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800
 8001388:	40007000 	.word	0x40007000

0800138c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001392:	463b      	mov	r3, r7
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800139e:	4b21      	ldr	r3, [pc, #132]	; (8001424 <MX_ADC1_Init+0x98>)
 80013a0:	4a21      	ldr	r2, [pc, #132]	; (8001428 <MX_ADC1_Init+0x9c>)
 80013a2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <MX_ADC1_Init+0x98>)
 80013a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013aa:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <MX_ADC1_Init+0x98>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <MX_ADC1_Init+0x98>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <MX_ADC1_Init+0x98>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <MX_ADC1_Init+0x98>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <MX_ADC1_Init+0x98>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013cc:	4b15      	ldr	r3, [pc, #84]	; (8001424 <MX_ADC1_Init+0x98>)
 80013ce:	4a17      	ldr	r2, [pc, #92]	; (800142c <MX_ADC1_Init+0xa0>)
 80013d0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <MX_ADC1_Init+0x98>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <MX_ADC1_Init+0x98>)
 80013da:	2201      	movs	r2, #1
 80013dc:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_ADC1_Init+0x98>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <MX_ADC1_Init+0x98>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80013ec:	480d      	ldr	r0, [pc, #52]	; (8001424 <MX_ADC1_Init+0x98>)
 80013ee:	f000 fc4d 	bl	8001c8c <HAL_ADC_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_ADC1_Init+0x70>
		Error_Handler();
 80013f8:	f000 f9de 	bl	80017b8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80013fc:	2301      	movs	r3, #1
 80013fe:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001400:	2301      	movs	r3, #1
 8001402:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001404:	2307      	movs	r3, #7
 8001406:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001408:	463b      	mov	r3, r7
 800140a:	4619      	mov	r1, r3
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_ADC1_Init+0x98>)
 800140e:	f000 fea1 	bl	8002154 <HAL_ADC_ConfigChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_ADC1_Init+0x90>
		Error_Handler();
 8001418:	f000 f9ce 	bl	80017b8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	2000190c 	.word	0x2000190c
 8001428:	40012000 	.word	0x40012000
 800142c:	0f000001 	.word	0x0f000001

08001430 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_USART1_UART_Init+0x4c>)
 8001436:	4a12      	ldr	r2, [pc, #72]	; (8001480 <MX_USART1_UART_Init+0x50>)
 8001438:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <MX_USART1_UART_Init+0x4c>)
 800143c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001440:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_USART1_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_USART1_UART_Init+0x4c>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_USART1_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_USART1_UART_Init+0x4c>)
 8001456:	220c      	movs	r2, #12
 8001458:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_USART1_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_USART1_UART_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_USART1_UART_Init+0x4c>)
 8001468:	f001 ffae 	bl	80033c8 <HAL_UART_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001472:	f000 f9a1 	bl	80017b8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000196c 	.word	0x2000196c
 8001480:	40011000 	.word	0x40011000

08001484 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b23      	ldr	r3, [pc, #140]	; (800152c <MX_GPIO_Init+0xa8>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a22      	ldr	r2, [pc, #136]	; (800152c <MX_GPIO_Init+0xa8>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b20      	ldr	r3, [pc, #128]	; (800152c <MX_GPIO_Init+0xa8>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	4b1c      	ldr	r3, [pc, #112]	; (800152c <MX_GPIO_Init+0xa8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a1b      	ldr	r2, [pc, #108]	; (800152c <MX_GPIO_Init+0xa8>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b19      	ldr	r3, [pc, #100]	; (800152c <MX_GPIO_Init+0xa8>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2120      	movs	r1, #32
 80014d6:	4816      	ldr	r0, [pc, #88]	; (8001530 <MX_GPIO_Init+0xac>)
 80014d8:	f001 fafa 	bl	8002ad0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014e2:	4814      	ldr	r0, [pc, #80]	; (8001534 <MX_GPIO_Init+0xb0>)
 80014e4:	f001 faf4 	bl	8002ad0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014e8:	2320      	movs	r3, #32
 80014ea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	4619      	mov	r1, r3
 80014fe:	480c      	ldr	r0, [pc, #48]	; (8001530 <MX_GPIO_Init+0xac>)
 8001500:	f001 f962 	bl	80027c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001508:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	4619      	mov	r1, r3
 800151c:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_GPIO_Init+0xb0>)
 800151e:	f001 f953 	bl	80027c8 <HAL_GPIO_Init>

}
 8001522:	bf00      	nop
 8001524:	3720      	adds	r7, #32
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000
 8001534:	40020800 	.word	0x40020800

08001538 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001538:	b5b0      	push	{r4, r5, r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af02      	add	r7, sp, #8
 800153e:	6078      	str	r0, [r7, #4]
	//if receiving samples for data
	if (receivingData) {
 8001540:	4b8d      	ldr	r3, [pc, #564]	; (8001778 <HAL_ADC_ConvCpltCallback+0x240>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d034      	beq.n	80015b4 <HAL_ADC_ConvCpltCallback+0x7c>
		valueBuffer[valueBufferIndex] = HAL_ADC_GetValue(&hadc1);
 800154a:	488c      	ldr	r0, [pc, #560]	; (800177c <HAL_ADC_ConvCpltCallback+0x244>)
 800154c:	f000 fde1 	bl	8002112 <HAL_ADC_GetValue>
 8001550:	ee07 0a90 	vmov	s15, r0
 8001554:	4b8a      	ldr	r3, [pc, #552]	; (8001780 <HAL_ADC_ConvCpltCallback+0x248>)
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	b29b      	uxth	r3, r3
 800155a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800155e:	4a89      	ldr	r2, [pc, #548]	; (8001784 <HAL_ADC_ConvCpltCallback+0x24c>)
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	edc3 7a00 	vstr	s15, [r3]
		valueBufferIndex = (valueBufferIndex + 1) % FFT_BUFFER_LENGTH;
 8001568:	4b85      	ldr	r3, [pc, #532]	; (8001780 <HAL_ADC_ConvCpltCallback+0x248>)
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	b29b      	uxth	r3, r3
 800156e:	3301      	adds	r3, #1
 8001570:	425a      	negs	r2, r3
 8001572:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001576:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800157a:	bf58      	it	pl
 800157c:	4253      	negpl	r3, r2
 800157e:	b29a      	uxth	r2, r3
 8001580:	4b7f      	ldr	r3, [pc, #508]	; (8001780 <HAL_ADC_ConvCpltCallback+0x248>)
 8001582:	801a      	strh	r2, [r3, #0]
		if (computeFFT == 0) {
 8001584:	4b80      	ldr	r3, [pc, #512]	; (8001788 <HAL_ADC_ConvCpltCallback+0x250>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	f040 80e8 	bne.w	8001760 <HAL_ADC_ConvCpltCallback+0x228>
			if (valueBufferIndex % FFT_LENGTH == 0) {
 8001590:	4b7b      	ldr	r3, [pc, #492]	; (8001780 <HAL_ADC_ConvCpltCallback+0x248>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	b29b      	uxth	r3, r3
 8001596:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800159a:	b29b      	uxth	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	f040 80df 	bne.w	8001760 <HAL_ADC_ConvCpltCallback+0x228>
				computeFFTLastIndex = valueBufferIndex;
 80015a2:	4b77      	ldr	r3, [pc, #476]	; (8001780 <HAL_ADC_ConvCpltCallback+0x248>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	4b78      	ldr	r3, [pc, #480]	; (800178c <HAL_ADC_ConvCpltCallback+0x254>)
 80015aa:	801a      	strh	r2, [r3, #0]
				computeFFT = 1;
 80015ac:	4b76      	ldr	r3, [pc, #472]	; (8001788 <HAL_ADC_ConvCpltCallback+0x250>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
 80015b2:	e0d5      	b.n	8001760 <HAL_ADC_ConvCpltCallback+0x228>
			}
		}
	} else {
		//trying to receive chirp

		for (int i = 0; i < CHIRP_LENGTH - 1; i++) {
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	e00d      	b.n	80015d6 <HAL_ADC_ConvCpltCallback+0x9e>
			receivedChirpBuffer[i] = receivedChirpBuffer[i + 1];
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	3301      	adds	r3, #1
 80015be:	4a74      	ldr	r2, [pc, #464]	; (8001790 <HAL_ADC_ConvCpltCallback+0x258>)
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4972      	ldr	r1, [pc, #456]	; (8001790 <HAL_ADC_ConvCpltCallback+0x258>)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < CHIRP_LENGTH - 1; i++) {
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	3301      	adds	r3, #1
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	2b3e      	cmp	r3, #62	; 0x3e
 80015da:	ddee      	ble.n	80015ba <HAL_ADC_ConvCpltCallback+0x82>
		}
		receivedChirpBuffer[CHIRP_LENGTH - 1] = HAL_ADC_GetValue(&hadc1);
 80015dc:	4867      	ldr	r0, [pc, #412]	; (800177c <HAL_ADC_ConvCpltCallback+0x244>)
 80015de:	f000 fd98 	bl	8002112 <HAL_ADC_GetValue>
 80015e2:	ee07 0a90 	vmov	s15, r0
 80015e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ea:	4b69      	ldr	r3, [pc, #420]	; (8001790 <HAL_ADC_ConvCpltCallback+0x258>)
 80015ec:	edc3 7a3f 	vstr	s15, [r3, #252]	; 0xfc
		memcpy(receivedTempChirpBuffer, receivedChirpBuffer,
 80015f0:	4a68      	ldr	r2, [pc, #416]	; (8001794 <HAL_ADC_ConvCpltCallback+0x25c>)
 80015f2:	4b67      	ldr	r3, [pc, #412]	; (8001790 <HAL_ADC_ConvCpltCallback+0x258>)
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015fc:	461a      	mov	r2, r3
 80015fe:	f004 fdb3 	bl	8006168 <memcpy>
				sizeof(float32_t) * CHIRP_LENGTH);
		arm_rfft_fast_f32(&chirpFftInstance, receivedTempChirpBuffer,
 8001602:	2300      	movs	r3, #0
 8001604:	4a64      	ldr	r2, [pc, #400]	; (8001798 <HAL_ADC_ConvCpltCallback+0x260>)
 8001606:	4963      	ldr	r1, [pc, #396]	; (8001794 <HAL_ADC_ConvCpltCallback+0x25c>)
 8001608:	4864      	ldr	r0, [pc, #400]	; (800179c <HAL_ADC_ConvCpltCallback+0x264>)
 800160a:	f002 fa9f 	bl	8003b4c <arm_rfft_fast_f32>
				chirpFftBuffer, 0);
		arm_cmplx_mag_f32(chirpFftBuffer, chirpFftMagnitude, CHIRP_LENGTH / 2);
 800160e:	2220      	movs	r2, #32
 8001610:	4963      	ldr	r1, [pc, #396]	; (80017a0 <HAL_ADC_ConvCpltCallback+0x268>)
 8001612:	4861      	ldr	r0, [pc, #388]	; (8001798 <HAL_ADC_ConvCpltCallback+0x260>)
 8001614:	f003 f92e 	bl	8004874 <arm_cmplx_mag_f32>
		memcpy(receivedTempChirpBuffer, receivedChirpBuffer,
 8001618:	4a5e      	ldr	r2, [pc, #376]	; (8001794 <HAL_ADC_ConvCpltCallback+0x25c>)
 800161a:	4b5d      	ldr	r3, [pc, #372]	; (8001790 <HAL_ADC_ConvCpltCallback+0x258>)
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001624:	461a      	mov	r2, r3
 8001626:	f004 fd9f 	bl	8006168 <memcpy>
				sizeof(float32_t) * CHIRP_LENGTH);
		for (int i = 0; i < CHIRP_LENGTH; i++) {
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	e035      	b.n	800169c <HAL_ADC_ConvCpltCallback+0x164>
			chirpOffsetValue[i] = chirpFftMagnitude[0] / CHIRP_LENGTH;
 8001630:	4b5b      	ldr	r3, [pc, #364]	; (80017a0 <HAL_ADC_ConvCpltCallback+0x268>)
 8001632:	ed93 7a00 	vldr	s14, [r3]
 8001636:	eddf 6a5b 	vldr	s13, [pc, #364]	; 80017a4 <HAL_ADC_ConvCpltCallback+0x26c>
 800163a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163e:	4a5a      	ldr	r2, [pc, #360]	; (80017a8 <HAL_ADC_ConvCpltCallback+0x270>)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	edc3 7a00 	vstr	s15, [r3]
			receivedChirpNorm += pow(receivedTempChirpBuffer[i], 2);
 800164a:	4a52      	ldr	r2, [pc, #328]	; (8001794 <HAL_ADC_ConvCpltCallback+0x25c>)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff7f 	bl	8000558 <__aeabi_f2d>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	ed9f 1b44 	vldr	d1, [pc, #272]	; 8001770 <HAL_ADC_ConvCpltCallback+0x238>
 8001662:	ec43 2b10 	vmov	d0, r2, r3
 8001666:	f003 fd43 	bl	80050f0 <pow>
 800166a:	ec55 4b10 	vmov	r4, r5, d0
 800166e:	4b4f      	ldr	r3, [pc, #316]	; (80017ac <HAL_ADC_ConvCpltCallback+0x274>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ff70 	bl	8000558 <__aeabi_f2d>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4620      	mov	r0, r4
 800167e:	4629      	mov	r1, r5
 8001680:	f7fe fe0c 	bl	800029c <__adddf3>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4610      	mov	r0, r2
 800168a:	4619      	mov	r1, r3
 800168c:	f7ff fa94 	bl	8000bb8 <__aeabi_d2f>
 8001690:	4603      	mov	r3, r0
 8001692:	4a46      	ldr	r2, [pc, #280]	; (80017ac <HAL_ADC_ConvCpltCallback+0x274>)
 8001694:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < CHIRP_LENGTH; i++) {
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	3301      	adds	r3, #1
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	2b3f      	cmp	r3, #63	; 0x3f
 80016a0:	ddc6      	ble.n	8001630 <HAL_ADC_ConvCpltCallback+0xf8>
		}
		//remove offset

		arm_sub_f32(receivedTempChirpBuffer, chirpOffsetValue,
 80016a2:	2340      	movs	r3, #64	; 0x40
 80016a4:	4a3b      	ldr	r2, [pc, #236]	; (8001794 <HAL_ADC_ConvCpltCallback+0x25c>)
 80016a6:	4940      	ldr	r1, [pc, #256]	; (80017a8 <HAL_ADC_ConvCpltCallback+0x270>)
 80016a8:	483a      	ldr	r0, [pc, #232]	; (8001794 <HAL_ADC_ConvCpltCallback+0x25c>)
 80016aa:	f003 fa07 	bl	8004abc <arm_sub_f32>
				receivedTempChirpBuffer, CHIRP_LENGTH);
		//normalize and correlate
		receivedChirpNorm = 0.0;
 80016ae:	4b3f      	ldr	r3, [pc, #252]	; (80017ac <HAL_ADC_ConvCpltCallback+0x274>)
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < CHIRP_LENGTH; i++) {
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	e018      	b.n	80016ee <HAL_ADC_ConvCpltCallback+0x1b6>
			receivedChirpNorm = receivedChirpNorm + receivedTempChirpBuffer[i]*receivedTempChirpBuffer[i];
 80016bc:	4a35      	ldr	r2, [pc, #212]	; (8001794 <HAL_ADC_ConvCpltCallback+0x25c>)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	ed93 7a00 	vldr	s14, [r3]
 80016c8:	4a32      	ldr	r2, [pc, #200]	; (8001794 <HAL_ADC_ConvCpltCallback+0x25c>)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	edd3 7a00 	vldr	s15, [r3]
 80016d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016d8:	4b34      	ldr	r3, [pc, #208]	; (80017ac <HAL_ADC_ConvCpltCallback+0x274>)
 80016da:	edd3 7a00 	vldr	s15, [r3]
 80016de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e2:	4b32      	ldr	r3, [pc, #200]	; (80017ac <HAL_ADC_ConvCpltCallback+0x274>)
 80016e4:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < CHIRP_LENGTH; i++) {
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	3301      	adds	r3, #1
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2b3f      	cmp	r3, #63	; 0x3f
 80016f2:	dde3      	ble.n	80016bc <HAL_ADC_ConvCpltCallback+0x184>
		}
		receivedChirpNorm = sqrt(receivedChirpNorm);
 80016f4:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <HAL_ADC_ConvCpltCallback+0x274>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff2d 	bl	8000558 <__aeabi_f2d>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	ec43 2b10 	vmov	d0, r2, r3
 8001706:	f003 fda1 	bl	800524c <sqrt>
 800170a:	ec53 2b10 	vmov	r2, r3, d0
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f7ff fa51 	bl	8000bb8 <__aeabi_d2f>
 8001716:	4603      	mov	r3, r0
 8001718:	4a24      	ldr	r2, [pc, #144]	; (80017ac <HAL_ADC_ConvCpltCallback+0x274>)
 800171a:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < CHIRP_LENGTH; i++) {
 800171c:	2300      	movs	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	e013      	b.n	800174a <HAL_ADC_ConvCpltCallback+0x212>
			receivedTempChirpBuffer[i] = receivedTempChirpBuffer[i]/receivedChirpNorm;
 8001722:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <HAL_ADC_ConvCpltCallback+0x25c>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	edd3 6a00 	vldr	s13, [r3]
 800172e:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <HAL_ADC_ConvCpltCallback+0x274>)
 8001730:	ed93 7a00 	vldr	s14, [r3]
 8001734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001738:	4a16      	ldr	r2, [pc, #88]	; (8001794 <HAL_ADC_ConvCpltCallback+0x25c>)
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < CHIRP_LENGTH; i++) {
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	3301      	adds	r3, #1
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	2b3f      	cmp	r3, #63	; 0x3f
 800174e:	dde8      	ble.n	8001722 <HAL_ADC_ConvCpltCallback+0x1ea>
		}
		arm_correlate_f32(receivedTempChirpBuffer, CHIRP_LENGTH, chirpBuffer,
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <HAL_ADC_ConvCpltCallback+0x278>)
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	2340      	movs	r3, #64	; 0x40
 8001756:	4a17      	ldr	r2, [pc, #92]	; (80017b4 <HAL_ADC_ConvCpltCallback+0x27c>)
 8001758:	2140      	movs	r1, #64	; 0x40
 800175a:	480e      	ldr	r0, [pc, #56]	; (8001794 <HAL_ADC_ConvCpltCallback+0x25c>)
 800175c:	f002 fdd4 	bl	8004308 <arm_correlate_f32>
		CHIRP_LENGTH, chirpCorrelation);

	}
	/*If continuousconversion mode is DISABLED uncomment below*/
	HAL_ADC_Start_IT(&hadc1);
 8001760:	4806      	ldr	r0, [pc, #24]	; (800177c <HAL_ADC_ConvCpltCallback+0x244>)
 8001762:	f000 fad7 	bl	8001d14 <HAL_ADC_Start_IT>
}
 8001766:	bf00      	nop
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bdb0      	pop	{r4, r5, r7, pc}
 800176e:	bf00      	nop
 8001770:	00000000 	.word	0x00000000
 8001774:	40000000 	.word	0x40000000
 8001778:	200014fd 	.word	0x200014fd
 800177c:	2000190c 	.word	0x2000190c
 8001780:	200011f8 	.word	0x200011f8
 8001784:	200001f8 	.word	0x200001f8
 8001788:	200014fc 	.word	0x200014fc
 800178c:	200014fe 	.word	0x200014fe
 8001790:	200012fc 	.word	0x200012fc
 8001794:	200013fc 	.word	0x200013fc
 8001798:	20001acc 	.word	0x20001acc
 800179c:	20001954 	.word	0x20001954
 80017a0:	200019b0 	.word	0x200019b0
 80017a4:	42800000 	.word	0x42800000
 80017a8:	20001708 	.word	0x20001708
 80017ac:	20001908 	.word	0x20001908
 80017b0:	2000150c 	.word	0x2000150c
 80017b4:	08008b30 	.word	0x08008b30

080017b8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017bc:	b672      	cpsid	i
}
 80017be:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017c0:	e7fe      	b.n	80017c0 <Error_Handler+0x8>
	...

080017c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <HAL_MspInit+0x4c>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	4a0f      	ldr	r2, [pc, #60]	; (8001810 <HAL_MspInit+0x4c>)
 80017d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d8:	6453      	str	r3, [r2, #68]	; 0x44
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <HAL_MspInit+0x4c>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	603b      	str	r3, [r7, #0]
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_MspInit+0x4c>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	4a08      	ldr	r2, [pc, #32]	; (8001810 <HAL_MspInit+0x4c>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f4:	6413      	str	r3, [r2, #64]	; 0x40
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_MspInit+0x4c>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40023800 	.word	0x40023800

08001814 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a1b      	ldr	r2, [pc, #108]	; (80018a0 <HAL_ADC_MspInit+0x8c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d12f      	bne.n	8001896 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <HAL_ADC_MspInit+0x90>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	4a19      	ldr	r2, [pc, #100]	; (80018a4 <HAL_ADC_MspInit+0x90>)
 8001840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001844:	6453      	str	r3, [r2, #68]	; 0x44
 8001846:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <HAL_ADC_MspInit+0x90>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <HAL_ADC_MspInit+0x90>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <HAL_ADC_MspInit+0x90>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <HAL_ADC_MspInit+0x90>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800186e:	2302      	movs	r3, #2
 8001870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001872:	2303      	movs	r3, #3
 8001874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	4809      	ldr	r0, [pc, #36]	; (80018a8 <HAL_ADC_MspInit+0x94>)
 8001882:	f000 ffa1 	bl	80027c8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2101      	movs	r1, #1
 800188a:	2012      	movs	r0, #18
 800188c:	f000 ff65 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001890:	2012      	movs	r0, #18
 8001892:	f000 ff7e 	bl	8002792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001896:	bf00      	nop
 8001898:	3728      	adds	r7, #40	; 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40012000 	.word	0x40012000
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020000 	.word	0x40020000

080018ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a19      	ldr	r2, [pc, #100]	; (8001930 <HAL_UART_MspInit+0x84>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d12c      	bne.n	8001928 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	4b18      	ldr	r3, [pc, #96]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	4a17      	ldr	r2, [pc, #92]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018d8:	f043 0310 	orr.w	r3, r3, #16
 80018dc:	6453      	str	r3, [r2, #68]	; 0x44
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f003 0310 	and.w	r3, r3, #16
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a10      	ldr	r2, [pc, #64]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <HAL_UART_MspInit+0x88>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001906:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800190a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001914:	2303      	movs	r3, #3
 8001916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001918:	2307      	movs	r3, #7
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4619      	mov	r1, r3
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <HAL_UART_MspInit+0x8c>)
 8001924:	f000 ff50 	bl	80027c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001928:	bf00      	nop
 800192a:	3728      	adds	r7, #40	; 0x28
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40011000 	.word	0x40011000
 8001934:	40023800 	.word	0x40023800
 8001938:	40020000 	.word	0x40020000

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <NMI_Handler+0x4>

08001942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <HardFault_Handler+0x4>

08001948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <MemManage_Handler+0x4>

0800194e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <BusFault_Handler+0x4>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <UsageFault_Handler+0x4>

0800195a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001988:	f000 f960 	bl	8001c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}

08001990 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <ADC_IRQHandler+0x10>)
 8001996:	f000 fa7b 	bl	8001e90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	2000190c 	.word	0x2000190c

080019a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
	return 1;
 80019a8:	2301      	movs	r3, #1
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_kill>:

int _kill(int pid, int sig)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019be:	f004 fba9 	bl	8006114 <__errno>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2216      	movs	r2, #22
 80019c6:	601a      	str	r2, [r3, #0]
	return -1;
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_exit>:

void _exit (int status)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ffe7 	bl	80019b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019e6:	e7fe      	b.n	80019e6 <_exit+0x12>

080019e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	e00a      	b.n	8001a10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019fa:	f3af 8000 	nop.w
 80019fe:	4601      	mov	r1, r0
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	60ba      	str	r2, [r7, #8]
 8001a06:	b2ca      	uxtb	r2, r1
 8001a08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	dbf0      	blt.n	80019fa <_read+0x12>
	}

return len;
 8001a18:	687b      	ldr	r3, [r7, #4]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e009      	b.n	8001a48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	60ba      	str	r2, [r7, #8]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3301      	adds	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	dbf1      	blt.n	8001a34 <_write+0x12>
	}
	return len;
 8001a50:	687b      	ldr	r3, [r7, #4]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <_close>:

int _close(int file)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
	return -1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a82:	605a      	str	r2, [r3, #4]
	return 0;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <_isatty>:

int _isatty(int file)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
	return 1;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001acc:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <_sbrk+0x5c>)
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <_sbrk+0x60>)
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad8:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <_sbrk+0x64>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <_sbrk+0x68>)
 8001ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d207      	bcs.n	8001b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af4:	f004 fb0e 	bl	8006114 <__errno>
 8001af8:	4603      	mov	r3, r0
 8001afa:	220c      	movs	r2, #12
 8001afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b02:	e009      	b.n	8001b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <_sbrk+0x64>)
 8001b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b16:	68fb      	ldr	r3, [r7, #12]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20018000 	.word	0x20018000
 8001b24:	00000400 	.word	0x00000400
 8001b28:	20001500 	.word	0x20001500
 8001b2c:	20001be0 	.word	0x20001be0

08001b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <SystemInit+0x20>)
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3a:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <SystemInit+0x20>)
 8001b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b58:	480d      	ldr	r0, [pc, #52]	; (8001b90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b5a:	490e      	ldr	r1, [pc, #56]	; (8001b94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b5c:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b70:	4c0b      	ldr	r4, [pc, #44]	; (8001ba0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b7e:	f7ff ffd7 	bl	8001b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b82:	f004 facd 	bl	8006120 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b86:	f7ff f9e3 	bl	8000f50 <main>
  bx  lr    
 8001b8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b94:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b98:	0801c064 	.word	0x0801c064
  ldr r2, =_sbss
 8001b9c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ba0:	20001be0 	.word	0x20001be0

08001ba4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <DMA1_Stream0_IRQHandler>
	...

08001ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_Init+0x40>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <HAL_Init+0x40>)
 8001bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_Init+0x40>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <HAL_Init+0x40>)
 8001bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <HAL_Init+0x40>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a07      	ldr	r2, [pc, #28]	; (8001be8 <HAL_Init+0x40>)
 8001bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd0:	2003      	movs	r0, #3
 8001bd2:	f000 fdb7 	bl	8002744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f000 f808 	bl	8001bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bdc:	f7ff fdf2 	bl	80017c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023c00 	.word	0x40023c00

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_InitTick+0x54>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_InitTick+0x58>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 fdcf 	bl	80027ae <HAL_SYSTICK_Config>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00e      	b.n	8001c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b0f      	cmp	r3, #15
 8001c1e:	d80a      	bhi.n	8001c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c20:	2200      	movs	r2, #0
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c28:	f000 fd97 	bl	800275a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c2c:	4a06      	ldr	r2, [pc, #24]	; (8001c48 <HAL_InitTick+0x5c>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e000      	b.n	8001c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000000 	.word	0x20000000
 8001c44:	20000008 	.word	0x20000008
 8001c48:	20000004 	.word	0x20000004

08001c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_IncTick+0x20>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_IncTick+0x24>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <HAL_IncTick+0x24>)
 8001c5e:	6013      	str	r3, [r2, #0]
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000008 	.word	0x20000008
 8001c70:	20001bcc 	.word	0x20001bcc

08001c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return uwTick;
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <HAL_GetTick+0x14>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20001bcc 	.word	0x20001bcc

08001c8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e033      	b.n	8001d0a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d109      	bne.n	8001cbe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff fdb2 	bl	8001814 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d118      	bne.n	8001cfc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cd2:	f023 0302 	bic.w	r3, r3, #2
 8001cd6:	f043 0202 	orr.w	r2, r3, #2
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 fb5a 	bl	8002398 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f023 0303 	bic.w	r3, r3, #3
 8001cf2:	f043 0201 	orr.w	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40
 8001cfa:	e001      	b.n	8001d00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_Start_IT+0x1a>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e0a1      	b.n	8001e72 <HAL_ADC_Start_IT+0x15e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d018      	beq.n	8001d76 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d54:	4b4a      	ldr	r3, [pc, #296]	; (8001e80 <HAL_ADC_Start_IT+0x16c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a4a      	ldr	r2, [pc, #296]	; (8001e84 <HAL_ADC_Start_IT+0x170>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	0c9a      	lsrs	r2, r3, #18
 8001d60:	4613      	mov	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d68:	e002      	b.n	8001d70 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f9      	bne.n	8001d6a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d169      	bne.n	8001e58 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d007      	beq.n	8001db6 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dc2:	d106      	bne.n	8001dd2 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc8:	f023 0206 	bic.w	r2, r3, #6
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	645a      	str	r2, [r3, #68]	; 0x44
 8001dd0:	e002      	b.n	8001dd8 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001de0:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <HAL_ADC_Start_IT+0x174>)
 8001de2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001dec:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001dfc:	f043 0320 	orr.w	r3, r3, #32
 8001e00:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 031f 	and.w	r3, r3, #31
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10f      	bne.n	8001e2e <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d129      	bne.n	8001e70 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	e020      	b.n	8001e70 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a16      	ldr	r2, [pc, #88]	; (8001e8c <HAL_ADC_Start_IT+0x178>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d11b      	bne.n	8001e70 <HAL_ADC_Start_IT+0x15c>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d114      	bne.n	8001e70 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e54:	609a      	str	r2, [r3, #8]
 8001e56:	e00b      	b.n	8001e70 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	f043 0210 	orr.w	r2, r3, #16
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e68:	f043 0201 	orr.w	r2, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000000 	.word	0x20000000
 8001e84:	431bde83 	.word	0x431bde83
 8001e88:	40012300 	.word	0x40012300
 8001e8c:	40012000 	.word	0x40012000

08001e90 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	bf0c      	ite	eq
 8001eae:	2301      	moveq	r3, #1
 8001eb0:	2300      	movne	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0320 	and.w	r3, r3, #32
 8001ec0:	2b20      	cmp	r3, #32
 8001ec2:	bf0c      	ite	eq
 8001ec4:	2301      	moveq	r3, #1
 8001ec6:	2300      	movne	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d049      	beq.n	8001f66 <HAL_ADC_IRQHandler+0xd6>
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d046      	beq.n	8001f66 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	f003 0310 	and.w	r3, r3, #16
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d105      	bne.n	8001ef0 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d12b      	bne.n	8001f56 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d127      	bne.n	8001f56 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d006      	beq.n	8001f22 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d119      	bne.n	8001f56 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0220 	bic.w	r2, r2, #32
 8001f30:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d105      	bne.n	8001f56 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f043 0201 	orr.w	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff faee 	bl	8001538 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0212 	mvn.w	r2, #18
 8001f64:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	bf0c      	ite	eq
 8001f74:	2301      	moveq	r3, #1
 8001f76:	2300      	movne	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f86:	2b80      	cmp	r3, #128	; 0x80
 8001f88:	bf0c      	ite	eq
 8001f8a:	2301      	moveq	r3, #1
 8001f8c:	2300      	movne	r3, #0
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d057      	beq.n	8002048 <HAL_ADC_IRQHandler+0x1b8>
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d054      	beq.n	8002048 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f003 0310 	and.w	r3, r3, #16
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d105      	bne.n	8001fb6 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d139      	bne.n	8002038 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d006      	beq.n	8001fe0 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d12b      	bne.n	8002038 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d124      	bne.n	8002038 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d11d      	bne.n	8002038 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002000:	2b00      	cmp	r3, #0
 8002002:	d119      	bne.n	8002038 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002012:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d105      	bne.n	8002038 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	f043 0201 	orr.w	r2, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 faa9 	bl	8002590 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f06f 020c 	mvn.w	r2, #12
 8002046:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b01      	cmp	r3, #1
 8002054:	bf0c      	ite	eq
 8002056:	2301      	moveq	r3, #1
 8002058:	2300      	movne	r3, #0
 800205a:	b2db      	uxtb	r3, r3
 800205c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002068:	2b40      	cmp	r3, #64	; 0x40
 800206a:	bf0c      	ite	eq
 800206c:	2301      	moveq	r3, #1
 800206e:	2300      	movne	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d017      	beq.n	80020aa <HAL_ADC_IRQHandler+0x21a>
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d014      	beq.n	80020aa <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b01      	cmp	r3, #1
 800208c:	d10d      	bne.n	80020aa <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f846 	bl	800212c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0201 	mvn.w	r2, #1
 80020a8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0320 	and.w	r3, r3, #32
 80020b4:	2b20      	cmp	r3, #32
 80020b6:	bf0c      	ite	eq
 80020b8:	2301      	moveq	r3, #1
 80020ba:	2300      	movne	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020ce:	bf0c      	ite	eq
 80020d0:	2301      	moveq	r3, #1
 80020d2:	2300      	movne	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d015      	beq.n	800210a <HAL_ADC_IRQHandler+0x27a>
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d012      	beq.n	800210a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e8:	f043 0202 	orr.w	r2, r3, #2
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0220 	mvn.w	r2, #32
 80020f8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f820 	bl	8002140 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0220 	mvn.w	r2, #32
 8002108:	601a      	str	r2, [r3, #0]
  }
}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x1c>
 800216c:	2302      	movs	r3, #2
 800216e:	e105      	b.n	800237c <HAL_ADC_ConfigChannel+0x228>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b09      	cmp	r3, #9
 800217e:	d925      	bls.n	80021cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68d9      	ldr	r1, [r3, #12]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	b29b      	uxth	r3, r3
 800218c:	461a      	mov	r2, r3
 800218e:	4613      	mov	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	4413      	add	r3, r2
 8002194:	3b1e      	subs	r3, #30
 8002196:	2207      	movs	r2, #7
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43da      	mvns	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	400a      	ands	r2, r1
 80021a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68d9      	ldr	r1, [r3, #12]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	4618      	mov	r0, r3
 80021b8:	4603      	mov	r3, r0
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4403      	add	r3, r0
 80021be:	3b1e      	subs	r3, #30
 80021c0:	409a      	lsls	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	e022      	b.n	8002212 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6919      	ldr	r1, [r3, #16]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	4613      	mov	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	4413      	add	r3, r2
 80021e0:	2207      	movs	r2, #7
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43da      	mvns	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	400a      	ands	r2, r1
 80021ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6919      	ldr	r1, [r3, #16]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	4618      	mov	r0, r3
 8002202:	4603      	mov	r3, r0
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4403      	add	r3, r0
 8002208:	409a      	lsls	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b06      	cmp	r3, #6
 8002218:	d824      	bhi.n	8002264 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	3b05      	subs	r3, #5
 800222c:	221f      	movs	r2, #31
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43da      	mvns	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	400a      	ands	r2, r1
 800223a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	4618      	mov	r0, r3
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	3b05      	subs	r3, #5
 8002256:	fa00 f203 	lsl.w	r2, r0, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	635a      	str	r2, [r3, #52]	; 0x34
 8002262:	e04c      	b.n	80022fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b0c      	cmp	r3, #12
 800226a:	d824      	bhi.n	80022b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	3b23      	subs	r3, #35	; 0x23
 800227e:	221f      	movs	r2, #31
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43da      	mvns	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	400a      	ands	r2, r1
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	4618      	mov	r0, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	3b23      	subs	r3, #35	; 0x23
 80022a8:	fa00 f203 	lsl.w	r2, r0, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30
 80022b4:	e023      	b.n	80022fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	3b41      	subs	r3, #65	; 0x41
 80022c8:	221f      	movs	r2, #31
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43da      	mvns	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	400a      	ands	r2, r1
 80022d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	4618      	mov	r0, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	3b41      	subs	r3, #65	; 0x41
 80022f2:	fa00 f203 	lsl.w	r2, r0, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022fe:	4b22      	ldr	r3, [pc, #136]	; (8002388 <HAL_ADC_ConfigChannel+0x234>)
 8002300:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a21      	ldr	r2, [pc, #132]	; (800238c <HAL_ADC_ConfigChannel+0x238>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d109      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x1cc>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b12      	cmp	r3, #18
 8002312:	d105      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a19      	ldr	r2, [pc, #100]	; (800238c <HAL_ADC_ConfigChannel+0x238>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d123      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x21e>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b10      	cmp	r3, #16
 8002330:	d003      	beq.n	800233a <HAL_ADC_ConfigChannel+0x1e6>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b11      	cmp	r3, #17
 8002338:	d11b      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b10      	cmp	r3, #16
 800234c:	d111      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <HAL_ADC_ConfigChannel+0x23c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a10      	ldr	r2, [pc, #64]	; (8002394 <HAL_ADC_ConfigChannel+0x240>)
 8002354:	fba2 2303 	umull	r2, r3, r2, r3
 8002358:	0c9a      	lsrs	r2, r3, #18
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002364:	e002      	b.n	800236c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	3b01      	subs	r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f9      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	40012300 	.word	0x40012300
 800238c:	40012000 	.word	0x40012000
 8002390:	20000000 	.word	0x20000000
 8002394:	431bde83 	.word	0x431bde83

08002398 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023a0:	4b79      	ldr	r3, [pc, #484]	; (8002588 <ADC_Init+0x1f0>)
 80023a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	431a      	orrs	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	021a      	lsls	r2, r3, #8
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002412:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6899      	ldr	r1, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	4a58      	ldr	r2, [pc, #352]	; (800258c <ADC_Init+0x1f4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d022      	beq.n	8002476 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800243e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6899      	ldr	r1, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002460:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6899      	ldr	r1, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	e00f      	b.n	8002496 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002484:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002494:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0202 	bic.w	r2, r2, #2
 80024a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6899      	ldr	r1, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	7e1b      	ldrb	r3, [r3, #24]
 80024b0:	005a      	lsls	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d01b      	beq.n	80024fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6859      	ldr	r1, [r3, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	3b01      	subs	r3, #1
 80024f0:	035a      	lsls	r2, r3, #13
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	e007      	b.n	800250c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800250a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800251a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	3b01      	subs	r3, #1
 8002528:	051a      	lsls	r2, r3, #20
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002540:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6899      	ldr	r1, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800254e:	025a      	lsls	r2, r3, #9
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002566:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6899      	ldr	r1, [r3, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	029a      	lsls	r2, r3, #10
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	609a      	str	r2, [r3, #8]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	40012300 	.word	0x40012300
 800258c:	0f000001 	.word	0x0f000001

08002590 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <__NVIC_SetPriorityGrouping+0x44>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c0:	4013      	ands	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025d6:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <__NVIC_SetPriorityGrouping+0x44>)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	60d3      	str	r3, [r2, #12]
}
 80025dc:	bf00      	nop
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <__NVIC_GetPriorityGrouping+0x18>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	f003 0307 	and.w	r3, r3, #7
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	2b00      	cmp	r3, #0
 8002618:	db0b      	blt.n	8002632 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	f003 021f 	and.w	r2, r3, #31
 8002620:	4907      	ldr	r1, [pc, #28]	; (8002640 <__NVIC_EnableIRQ+0x38>)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	2001      	movs	r0, #1
 800262a:	fa00 f202 	lsl.w	r2, r0, r2
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	e000e100 	.word	0xe000e100

08002644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	6039      	str	r1, [r7, #0]
 800264e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	2b00      	cmp	r3, #0
 8002656:	db0a      	blt.n	800266e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	b2da      	uxtb	r2, r3
 800265c:	490c      	ldr	r1, [pc, #48]	; (8002690 <__NVIC_SetPriority+0x4c>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	0112      	lsls	r2, r2, #4
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	440b      	add	r3, r1
 8002668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800266c:	e00a      	b.n	8002684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4908      	ldr	r1, [pc, #32]	; (8002694 <__NVIC_SetPriority+0x50>)
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	3b04      	subs	r3, #4
 800267c:	0112      	lsls	r2, r2, #4
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	440b      	add	r3, r1
 8002682:	761a      	strb	r2, [r3, #24]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000e100 	.word	0xe000e100
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002698:	b480      	push	{r7}
 800269a:	b089      	sub	sp, #36	; 0x24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f1c3 0307 	rsb	r3, r3, #7
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	bf28      	it	cs
 80026b6:	2304      	movcs	r3, #4
 80026b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3304      	adds	r3, #4
 80026be:	2b06      	cmp	r3, #6
 80026c0:	d902      	bls.n	80026c8 <NVIC_EncodePriority+0x30>
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3b03      	subs	r3, #3
 80026c6:	e000      	b.n	80026ca <NVIC_EncodePriority+0x32>
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43da      	mvns	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	401a      	ands	r2, r3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ea:	43d9      	mvns	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f0:	4313      	orrs	r3, r2
         );
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3724      	adds	r7, #36	; 0x24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3b01      	subs	r3, #1
 800270c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002710:	d301      	bcc.n	8002716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002712:	2301      	movs	r3, #1
 8002714:	e00f      	b.n	8002736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002716:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <SysTick_Config+0x40>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3b01      	subs	r3, #1
 800271c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800271e:	210f      	movs	r1, #15
 8002720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002724:	f7ff ff8e 	bl	8002644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <SysTick_Config+0x40>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800272e:	4b04      	ldr	r3, [pc, #16]	; (8002740 <SysTick_Config+0x40>)
 8002730:	2207      	movs	r2, #7
 8002732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	e000e010 	.word	0xe000e010

08002744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff ff29 	bl	80025a4 <__NVIC_SetPriorityGrouping>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800276c:	f7ff ff3e 	bl	80025ec <__NVIC_GetPriorityGrouping>
 8002770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	6978      	ldr	r0, [r7, #20]
 8002778:	f7ff ff8e 	bl	8002698 <NVIC_EncodePriority>
 800277c:	4602      	mov	r2, r0
 800277e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff5d 	bl	8002644 <__NVIC_SetPriority>
}
 800278a:	bf00      	nop
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	4603      	mov	r3, r0
 800279a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff ff31 	bl	8002608 <__NVIC_EnableIRQ>
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff ffa2 	bl	8002700 <SysTick_Config>
 80027bc:	4603      	mov	r3, r0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b089      	sub	sp, #36	; 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	e159      	b.n	8002a98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027e4:	2201      	movs	r2, #1
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	f040 8148 	bne.w	8002a92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	2b01      	cmp	r3, #1
 800280c:	d005      	beq.n	800281a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002816:	2b02      	cmp	r3, #2
 8002818:	d130      	bne.n	800287c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	2203      	movs	r2, #3
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002850:	2201      	movs	r2, #1
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	f003 0201 	and.w	r2, r3, #1
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b03      	cmp	r3, #3
 8002886:	d017      	beq.n	80028b8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d123      	bne.n	800290c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	08da      	lsrs	r2, r3, #3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3208      	adds	r2, #8
 80028cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	220f      	movs	r2, #15
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	08da      	lsrs	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3208      	adds	r2, #8
 8002906:	69b9      	ldr	r1, [r7, #24]
 8002908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0203 	and.w	r2, r3, #3
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80a2 	beq.w	8002a92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b57      	ldr	r3, [pc, #348]	; (8002ab0 <HAL_GPIO_Init+0x2e8>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	4a56      	ldr	r2, [pc, #344]	; (8002ab0 <HAL_GPIO_Init+0x2e8>)
 8002958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800295c:	6453      	str	r3, [r2, #68]	; 0x44
 800295e:	4b54      	ldr	r3, [pc, #336]	; (8002ab0 <HAL_GPIO_Init+0x2e8>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800296a:	4a52      	ldr	r2, [pc, #328]	; (8002ab4 <HAL_GPIO_Init+0x2ec>)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	3302      	adds	r3, #2
 8002972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	220f      	movs	r2, #15
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a49      	ldr	r2, [pc, #292]	; (8002ab8 <HAL_GPIO_Init+0x2f0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d019      	beq.n	80029ca <HAL_GPIO_Init+0x202>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a48      	ldr	r2, [pc, #288]	; (8002abc <HAL_GPIO_Init+0x2f4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d013      	beq.n	80029c6 <HAL_GPIO_Init+0x1fe>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a47      	ldr	r2, [pc, #284]	; (8002ac0 <HAL_GPIO_Init+0x2f8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00d      	beq.n	80029c2 <HAL_GPIO_Init+0x1fa>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a46      	ldr	r2, [pc, #280]	; (8002ac4 <HAL_GPIO_Init+0x2fc>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d007      	beq.n	80029be <HAL_GPIO_Init+0x1f6>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a45      	ldr	r2, [pc, #276]	; (8002ac8 <HAL_GPIO_Init+0x300>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d101      	bne.n	80029ba <HAL_GPIO_Init+0x1f2>
 80029b6:	2304      	movs	r3, #4
 80029b8:	e008      	b.n	80029cc <HAL_GPIO_Init+0x204>
 80029ba:	2307      	movs	r3, #7
 80029bc:	e006      	b.n	80029cc <HAL_GPIO_Init+0x204>
 80029be:	2303      	movs	r3, #3
 80029c0:	e004      	b.n	80029cc <HAL_GPIO_Init+0x204>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e002      	b.n	80029cc <HAL_GPIO_Init+0x204>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_GPIO_Init+0x204>
 80029ca:	2300      	movs	r3, #0
 80029cc:	69fa      	ldr	r2, [r7, #28]
 80029ce:	f002 0203 	and.w	r2, r2, #3
 80029d2:	0092      	lsls	r2, r2, #2
 80029d4:	4093      	lsls	r3, r2
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029dc:	4935      	ldr	r1, [pc, #212]	; (8002ab4 <HAL_GPIO_Init+0x2ec>)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	089b      	lsrs	r3, r3, #2
 80029e2:	3302      	adds	r3, #2
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029ea:	4b38      	ldr	r3, [pc, #224]	; (8002acc <HAL_GPIO_Init+0x304>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a0e:	4a2f      	ldr	r2, [pc, #188]	; (8002acc <HAL_GPIO_Init+0x304>)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a14:	4b2d      	ldr	r3, [pc, #180]	; (8002acc <HAL_GPIO_Init+0x304>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a38:	4a24      	ldr	r2, [pc, #144]	; (8002acc <HAL_GPIO_Init+0x304>)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a3e:	4b23      	ldr	r3, [pc, #140]	; (8002acc <HAL_GPIO_Init+0x304>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a62:	4a1a      	ldr	r2, [pc, #104]	; (8002acc <HAL_GPIO_Init+0x304>)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a68:	4b18      	ldr	r3, [pc, #96]	; (8002acc <HAL_GPIO_Init+0x304>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a8c:	4a0f      	ldr	r2, [pc, #60]	; (8002acc <HAL_GPIO_Init+0x304>)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	3301      	adds	r3, #1
 8002a96:	61fb      	str	r3, [r7, #28]
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	2b0f      	cmp	r3, #15
 8002a9c:	f67f aea2 	bls.w	80027e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
 8002aa4:	3724      	adds	r7, #36	; 0x24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40013800 	.word	0x40013800
 8002ab8:	40020000 	.word	0x40020000
 8002abc:	40020400 	.word	0x40020400
 8002ac0:	40020800 	.word	0x40020800
 8002ac4:	40020c00 	.word	0x40020c00
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40013c00 	.word	0x40013c00

08002ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	807b      	strh	r3, [r7, #2]
 8002adc:	4613      	mov	r3, r2
 8002ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae0:	787b      	ldrb	r3, [r7, #1]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ae6:	887a      	ldrh	r2, [r7, #2]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002aec:	e003      	b.n	8002af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aee:	887b      	ldrh	r3, [r7, #2]
 8002af0:	041a      	lsls	r2, r3, #16
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	619a      	str	r2, [r3, #24]
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b085      	sub	sp, #20
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b14:	887a      	ldrh	r2, [r7, #2]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	041a      	lsls	r2, r3, #16
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	43d9      	mvns	r1, r3
 8002b20:	887b      	ldrh	r3, [r7, #2]
 8002b22:	400b      	ands	r3, r1
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	619a      	str	r2, [r3, #24]
}
 8002b2a:	bf00      	nop
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e264      	b.n	8003014 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d075      	beq.n	8002c42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b56:	4ba3      	ldr	r3, [pc, #652]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d00c      	beq.n	8002b7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b62:	4ba0      	ldr	r3, [pc, #640]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d112      	bne.n	8002b94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b6e:	4b9d      	ldr	r3, [pc, #628]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b7a:	d10b      	bne.n	8002b94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7c:	4b99      	ldr	r3, [pc, #612]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d05b      	beq.n	8002c40 <HAL_RCC_OscConfig+0x108>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d157      	bne.n	8002c40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e23f      	b.n	8003014 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b9c:	d106      	bne.n	8002bac <HAL_RCC_OscConfig+0x74>
 8002b9e:	4b91      	ldr	r3, [pc, #580]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a90      	ldr	r2, [pc, #576]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	e01d      	b.n	8002be8 <HAL_RCC_OscConfig+0xb0>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x98>
 8002bb6:	4b8b      	ldr	r3, [pc, #556]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a8a      	ldr	r2, [pc, #552]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	4b88      	ldr	r3, [pc, #544]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a87      	ldr	r2, [pc, #540]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e00b      	b.n	8002be8 <HAL_RCC_OscConfig+0xb0>
 8002bd0:	4b84      	ldr	r3, [pc, #528]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a83      	ldr	r2, [pc, #524]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	4b81      	ldr	r3, [pc, #516]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a80      	ldr	r2, [pc, #512]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d013      	beq.n	8002c18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7ff f840 	bl	8001c74 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf8:	f7ff f83c 	bl	8001c74 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	; 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e204      	b.n	8003014 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	4b76      	ldr	r3, [pc, #472]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0xc0>
 8002c16:	e014      	b.n	8002c42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7ff f82c 	bl	8001c74 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c20:	f7ff f828 	bl	8001c74 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e1f0      	b.n	8003014 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c32:	4b6c      	ldr	r3, [pc, #432]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0xe8>
 8002c3e:	e000      	b.n	8002c42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d063      	beq.n	8002d16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c4e:	4b65      	ldr	r3, [pc, #404]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00b      	beq.n	8002c72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5a:	4b62      	ldr	r3, [pc, #392]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d11c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c66:	4b5f      	ldr	r3, [pc, #380]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d116      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c72:	4b5c      	ldr	r3, [pc, #368]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <HAL_RCC_OscConfig+0x152>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d001      	beq.n	8002c8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e1c4      	b.n	8003014 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8a:	4b56      	ldr	r3, [pc, #344]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4952      	ldr	r1, [pc, #328]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9e:	e03a      	b.n	8002d16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d020      	beq.n	8002cea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca8:	4b4f      	ldr	r3, [pc, #316]	; (8002de8 <HAL_RCC_OscConfig+0x2b0>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cae:	f7fe ffe1 	bl	8001c74 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb6:	f7fe ffdd 	bl	8001c74 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e1a5      	b.n	8003014 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc8:	4b46      	ldr	r3, [pc, #280]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd4:	4b43      	ldr	r3, [pc, #268]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4940      	ldr	r1, [pc, #256]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	600b      	str	r3, [r1, #0]
 8002ce8:	e015      	b.n	8002d16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cea:	4b3f      	ldr	r3, [pc, #252]	; (8002de8 <HAL_RCC_OscConfig+0x2b0>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7fe ffc0 	bl	8001c74 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf8:	f7fe ffbc 	bl	8001c74 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e184      	b.n	8003014 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0a:	4b36      	ldr	r3, [pc, #216]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d030      	beq.n	8002d84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d016      	beq.n	8002d58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d2a:	4b30      	ldr	r3, [pc, #192]	; (8002dec <HAL_RCC_OscConfig+0x2b4>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d30:	f7fe ffa0 	bl	8001c74 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d38:	f7fe ff9c 	bl	8001c74 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e164      	b.n	8003014 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4a:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0x200>
 8002d56:	e015      	b.n	8002d84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d58:	4b24      	ldr	r3, [pc, #144]	; (8002dec <HAL_RCC_OscConfig+0x2b4>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5e:	f7fe ff89 	bl	8001c74 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d66:	f7fe ff85 	bl	8001c74 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e14d      	b.n	8003014 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d78:	4b1a      	ldr	r3, [pc, #104]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1f0      	bne.n	8002d66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80a0 	beq.w	8002ed2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d92:	2300      	movs	r3, #0
 8002d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d96:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10f      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	4a0e      	ldr	r2, [pc, #56]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db0:	6413      	str	r3, [r2, #64]	; 0x40
 8002db2:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <HAL_RCC_OscConfig+0x2ac>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dba:	60bb      	str	r3, [r7, #8]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_RCC_OscConfig+0x2b8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d121      	bne.n	8002e12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dce:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <HAL_RCC_OscConfig+0x2b8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a07      	ldr	r2, [pc, #28]	; (8002df0 <HAL_RCC_OscConfig+0x2b8>)
 8002dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dda:	f7fe ff4b 	bl	8001c74 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de0:	e011      	b.n	8002e06 <HAL_RCC_OscConfig+0x2ce>
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800
 8002de8:	42470000 	.word	0x42470000
 8002dec:	42470e80 	.word	0x42470e80
 8002df0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df4:	f7fe ff3e 	bl	8001c74 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e106      	b.n	8003014 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e06:	4b85      	ldr	r3, [pc, #532]	; (800301c <HAL_RCC_OscConfig+0x4e4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d106      	bne.n	8002e28 <HAL_RCC_OscConfig+0x2f0>
 8002e1a:	4b81      	ldr	r3, [pc, #516]	; (8003020 <HAL_RCC_OscConfig+0x4e8>)
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1e:	4a80      	ldr	r2, [pc, #512]	; (8003020 <HAL_RCC_OscConfig+0x4e8>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	6713      	str	r3, [r2, #112]	; 0x70
 8002e26:	e01c      	b.n	8002e62 <HAL_RCC_OscConfig+0x32a>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	d10c      	bne.n	8002e4a <HAL_RCC_OscConfig+0x312>
 8002e30:	4b7b      	ldr	r3, [pc, #492]	; (8003020 <HAL_RCC_OscConfig+0x4e8>)
 8002e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e34:	4a7a      	ldr	r2, [pc, #488]	; (8003020 <HAL_RCC_OscConfig+0x4e8>)
 8002e36:	f043 0304 	orr.w	r3, r3, #4
 8002e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3c:	4b78      	ldr	r3, [pc, #480]	; (8003020 <HAL_RCC_OscConfig+0x4e8>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	4a77      	ldr	r2, [pc, #476]	; (8003020 <HAL_RCC_OscConfig+0x4e8>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	6713      	str	r3, [r2, #112]	; 0x70
 8002e48:	e00b      	b.n	8002e62 <HAL_RCC_OscConfig+0x32a>
 8002e4a:	4b75      	ldr	r3, [pc, #468]	; (8003020 <HAL_RCC_OscConfig+0x4e8>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	4a74      	ldr	r2, [pc, #464]	; (8003020 <HAL_RCC_OscConfig+0x4e8>)
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	6713      	str	r3, [r2, #112]	; 0x70
 8002e56:	4b72      	ldr	r3, [pc, #456]	; (8003020 <HAL_RCC_OscConfig+0x4e8>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5a:	4a71      	ldr	r2, [pc, #452]	; (8003020 <HAL_RCC_OscConfig+0x4e8>)
 8002e5c:	f023 0304 	bic.w	r3, r3, #4
 8002e60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d015      	beq.n	8002e96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6a:	f7fe ff03 	bl	8001c74 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e70:	e00a      	b.n	8002e88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e72:	f7fe feff 	bl	8001c74 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e0c5      	b.n	8003014 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e88:	4b65      	ldr	r3, [pc, #404]	; (8003020 <HAL_RCC_OscConfig+0x4e8>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0ee      	beq.n	8002e72 <HAL_RCC_OscConfig+0x33a>
 8002e94:	e014      	b.n	8002ec0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e96:	f7fe feed 	bl	8001c74 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e9e:	f7fe fee9 	bl	8001c74 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e0af      	b.n	8003014 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb4:	4b5a      	ldr	r3, [pc, #360]	; (8003020 <HAL_RCC_OscConfig+0x4e8>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1ee      	bne.n	8002e9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d105      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec6:	4b56      	ldr	r3, [pc, #344]	; (8003020 <HAL_RCC_OscConfig+0x4e8>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	4a55      	ldr	r2, [pc, #340]	; (8003020 <HAL_RCC_OscConfig+0x4e8>)
 8002ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 809b 	beq.w	8003012 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002edc:	4b50      	ldr	r3, [pc, #320]	; (8003020 <HAL_RCC_OscConfig+0x4e8>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 030c 	and.w	r3, r3, #12
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d05c      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d141      	bne.n	8002f74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef0:	4b4c      	ldr	r3, [pc, #304]	; (8003024 <HAL_RCC_OscConfig+0x4ec>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef6:	f7fe febd 	bl	8001c74 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002efe:	f7fe feb9 	bl	8001c74 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e081      	b.n	8003014 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f10:	4b43      	ldr	r3, [pc, #268]	; (8003020 <HAL_RCC_OscConfig+0x4e8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1f0      	bne.n	8002efe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69da      	ldr	r2, [r3, #28]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	019b      	lsls	r3, r3, #6
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	085b      	lsrs	r3, r3, #1
 8002f34:	3b01      	subs	r3, #1
 8002f36:	041b      	lsls	r3, r3, #16
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	061b      	lsls	r3, r3, #24
 8002f40:	4937      	ldr	r1, [pc, #220]	; (8003020 <HAL_RCC_OscConfig+0x4e8>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f46:	4b37      	ldr	r3, [pc, #220]	; (8003024 <HAL_RCC_OscConfig+0x4ec>)
 8002f48:	2201      	movs	r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fe92 	bl	8001c74 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f54:	f7fe fe8e 	bl	8001c74 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e056      	b.n	8003014 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f66:	4b2e      	ldr	r3, [pc, #184]	; (8003020 <HAL_RCC_OscConfig+0x4e8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0x41c>
 8002f72:	e04e      	b.n	8003012 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f74:	4b2b      	ldr	r3, [pc, #172]	; (8003024 <HAL_RCC_OscConfig+0x4ec>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7a:	f7fe fe7b 	bl	8001c74 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f82:	f7fe fe77 	bl	8001c74 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e03f      	b.n	8003014 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f94:	4b22      	ldr	r3, [pc, #136]	; (8003020 <HAL_RCC_OscConfig+0x4e8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f0      	bne.n	8002f82 <HAL_RCC_OscConfig+0x44a>
 8002fa0:	e037      	b.n	8003012 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e032      	b.n	8003014 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fae:	4b1c      	ldr	r3, [pc, #112]	; (8003020 <HAL_RCC_OscConfig+0x4e8>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d028      	beq.n	800300e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d121      	bne.n	800300e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d11a      	bne.n	800300e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fde:	4013      	ands	r3, r2
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fe4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d111      	bne.n	800300e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	085b      	lsrs	r3, r3, #1
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d107      	bne.n	800300e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800300a:	429a      	cmp	r2, r3
 800300c:	d001      	beq.n	8003012 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40007000 	.word	0x40007000
 8003020:	40023800 	.word	0x40023800
 8003024:	42470060 	.word	0x42470060

08003028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0cc      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800303c:	4b68      	ldr	r3, [pc, #416]	; (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d90c      	bls.n	8003064 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304a:	4b65      	ldr	r3, [pc, #404]	; (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b63      	ldr	r3, [pc, #396]	; (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0b8      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d020      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800307c:	4b59      	ldr	r3, [pc, #356]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4a58      	ldr	r2, [pc, #352]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003086:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003094:	4b53      	ldr	r3, [pc, #332]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	4a52      	ldr	r2, [pc, #328]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800309e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a0:	4b50      	ldr	r3, [pc, #320]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	494d      	ldr	r1, [pc, #308]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d044      	beq.n	8003148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d107      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	4b47      	ldr	r3, [pc, #284]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d119      	bne.n	8003106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e07f      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d003      	beq.n	80030e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d107      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e6:	4b3f      	ldr	r3, [pc, #252]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e06f      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f6:	4b3b      	ldr	r3, [pc, #236]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e067      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003106:	4b37      	ldr	r3, [pc, #220]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f023 0203 	bic.w	r2, r3, #3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	4934      	ldr	r1, [pc, #208]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	4313      	orrs	r3, r2
 8003116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003118:	f7fe fdac 	bl	8001c74 <HAL_GetTick>
 800311c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311e:	e00a      	b.n	8003136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003120:	f7fe fda8 	bl	8001c74 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	f241 3288 	movw	r2, #5000	; 0x1388
 800312e:	4293      	cmp	r3, r2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e04f      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003136:	4b2b      	ldr	r3, [pc, #172]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 020c 	and.w	r2, r3, #12
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	429a      	cmp	r2, r3
 8003146:	d1eb      	bne.n	8003120 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003148:	4b25      	ldr	r3, [pc, #148]	; (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d20c      	bcs.n	8003170 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003156:	4b22      	ldr	r3, [pc, #136]	; (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	4b20      	ldr	r3, [pc, #128]	; (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e032      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800317c:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	4916      	ldr	r1, [pc, #88]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800319a:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	490e      	ldr	r1, [pc, #56]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031ae:	f000 f821 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 80031b2:	4602      	mov	r2, r0
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	490a      	ldr	r1, [pc, #40]	; (80031e8 <HAL_RCC_ClockConfig+0x1c0>)
 80031c0:	5ccb      	ldrb	r3, [r1, r3]
 80031c2:	fa22 f303 	lsr.w	r3, r2, r3
 80031c6:	4a09      	ldr	r2, [pc, #36]	; (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031ca:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <HAL_RCC_ClockConfig+0x1c8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fe fd0c 	bl	8001bec <HAL_InitTick>

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40023c00 	.word	0x40023c00
 80031e4:	40023800 	.word	0x40023800
 80031e8:	08008c30 	.word	0x08008c30
 80031ec:	20000000 	.word	0x20000000
 80031f0:	20000004 	.word	0x20000004

080031f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f4:	b5b0      	push	{r4, r5, r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031fa:	2100      	movs	r1, #0
 80031fc:	6079      	str	r1, [r7, #4]
 80031fe:	2100      	movs	r1, #0
 8003200:	60f9      	str	r1, [r7, #12]
 8003202:	2100      	movs	r1, #0
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003206:	2100      	movs	r1, #0
 8003208:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800320a:	4952      	ldr	r1, [pc, #328]	; (8003354 <HAL_RCC_GetSysClockFreq+0x160>)
 800320c:	6889      	ldr	r1, [r1, #8]
 800320e:	f001 010c 	and.w	r1, r1, #12
 8003212:	2908      	cmp	r1, #8
 8003214:	d00d      	beq.n	8003232 <HAL_RCC_GetSysClockFreq+0x3e>
 8003216:	2908      	cmp	r1, #8
 8003218:	f200 8094 	bhi.w	8003344 <HAL_RCC_GetSysClockFreq+0x150>
 800321c:	2900      	cmp	r1, #0
 800321e:	d002      	beq.n	8003226 <HAL_RCC_GetSysClockFreq+0x32>
 8003220:	2904      	cmp	r1, #4
 8003222:	d003      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x38>
 8003224:	e08e      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003226:	4b4c      	ldr	r3, [pc, #304]	; (8003358 <HAL_RCC_GetSysClockFreq+0x164>)
 8003228:	60bb      	str	r3, [r7, #8]
       break;
 800322a:	e08e      	b.n	800334a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800322c:	4b4b      	ldr	r3, [pc, #300]	; (800335c <HAL_RCC_GetSysClockFreq+0x168>)
 800322e:	60bb      	str	r3, [r7, #8]
      break;
 8003230:	e08b      	b.n	800334a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003232:	4948      	ldr	r1, [pc, #288]	; (8003354 <HAL_RCC_GetSysClockFreq+0x160>)
 8003234:	6849      	ldr	r1, [r1, #4]
 8003236:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800323a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800323c:	4945      	ldr	r1, [pc, #276]	; (8003354 <HAL_RCC_GetSysClockFreq+0x160>)
 800323e:	6849      	ldr	r1, [r1, #4]
 8003240:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003244:	2900      	cmp	r1, #0
 8003246:	d024      	beq.n	8003292 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003248:	4942      	ldr	r1, [pc, #264]	; (8003354 <HAL_RCC_GetSysClockFreq+0x160>)
 800324a:	6849      	ldr	r1, [r1, #4]
 800324c:	0989      	lsrs	r1, r1, #6
 800324e:	4608      	mov	r0, r1
 8003250:	f04f 0100 	mov.w	r1, #0
 8003254:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003258:	f04f 0500 	mov.w	r5, #0
 800325c:	ea00 0204 	and.w	r2, r0, r4
 8003260:	ea01 0305 	and.w	r3, r1, r5
 8003264:	493d      	ldr	r1, [pc, #244]	; (800335c <HAL_RCC_GetSysClockFreq+0x168>)
 8003266:	fb01 f003 	mul.w	r0, r1, r3
 800326a:	2100      	movs	r1, #0
 800326c:	fb01 f102 	mul.w	r1, r1, r2
 8003270:	1844      	adds	r4, r0, r1
 8003272:	493a      	ldr	r1, [pc, #232]	; (800335c <HAL_RCC_GetSysClockFreq+0x168>)
 8003274:	fba2 0101 	umull	r0, r1, r2, r1
 8003278:	1863      	adds	r3, r4, r1
 800327a:	4619      	mov	r1, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	461a      	mov	r2, r3
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	f7fd fce8 	bl	8000c58 <__aeabi_uldivmod>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4613      	mov	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	e04a      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003292:	4b30      	ldr	r3, [pc, #192]	; (8003354 <HAL_RCC_GetSysClockFreq+0x160>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	099b      	lsrs	r3, r3, #6
 8003298:	461a      	mov	r2, r3
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032a2:	f04f 0100 	mov.w	r1, #0
 80032a6:	ea02 0400 	and.w	r4, r2, r0
 80032aa:	ea03 0501 	and.w	r5, r3, r1
 80032ae:	4620      	mov	r0, r4
 80032b0:	4629      	mov	r1, r5
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	014b      	lsls	r3, r1, #5
 80032bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032c0:	0142      	lsls	r2, r0, #5
 80032c2:	4610      	mov	r0, r2
 80032c4:	4619      	mov	r1, r3
 80032c6:	1b00      	subs	r0, r0, r4
 80032c8:	eb61 0105 	sbc.w	r1, r1, r5
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	018b      	lsls	r3, r1, #6
 80032d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032da:	0182      	lsls	r2, r0, #6
 80032dc:	1a12      	subs	r2, r2, r0
 80032de:	eb63 0301 	sbc.w	r3, r3, r1
 80032e2:	f04f 0000 	mov.w	r0, #0
 80032e6:	f04f 0100 	mov.w	r1, #0
 80032ea:	00d9      	lsls	r1, r3, #3
 80032ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032f0:	00d0      	lsls	r0, r2, #3
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	1912      	adds	r2, r2, r4
 80032f8:	eb45 0303 	adc.w	r3, r5, r3
 80032fc:	f04f 0000 	mov.w	r0, #0
 8003300:	f04f 0100 	mov.w	r1, #0
 8003304:	0299      	lsls	r1, r3, #10
 8003306:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800330a:	0290      	lsls	r0, r2, #10
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4610      	mov	r0, r2
 8003312:	4619      	mov	r1, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	461a      	mov	r2, r3
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	f7fd fc9c 	bl	8000c58 <__aeabi_uldivmod>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4613      	mov	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003328:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <HAL_RCC_GetSysClockFreq+0x160>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	0c1b      	lsrs	r3, r3, #16
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	3301      	adds	r3, #1
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003340:	60bb      	str	r3, [r7, #8]
      break;
 8003342:	e002      	b.n	800334a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003344:	4b04      	ldr	r3, [pc, #16]	; (8003358 <HAL_RCC_GetSysClockFreq+0x164>)
 8003346:	60bb      	str	r3, [r7, #8]
      break;
 8003348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800334a:	68bb      	ldr	r3, [r7, #8]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bdb0      	pop	{r4, r5, r7, pc}
 8003354:	40023800 	.word	0x40023800
 8003358:	00f42400 	.word	0x00f42400
 800335c:	017d7840 	.word	0x017d7840

08003360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003364:	4b03      	ldr	r3, [pc, #12]	; (8003374 <HAL_RCC_GetHCLKFreq+0x14>)
 8003366:	681b      	ldr	r3, [r3, #0]
}
 8003368:	4618      	mov	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20000000 	.word	0x20000000

08003378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800337c:	f7ff fff0 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	0a9b      	lsrs	r3, r3, #10
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	4903      	ldr	r1, [pc, #12]	; (800339c <HAL_RCC_GetPCLK1Freq+0x24>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40023800 	.word	0x40023800
 800339c:	08008c40 	.word	0x08008c40

080033a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033a4:	f7ff ffdc 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	0b5b      	lsrs	r3, r3, #13
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	4903      	ldr	r1, [pc, #12]	; (80033c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033bc:	4618      	mov	r0, r3
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40023800 	.word	0x40023800
 80033c4:	08008c40 	.word	0x08008c40

080033c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e03f      	b.n	800345a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fe fa5c 	bl	80018ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2224      	movs	r2, #36	; 0x24
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800340a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f829 	bl	8003464 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003420:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695a      	ldr	r2, [r3, #20]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003430:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003440:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003468:	b09f      	sub	sp, #124	; 0x7c
 800346a:	af00      	add	r7, sp, #0
 800346c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800346e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800347a:	68d9      	ldr	r1, [r3, #12]
 800347c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	ea40 0301 	orr.w	r3, r0, r1
 8003484:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	431a      	orrs	r2, r3
 8003490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	431a      	orrs	r2, r3
 8003496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	4313      	orrs	r3, r2
 800349c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800349e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034a8:	f021 010c 	bic.w	r1, r1, #12
 80034ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034b2:	430b      	orrs	r3, r1
 80034b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c2:	6999      	ldr	r1, [r3, #24]
 80034c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	ea40 0301 	orr.w	r3, r0, r1
 80034cc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	4bc5      	ldr	r3, [pc, #788]	; (80037e8 <UART_SetConfig+0x384>)
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d004      	beq.n	80034e2 <UART_SetConfig+0x7e>
 80034d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4bc3      	ldr	r3, [pc, #780]	; (80037ec <UART_SetConfig+0x388>)
 80034de:	429a      	cmp	r2, r3
 80034e0:	d103      	bne.n	80034ea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034e2:	f7ff ff5d 	bl	80033a0 <HAL_RCC_GetPCLK2Freq>
 80034e6:	6778      	str	r0, [r7, #116]	; 0x74
 80034e8:	e002      	b.n	80034f0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034ea:	f7ff ff45 	bl	8003378 <HAL_RCC_GetPCLK1Freq>
 80034ee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f8:	f040 80b6 	bne.w	8003668 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034fe:	461c      	mov	r4, r3
 8003500:	f04f 0500 	mov.w	r5, #0
 8003504:	4622      	mov	r2, r4
 8003506:	462b      	mov	r3, r5
 8003508:	1891      	adds	r1, r2, r2
 800350a:	6439      	str	r1, [r7, #64]	; 0x40
 800350c:	415b      	adcs	r3, r3
 800350e:	647b      	str	r3, [r7, #68]	; 0x44
 8003510:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003514:	1912      	adds	r2, r2, r4
 8003516:	eb45 0303 	adc.w	r3, r5, r3
 800351a:	f04f 0000 	mov.w	r0, #0
 800351e:	f04f 0100 	mov.w	r1, #0
 8003522:	00d9      	lsls	r1, r3, #3
 8003524:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003528:	00d0      	lsls	r0, r2, #3
 800352a:	4602      	mov	r2, r0
 800352c:	460b      	mov	r3, r1
 800352e:	1911      	adds	r1, r2, r4
 8003530:	6639      	str	r1, [r7, #96]	; 0x60
 8003532:	416b      	adcs	r3, r5
 8003534:	667b      	str	r3, [r7, #100]	; 0x64
 8003536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	461a      	mov	r2, r3
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	1891      	adds	r1, r2, r2
 8003542:	63b9      	str	r1, [r7, #56]	; 0x38
 8003544:	415b      	adcs	r3, r3
 8003546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003548:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800354c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003550:	f7fd fb82 	bl	8000c58 <__aeabi_uldivmod>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4ba5      	ldr	r3, [pc, #660]	; (80037f0 <UART_SetConfig+0x38c>)
 800355a:	fba3 2302 	umull	r2, r3, r3, r2
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	011e      	lsls	r6, r3, #4
 8003562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003564:	461c      	mov	r4, r3
 8003566:	f04f 0500 	mov.w	r5, #0
 800356a:	4622      	mov	r2, r4
 800356c:	462b      	mov	r3, r5
 800356e:	1891      	adds	r1, r2, r2
 8003570:	6339      	str	r1, [r7, #48]	; 0x30
 8003572:	415b      	adcs	r3, r3
 8003574:	637b      	str	r3, [r7, #52]	; 0x34
 8003576:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800357a:	1912      	adds	r2, r2, r4
 800357c:	eb45 0303 	adc.w	r3, r5, r3
 8003580:	f04f 0000 	mov.w	r0, #0
 8003584:	f04f 0100 	mov.w	r1, #0
 8003588:	00d9      	lsls	r1, r3, #3
 800358a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800358e:	00d0      	lsls	r0, r2, #3
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	1911      	adds	r1, r2, r4
 8003596:	65b9      	str	r1, [r7, #88]	; 0x58
 8003598:	416b      	adcs	r3, r5
 800359a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800359c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	461a      	mov	r2, r3
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	1891      	adds	r1, r2, r2
 80035a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80035aa:	415b      	adcs	r3, r3
 80035ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035b2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80035b6:	f7fd fb4f 	bl	8000c58 <__aeabi_uldivmod>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4b8c      	ldr	r3, [pc, #560]	; (80037f0 <UART_SetConfig+0x38c>)
 80035c0:	fba3 1302 	umull	r1, r3, r3, r2
 80035c4:	095b      	lsrs	r3, r3, #5
 80035c6:	2164      	movs	r1, #100	; 0x64
 80035c8:	fb01 f303 	mul.w	r3, r1, r3
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	3332      	adds	r3, #50	; 0x32
 80035d2:	4a87      	ldr	r2, [pc, #540]	; (80037f0 <UART_SetConfig+0x38c>)
 80035d4:	fba2 2303 	umull	r2, r3, r2, r3
 80035d8:	095b      	lsrs	r3, r3, #5
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035e0:	441e      	add	r6, r3
 80035e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035e4:	4618      	mov	r0, r3
 80035e6:	f04f 0100 	mov.w	r1, #0
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	1894      	adds	r4, r2, r2
 80035f0:	623c      	str	r4, [r7, #32]
 80035f2:	415b      	adcs	r3, r3
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
 80035f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035fa:	1812      	adds	r2, r2, r0
 80035fc:	eb41 0303 	adc.w	r3, r1, r3
 8003600:	f04f 0400 	mov.w	r4, #0
 8003604:	f04f 0500 	mov.w	r5, #0
 8003608:	00dd      	lsls	r5, r3, #3
 800360a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800360e:	00d4      	lsls	r4, r2, #3
 8003610:	4622      	mov	r2, r4
 8003612:	462b      	mov	r3, r5
 8003614:	1814      	adds	r4, r2, r0
 8003616:	653c      	str	r4, [r7, #80]	; 0x50
 8003618:	414b      	adcs	r3, r1
 800361a:	657b      	str	r3, [r7, #84]	; 0x54
 800361c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	461a      	mov	r2, r3
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	1891      	adds	r1, r2, r2
 8003628:	61b9      	str	r1, [r7, #24]
 800362a:	415b      	adcs	r3, r3
 800362c:	61fb      	str	r3, [r7, #28]
 800362e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003632:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003636:	f7fd fb0f 	bl	8000c58 <__aeabi_uldivmod>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4b6c      	ldr	r3, [pc, #432]	; (80037f0 <UART_SetConfig+0x38c>)
 8003640:	fba3 1302 	umull	r1, r3, r3, r2
 8003644:	095b      	lsrs	r3, r3, #5
 8003646:	2164      	movs	r1, #100	; 0x64
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	3332      	adds	r3, #50	; 0x32
 8003652:	4a67      	ldr	r2, [pc, #412]	; (80037f0 <UART_SetConfig+0x38c>)
 8003654:	fba2 2303 	umull	r2, r3, r2, r3
 8003658:	095b      	lsrs	r3, r3, #5
 800365a:	f003 0207 	and.w	r2, r3, #7
 800365e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4432      	add	r2, r6
 8003664:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003666:	e0b9      	b.n	80037dc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003668:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800366a:	461c      	mov	r4, r3
 800366c:	f04f 0500 	mov.w	r5, #0
 8003670:	4622      	mov	r2, r4
 8003672:	462b      	mov	r3, r5
 8003674:	1891      	adds	r1, r2, r2
 8003676:	6139      	str	r1, [r7, #16]
 8003678:	415b      	adcs	r3, r3
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003680:	1912      	adds	r2, r2, r4
 8003682:	eb45 0303 	adc.w	r3, r5, r3
 8003686:	f04f 0000 	mov.w	r0, #0
 800368a:	f04f 0100 	mov.w	r1, #0
 800368e:	00d9      	lsls	r1, r3, #3
 8003690:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003694:	00d0      	lsls	r0, r2, #3
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	eb12 0804 	adds.w	r8, r2, r4
 800369e:	eb43 0905 	adc.w	r9, r3, r5
 80036a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f04f 0100 	mov.w	r1, #0
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	008b      	lsls	r3, r1, #2
 80036b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80036ba:	0082      	lsls	r2, r0, #2
 80036bc:	4640      	mov	r0, r8
 80036be:	4649      	mov	r1, r9
 80036c0:	f7fd faca 	bl	8000c58 <__aeabi_uldivmod>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4b49      	ldr	r3, [pc, #292]	; (80037f0 <UART_SetConfig+0x38c>)
 80036ca:	fba3 2302 	umull	r2, r3, r3, r2
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	011e      	lsls	r6, r3, #4
 80036d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036d4:	4618      	mov	r0, r3
 80036d6:	f04f 0100 	mov.w	r1, #0
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	1894      	adds	r4, r2, r2
 80036e0:	60bc      	str	r4, [r7, #8]
 80036e2:	415b      	adcs	r3, r3
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036ea:	1812      	adds	r2, r2, r0
 80036ec:	eb41 0303 	adc.w	r3, r1, r3
 80036f0:	f04f 0400 	mov.w	r4, #0
 80036f4:	f04f 0500 	mov.w	r5, #0
 80036f8:	00dd      	lsls	r5, r3, #3
 80036fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036fe:	00d4      	lsls	r4, r2, #3
 8003700:	4622      	mov	r2, r4
 8003702:	462b      	mov	r3, r5
 8003704:	1814      	adds	r4, r2, r0
 8003706:	64bc      	str	r4, [r7, #72]	; 0x48
 8003708:	414b      	adcs	r3, r1
 800370a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800370c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	4618      	mov	r0, r3
 8003712:	f04f 0100 	mov.w	r1, #0
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	008b      	lsls	r3, r1, #2
 8003720:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003724:	0082      	lsls	r2, r0, #2
 8003726:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800372a:	f7fd fa95 	bl	8000c58 <__aeabi_uldivmod>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4b2f      	ldr	r3, [pc, #188]	; (80037f0 <UART_SetConfig+0x38c>)
 8003734:	fba3 1302 	umull	r1, r3, r3, r2
 8003738:	095b      	lsrs	r3, r3, #5
 800373a:	2164      	movs	r1, #100	; 0x64
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	3332      	adds	r3, #50	; 0x32
 8003746:	4a2a      	ldr	r2, [pc, #168]	; (80037f0 <UART_SetConfig+0x38c>)
 8003748:	fba2 2303 	umull	r2, r3, r2, r3
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003752:	441e      	add	r6, r3
 8003754:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003756:	4618      	mov	r0, r3
 8003758:	f04f 0100 	mov.w	r1, #0
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	1894      	adds	r4, r2, r2
 8003762:	603c      	str	r4, [r7, #0]
 8003764:	415b      	adcs	r3, r3
 8003766:	607b      	str	r3, [r7, #4]
 8003768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800376c:	1812      	adds	r2, r2, r0
 800376e:	eb41 0303 	adc.w	r3, r1, r3
 8003772:	f04f 0400 	mov.w	r4, #0
 8003776:	f04f 0500 	mov.w	r5, #0
 800377a:	00dd      	lsls	r5, r3, #3
 800377c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003780:	00d4      	lsls	r4, r2, #3
 8003782:	4622      	mov	r2, r4
 8003784:	462b      	mov	r3, r5
 8003786:	eb12 0a00 	adds.w	sl, r2, r0
 800378a:	eb43 0b01 	adc.w	fp, r3, r1
 800378e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	4618      	mov	r0, r3
 8003794:	f04f 0100 	mov.w	r1, #0
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	008b      	lsls	r3, r1, #2
 80037a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80037a6:	0082      	lsls	r2, r0, #2
 80037a8:	4650      	mov	r0, sl
 80037aa:	4659      	mov	r1, fp
 80037ac:	f7fd fa54 	bl	8000c58 <__aeabi_uldivmod>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4b0e      	ldr	r3, [pc, #56]	; (80037f0 <UART_SetConfig+0x38c>)
 80037b6:	fba3 1302 	umull	r1, r3, r3, r2
 80037ba:	095b      	lsrs	r3, r3, #5
 80037bc:	2164      	movs	r1, #100	; 0x64
 80037be:	fb01 f303 	mul.w	r3, r1, r3
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	3332      	adds	r3, #50	; 0x32
 80037c8:	4a09      	ldr	r2, [pc, #36]	; (80037f0 <UART_SetConfig+0x38c>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	f003 020f 	and.w	r2, r3, #15
 80037d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4432      	add	r2, r6
 80037da:	609a      	str	r2, [r3, #8]
}
 80037dc:	bf00      	nop
 80037de:	377c      	adds	r7, #124	; 0x7c
 80037e0:	46bd      	mov	sp, r7
 80037e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037e6:	bf00      	nop
 80037e8:	40011000 	.word	0x40011000
 80037ec:	40011400 	.word	0x40011400
 80037f0:	51eb851f 	.word	0x51eb851f

080037f4 <arm_rfft_32_fast_init_f32>:
 80037f4:	b178      	cbz	r0, 8003816 <arm_rfft_32_fast_init_f32+0x22>
 80037f6:	b430      	push	{r4, r5}
 80037f8:	4908      	ldr	r1, [pc, #32]	; (800381c <arm_rfft_32_fast_init_f32+0x28>)
 80037fa:	4a09      	ldr	r2, [pc, #36]	; (8003820 <arm_rfft_32_fast_init_f32+0x2c>)
 80037fc:	2310      	movs	r3, #16
 80037fe:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003802:	8003      	strh	r3, [r0, #0]
 8003804:	2520      	movs	r5, #32
 8003806:	2414      	movs	r4, #20
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <arm_rfft_32_fast_init_f32+0x30>)
 800380a:	8205      	strh	r5, [r0, #16]
 800380c:	8184      	strh	r4, [r0, #12]
 800380e:	6143      	str	r3, [r0, #20]
 8003810:	bc30      	pop	{r4, r5}
 8003812:	2000      	movs	r0, #0
 8003814:	4770      	bx	lr
 8003816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800381a:	4770      	bx	lr
 800381c:	08009bf8 	.word	0x08009bf8
 8003820:	0800e530 	.word	0x0800e530
 8003824:	080172b0 	.word	0x080172b0

08003828 <arm_rfft_64_fast_init_f32>:
 8003828:	b178      	cbz	r0, 800384a <arm_rfft_64_fast_init_f32+0x22>
 800382a:	b430      	push	{r4, r5}
 800382c:	4908      	ldr	r1, [pc, #32]	; (8003850 <arm_rfft_64_fast_init_f32+0x28>)
 800382e:	4a09      	ldr	r2, [pc, #36]	; (8003854 <arm_rfft_64_fast_init_f32+0x2c>)
 8003830:	2320      	movs	r3, #32
 8003832:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003836:	8003      	strh	r3, [r0, #0]
 8003838:	2540      	movs	r5, #64	; 0x40
 800383a:	2430      	movs	r4, #48	; 0x30
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <arm_rfft_64_fast_init_f32+0x30>)
 800383e:	8205      	strh	r5, [r0, #16]
 8003840:	8184      	strh	r4, [r0, #12]
 8003842:	6143      	str	r3, [r0, #20]
 8003844:	bc30      	pop	{r4, r5}
 8003846:	2000      	movs	r0, #0
 8003848:	4770      	bx	lr
 800384a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800384e:	4770      	bx	lr
 8003850:	0800bd50 	.word	0x0800bd50
 8003854:	08012db0 	.word	0x08012db0
 8003858:	0801bb30 	.word	0x0801bb30

0800385c <arm_rfft_256_fast_init_f32>:
 800385c:	b180      	cbz	r0, 8003880 <arm_rfft_256_fast_init_f32+0x24>
 800385e:	b430      	push	{r4, r5}
 8003860:	4909      	ldr	r1, [pc, #36]	; (8003888 <arm_rfft_256_fast_init_f32+0x2c>)
 8003862:	4a0a      	ldr	r2, [pc, #40]	; (800388c <arm_rfft_256_fast_init_f32+0x30>)
 8003864:	2380      	movs	r3, #128	; 0x80
 8003866:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800386a:	8003      	strh	r3, [r0, #0]
 800386c:	f44f 7580 	mov.w	r5, #256	; 0x100
 8003870:	24d0      	movs	r4, #208	; 0xd0
 8003872:	4b07      	ldr	r3, [pc, #28]	; (8003890 <arm_rfft_256_fast_init_f32+0x34>)
 8003874:	8205      	strh	r5, [r0, #16]
 8003876:	8184      	strh	r4, [r0, #12]
 8003878:	6143      	str	r3, [r0, #20]
 800387a:	bc30      	pop	{r4, r5}
 800387c:	2000      	movs	r0, #0
 800387e:	4770      	bx	lr
 8003880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	08009a58 	.word	0x08009a58
 800388c:	0800e130 	.word	0x0800e130
 8003890:	08016eb0 	.word	0x08016eb0

08003894 <arm_rfft_512_fast_init_f32>:
 8003894:	b190      	cbz	r0, 80038bc <arm_rfft_512_fast_init_f32+0x28>
 8003896:	b430      	push	{r4, r5}
 8003898:	490a      	ldr	r1, [pc, #40]	; (80038c4 <arm_rfft_512_fast_init_f32+0x30>)
 800389a:	4a0b      	ldr	r2, [pc, #44]	; (80038c8 <arm_rfft_512_fast_init_f32+0x34>)
 800389c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038a0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80038a4:	8003      	strh	r3, [r0, #0]
 80038a6:	f44f 7500 	mov.w	r5, #512	; 0x200
 80038aa:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80038ae:	4b07      	ldr	r3, [pc, #28]	; (80038cc <arm_rfft_512_fast_init_f32+0x38>)
 80038b0:	8205      	strh	r5, [r0, #16]
 80038b2:	8184      	strh	r4, [r0, #12]
 80038b4:	6143      	str	r3, [r0, #20]
 80038b6:	bc30      	pop	{r4, r5}
 80038b8:	2000      	movs	r0, #0
 80038ba:	4770      	bx	lr
 80038bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	0800b9e0 	.word	0x0800b9e0
 80038c8:	080125b0 	.word	0x080125b0
 80038cc:	0801b330 	.word	0x0801b330

080038d0 <arm_rfft_1024_fast_init_f32>:
 80038d0:	b190      	cbz	r0, 80038f8 <arm_rfft_1024_fast_init_f32+0x28>
 80038d2:	b430      	push	{r4, r5}
 80038d4:	490a      	ldr	r1, [pc, #40]	; (8003900 <arm_rfft_1024_fast_init_f32+0x30>)
 80038d6:	4a0b      	ldr	r2, [pc, #44]	; (8003904 <arm_rfft_1024_fast_init_f32+0x34>)
 80038d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038dc:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80038e0:	8003      	strh	r3, [r0, #0]
 80038e2:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80038e6:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 80038ea:	4b07      	ldr	r3, [pc, #28]	; (8003908 <arm_rfft_1024_fast_init_f32+0x38>)
 80038ec:	8205      	strh	r5, [r0, #16]
 80038ee:	8184      	strh	r4, [r0, #12]
 80038f0:	6143      	str	r3, [r0, #20]
 80038f2:	bc30      	pop	{r4, r5}
 80038f4:	2000      	movs	r0, #0
 80038f6:	4770      	bx	lr
 80038f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	0800bdb0 	.word	0x0800bdb0
 8003904:	08012eb0 	.word	0x08012eb0
 8003908:	08013eb0 	.word	0x08013eb0

0800390c <arm_rfft_2048_fast_init_f32>:
 800390c:	b190      	cbz	r0, 8003934 <arm_rfft_2048_fast_init_f32+0x28>
 800390e:	b430      	push	{r4, r5}
 8003910:	490a      	ldr	r1, [pc, #40]	; (800393c <arm_rfft_2048_fast_init_f32+0x30>)
 8003912:	4a0b      	ldr	r2, [pc, #44]	; (8003940 <arm_rfft_2048_fast_init_f32+0x34>)
 8003914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003918:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800391c:	8003      	strh	r3, [r0, #0]
 800391e:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8003922:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8003926:	4b07      	ldr	r3, [pc, #28]	; (8003944 <arm_rfft_2048_fast_init_f32+0x38>)
 8003928:	8205      	strh	r5, [r0, #16]
 800392a:	8184      	strh	r4, [r0, #12]
 800392c:	6143      	str	r3, [r0, #20]
 800392e:	bc30      	pop	{r4, r5}
 8003930:	2000      	movs	r0, #0
 8003932:	4770      	bx	lr
 8003934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	08008c48 	.word	0x08008c48
 8003940:	0800c130 	.word	0x0800c130
 8003944:	08014eb0 	.word	0x08014eb0

08003948 <arm_rfft_4096_fast_init_f32>:
 8003948:	b190      	cbz	r0, 8003970 <arm_rfft_4096_fast_init_f32+0x28>
 800394a:	b430      	push	{r4, r5}
 800394c:	490a      	ldr	r1, [pc, #40]	; (8003978 <arm_rfft_4096_fast_init_f32+0x30>)
 800394e:	4a0b      	ldr	r2, [pc, #44]	; (800397c <arm_rfft_4096_fast_init_f32+0x34>)
 8003950:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003954:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003958:	8003      	strh	r3, [r0, #0]
 800395a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800395e:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8003962:	4b07      	ldr	r3, [pc, #28]	; (8003980 <arm_rfft_4096_fast_init_f32+0x38>)
 8003964:	8205      	strh	r5, [r0, #16]
 8003966:	8184      	strh	r4, [r0, #12]
 8003968:	6143      	str	r3, [r0, #20]
 800396a:	bc30      	pop	{r4, r5}
 800396c:	2000      	movs	r0, #0
 800396e:	4770      	bx	lr
 8003970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	08009c20 	.word	0x08009c20
 800397c:	0800e5b0 	.word	0x0800e5b0
 8003980:	08017330 	.word	0x08017330

08003984 <arm_rfft_fast_init_f32>:
 8003984:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003988:	d01f      	beq.n	80039ca <arm_rfft_fast_init_f32+0x46>
 800398a:	d90b      	bls.n	80039a4 <arm_rfft_fast_init_f32+0x20>
 800398c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8003990:	d019      	beq.n	80039c6 <arm_rfft_fast_init_f32+0x42>
 8003992:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003996:	d012      	beq.n	80039be <arm_rfft_fast_init_f32+0x3a>
 8003998:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800399c:	d00d      	beq.n	80039ba <arm_rfft_fast_init_f32+0x36>
 800399e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039a2:	4770      	bx	lr
 80039a4:	2940      	cmp	r1, #64	; 0x40
 80039a6:	d00c      	beq.n	80039c2 <arm_rfft_fast_init_f32+0x3e>
 80039a8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80039ac:	d003      	beq.n	80039b6 <arm_rfft_fast_init_f32+0x32>
 80039ae:	2920      	cmp	r1, #32
 80039b0:	d1f5      	bne.n	800399e <arm_rfft_fast_init_f32+0x1a>
 80039b2:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <arm_rfft_fast_init_f32+0x4c>)
 80039b4:	4718      	bx	r3
 80039b6:	4b07      	ldr	r3, [pc, #28]	; (80039d4 <arm_rfft_fast_init_f32+0x50>)
 80039b8:	4718      	bx	r3
 80039ba:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <arm_rfft_fast_init_f32+0x54>)
 80039bc:	4718      	bx	r3
 80039be:	4b07      	ldr	r3, [pc, #28]	; (80039dc <arm_rfft_fast_init_f32+0x58>)
 80039c0:	4718      	bx	r3
 80039c2:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <arm_rfft_fast_init_f32+0x5c>)
 80039c4:	e7f6      	b.n	80039b4 <arm_rfft_fast_init_f32+0x30>
 80039c6:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <arm_rfft_fast_init_f32+0x60>)
 80039c8:	e7f4      	b.n	80039b4 <arm_rfft_fast_init_f32+0x30>
 80039ca:	4b07      	ldr	r3, [pc, #28]	; (80039e8 <arm_rfft_fast_init_f32+0x64>)
 80039cc:	e7f2      	b.n	80039b4 <arm_rfft_fast_init_f32+0x30>
 80039ce:	bf00      	nop
 80039d0:	080037f5 	.word	0x080037f5
 80039d4:	0800385d 	.word	0x0800385d
 80039d8:	080038d1 	.word	0x080038d1
 80039dc:	08003949 	.word	0x08003949
 80039e0:	08003829 	.word	0x08003829
 80039e4:	0800390d 	.word	0x0800390d
 80039e8:	08003895 	.word	0x08003895

080039ec <stage_rfft_f32>:
 80039ec:	b410      	push	{r4}
 80039ee:	edd1 7a00 	vldr	s15, [r1]
 80039f2:	ed91 7a01 	vldr	s14, [r1, #4]
 80039f6:	8804      	ldrh	r4, [r0, #0]
 80039f8:	6940      	ldr	r0, [r0, #20]
 80039fa:	ee37 7a07 	vadd.f32	s14, s14, s14
 80039fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003a02:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8003a06:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003a0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a0e:	3c01      	subs	r4, #1
 8003a10:	ee26 7a84 	vmul.f32	s14, s13, s8
 8003a14:	ee67 7a84 	vmul.f32	s15, s15, s8
 8003a18:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8003a1c:	ed82 7a00 	vstr	s14, [r2]
 8003a20:	edc2 7a01 	vstr	s15, [r2, #4]
 8003a24:	3010      	adds	r0, #16
 8003a26:	3210      	adds	r2, #16
 8003a28:	3b08      	subs	r3, #8
 8003a2a:	3110      	adds	r1, #16
 8003a2c:	ed11 5a02 	vldr	s10, [r1, #-8]
 8003a30:	ed93 7a02 	vldr	s14, [r3, #8]
 8003a34:	ed50 6a02 	vldr	s13, [r0, #-8]
 8003a38:	edd3 4a03 	vldr	s9, [r3, #12]
 8003a3c:	ed51 7a01 	vldr	s15, [r1, #-4]
 8003a40:	ed10 6a01 	vldr	s12, [r0, #-4]
 8003a44:	ee77 5a45 	vsub.f32	s11, s14, s10
 8003a48:	ee37 7a05 	vadd.f32	s14, s14, s10
 8003a4c:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8003a50:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8003a54:	ee66 5a25 	vmul.f32	s11, s12, s11
 8003a58:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8003a5c:	ee37 7a23 	vadd.f32	s14, s14, s7
 8003a60:	ee66 6a85 	vmul.f32	s13, s13, s10
 8003a64:	ee26 6a05 	vmul.f32	s12, s12, s10
 8003a68:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8003a6c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003a70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003a74:	ee27 7a04 	vmul.f32	s14, s14, s8
 8003a78:	ee67 7a84 	vmul.f32	s15, s15, s8
 8003a7c:	3c01      	subs	r4, #1
 8003a7e:	ed02 7a02 	vstr	s14, [r2, #-8]
 8003a82:	ed42 7a01 	vstr	s15, [r2, #-4]
 8003a86:	f1a3 0308 	sub.w	r3, r3, #8
 8003a8a:	f101 0108 	add.w	r1, r1, #8
 8003a8e:	f100 0008 	add.w	r0, r0, #8
 8003a92:	f102 0208 	add.w	r2, r2, #8
 8003a96:	d1c9      	bne.n	8003a2c <stage_rfft_f32+0x40>
 8003a98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop

08003aa0 <merge_rfft_f32>:
 8003aa0:	b410      	push	{r4}
 8003aa2:	edd1 7a00 	vldr	s15, [r1]
 8003aa6:	edd1 6a01 	vldr	s13, [r1, #4]
 8003aaa:	8804      	ldrh	r4, [r0, #0]
 8003aac:	6940      	ldr	r0, [r0, #20]
 8003aae:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003ab2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003ab6:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8003aba:	ee27 7a04 	vmul.f32	s14, s14, s8
 8003abe:	ee67 7a84 	vmul.f32	s15, s15, s8
 8003ac2:	3c01      	subs	r4, #1
 8003ac4:	ed82 7a00 	vstr	s14, [r2]
 8003ac8:	edc2 7a01 	vstr	s15, [r2, #4]
 8003acc:	b3dc      	cbz	r4, 8003b46 <merge_rfft_f32+0xa6>
 8003ace:	00e3      	lsls	r3, r4, #3
 8003ad0:	3b08      	subs	r3, #8
 8003ad2:	440b      	add	r3, r1
 8003ad4:	3010      	adds	r0, #16
 8003ad6:	3210      	adds	r2, #16
 8003ad8:	3110      	adds	r1, #16
 8003ada:	ed11 5a02 	vldr	s10, [r1, #-8]
 8003ade:	ed93 7a02 	vldr	s14, [r3, #8]
 8003ae2:	ed50 6a02 	vldr	s13, [r0, #-8]
 8003ae6:	edd3 4a03 	vldr	s9, [r3, #12]
 8003aea:	ed51 7a01 	vldr	s15, [r1, #-4]
 8003aee:	ed10 6a01 	vldr	s12, [r0, #-4]
 8003af2:	ee75 5a47 	vsub.f32	s11, s10, s14
 8003af6:	ee37 7a05 	vadd.f32	s14, s14, s10
 8003afa:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8003afe:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8003b02:	ee66 5a25 	vmul.f32	s11, s12, s11
 8003b06:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8003b0a:	ee37 7a63 	vsub.f32	s14, s14, s7
 8003b0e:	ee66 6a85 	vmul.f32	s13, s13, s10
 8003b12:	ee26 6a05 	vmul.f32	s12, s12, s10
 8003b16:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8003b1a:	ee37 7a46 	vsub.f32	s14, s14, s12
 8003b1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003b22:	ee27 7a04 	vmul.f32	s14, s14, s8
 8003b26:	ee67 7a84 	vmul.f32	s15, s15, s8
 8003b2a:	3c01      	subs	r4, #1
 8003b2c:	ed02 7a02 	vstr	s14, [r2, #-8]
 8003b30:	ed42 7a01 	vstr	s15, [r2, #-4]
 8003b34:	f1a3 0308 	sub.w	r3, r3, #8
 8003b38:	f101 0108 	add.w	r1, r1, #8
 8003b3c:	f100 0008 	add.w	r0, r0, #8
 8003b40:	f102 0208 	add.w	r2, r2, #8
 8003b44:	d1c9      	bne.n	8003ada <merge_rfft_f32+0x3a>
 8003b46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <arm_rfft_fast_f32>:
 8003b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b50:	8a05      	ldrh	r5, [r0, #16]
 8003b52:	086d      	lsrs	r5, r5, #1
 8003b54:	8005      	strh	r5, [r0, #0]
 8003b56:	4604      	mov	r4, r0
 8003b58:	4616      	mov	r6, r2
 8003b5a:	461d      	mov	r5, r3
 8003b5c:	b14b      	cbz	r3, 8003b72 <arm_rfft_fast_f32+0x26>
 8003b5e:	f7ff ff9f 	bl	8003aa0 <merge_rfft_f32>
 8003b62:	462a      	mov	r2, r5
 8003b64:	4631      	mov	r1, r6
 8003b66:	4620      	mov	r0, r4
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b6e:	f000 bb33 	b.w	80041d8 <arm_cfft_f32>
 8003b72:	460f      	mov	r7, r1
 8003b74:	461a      	mov	r2, r3
 8003b76:	2301      	movs	r3, #1
 8003b78:	f000 fb2e 	bl	80041d8 <arm_cfft_f32>
 8003b7c:	4632      	mov	r2, r6
 8003b7e:	4639      	mov	r1, r7
 8003b80:	4620      	mov	r0, r4
 8003b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b86:	f7ff bf31 	b.w	80039ec <stage_rfft_f32>
 8003b8a:	bf00      	nop

08003b8c <arm_cfft_radix8by2_f32>:
 8003b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b90:	ed2d 8b08 	vpush	{d8-d11}
 8003b94:	4607      	mov	r7, r0
 8003b96:	4608      	mov	r0, r1
 8003b98:	f8b7 c000 	ldrh.w	ip, [r7]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8003ba2:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8003ba6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003baa:	f000 80b0 	beq.w	8003d0e <arm_cfft_radix8by2_f32+0x182>
 8003bae:	008c      	lsls	r4, r1, #2
 8003bb0:	3410      	adds	r4, #16
 8003bb2:	f100 0310 	add.w	r3, r0, #16
 8003bb6:	1906      	adds	r6, r0, r4
 8003bb8:	3210      	adds	r2, #16
 8003bba:	4444      	add	r4, r8
 8003bbc:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8003bc0:	f108 0510 	add.w	r5, r8, #16
 8003bc4:	ed15 2a04 	vldr	s4, [r5, #-16]
 8003bc8:	ed55 2a03 	vldr	s5, [r5, #-12]
 8003bcc:	ed54 4a04 	vldr	s9, [r4, #-16]
 8003bd0:	ed14 4a03 	vldr	s8, [r4, #-12]
 8003bd4:	ed14 6a02 	vldr	s12, [r4, #-8]
 8003bd8:	ed54 5a01 	vldr	s11, [r4, #-4]
 8003bdc:	ed53 3a04 	vldr	s7, [r3, #-16]
 8003be0:	ed15 0a02 	vldr	s0, [r5, #-8]
 8003be4:	ed55 0a01 	vldr	s1, [r5, #-4]
 8003be8:	ed56 6a04 	vldr	s13, [r6, #-16]
 8003bec:	ed16 3a03 	vldr	s6, [r6, #-12]
 8003bf0:	ed13 7a03 	vldr	s14, [r3, #-12]
 8003bf4:	ed13 5a02 	vldr	s10, [r3, #-8]
 8003bf8:	ed53 7a01 	vldr	s15, [r3, #-4]
 8003bfc:	ed16 1a02 	vldr	s2, [r6, #-8]
 8003c00:	ed56 1a01 	vldr	s3, [r6, #-4]
 8003c04:	ee73 ba82 	vadd.f32	s23, s7, s4
 8003c08:	ee37 ba22 	vadd.f32	s22, s14, s5
 8003c0c:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8003c10:	ee33 9a04 	vadd.f32	s18, s6, s8
 8003c14:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8003c18:	ee75 aa00 	vadd.f32	s21, s10, s0
 8003c1c:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8003c20:	ee71 8a06 	vadd.f32	s17, s2, s12
 8003c24:	ed43 ba04 	vstr	s23, [r3, #-16]
 8003c28:	ed03 ba03 	vstr	s22, [r3, #-12]
 8003c2c:	ed43 aa02 	vstr	s21, [r3, #-8]
 8003c30:	ed03 aa01 	vstr	s20, [r3, #-4]
 8003c34:	ed06 8a01 	vstr	s16, [r6, #-4]
 8003c38:	ed46 9a04 	vstr	s19, [r6, #-16]
 8003c3c:	ed06 9a03 	vstr	s18, [r6, #-12]
 8003c40:	ed46 8a02 	vstr	s17, [r6, #-8]
 8003c44:	ee37 7a62 	vsub.f32	s14, s14, s5
 8003c48:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8003c4c:	ee34 4a43 	vsub.f32	s8, s8, s6
 8003c50:	ed52 6a03 	vldr	s13, [r2, #-12]
 8003c54:	ed12 3a04 	vldr	s6, [r2, #-16]
 8003c58:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8003c5c:	ee27 8a26 	vmul.f32	s16, s14, s13
 8003c60:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8003c64:	ee23 2a83 	vmul.f32	s4, s7, s6
 8003c68:	ee64 4a83 	vmul.f32	s9, s9, s6
 8003c6c:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8003c70:	ee27 7a03 	vmul.f32	s14, s14, s6
 8003c74:	ee64 6a26 	vmul.f32	s13, s8, s13
 8003c78:	ee24 4a03 	vmul.f32	s8, s8, s6
 8003c7c:	ee37 7a63 	vsub.f32	s14, s14, s7
 8003c80:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8003c84:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8003c88:	ee32 3a08 	vadd.f32	s6, s4, s16
 8003c8c:	ed05 7a03 	vstr	s14, [r5, #-12]
 8003c90:	ed05 3a04 	vstr	s6, [r5, #-16]
 8003c94:	ed04 4a04 	vstr	s8, [r4, #-16]
 8003c98:	ed44 6a03 	vstr	s13, [r4, #-12]
 8003c9c:	ed12 7a01 	vldr	s14, [r2, #-4]
 8003ca0:	ee76 6a41 	vsub.f32	s13, s12, s2
 8003ca4:	ee35 5a40 	vsub.f32	s10, s10, s0
 8003ca8:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8003cac:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8003cb0:	ed52 5a02 	vldr	s11, [r2, #-8]
 8003cb4:	ee67 3a87 	vmul.f32	s7, s15, s14
 8003cb8:	ee66 4a87 	vmul.f32	s9, s13, s14
 8003cbc:	ee25 4a25 	vmul.f32	s8, s10, s11
 8003cc0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003cc4:	ee25 5a07 	vmul.f32	s10, s10, s14
 8003cc8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8003ccc:	ee26 7a07 	vmul.f32	s14, s12, s14
 8003cd0:	ee26 6a25 	vmul.f32	s12, s12, s11
 8003cd4:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8003cd8:	ee74 5a23 	vadd.f32	s11, s8, s7
 8003cdc:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8003ce0:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003ce4:	3310      	adds	r3, #16
 8003ce6:	4563      	cmp	r3, ip
 8003ce8:	ed45 5a02 	vstr	s11, [r5, #-8]
 8003cec:	f106 0610 	add.w	r6, r6, #16
 8003cf0:	ed45 7a01 	vstr	s15, [r5, #-4]
 8003cf4:	f102 0210 	add.w	r2, r2, #16
 8003cf8:	ed04 6a02 	vstr	s12, [r4, #-8]
 8003cfc:	ed04 7a01 	vstr	s14, [r4, #-4]
 8003d00:	f105 0510 	add.w	r5, r5, #16
 8003d04:	f104 0410 	add.w	r4, r4, #16
 8003d08:	f47f af5c 	bne.w	8003bc4 <arm_cfft_radix8by2_f32+0x38>
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	b28c      	uxth	r4, r1
 8003d10:	4621      	mov	r1, r4
 8003d12:	2302      	movs	r3, #2
 8003d14:	f000 ff2c 	bl	8004b70 <arm_radix8_butterfly_f32>
 8003d18:	ecbd 8b08 	vpop	{d8-d11}
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	4640      	mov	r0, r8
 8003d22:	2302      	movs	r3, #2
 8003d24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d28:	f000 bf22 	b.w	8004b70 <arm_radix8_butterfly_f32>

08003d2c <arm_cfft_radix8by4_f32>:
 8003d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d30:	ed2d 8b0a 	vpush	{d8-d12}
 8003d34:	b08d      	sub	sp, #52	; 0x34
 8003d36:	460d      	mov	r5, r1
 8003d38:	910b      	str	r1, [sp, #44]	; 0x2c
 8003d3a:	8801      	ldrh	r1, [r0, #0]
 8003d3c:	6842      	ldr	r2, [r0, #4]
 8003d3e:	900a      	str	r0, [sp, #40]	; 0x28
 8003d40:	0849      	lsrs	r1, r1, #1
 8003d42:	008b      	lsls	r3, r1, #2
 8003d44:	18ee      	adds	r6, r5, r3
 8003d46:	18f0      	adds	r0, r6, r3
 8003d48:	edd0 5a00 	vldr	s11, [r0]
 8003d4c:	edd5 7a00 	vldr	s15, [r5]
 8003d50:	ed96 7a00 	vldr	s14, [r6]
 8003d54:	edd0 3a01 	vldr	s7, [r0, #4]
 8003d58:	ed96 4a01 	vldr	s8, [r6, #4]
 8003d5c:	ed95 5a01 	vldr	s10, [r5, #4]
 8003d60:	9008      	str	r0, [sp, #32]
 8003d62:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8003d66:	18c7      	adds	r7, r0, r3
 8003d68:	edd7 4a00 	vldr	s9, [r7]
 8003d6c:	ed97 3a01 	vldr	s6, [r7, #4]
 8003d70:	9701      	str	r7, [sp, #4]
 8003d72:	ee77 6a06 	vadd.f32	s13, s14, s12
 8003d76:	462c      	mov	r4, r5
 8003d78:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8003d7c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8003d80:	ee16 ca90 	vmov	ip, s13
 8003d84:	f844 cb08 	str.w	ip, [r4], #8
 8003d88:	ee75 6a23 	vadd.f32	s13, s10, s7
 8003d8c:	edd6 5a01 	vldr	s11, [r6, #4]
 8003d90:	edd7 2a01 	vldr	s5, [r7, #4]
 8003d94:	9404      	str	r4, [sp, #16]
 8003d96:	ee35 5a63 	vsub.f32	s10, s10, s7
 8003d9a:	ee74 3a27 	vadd.f32	s7, s8, s15
 8003d9e:	ee36 6a47 	vsub.f32	s12, s12, s14
 8003da2:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8003da6:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8003daa:	0849      	lsrs	r1, r1, #1
 8003dac:	f102 0e08 	add.w	lr, r2, #8
 8003db0:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8003db4:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8003db8:	9109      	str	r1, [sp, #36]	; 0x24
 8003dba:	ee35 4a47 	vsub.f32	s8, s10, s14
 8003dbe:	f1a1 0902 	sub.w	r9, r1, #2
 8003dc2:	f8cd e00c 	str.w	lr, [sp, #12]
 8003dc6:	4631      	mov	r1, r6
 8003dc8:	ee13 ea90 	vmov	lr, s7
 8003dcc:	ee36 6a64 	vsub.f32	s12, s12, s9
 8003dd0:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8003dd4:	4604      	mov	r4, r0
 8003dd6:	edc5 5a01 	vstr	s11, [r5, #4]
 8003dda:	ee37 7a05 	vadd.f32	s14, s14, s10
 8003dde:	f841 eb08 	str.w	lr, [r1], #8
 8003de2:	ee34 5a24 	vadd.f32	s10, s8, s9
 8003de6:	ee16 ea10 	vmov	lr, s12
 8003dea:	ed86 5a01 	vstr	s10, [r6, #4]
 8003dee:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8003df2:	f844 eb08 	str.w	lr, [r4], #8
 8003df6:	ee77 7a83 	vadd.f32	s15, s15, s6
 8003dfa:	edc0 6a01 	vstr	s13, [r0, #4]
 8003dfe:	9405      	str	r4, [sp, #20]
 8003e00:	4604      	mov	r4, r0
 8003e02:	ee17 0a90 	vmov	r0, s15
 8003e06:	9106      	str	r1, [sp, #24]
 8003e08:	ee37 7a64 	vsub.f32	s14, s14, s9
 8003e0c:	f102 0110 	add.w	r1, r2, #16
 8003e10:	46bc      	mov	ip, r7
 8003e12:	9100      	str	r1, [sp, #0]
 8003e14:	f847 0b08 	str.w	r0, [r7], #8
 8003e18:	f102 0118 	add.w	r1, r2, #24
 8003e1c:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8003e20:	9102      	str	r1, [sp, #8]
 8003e22:	ed8c 7a01 	vstr	s14, [ip, #4]
 8003e26:	9007      	str	r0, [sp, #28]
 8003e28:	f000 8134 	beq.w	8004094 <arm_cfft_radix8by4_f32+0x368>
 8003e2c:	f102 0920 	add.w	r9, r2, #32
 8003e30:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8003e34:	9a01      	ldr	r2, [sp, #4]
 8003e36:	f8dd a000 	ldr.w	sl, [sp]
 8003e3a:	3b0c      	subs	r3, #12
 8003e3c:	4683      	mov	fp, r0
 8003e3e:	4463      	add	r3, ip
 8003e40:	f105 0e10 	add.w	lr, r5, #16
 8003e44:	f1a4 010c 	sub.w	r1, r4, #12
 8003e48:	f104 0510 	add.w	r5, r4, #16
 8003e4c:	f1a6 0c0c 	sub.w	ip, r6, #12
 8003e50:	f1a2 040c 	sub.w	r4, r2, #12
 8003e54:	f106 0010 	add.w	r0, r6, #16
 8003e58:	3210      	adds	r2, #16
 8003e5a:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8003e5e:	ed55 5a02 	vldr	s11, [r5, #-8]
 8003e62:	ed50 7a02 	vldr	s15, [r0, #-8]
 8003e66:	ed52 1a02 	vldr	s3, [r2, #-8]
 8003e6a:	ed55 6a01 	vldr	s13, [r5, #-4]
 8003e6e:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8003e72:	ed12 1a01 	vldr	s2, [r2, #-4]
 8003e76:	ed10 8a01 	vldr	s16, [r0, #-4]
 8003e7a:	ee35 4a25 	vadd.f32	s8, s10, s11
 8003e7e:	ee30 6a26 	vadd.f32	s12, s0, s13
 8003e82:	ee37 7a84 	vadd.f32	s14, s15, s8
 8003e86:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003e8a:	ee37 7a21 	vadd.f32	s14, s14, s3
 8003e8e:	ee75 5a65 	vsub.f32	s11, s10, s11
 8003e92:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8003e96:	ed10 7a01 	vldr	s14, [r0, #-4]
 8003e9a:	ed52 6a01 	vldr	s13, [r2, #-4]
 8003e9e:	ee36 7a07 	vadd.f32	s14, s12, s14
 8003ea2:	ee78 aa25 	vadd.f32	s21, s16, s11
 8003ea6:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003eaa:	ee70 3a67 	vsub.f32	s7, s0, s15
 8003eae:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8003eb2:	ed94 7a02 	vldr	s14, [r4, #8]
 8003eb6:	ed9c 2a02 	vldr	s4, [ip, #8]
 8003eba:	ed91 ba02 	vldr	s22, [r1, #8]
 8003ebe:	edd3 9a02 	vldr	s19, [r3, #8]
 8003ec2:	edd4 2a01 	vldr	s5, [r4, #4]
 8003ec6:	ed9c 9a01 	vldr	s18, [ip, #4]
 8003eca:	ed93 5a01 	vldr	s10, [r3, #4]
 8003ece:	edd1 0a01 	vldr	s1, [r1, #4]
 8003ed2:	ee72 6a07 	vadd.f32	s13, s4, s14
 8003ed6:	ee32 2a47 	vsub.f32	s4, s4, s14
 8003eda:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8003ede:	ee79 4a22 	vadd.f32	s9, s18, s5
 8003ee2:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8003ee6:	ee79 2a62 	vsub.f32	s5, s18, s5
 8003eea:	ed8c 7a02 	vstr	s14, [ip, #8]
 8003eee:	ed91 7a01 	vldr	s14, [r1, #4]
 8003ef2:	edd3 8a01 	vldr	s17, [r3, #4]
 8003ef6:	ee34 7a87 	vadd.f32	s14, s9, s14
 8003efa:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8003efe:	ee37 7a28 	vadd.f32	s14, s14, s17
 8003f02:	ee32 9a60 	vsub.f32	s18, s4, s1
 8003f06:	ed8c 7a01 	vstr	s14, [ip, #4]
 8003f0a:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8003f0e:	ed1a aa02 	vldr	s20, [sl, #-8]
 8003f12:	ee73 8a22 	vadd.f32	s17, s6, s5
 8003f16:	ee39 9a05 	vadd.f32	s18, s18, s10
 8003f1a:	ee7a aac1 	vsub.f32	s21, s21, s2
 8003f1e:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8003f22:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8003f26:	ee69 ba07 	vmul.f32	s23, s18, s14
 8003f2a:	ee6a aa87 	vmul.f32	s21, s21, s14
 8003f2e:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8003f32:	ee63 ca87 	vmul.f32	s25, s7, s14
 8003f36:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8003f3a:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8003f3e:	ee68 8a87 	vmul.f32	s17, s17, s14
 8003f42:	ee73 3aea 	vsub.f32	s7, s7, s21
 8003f46:	ee78 8a89 	vadd.f32	s17, s17, s18
 8003f4a:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8003f4e:	ee3b aaca 	vsub.f32	s20, s23, s20
 8003f52:	ee34 4a67 	vsub.f32	s8, s8, s15
 8003f56:	ee76 6acb 	vsub.f32	s13, s13, s22
 8003f5a:	ee36 6a48 	vsub.f32	s12, s12, s16
 8003f5e:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8003f62:	ed00 7a02 	vstr	s14, [r0, #-8]
 8003f66:	ed40 3a01 	vstr	s7, [r0, #-4]
 8003f6a:	edc1 8a01 	vstr	s17, [r1, #4]
 8003f6e:	ed81 aa02 	vstr	s20, [r1, #8]
 8003f72:	ed59 3a04 	vldr	s7, [r9, #-16]
 8003f76:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8003f7a:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8003f7e:	ed59 6a03 	vldr	s13, [r9, #-12]
 8003f82:	ee34 4a61 	vsub.f32	s8, s8, s3
 8003f86:	ee36 6a41 	vsub.f32	s12, s12, s2
 8003f8a:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8003f8e:	ee66 9a26 	vmul.f32	s19, s12, s13
 8003f92:	ee24 9a23 	vmul.f32	s18, s8, s7
 8003f96:	ee26 6a23 	vmul.f32	s12, s12, s7
 8003f9a:	ee24 4a26 	vmul.f32	s8, s8, s13
 8003f9e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003fa2:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8003fa6:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8003faa:	ee36 6a44 	vsub.f32	s12, s12, s8
 8003fae:	ee37 7a64 	vsub.f32	s14, s14, s9
 8003fb2:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8003fb6:	ee79 3a29 	vadd.f32	s7, s18, s19
 8003fba:	ee75 6a60 	vsub.f32	s13, s10, s1
 8003fbe:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8003fc2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003fc6:	ed45 3a02 	vstr	s7, [r5, #-8]
 8003fca:	ed05 6a01 	vstr	s12, [r5, #-4]
 8003fce:	ed84 7a01 	vstr	s14, [r4, #4]
 8003fd2:	ed84 4a02 	vstr	s8, [r4, #8]
 8003fd6:	ee35 6a81 	vadd.f32	s12, s11, s2
 8003fda:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8003fde:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 8003fe2:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 8003fe6:	ee33 3a62 	vsub.f32	s6, s6, s5
 8003fea:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8003fee:	ee67 2a26 	vmul.f32	s5, s14, s13
 8003ff2:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8003ff6:	ee26 5a25 	vmul.f32	s10, s12, s11
 8003ffa:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003ffe:	ee26 6a26 	vmul.f32	s12, s12, s13
 8004002:	ee27 7a25 	vmul.f32	s14, s14, s11
 8004006:	ee63 6a26 	vmul.f32	s13, s6, s13
 800400a:	ee23 3a25 	vmul.f32	s6, s6, s11
 800400e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004012:	ee75 5a24 	vadd.f32	s11, s10, s9
 8004016:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800401a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800401e:	f1bb 0b01 	subs.w	fp, fp, #1
 8004022:	ed42 5a02 	vstr	s11, [r2, #-8]
 8004026:	ed42 7a01 	vstr	s15, [r2, #-4]
 800402a:	f10e 0e08 	add.w	lr, lr, #8
 800402e:	ed83 3a02 	vstr	s6, [r3, #8]
 8004032:	ed83 7a01 	vstr	s14, [r3, #4]
 8004036:	f1ac 0c08 	sub.w	ip, ip, #8
 800403a:	f10a 0a08 	add.w	sl, sl, #8
 800403e:	f100 0008 	add.w	r0, r0, #8
 8004042:	f1a1 0108 	sub.w	r1, r1, #8
 8004046:	f109 0910 	add.w	r9, r9, #16
 800404a:	f105 0508 	add.w	r5, r5, #8
 800404e:	f1a4 0408 	sub.w	r4, r4, #8
 8004052:	f108 0818 	add.w	r8, r8, #24
 8004056:	f102 0208 	add.w	r2, r2, #8
 800405a:	f1a3 0308 	sub.w	r3, r3, #8
 800405e:	f47f aefc 	bne.w	8003e5a <arm_cfft_radix8by4_f32+0x12e>
 8004062:	9907      	ldr	r1, [sp, #28]
 8004064:	9800      	ldr	r0, [sp, #0]
 8004066:	00cb      	lsls	r3, r1, #3
 8004068:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800406c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8004070:	9100      	str	r1, [sp, #0]
 8004072:	9904      	ldr	r1, [sp, #16]
 8004074:	4419      	add	r1, r3
 8004076:	9104      	str	r1, [sp, #16]
 8004078:	9903      	ldr	r1, [sp, #12]
 800407a:	4419      	add	r1, r3
 800407c:	9103      	str	r1, [sp, #12]
 800407e:	9906      	ldr	r1, [sp, #24]
 8004080:	4419      	add	r1, r3
 8004082:	9106      	str	r1, [sp, #24]
 8004084:	9905      	ldr	r1, [sp, #20]
 8004086:	441f      	add	r7, r3
 8004088:	4419      	add	r1, r3
 800408a:	9b02      	ldr	r3, [sp, #8]
 800408c:	9105      	str	r1, [sp, #20]
 800408e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004092:	9302      	str	r3, [sp, #8]
 8004094:	9904      	ldr	r1, [sp, #16]
 8004096:	9805      	ldr	r0, [sp, #20]
 8004098:	ed91 4a00 	vldr	s8, [r1]
 800409c:	edd0 6a00 	vldr	s13, [r0]
 80040a0:	9b06      	ldr	r3, [sp, #24]
 80040a2:	ed97 3a00 	vldr	s6, [r7]
 80040a6:	edd3 7a00 	vldr	s15, [r3]
 80040aa:	edd0 4a01 	vldr	s9, [r0, #4]
 80040ae:	edd1 3a01 	vldr	s7, [r1, #4]
 80040b2:	ed97 2a01 	vldr	s4, [r7, #4]
 80040b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80040ba:	9a03      	ldr	r2, [sp, #12]
 80040bc:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80040c0:	ee34 6a26 	vadd.f32	s12, s8, s13
 80040c4:	ee73 5aa4 	vadd.f32	s11, s7, s9
 80040c8:	ee37 5a86 	vadd.f32	s10, s15, s12
 80040cc:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80040d0:	ee35 5a03 	vadd.f32	s10, s10, s6
 80040d4:	ee74 6a66 	vsub.f32	s13, s8, s13
 80040d8:	ed81 5a00 	vstr	s10, [r1]
 80040dc:	ed93 5a01 	vldr	s10, [r3, #4]
 80040e0:	edd7 4a01 	vldr	s9, [r7, #4]
 80040e4:	ee35 5a85 	vadd.f32	s10, s11, s10
 80040e8:	ee37 4a26 	vadd.f32	s8, s14, s13
 80040ec:	ee35 5a24 	vadd.f32	s10, s10, s9
 80040f0:	ee73 4ae7 	vsub.f32	s9, s7, s15
 80040f4:	ed81 5a01 	vstr	s10, [r1, #4]
 80040f8:	edd2 1a00 	vldr	s3, [r2]
 80040fc:	edd2 2a01 	vldr	s5, [r2, #4]
 8004100:	ee34 5a83 	vadd.f32	s10, s9, s6
 8004104:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004108:	ee36 6a67 	vsub.f32	s12, s12, s15
 800410c:	ee64 4a21 	vmul.f32	s9, s8, s3
 8004110:	ee24 4a22 	vmul.f32	s8, s8, s5
 8004114:	ee65 2a22 	vmul.f32	s5, s10, s5
 8004118:	ee25 5a21 	vmul.f32	s10, s10, s3
 800411c:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8004120:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004124:	edc3 2a00 	vstr	s5, [r3]
 8004128:	ed83 5a01 	vstr	s10, [r3, #4]
 800412c:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8004130:	9b00      	ldr	r3, [sp, #0]
 8004132:	ee36 6a43 	vsub.f32	s12, s12, s6
 8004136:	ed93 4a01 	vldr	s8, [r3, #4]
 800413a:	ed93 5a00 	vldr	s10, [r3]
 800413e:	9b02      	ldr	r3, [sp, #8]
 8004140:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8004144:	ee66 4a05 	vmul.f32	s9, s12, s10
 8004148:	ee25 5a85 	vmul.f32	s10, s11, s10
 800414c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004150:	ee65 5a84 	vmul.f32	s11, s11, s8
 8004154:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004158:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800415c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8004160:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004164:	ed80 6a01 	vstr	s12, [r0, #4]
 8004168:	edc0 5a00 	vstr	s11, [r0]
 800416c:	edd3 5a01 	vldr	s11, [r3, #4]
 8004170:	edd3 6a00 	vldr	s13, [r3]
 8004174:	ee37 7a02 	vadd.f32	s14, s14, s4
 8004178:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800417c:	ee27 6a26 	vmul.f32	s12, s14, s13
 8004180:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004184:	ee27 7a25 	vmul.f32	s14, s14, s11
 8004188:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800418c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004190:	ee76 7a27 	vadd.f32	s15, s12, s15
 8004194:	ed87 7a01 	vstr	s14, [r7, #4]
 8004198:	edc7 7a00 	vstr	s15, [r7]
 800419c:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 80041a0:	4621      	mov	r1, r4
 80041a2:	686a      	ldr	r2, [r5, #4]
 80041a4:	2304      	movs	r3, #4
 80041a6:	f000 fce3 	bl	8004b70 <arm_radix8_butterfly_f32>
 80041aa:	4630      	mov	r0, r6
 80041ac:	4621      	mov	r1, r4
 80041ae:	686a      	ldr	r2, [r5, #4]
 80041b0:	2304      	movs	r3, #4
 80041b2:	f000 fcdd 	bl	8004b70 <arm_radix8_butterfly_f32>
 80041b6:	9808      	ldr	r0, [sp, #32]
 80041b8:	686a      	ldr	r2, [r5, #4]
 80041ba:	4621      	mov	r1, r4
 80041bc:	2304      	movs	r3, #4
 80041be:	f000 fcd7 	bl	8004b70 <arm_radix8_butterfly_f32>
 80041c2:	686a      	ldr	r2, [r5, #4]
 80041c4:	9801      	ldr	r0, [sp, #4]
 80041c6:	4621      	mov	r1, r4
 80041c8:	2304      	movs	r3, #4
 80041ca:	b00d      	add	sp, #52	; 0x34
 80041cc:	ecbd 8b0a 	vpop	{d8-d12}
 80041d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d4:	f000 bccc 	b.w	8004b70 <arm_radix8_butterfly_f32>

080041d8 <arm_cfft_f32>:
 80041d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041dc:	2a01      	cmp	r2, #1
 80041de:	4606      	mov	r6, r0
 80041e0:	4617      	mov	r7, r2
 80041e2:	460c      	mov	r4, r1
 80041e4:	4698      	mov	r8, r3
 80041e6:	8805      	ldrh	r5, [r0, #0]
 80041e8:	d056      	beq.n	8004298 <arm_cfft_f32+0xc0>
 80041ea:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80041ee:	d063      	beq.n	80042b8 <arm_cfft_f32+0xe0>
 80041f0:	d916      	bls.n	8004220 <arm_cfft_f32+0x48>
 80041f2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80041f6:	d01a      	beq.n	800422e <arm_cfft_f32+0x56>
 80041f8:	d947      	bls.n	800428a <arm_cfft_f32+0xb2>
 80041fa:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80041fe:	d05b      	beq.n	80042b8 <arm_cfft_f32+0xe0>
 8004200:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8004204:	d105      	bne.n	8004212 <arm_cfft_f32+0x3a>
 8004206:	2301      	movs	r3, #1
 8004208:	6872      	ldr	r2, [r6, #4]
 800420a:	4629      	mov	r1, r5
 800420c:	4620      	mov	r0, r4
 800420e:	f000 fcaf 	bl	8004b70 <arm_radix8_butterfly_f32>
 8004212:	f1b8 0f00 	cmp.w	r8, #0
 8004216:	d111      	bne.n	800423c <arm_cfft_f32+0x64>
 8004218:	2f01      	cmp	r7, #1
 800421a:	d016      	beq.n	800424a <arm_cfft_f32+0x72>
 800421c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004220:	2d20      	cmp	r5, #32
 8004222:	d049      	beq.n	80042b8 <arm_cfft_f32+0xe0>
 8004224:	d935      	bls.n	8004292 <arm_cfft_f32+0xba>
 8004226:	2d40      	cmp	r5, #64	; 0x40
 8004228:	d0ed      	beq.n	8004206 <arm_cfft_f32+0x2e>
 800422a:	2d80      	cmp	r5, #128	; 0x80
 800422c:	d1f1      	bne.n	8004212 <arm_cfft_f32+0x3a>
 800422e:	4621      	mov	r1, r4
 8004230:	4630      	mov	r0, r6
 8004232:	f7ff fcab 	bl	8003b8c <arm_cfft_radix8by2_f32>
 8004236:	f1b8 0f00 	cmp.w	r8, #0
 800423a:	d0ed      	beq.n	8004218 <arm_cfft_f32+0x40>
 800423c:	68b2      	ldr	r2, [r6, #8]
 800423e:	89b1      	ldrh	r1, [r6, #12]
 8004240:	4620      	mov	r0, r4
 8004242:	f000 f841 	bl	80042c8 <arm_bitreversal_32>
 8004246:	2f01      	cmp	r7, #1
 8004248:	d1e8      	bne.n	800421c <arm_cfft_f32+0x44>
 800424a:	ee07 5a90 	vmov	s15, r5
 800424e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004252:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004256:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800425a:	2d00      	cmp	r5, #0
 800425c:	d0de      	beq.n	800421c <arm_cfft_f32+0x44>
 800425e:	f104 0108 	add.w	r1, r4, #8
 8004262:	2300      	movs	r3, #0
 8004264:	3301      	adds	r3, #1
 8004266:	429d      	cmp	r5, r3
 8004268:	f101 0108 	add.w	r1, r1, #8
 800426c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8004270:	ed51 7a03 	vldr	s15, [r1, #-12]
 8004274:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004278:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800427c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8004280:	ed41 7a03 	vstr	s15, [r1, #-12]
 8004284:	d1ee      	bne.n	8004264 <arm_cfft_f32+0x8c>
 8004286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800428a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800428e:	d0ba      	beq.n	8004206 <arm_cfft_f32+0x2e>
 8004290:	e7bf      	b.n	8004212 <arm_cfft_f32+0x3a>
 8004292:	2d10      	cmp	r5, #16
 8004294:	d0cb      	beq.n	800422e <arm_cfft_f32+0x56>
 8004296:	e7bc      	b.n	8004212 <arm_cfft_f32+0x3a>
 8004298:	b19d      	cbz	r5, 80042c2 <arm_cfft_f32+0xea>
 800429a:	f101 030c 	add.w	r3, r1, #12
 800429e:	2200      	movs	r2, #0
 80042a0:	ed53 7a02 	vldr	s15, [r3, #-8]
 80042a4:	3201      	adds	r2, #1
 80042a6:	eef1 7a67 	vneg.f32	s15, s15
 80042aa:	4295      	cmp	r5, r2
 80042ac:	ed43 7a02 	vstr	s15, [r3, #-8]
 80042b0:	f103 0308 	add.w	r3, r3, #8
 80042b4:	d1f4      	bne.n	80042a0 <arm_cfft_f32+0xc8>
 80042b6:	e798      	b.n	80041ea <arm_cfft_f32+0x12>
 80042b8:	4621      	mov	r1, r4
 80042ba:	4630      	mov	r0, r6
 80042bc:	f7ff fd36 	bl	8003d2c <arm_cfft_radix8by4_f32>
 80042c0:	e7a7      	b.n	8004212 <arm_cfft_f32+0x3a>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0aa      	beq.n	800421c <arm_cfft_f32+0x44>
 80042c6:	e7b9      	b.n	800423c <arm_cfft_f32+0x64>

080042c8 <arm_bitreversal_32>:
 80042c8:	b1e9      	cbz	r1, 8004306 <arm_bitreversal_32+0x3e>
 80042ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042cc:	2500      	movs	r5, #0
 80042ce:	f102 0e02 	add.w	lr, r2, #2
 80042d2:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 80042d6:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80042da:	08a4      	lsrs	r4, r4, #2
 80042dc:	089b      	lsrs	r3, r3, #2
 80042de:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 80042e2:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 80042e6:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 80042ea:	00a6      	lsls	r6, r4, #2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 80042f2:	3304      	adds	r3, #4
 80042f4:	1d34      	adds	r4, r6, #4
 80042f6:	3502      	adds	r5, #2
 80042f8:	58c6      	ldr	r6, [r0, r3]
 80042fa:	5907      	ldr	r7, [r0, r4]
 80042fc:	50c7      	str	r7, [r0, r3]
 80042fe:	428d      	cmp	r5, r1
 8004300:	5106      	str	r6, [r0, r4]
 8004302:	d3e6      	bcc.n	80042d2 <arm_bitreversal_32+0xa>
 8004304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004306:	4770      	bx	lr

08004308 <arm_correlate_f32>:
 8004308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800430c:	4299      	cmp	r1, r3
 800430e:	b08d      	sub	sp, #52	; 0x34
 8004310:	f0c0 824c 	bcc.w	80047ac <arm_correlate_f32+0x4a4>
 8004314:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8004316:	eba1 0c03 	sub.w	ip, r1, r3
 800431a:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 800431e:	f04f 0e04 	mov.w	lr, #4
 8004322:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 8004326:	3101      	adds	r1, #1
 8004328:	1ac9      	subs	r1, r1, r3
 800432a:	3c01      	subs	r4, #1
 800432c:	1e5e      	subs	r6, r3, #1
 800432e:	9102      	str	r1, [sp, #8]
 8004330:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8004334:	f000 8294 	beq.w	8004860 <arm_correlate_f32+0x558>
 8004338:	eddf 7a53 	vldr	s15, [pc, #332]	; 8004488 <arm_correlate_f32+0x180>
 800433c:	f1a1 0804 	sub.w	r8, r1, #4
 8004340:	46e1      	mov	r9, ip
 8004342:	4605      	mov	r5, r0
 8004344:	2401      	movs	r4, #1
 8004346:	f014 0703 	ands.w	r7, r4, #3
 800434a:	d01b      	beq.n	8004384 <arm_correlate_f32+0x7c>
 800434c:	ed91 7a00 	vldr	s14, [r1]
 8004350:	edd5 6a00 	vldr	s13, [r5]
 8004354:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004358:	3f01      	subs	r7, #1
 800435a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800435e:	d011      	beq.n	8004384 <arm_correlate_f32+0x7c>
 8004360:	ed91 7a01 	vldr	s14, [r1, #4]
 8004364:	edd5 6a01 	vldr	s13, [r5, #4]
 8004368:	ee27 7a26 	vmul.f32	s14, s14, s13
 800436c:	2f01      	cmp	r7, #1
 800436e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004372:	d007      	beq.n	8004384 <arm_correlate_f32+0x7c>
 8004374:	ed95 7a02 	vldr	s14, [r5, #8]
 8004378:	edd1 6a02 	vldr	s13, [r1, #8]
 800437c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004380:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004384:	1c67      	adds	r7, r4, #1
 8004386:	42bb      	cmp	r3, r7
 8004388:	edc9 7a00 	vstr	s15, [r9]
 800438c:	4641      	mov	r1, r8
 800438e:	44f1      	add	r9, lr
 8004390:	d03a      	beq.n	8004408 <arm_correlate_f32+0x100>
 8004392:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 8004396:	f000 8267 	beq.w	8004868 <arm_correlate_f32+0x560>
 800439a:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 800439e:	f100 0110 	add.w	r1, r0, #16
 80043a2:	eddf 7a39 	vldr	s15, [pc, #228]	; 8004488 <arm_correlate_f32+0x180>
 80043a6:	eb01 050a 	add.w	r5, r1, sl
 80043aa:	f108 0410 	add.w	r4, r8, #16
 80043ae:	ed11 7a04 	vldr	s14, [r1, #-16]
 80043b2:	ed54 3a04 	vldr	s7, [r4, #-16]
 80043b6:	ed11 6a03 	vldr	s12, [r1, #-12]
 80043ba:	ed14 4a03 	vldr	s8, [r4, #-12]
 80043be:	ed51 6a02 	vldr	s13, [r1, #-8]
 80043c2:	ed54 4a02 	vldr	s9, [r4, #-8]
 80043c6:	ed51 5a01 	vldr	s11, [r1, #-4]
 80043ca:	ed14 5a01 	vldr	s10, [r4, #-4]
 80043ce:	ee27 7a23 	vmul.f32	s14, s14, s7
 80043d2:	ee26 6a04 	vmul.f32	s12, s12, s8
 80043d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043da:	ee26 7aa4 	vmul.f32	s14, s13, s9
 80043de:	ee76 7a27 	vadd.f32	s15, s12, s15
 80043e2:	ee65 6a85 	vmul.f32	s13, s11, s10
 80043e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043ea:	3110      	adds	r1, #16
 80043ec:	428d      	cmp	r5, r1
 80043ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043f2:	f104 0410 	add.w	r4, r4, #16
 80043f6:	d1da      	bne.n	80043ae <arm_correlate_f32+0xa6>
 80043f8:	eb00 050a 	add.w	r5, r0, sl
 80043fc:	eb08 010a 	add.w	r1, r8, sl
 8004400:	f1a8 0804 	sub.w	r8, r8, #4
 8004404:	463c      	mov	r4, r7
 8004406:	e79e      	b.n	8004346 <arm_correlate_f32+0x3e>
 8004408:	2b03      	cmp	r3, #3
 800440a:	fb0e cc04 	mla	ip, lr, r4, ip
 800440e:	f240 81dd 	bls.w	80047cc <arm_correlate_f32+0x4c4>
 8004412:	9b02      	ldr	r3, [sp, #8]
 8004414:	0899      	lsrs	r1, r3, #2
 8004416:	9103      	str	r1, [sp, #12]
 8004418:	f000 8220 	beq.w	800485c <arm_correlate_f32+0x554>
 800441c:	08bb      	lsrs	r3, r7, #2
 800441e:	f007 0403 	and.w	r4, r7, #3
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	f103 0b0c 	add.w	fp, r3, #12
 800442a:	18d5      	adds	r5, r2, r3
 800442c:	1e63      	subs	r3, r4, #1
 800442e:	0109      	lsls	r1, r1, #4
 8004430:	9306      	str	r3, [sp, #24]
 8004432:	f100 080c 	add.w	r8, r0, #12
 8004436:	9401      	str	r4, [sp, #4]
 8004438:	9104      	str	r1, [sp, #16]
 800443a:	ea4f 048e 	mov.w	r4, lr, lsl #2
 800443e:	4441      	add	r1, r8
 8004440:	f102 0310 	add.w	r3, r2, #16
 8004444:	e9cd 6009 	strd	r6, r0, [sp, #36]	; 0x24
 8004448:	9e06      	ldr	r6, [sp, #24]
 800444a:	9405      	str	r4, [sp, #20]
 800444c:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 8004450:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 8004454:	46e1      	mov	r9, ip
 8004456:	4483      	add	fp, r0
 8004458:	460f      	mov	r7, r1
 800445a:	920b      	str	r2, [sp, #44]	; 0x2c
 800445c:	469c      	mov	ip, r3
 800445e:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8004488 <arm_correlate_f32+0x180>
 8004462:	ed58 1a03 	vldr	s3, [r8, #-12]
 8004466:	ed18 2a02 	vldr	s4, [r8, #-8]
 800446a:	ed58 2a01 	vldr	s5, [r8, #-4]
 800446e:	ed98 0a00 	vldr	s0, [r8]
 8004472:	9900      	ldr	r1, [sp, #0]
 8004474:	eef0 5a46 	vmov.f32	s11, s12
 8004478:	eeb0 5a46 	vmov.f32	s10, s12
 800447c:	eef0 4a46 	vmov.f32	s9, s12
 8004480:	4663      	mov	r3, ip
 8004482:	4642      	mov	r2, r8
 8004484:	e005      	b.n	8004492 <arm_correlate_f32+0x18a>
 8004486:	bf00      	nop
 8004488:	00000000 	.word	0x00000000
 800448c:	ed90 0a04 	vldr	s0, [r0, #16]
 8004490:	3210      	adds	r2, #16
 8004492:	ed53 6a04 	vldr	s13, [r3, #-16]
 8004496:	ed13 7a03 	vldr	s14, [r3, #-12]
 800449a:	ed53 7a02 	vldr	s15, [r3, #-8]
 800449e:	ed13 1a01 	vldr	s2, [r3, #-4]
 80044a2:	ee62 3a26 	vmul.f32	s7, s4, s13
 80044a6:	ee22 4aa6 	vmul.f32	s8, s5, s13
 80044aa:	ee61 0aa6 	vmul.f32	s1, s3, s13
 80044ae:	edd2 1a01 	vldr	s3, [r2, #4]
 80044b2:	ee66 6a80 	vmul.f32	s13, s13, s0
 80044b6:	ee22 3a07 	vmul.f32	s6, s4, s14
 80044ba:	ee33 5a85 	vadd.f32	s10, s7, s10
 80044be:	ee74 5a25 	vadd.f32	s11, s8, s11
 80044c2:	ee62 3a87 	vmul.f32	s7, s5, s14
 80044c6:	ee20 4a07 	vmul.f32	s8, s0, s14
 80044ca:	ee70 4aa4 	vadd.f32	s9, s1, s9
 80044ce:	ee36 6a86 	vadd.f32	s12, s13, s12
 80044d2:	ed92 2a02 	vldr	s4, [r2, #8]
 80044d6:	ee27 7a21 	vmul.f32	s14, s14, s3
 80044da:	ee73 3a85 	vadd.f32	s7, s7, s10
 80044de:	ee37 7a06 	vadd.f32	s14, s14, s12
 80044e2:	ee20 5a27 	vmul.f32	s10, s0, s15
 80044e6:	ee33 3a24 	vadd.f32	s6, s6, s9
 80044ea:	ee34 4a25 	vadd.f32	s8, s8, s11
 80044ee:	ee62 4aa7 	vmul.f32	s9, s5, s15
 80044f2:	ee61 5aa7 	vmul.f32	s11, s3, s15
 80044f6:	edd2 2a03 	vldr	s5, [r2, #12]
 80044fa:	ee67 7a82 	vmul.f32	s15, s15, s4
 80044fe:	ee35 5a23 	vadd.f32	s10, s10, s7
 8004502:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004506:	ee74 4a83 	vadd.f32	s9, s9, s6
 800450a:	ee20 0a01 	vmul.f32	s0, s0, s2
 800450e:	ee61 3a81 	vmul.f32	s7, s3, s2
 8004512:	ee75 5a84 	vadd.f32	s11, s11, s8
 8004516:	ee22 7a01 	vmul.f32	s14, s4, s2
 800451a:	ee21 6a22 	vmul.f32	s12, s2, s5
 800451e:	3901      	subs	r1, #1
 8004520:	f103 0310 	add.w	r3, r3, #16
 8004524:	ee70 4a24 	vadd.f32	s9, s0, s9
 8004528:	ee33 5a85 	vadd.f32	s10, s7, s10
 800452c:	ee77 5a25 	vadd.f32	s11, s14, s11
 8004530:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004534:	4610      	mov	r0, r2
 8004536:	d1a9      	bne.n	800448c <arm_correlate_f32+0x184>
 8004538:	9b01      	ldr	r3, [sp, #4]
 800453a:	b3f3      	cbz	r3, 80045ba <arm_correlate_f32+0x2b2>
 800453c:	edd5 7a00 	vldr	s15, [r5]
 8004540:	ed9b 4a00 	vldr	s8, [fp]
 8004544:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8004548:	ee62 3a27 	vmul.f32	s7, s4, s15
 800454c:	ee22 7aa7 	vmul.f32	s14, s5, s15
 8004550:	ee64 7a27 	vmul.f32	s15, s8, s15
 8004554:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8004558:	ee35 5a23 	vadd.f32	s10, s10, s7
 800455c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8004560:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004564:	b34e      	cbz	r6, 80045ba <arm_correlate_f32+0x2b2>
 8004566:	edd5 7a01 	vldr	s15, [r5, #4]
 800456a:	eddb 6a01 	vldr	s13, [fp, #4]
 800456e:	ee22 7a27 	vmul.f32	s14, s4, s15
 8004572:	ee22 3aa7 	vmul.f32	s6, s5, s15
 8004576:	ee67 3a84 	vmul.f32	s7, s15, s8
 800457a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800457e:	2e01      	cmp	r6, #1
 8004580:	ee74 4a87 	vadd.f32	s9, s9, s14
 8004584:	ee35 5a03 	vadd.f32	s10, s10, s6
 8004588:	ee75 5aa3 	vadd.f32	s11, s11, s7
 800458c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004590:	d013      	beq.n	80045ba <arm_correlate_f32+0x2b2>
 8004592:	ed95 7a02 	vldr	s14, [r5, #8]
 8004596:	eddb 3a02 	vldr	s7, [fp, #8]
 800459a:	ee62 7a87 	vmul.f32	s15, s5, s14
 800459e:	ee27 4a04 	vmul.f32	s8, s14, s8
 80045a2:	ee67 6a26 	vmul.f32	s13, s14, s13
 80045a6:	ee27 7a23 	vmul.f32	s14, s14, s7
 80045aa:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80045ae:	ee35 5a04 	vadd.f32	s10, s10, s8
 80045b2:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80045b6:	ee36 6a07 	vadd.f32	s12, s12, s14
 80045ba:	f108 0810 	add.w	r8, r8, #16
 80045be:	eb09 020e 	add.w	r2, r9, lr
 80045c2:	eb0a 030e 	add.w	r3, sl, lr
 80045c6:	4547      	cmp	r7, r8
 80045c8:	edc9 4a00 	vstr	s9, [r9]
 80045cc:	f10b 0b10 	add.w	fp, fp, #16
 80045d0:	ed82 5a00 	vstr	s10, [r2]
 80045d4:	44a1      	add	r9, r4
 80045d6:	edca 5a00 	vstr	s11, [sl]
 80045da:	ed83 6a00 	vstr	s12, [r3]
 80045de:	44a2      	add	sl, r4
 80045e0:	f47f af3d 	bne.w	800445e <arm_correlate_f32+0x156>
 80045e4:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 80045e8:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	; 0x24
 80045ec:	9b03      	ldr	r3, [sp, #12]
 80045ee:	9c05      	ldr	r4, [sp, #20]
 80045f0:	9904      	ldr	r1, [sp, #16]
 80045f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80045f4:	fb04 cc03 	mla	ip, r4, r3, ip
 80045f8:	4401      	add	r1, r0
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	460d      	mov	r5, r1
 80045fe:	9303      	str	r3, [sp, #12]
 8004600:	9b02      	ldr	r3, [sp, #8]
 8004602:	f013 0303 	ands.w	r3, r3, #3
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	d071      	beq.n	80046ee <arm_correlate_f32+0x3e6>
 800460a:	9903      	ldr	r1, [sp, #12]
 800460c:	9205      	str	r2, [sp, #20]
 800460e:	f007 0403 	and.w	r4, r7, #3
 8004612:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 8004616:	1c4f      	adds	r7, r1, #1
 8004618:	1859      	adds	r1, r3, r1
 800461a:	1d03      	adds	r3, r0, #4
 800461c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004620:	9400      	str	r4, [sp, #0]
 8004622:	f102 0110 	add.w	r1, r2, #16
 8004626:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 800462a:	3c01      	subs	r4, #1
 800462c:	e9cd 6003 	strd	r6, r0, [sp, #12]
 8004630:	eb02 090a 	add.w	r9, r2, sl
 8004634:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8004638:	46e0      	mov	r8, ip
 800463a:	4618      	mov	r0, r3
 800463c:	460e      	mov	r6, r1
 800463e:	4622      	mov	r2, r4
 8004640:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 8004488 <arm_correlate_f32+0x180>
 8004644:	f105 0110 	add.w	r1, r5, #16
 8004648:	4633      	mov	r3, r6
 800464a:	465c      	mov	r4, fp
 800464c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8004650:	ed53 3a04 	vldr	s7, [r3, #-16]
 8004654:	ed11 6a03 	vldr	s12, [r1, #-12]
 8004658:	ed13 4a03 	vldr	s8, [r3, #-12]
 800465c:	ed51 6a02 	vldr	s13, [r1, #-8]
 8004660:	ed53 4a02 	vldr	s9, [r3, #-8]
 8004664:	ed51 5a01 	vldr	s11, [r1, #-4]
 8004668:	ed13 5a01 	vldr	s10, [r3, #-4]
 800466c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004670:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004678:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800467c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8004680:	ee65 6a85 	vmul.f32	s13, s11, s10
 8004684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004688:	3c01      	subs	r4, #1
 800468a:	f101 0110 	add.w	r1, r1, #16
 800468e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004692:	f103 0310 	add.w	r3, r3, #16
 8004696:	d1d9      	bne.n	800464c <arm_correlate_f32+0x344>
 8004698:	9b00      	ldr	r3, [sp, #0]
 800469a:	4455      	add	r5, sl
 800469c:	b1d3      	cbz	r3, 80046d4 <arm_correlate_f32+0x3cc>
 800469e:	ed99 7a00 	vldr	s14, [r9]
 80046a2:	edd5 6a00 	vldr	s13, [r5]
 80046a6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80046aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046ae:	b18a      	cbz	r2, 80046d4 <arm_correlate_f32+0x3cc>
 80046b0:	ed99 7a01 	vldr	s14, [r9, #4]
 80046b4:	edd5 6a01 	vldr	s13, [r5, #4]
 80046b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80046bc:	2a01      	cmp	r2, #1
 80046be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046c2:	d007      	beq.n	80046d4 <arm_correlate_f32+0x3cc>
 80046c4:	ed95 7a02 	vldr	s14, [r5, #8]
 80046c8:	edd9 6a02 	vldr	s13, [r9, #8]
 80046cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80046d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046d4:	463d      	mov	r5, r7
 80046d6:	3704      	adds	r7, #4
 80046d8:	42b8      	cmp	r0, r7
 80046da:	edc8 7a00 	vstr	s15, [r8]
 80046de:	44f0      	add	r8, lr
 80046e0:	d1ae      	bne.n	8004640 <arm_correlate_f32+0x338>
 80046e2:	9b01      	ldr	r3, [sp, #4]
 80046e4:	9a05      	ldr	r2, [sp, #20]
 80046e6:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 80046ea:	fb0e cc03 	mla	ip, lr, r3, ip
 80046ee:	9b02      	ldr	r3, [sp, #8]
 80046f0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80046f4:	08b5      	lsrs	r5, r6, #2
 80046f6:	ed5f 5a9c 	vldr	s11, [pc, #-624]	; 8004488 <arm_correlate_f32+0x180>
 80046fa:	f000 80ac 	beq.w	8004856 <arm_correlate_f32+0x54e>
 80046fe:	f100 0110 	add.w	r1, r0, #16
 8004702:	f102 0310 	add.w	r3, r2, #16
 8004706:	462c      	mov	r4, r5
 8004708:	ed51 6a04 	vldr	s13, [r1, #-16]
 800470c:	ed53 3a04 	vldr	s7, [r3, #-16]
 8004710:	ed11 7a03 	vldr	s14, [r1, #-12]
 8004714:	ed13 4a03 	vldr	s8, [r3, #-12]
 8004718:	ed51 7a02 	vldr	s15, [r1, #-8]
 800471c:	ed53 4a02 	vldr	s9, [r3, #-8]
 8004720:	ed11 6a01 	vldr	s12, [r1, #-4]
 8004724:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004728:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800472c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8004730:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8004734:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8004738:	ee37 7a26 	vadd.f32	s14, s14, s13
 800473c:	ee66 6a05 	vmul.f32	s13, s12, s10
 8004740:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004744:	3c01      	subs	r4, #1
 8004746:	f101 0110 	add.w	r1, r1, #16
 800474a:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800474e:	f103 0310 	add.w	r3, r3, #16
 8004752:	d1d9      	bne.n	8004708 <arm_correlate_f32+0x400>
 8004754:	012d      	lsls	r5, r5, #4
 8004756:	1941      	adds	r1, r0, r5
 8004758:	4415      	add	r5, r2
 800475a:	f016 0303 	ands.w	r3, r6, #3
 800475e:	d01b      	beq.n	8004798 <arm_correlate_f32+0x490>
 8004760:	edd5 7a00 	vldr	s15, [r5]
 8004764:	ed91 7a00 	vldr	s14, [r1]
 8004768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800476c:	3b01      	subs	r3, #1
 800476e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8004772:	d011      	beq.n	8004798 <arm_correlate_f32+0x490>
 8004774:	edd5 7a01 	vldr	s15, [r5, #4]
 8004778:	ed91 7a01 	vldr	s14, [r1, #4]
 800477c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004780:	2b01      	cmp	r3, #1
 8004782:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8004786:	d007      	beq.n	8004798 <arm_correlate_f32+0x490>
 8004788:	edd1 7a02 	vldr	s15, [r1, #8]
 800478c:	ed95 7a02 	vldr	s14, [r5, #8]
 8004790:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004794:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8004798:	3e01      	subs	r6, #1
 800479a:	edcc 5a00 	vstr	s11, [ip]
 800479e:	f100 0004 	add.w	r0, r0, #4
 80047a2:	44f4      	add	ip, lr
 80047a4:	d1a6      	bne.n	80046f4 <arm_correlate_f32+0x3ec>
 80047a6:	b00d      	add	sp, #52	; 0x34
 80047a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ac:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 80047b0:	4606      	mov	r6, r0
 80047b2:	3c02      	subs	r4, #2
 80047b4:	4610      	mov	r0, r2
 80047b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80047b8:	440c      	add	r4, r1
 80047ba:	460d      	mov	r5, r1
 80047bc:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 80047c0:	4619      	mov	r1, r3
 80047c2:	4632      	mov	r2, r6
 80047c4:	f06f 0e03 	mvn.w	lr, #3
 80047c8:	462b      	mov	r3, r5
 80047ca:	e5aa      	b.n	8004322 <arm_correlate_f32+0x1a>
 80047cc:	9902      	ldr	r1, [sp, #8]
 80047ce:	2900      	cmp	r1, #0
 80047d0:	d090      	beq.n	80046f4 <arm_correlate_f32+0x3ec>
 80047d2:	9902      	ldr	r1, [sp, #8]
 80047d4:	ed1f 6ad4 	vldr	s12, [pc, #-848]	; 8004488 <arm_correlate_f32+0x180>
 80047d8:	ea4f 0881 	mov.w	r8, r1, lsl #2
 80047dc:	eb00 0708 	add.w	r7, r0, r8
 80047e0:	4601      	mov	r1, r0
 80047e2:	4665      	mov	r5, ip
 80047e4:	e020      	b.n	8004828 <arm_correlate_f32+0x520>
 80047e6:	edd2 7a00 	vldr	s15, [r2]
 80047ea:	ecb4 7a01 	vldmia	r4!, {s14}
 80047ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047f2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80047f6:	b18e      	cbz	r6, 800481c <arm_correlate_f32+0x514>
 80047f8:	ed92 7a01 	vldr	s14, [r2, #4]
 80047fc:	edd1 6a01 	vldr	s13, [r1, #4]
 8004800:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004804:	2b02      	cmp	r3, #2
 8004806:	ee77 7a87 	vadd.f32	s15, s15, s14
 800480a:	d007      	beq.n	800481c <arm_correlate_f32+0x514>
 800480c:	ed91 7a02 	vldr	s14, [r1, #8]
 8004810:	edd2 6a02 	vldr	s13, [r2, #8]
 8004814:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004818:	ee77 7a87 	vadd.f32	s15, s15, s14
 800481c:	42bc      	cmp	r4, r7
 800481e:	edc5 7a00 	vstr	s15, [r5]
 8004822:	4621      	mov	r1, r4
 8004824:	4475      	add	r5, lr
 8004826:	d00b      	beq.n	8004840 <arm_correlate_f32+0x538>
 8004828:	460c      	mov	r4, r1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1db      	bne.n	80047e6 <arm_correlate_f32+0x4de>
 800482e:	1d0c      	adds	r4, r1, #4
 8004830:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8004870 <arm_correlate_f32+0x568>
 8004834:	42bc      	cmp	r4, r7
 8004836:	edc5 7a00 	vstr	s15, [r5]
 800483a:	4621      	mov	r1, r4
 800483c:	4475      	add	r5, lr
 800483e:	d1f3      	bne.n	8004828 <arm_correlate_f32+0x520>
 8004840:	9b02      	ldr	r3, [sp, #8]
 8004842:	4440      	add	r0, r8
 8004844:	fb0e cc03 	mla	ip, lr, r3, ip
 8004848:	2e00      	cmp	r6, #0
 800484a:	d0ac      	beq.n	80047a6 <arm_correlate_f32+0x49e>
 800484c:	08b5      	lsrs	r5, r6, #2
 800484e:	eddf 5a08 	vldr	s11, [pc, #32]	; 8004870 <arm_correlate_f32+0x568>
 8004852:	f47f af54 	bne.w	80046fe <arm_correlate_f32+0x3f6>
 8004856:	4615      	mov	r5, r2
 8004858:	4601      	mov	r1, r0
 800485a:	e77e      	b.n	800475a <arm_correlate_f32+0x452>
 800485c:	4605      	mov	r5, r0
 800485e:	e6cf      	b.n	8004600 <arm_correlate_f32+0x2f8>
 8004860:	9902      	ldr	r1, [sp, #8]
 8004862:	2900      	cmp	r1, #0
 8004864:	d1b5      	bne.n	80047d2 <arm_correlate_f32+0x4ca>
 8004866:	e79e      	b.n	80047a6 <arm_correlate_f32+0x49e>
 8004868:	eddf 7a01 	vldr	s15, [pc, #4]	; 8004870 <arm_correlate_f32+0x568>
 800486c:	4605      	mov	r5, r0
 800486e:	e5c7      	b.n	8004400 <arm_correlate_f32+0xf8>
 8004870:	00000000 	.word	0x00000000

08004874 <arm_cmplx_mag_f32>:
 8004874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004878:	ed2d 8b02 	vpush	{d8}
 800487c:	0897      	lsrs	r7, r2, #2
 800487e:	b084      	sub	sp, #16
 8004880:	d077      	beq.n	8004972 <arm_cmplx_mag_f32+0xfe>
 8004882:	f04f 0800 	mov.w	r8, #0
 8004886:	f100 0420 	add.w	r4, r0, #32
 800488a:	f101 0510 	add.w	r5, r1, #16
 800488e:	463e      	mov	r6, r7
 8004890:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8004894:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8004898:	ee20 0a00 	vmul.f32	s0, s0, s0
 800489c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80048a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80048a4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80048a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ac:	f2c0 80c5 	blt.w	8004a3a <arm_cmplx_mag_f32+0x1c6>
 80048b0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80048b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80048bc:	f100 80cb 	bmi.w	8004a56 <arm_cmplx_mag_f32+0x1e2>
 80048c0:	ed05 8a04 	vstr	s16, [r5, #-16]
 80048c4:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 80048c8:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 80048cc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80048d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80048d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80048d8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80048dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048e0:	f2c0 80a8 	blt.w	8004a34 <arm_cmplx_mag_f32+0x1c0>
 80048e4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80048e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ec:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80048f0:	f100 80a8 	bmi.w	8004a44 <arm_cmplx_mag_f32+0x1d0>
 80048f4:	ed05 8a03 	vstr	s16, [r5, #-12]
 80048f8:	ed14 0a04 	vldr	s0, [r4, #-16]
 80048fc:	ed54 7a03 	vldr	s15, [r4, #-12]
 8004900:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004904:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004908:	ee30 0a27 	vadd.f32	s0, s0, s15
 800490c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004914:	f2c0 808b 	blt.w	8004a2e <arm_cmplx_mag_f32+0x1ba>
 8004918:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800491c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004920:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004924:	f100 80a9 	bmi.w	8004a7a <arm_cmplx_mag_f32+0x206>
 8004928:	ed05 8a02 	vstr	s16, [r5, #-8]
 800492c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8004930:	ed54 7a01 	vldr	s15, [r4, #-4]
 8004934:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004938:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800493c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004940:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004948:	db6e      	blt.n	8004a28 <arm_cmplx_mag_f32+0x1b4>
 800494a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800494e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004952:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004956:	f100 8087 	bmi.w	8004a68 <arm_cmplx_mag_f32+0x1f4>
 800495a:	ed05 8a01 	vstr	s16, [r5, #-4]
 800495e:	3e01      	subs	r6, #1
 8004960:	f104 0420 	add.w	r4, r4, #32
 8004964:	f105 0510 	add.w	r5, r5, #16
 8004968:	d192      	bne.n	8004890 <arm_cmplx_mag_f32+0x1c>
 800496a:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800496e:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8004972:	f012 0203 	ands.w	r2, r2, #3
 8004976:	d052      	beq.n	8004a1e <arm_cmplx_mag_f32+0x1aa>
 8004978:	ed90 0a00 	vldr	s0, [r0]
 800497c:	edd0 7a01 	vldr	s15, [r0, #4]
 8004980:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004984:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004988:	2300      	movs	r3, #0
 800498a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800498e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004996:	bfb8      	it	lt
 8004998:	600b      	strlt	r3, [r1, #0]
 800499a:	db08      	blt.n	80049ae <arm_cmplx_mag_f32+0x13a>
 800499c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80049a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80049a8:	d479      	bmi.n	8004a9e <arm_cmplx_mag_f32+0x22a>
 80049aa:	ed81 8a00 	vstr	s16, [r1]
 80049ae:	3a01      	subs	r2, #1
 80049b0:	d035      	beq.n	8004a1e <arm_cmplx_mag_f32+0x1aa>
 80049b2:	ed90 0a02 	vldr	s0, [r0, #8]
 80049b6:	edd0 7a03 	vldr	s15, [r0, #12]
 80049ba:	ee20 0a00 	vmul.f32	s0, s0, s0
 80049be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80049c2:	2300      	movs	r3, #0
 80049c4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80049c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80049cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d0:	bfb8      	it	lt
 80049d2:	604b      	strlt	r3, [r1, #4]
 80049d4:	db08      	blt.n	80049e8 <arm_cmplx_mag_f32+0x174>
 80049d6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80049da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049de:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80049e2:	d453      	bmi.n	8004a8c <arm_cmplx_mag_f32+0x218>
 80049e4:	ed81 8a01 	vstr	s16, [r1, #4]
 80049e8:	2a01      	cmp	r2, #1
 80049ea:	d018      	beq.n	8004a1e <arm_cmplx_mag_f32+0x1aa>
 80049ec:	ed90 0a04 	vldr	s0, [r0, #16]
 80049f0:	edd0 7a05 	vldr	s15, [r0, #20]
 80049f4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80049f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80049fc:	2300      	movs	r3, #0
 80049fe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004a02:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0a:	db19      	blt.n	8004a40 <arm_cmplx_mag_f32+0x1cc>
 8004a0c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a14:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004a18:	d44a      	bmi.n	8004ab0 <arm_cmplx_mag_f32+0x23c>
 8004a1a:	ed81 8a02 	vstr	s16, [r1, #8]
 8004a1e:	b004      	add	sp, #16
 8004a20:	ecbd 8b02 	vpop	{d8}
 8004a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a28:	f845 8c04 	str.w	r8, [r5, #-4]
 8004a2c:	e797      	b.n	800495e <arm_cmplx_mag_f32+0xea>
 8004a2e:	f845 8c08 	str.w	r8, [r5, #-8]
 8004a32:	e77b      	b.n	800492c <arm_cmplx_mag_f32+0xb8>
 8004a34:	f845 8c0c 	str.w	r8, [r5, #-12]
 8004a38:	e75e      	b.n	80048f8 <arm_cmplx_mag_f32+0x84>
 8004a3a:	f845 8c10 	str.w	r8, [r5, #-16]
 8004a3e:	e741      	b.n	80048c4 <arm_cmplx_mag_f32+0x50>
 8004a40:	608b      	str	r3, [r1, #8]
 8004a42:	e7ec      	b.n	8004a1e <arm_cmplx_mag_f32+0x1aa>
 8004a44:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004a48:	9001      	str	r0, [sp, #4]
 8004a4a:	f000 fc33 	bl	80052b4 <sqrtf>
 8004a4e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004a52:	9801      	ldr	r0, [sp, #4]
 8004a54:	e74e      	b.n	80048f4 <arm_cmplx_mag_f32+0x80>
 8004a56:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004a5a:	9001      	str	r0, [sp, #4]
 8004a5c:	f000 fc2a 	bl	80052b4 <sqrtf>
 8004a60:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004a64:	9801      	ldr	r0, [sp, #4]
 8004a66:	e72b      	b.n	80048c0 <arm_cmplx_mag_f32+0x4c>
 8004a68:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004a6c:	9001      	str	r0, [sp, #4]
 8004a6e:	f000 fc21 	bl	80052b4 <sqrtf>
 8004a72:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004a76:	9801      	ldr	r0, [sp, #4]
 8004a78:	e76f      	b.n	800495a <arm_cmplx_mag_f32+0xe6>
 8004a7a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004a7e:	9001      	str	r0, [sp, #4]
 8004a80:	f000 fc18 	bl	80052b4 <sqrtf>
 8004a84:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004a88:	9801      	ldr	r0, [sp, #4]
 8004a8a:	e74d      	b.n	8004928 <arm_cmplx_mag_f32+0xb4>
 8004a8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a90:	9201      	str	r2, [sp, #4]
 8004a92:	f000 fc0f 	bl	80052b4 <sqrtf>
 8004a96:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8004a9a:	9903      	ldr	r1, [sp, #12]
 8004a9c:	e7a2      	b.n	80049e4 <arm_cmplx_mag_f32+0x170>
 8004a9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004aa2:	9201      	str	r2, [sp, #4]
 8004aa4:	f000 fc06 	bl	80052b4 <sqrtf>
 8004aa8:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8004aac:	9903      	ldr	r1, [sp, #12]
 8004aae:	e77c      	b.n	80049aa <arm_cmplx_mag_f32+0x136>
 8004ab0:	9101      	str	r1, [sp, #4]
 8004ab2:	f000 fbff 	bl	80052b4 <sqrtf>
 8004ab6:	9901      	ldr	r1, [sp, #4]
 8004ab8:	e7af      	b.n	8004a1a <arm_cmplx_mag_f32+0x1a6>
 8004aba:	bf00      	nop

08004abc <arm_sub_f32>:
 8004abc:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8004ac0:	b4f0      	push	{r4, r5, r6, r7}
 8004ac2:	d033      	beq.n	8004b2c <arm_sub_f32+0x70>
 8004ac4:	f100 0610 	add.w	r6, r0, #16
 8004ac8:	f101 0510 	add.w	r5, r1, #16
 8004acc:	f102 0410 	add.w	r4, r2, #16
 8004ad0:	4667      	mov	r7, ip
 8004ad2:	ed15 7a04 	vldr	s14, [r5, #-16]
 8004ad6:	ed56 7a04 	vldr	s15, [r6, #-16]
 8004ada:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ade:	3f01      	subs	r7, #1
 8004ae0:	ed44 7a04 	vstr	s15, [r4, #-16]
 8004ae4:	ed15 7a03 	vldr	s14, [r5, #-12]
 8004ae8:	ed56 7a03 	vldr	s15, [r6, #-12]
 8004aec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004af0:	f106 0610 	add.w	r6, r6, #16
 8004af4:	ed44 7a03 	vstr	s15, [r4, #-12]
 8004af8:	ed15 7a02 	vldr	s14, [r5, #-8]
 8004afc:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8004b00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b04:	f105 0510 	add.w	r5, r5, #16
 8004b08:	ed44 7a02 	vstr	s15, [r4, #-8]
 8004b0c:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8004b10:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8004b14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b18:	f104 0410 	add.w	r4, r4, #16
 8004b1c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8004b20:	d1d7      	bne.n	8004ad2 <arm_sub_f32+0x16>
 8004b22:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8004b26:	4420      	add	r0, r4
 8004b28:	4421      	add	r1, r4
 8004b2a:	4422      	add	r2, r4
 8004b2c:	f013 0303 	ands.w	r3, r3, #3
 8004b30:	d01b      	beq.n	8004b6a <arm_sub_f32+0xae>
 8004b32:	edd0 7a00 	vldr	s15, [r0]
 8004b36:	ed91 7a00 	vldr	s14, [r1]
 8004b3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	edc2 7a00 	vstr	s15, [r2]
 8004b44:	d011      	beq.n	8004b6a <arm_sub_f32+0xae>
 8004b46:	edd0 7a01 	vldr	s15, [r0, #4]
 8004b4a:	ed91 7a01 	vldr	s14, [r1, #4]
 8004b4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	edc2 7a01 	vstr	s15, [r2, #4]
 8004b58:	d007      	beq.n	8004b6a <arm_sub_f32+0xae>
 8004b5a:	edd0 7a02 	vldr	s15, [r0, #8]
 8004b5e:	ed91 7a02 	vldr	s14, [r1, #8]
 8004b62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b66:	edc2 7a02 	vstr	s15, [r2, #8]
 8004b6a:	bcf0      	pop	{r4, r5, r6, r7}
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop

08004b70 <arm_radix8_butterfly_f32>:
 8004b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b74:	ed2d 8b10 	vpush	{d8-d15}
 8004b78:	b095      	sub	sp, #84	; 0x54
 8004b7a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8004b7e:	4603      	mov	r3, r0
 8004b80:	3304      	adds	r3, #4
 8004b82:	ed9f bab9 	vldr	s22, [pc, #740]	; 8004e68 <arm_radix8_butterfly_f32+0x2f8>
 8004b86:	9012      	str	r0, [sp, #72]	; 0x48
 8004b88:	468b      	mov	fp, r1
 8004b8a:	9313      	str	r3, [sp, #76]	; 0x4c
 8004b8c:	4689      	mov	r9, r1
 8004b8e:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8004b92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b94:	960f      	str	r6, [sp, #60]	; 0x3c
 8004b96:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8004b9a:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8004b9e:	eb03 0508 	add.w	r5, r3, r8
 8004ba2:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8004ba6:	eb05 040e 	add.w	r4, r5, lr
 8004baa:	0137      	lsls	r7, r6, #4
 8004bac:	eba6 030a 	sub.w	r3, r6, sl
 8004bb0:	eb04 000e 	add.w	r0, r4, lr
 8004bb4:	44b2      	add	sl, r6
 8004bb6:	1d3a      	adds	r2, r7, #4
 8004bb8:	9702      	str	r7, [sp, #8]
 8004bba:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8004bbe:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8004bc2:	ebae 0c06 	sub.w	ip, lr, r6
 8004bc6:	9703      	str	r7, [sp, #12]
 8004bc8:	eb03 0708 	add.w	r7, r3, r8
 8004bcc:	9701      	str	r7, [sp, #4]
 8004bce:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8004bd2:	9706      	str	r7, [sp, #24]
 8004bd4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8004bd6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8004bda:	f10e 0104 	add.w	r1, lr, #4
 8004bde:	4439      	add	r1, r7
 8004be0:	443a      	add	r2, r7
 8004be2:	0137      	lsls	r7, r6, #4
 8004be4:	00f6      	lsls	r6, r6, #3
 8004be6:	9704      	str	r7, [sp, #16]
 8004be8:	9605      	str	r6, [sp, #20]
 8004bea:	9f01      	ldr	r7, [sp, #4]
 8004bec:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8004bee:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8004bf2:	f04f 0c00 	mov.w	ip, #0
 8004bf6:	edd4 6a00 	vldr	s13, [r4]
 8004bfa:	edd7 1a00 	vldr	s3, [r7]
 8004bfe:	ed16 aa01 	vldr	s20, [r6, #-4]
 8004c02:	edd5 5a00 	vldr	s11, [r5]
 8004c06:	ed52 9a01 	vldr	s19, [r2, #-4]
 8004c0a:	ed90 6a00 	vldr	s12, [r0]
 8004c0e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8004c12:	ed93 3a00 	vldr	s6, [r3]
 8004c16:	ee39 0a86 	vadd.f32	s0, s19, s12
 8004c1a:	ee33 2a21 	vadd.f32	s4, s6, s3
 8004c1e:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8004c22:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8004c26:	ee35 7a02 	vadd.f32	s14, s10, s4
 8004c2a:	ee34 4a80 	vadd.f32	s8, s9, s0
 8004c2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004c32:	ee74 6a07 	vadd.f32	s13, s8, s14
 8004c36:	ee34 4a47 	vsub.f32	s8, s8, s14
 8004c3a:	ed46 6a01 	vstr	s13, [r6, #-4]
 8004c3e:	ed85 4a00 	vstr	s8, [r5]
 8004c42:	edd1 6a00 	vldr	s13, [r1]
 8004c46:	ed94 9a01 	vldr	s18, [r4, #4]
 8004c4a:	edd3 2a01 	vldr	s5, [r3, #4]
 8004c4e:	edd7 8a01 	vldr	s17, [r7, #4]
 8004c52:	edd6 0a00 	vldr	s1, [r6]
 8004c56:	edd5 3a01 	vldr	s7, [r5, #4]
 8004c5a:	ed90 8a01 	vldr	s16, [r0, #4]
 8004c5e:	ed92 7a00 	vldr	s14, [r2]
 8004c62:	ee33 3a61 	vsub.f32	s6, s6, s3
 8004c66:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8004c6a:	ee72 aae8 	vsub.f32	s21, s5, s17
 8004c6e:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8004c72:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8004c76:	ee77 7a83 	vadd.f32	s15, s15, s6
 8004c7a:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8004c7e:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8004c82:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8004c86:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8004c8a:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8004c8e:	ee77 0a08 	vadd.f32	s1, s14, s16
 8004c92:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8004c96:	ee37 7a48 	vsub.f32	s14, s14, s16
 8004c9a:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8004c9e:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8004ca2:	ee76 6a89 	vadd.f32	s13, s13, s18
 8004ca6:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8004caa:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004cae:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8004cb2:	ee35 5a42 	vsub.f32	s10, s10, s4
 8004cb6:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8004cba:	ee33 2a20 	vadd.f32	s4, s6, s1
 8004cbe:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8004cc2:	ee33 3a60 	vsub.f32	s6, s6, s1
 8004cc6:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8004cca:	ee77 0a01 	vadd.f32	s1, s14, s2
 8004cce:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8004cd2:	ee37 7a41 	vsub.f32	s14, s14, s2
 8004cd6:	ee73 1a84 	vadd.f32	s3, s7, s8
 8004cda:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8004cde:	ee76 3a27 	vadd.f32	s7, s12, s15
 8004ce2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004ce6:	ee32 8a00 	vadd.f32	s16, s4, s0
 8004cea:	ee33 1a45 	vsub.f32	s2, s6, s10
 8004cee:	ee32 2a40 	vsub.f32	s4, s4, s0
 8004cf2:	ee35 5a03 	vadd.f32	s10, s10, s6
 8004cf6:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8004cfa:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8004cfe:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8004d02:	ee34 6a67 	vsub.f32	s12, s8, s15
 8004d06:	ee75 4a87 	vadd.f32	s9, s11, s14
 8004d0a:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8004d0e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8004d12:	ee77 7a84 	vadd.f32	s15, s15, s8
 8004d16:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8004d1a:	44dc      	add	ip, fp
 8004d1c:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8004d20:	45e1      	cmp	r9, ip
 8004d22:	ed86 8a00 	vstr	s16, [r6]
 8004d26:	ed85 2a01 	vstr	s4, [r5, #4]
 8004d2a:	4456      	add	r6, sl
 8004d2c:	ed02 0a01 	vstr	s0, [r2, #-4]
 8004d30:	4455      	add	r5, sl
 8004d32:	edc0 6a00 	vstr	s13, [r0]
 8004d36:	ed82 1a00 	vstr	s2, [r2]
 8004d3a:	ed80 5a01 	vstr	s10, [r0, #4]
 8004d3e:	4452      	add	r2, sl
 8004d40:	ed01 3a01 	vstr	s6, [r1, #-4]
 8004d44:	4450      	add	r0, sl
 8004d46:	edc7 2a00 	vstr	s5, [r7]
 8004d4a:	edc4 4a00 	vstr	s9, [r4]
 8004d4e:	ed83 7a00 	vstr	s14, [r3]
 8004d52:	edc1 5a00 	vstr	s11, [r1]
 8004d56:	edc7 3a01 	vstr	s7, [r7, #4]
 8004d5a:	4451      	add	r1, sl
 8004d5c:	ed84 6a01 	vstr	s12, [r4, #4]
 8004d60:	4457      	add	r7, sl
 8004d62:	edc3 7a01 	vstr	s15, [r3, #4]
 8004d66:	4454      	add	r4, sl
 8004d68:	4453      	add	r3, sl
 8004d6a:	f63f af44 	bhi.w	8004bf6 <arm_radix8_butterfly_f32+0x86>
 8004d6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d70:	2b07      	cmp	r3, #7
 8004d72:	f240 81b7 	bls.w	80050e4 <arm_radix8_butterfly_f32+0x574>
 8004d76:	9b06      	ldr	r3, [sp, #24]
 8004d78:	9903      	ldr	r1, [sp, #12]
 8004d7a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004d7c:	9e05      	ldr	r6, [sp, #20]
 8004d7e:	9a04      	ldr	r2, [sp, #16]
 8004d80:	f103 0c08 	add.w	ip, r3, #8
 8004d84:	9b02      	ldr	r3, [sp, #8]
 8004d86:	3108      	adds	r1, #8
 8004d88:	f108 0808 	add.w	r8, r8, #8
 8004d8c:	1841      	adds	r1, r0, r1
 8004d8e:	3608      	adds	r6, #8
 8004d90:	330c      	adds	r3, #12
 8004d92:	4604      	mov	r4, r0
 8004d94:	4444      	add	r4, r8
 8004d96:	18c3      	adds	r3, r0, r3
 8004d98:	9109      	str	r1, [sp, #36]	; 0x24
 8004d9a:	1981      	adds	r1, r0, r6
 8004d9c:	f10e 0e08 	add.w	lr, lr, #8
 8004da0:	3208      	adds	r2, #8
 8004da2:	940b      	str	r4, [sp, #44]	; 0x2c
 8004da4:	9107      	str	r1, [sp, #28]
 8004da6:	4604      	mov	r4, r0
 8004da8:	4601      	mov	r1, r0
 8004daa:	9304      	str	r3, [sp, #16]
 8004dac:	f100 030c 	add.w	r3, r0, #12
 8004db0:	4474      	add	r4, lr
 8004db2:	f04f 0801 	mov.w	r8, #1
 8004db6:	1882      	adds	r2, r0, r2
 8004db8:	4461      	add	r1, ip
 8004dba:	9305      	str	r3, [sp, #20]
 8004dbc:	464b      	mov	r3, r9
 8004dbe:	940a      	str	r4, [sp, #40]	; 0x28
 8004dc0:	46c1      	mov	r9, r8
 8004dc2:	9208      	str	r2, [sp, #32]
 8004dc4:	46d8      	mov	r8, fp
 8004dc6:	9106      	str	r1, [sp, #24]
 8004dc8:	f04f 0e00 	mov.w	lr, #0
 8004dcc:	469b      	mov	fp, r3
 8004dce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004dd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004dd2:	449e      	add	lr, r3
 8004dd4:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8004dd8:	441a      	add	r2, r3
 8004dda:	920e      	str	r2, [sp, #56]	; 0x38
 8004ddc:	441a      	add	r2, r3
 8004dde:	18d4      	adds	r4, r2, r3
 8004de0:	18e5      	adds	r5, r4, r3
 8004de2:	18ee      	adds	r6, r5, r3
 8004de4:	18f7      	adds	r7, r6, r3
 8004de6:	eb07 0c03 	add.w	ip, r7, r3
 8004dea:	920d      	str	r2, [sp, #52]	; 0x34
 8004dec:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8004df0:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8004df4:	910c      	str	r1, [sp, #48]	; 0x30
 8004df6:	4419      	add	r1, r3
 8004df8:	9103      	str	r1, [sp, #12]
 8004dfa:	4419      	add	r1, r3
 8004dfc:	18ca      	adds	r2, r1, r3
 8004dfe:	9202      	str	r2, [sp, #8]
 8004e00:	441a      	add	r2, r3
 8004e02:	18d0      	adds	r0, r2, r3
 8004e04:	ed92 ea01 	vldr	s28, [r2, #4]
 8004e08:	9a02      	ldr	r2, [sp, #8]
 8004e0a:	edd4 7a00 	vldr	s15, [r4]
 8004e0e:	edd2 da01 	vldr	s27, [r2, #4]
 8004e12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e14:	ed91 da01 	vldr	s26, [r1, #4]
 8004e18:	ed92 ca01 	vldr	s24, [r2, #4]
 8004e1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e1e:	9903      	ldr	r1, [sp, #12]
 8004e20:	edcd 7a03 	vstr	s15, [sp, #12]
 8004e24:	edd2 7a00 	vldr	s15, [r2]
 8004e28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e2a:	edcd 7a02 	vstr	s15, [sp, #8]
 8004e2e:	edd2 7a00 	vldr	s15, [r2]
 8004e32:	edd0 ea01 	vldr	s29, [r0, #4]
 8004e36:	edd1 ca01 	vldr	s25, [r1, #4]
 8004e3a:	eddc ba00 	vldr	s23, [ip]
 8004e3e:	edd7 aa00 	vldr	s21, [r7]
 8004e42:	ed96 aa00 	vldr	s20, [r6]
 8004e46:	edd5 9a00 	vldr	s19, [r5]
 8004e4a:	edcd 7a01 	vstr	s15, [sp, #4]
 8004e4e:	4403      	add	r3, r0
 8004e50:	ed93 fa01 	vldr	s30, [r3, #4]
 8004e54:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8004e58:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8004e5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004e60:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e64:	46cc      	mov	ip, r9
 8004e66:	e001      	b.n	8004e6c <arm_radix8_butterfly_f32+0x2fc>
 8004e68:	3f3504f3 	.word	0x3f3504f3
 8004e6c:	ed91 6a00 	vldr	s12, [r1]
 8004e70:	ed93 5a00 	vldr	s10, [r3]
 8004e74:	edd0 fa00 	vldr	s31, [r0]
 8004e78:	edd4 7a00 	vldr	s15, [r4]
 8004e7c:	ed95 7a00 	vldr	s14, [r5]
 8004e80:	ed56 3a01 	vldr	s7, [r6, #-4]
 8004e84:	ed17 3a01 	vldr	s6, [r7, #-4]
 8004e88:	ed92 2a00 	vldr	s4, [r2]
 8004e8c:	ed96 0a00 	vldr	s0, [r6]
 8004e90:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004e94:	ee32 1a06 	vadd.f32	s2, s4, s12
 8004e98:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8004e9c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8004ea0:	ee78 1a04 	vadd.f32	s3, s16, s8
 8004ea4:	ee71 6a24 	vadd.f32	s13, s2, s9
 8004ea8:	ee32 2a46 	vsub.f32	s4, s4, s12
 8004eac:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8004eb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004eb4:	ed06 6a01 	vstr	s12, [r6, #-4]
 8004eb8:	edd4 8a01 	vldr	s17, [r4, #4]
 8004ebc:	ed92 9a01 	vldr	s18, [r2, #4]
 8004ec0:	edd7 0a00 	vldr	s1, [r7]
 8004ec4:	edd1 2a01 	vldr	s5, [r1, #4]
 8004ec8:	ed95 7a01 	vldr	s14, [r5, #4]
 8004ecc:	ed93 6a01 	vldr	s12, [r3, #4]
 8004ed0:	edd0 5a01 	vldr	s11, [r0, #4]
 8004ed4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8004ed8:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8004edc:	ee39 5a62 	vsub.f32	s10, s18, s5
 8004ee0:	ee78 fac7 	vsub.f32	s31, s17, s14
 8004ee4:	ee38 4a44 	vsub.f32	s8, s16, s8
 8004ee8:	ee38 7a87 	vadd.f32	s14, s17, s14
 8004eec:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8004ef0:	ee79 2a22 	vadd.f32	s5, s18, s5
 8004ef4:	ee32 9a27 	vadd.f32	s18, s4, s15
 8004ef8:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004efc:	ee30 2a06 	vadd.f32	s4, s0, s12
 8004f00:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8004f04:	ee71 4a64 	vsub.f32	s9, s2, s9
 8004f08:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8004f0c:	ee32 1a08 	vadd.f32	s2, s4, s16
 8004f10:	ee72 fa87 	vadd.f32	s31, s5, s14
 8004f14:	ee32 2a48 	vsub.f32	s4, s4, s16
 8004f18:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8004f1c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8004f20:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8004f24:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8004f28:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8004f2c:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8004f30:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8004f34:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004f38:	ee30 6a46 	vsub.f32	s12, s0, s12
 8004f3c:	ee74 0a22 	vadd.f32	s1, s8, s5
 8004f40:	ee36 0a28 	vadd.f32	s0, s12, s17
 8004f44:	ee74 2a62 	vsub.f32	s5, s8, s5
 8004f48:	ee36 6a68 	vsub.f32	s12, s12, s17
 8004f4c:	ee32 4a64 	vsub.f32	s8, s4, s9
 8004f50:	ee73 8a09 	vadd.f32	s17, s6, s18
 8004f54:	ee74 4a82 	vadd.f32	s9, s9, s4
 8004f58:	ee33 9a49 	vsub.f32	s18, s6, s18
 8004f5c:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8004f60:	ee35 3a85 	vadd.f32	s6, s11, s10
 8004f64:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8004f68:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8004f6c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8004f70:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8004f74:	ee30 7a68 	vsub.f32	s14, s0, s17
 8004f78:	ee35 8a03 	vadd.f32	s16, s10, s6
 8004f7c:	ee38 0a80 	vadd.f32	s0, s17, s0
 8004f80:	ee73 3a82 	vadd.f32	s7, s7, s4
 8004f84:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8004f88:	ed9d 2a01 	vldr	s4, [sp, #4]
 8004f8c:	eddd 1a02 	vldr	s3, [sp, #8]
 8004f90:	ee35 5a43 	vsub.f32	s10, s10, s6
 8004f94:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8004f98:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8004f9c:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8004fa0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8004fa4:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8004fa8:	ee76 5a49 	vsub.f32	s11, s12, s18
 8004fac:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8004fb0:	ee39 6a06 	vadd.f32	s12, s18, s12
 8004fb4:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8004fb8:	ee21 4a84 	vmul.f32	s8, s3, s8
 8004fbc:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8004fc0:	ee22 7a07 	vmul.f32	s14, s4, s14
 8004fc4:	ee22 2a08 	vmul.f32	s4, s4, s16
 8004fc8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8004fcc:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8004fd0:	ee31 1a09 	vadd.f32	s2, s2, s18
 8004fd4:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8004fd8:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8004fdc:	ee74 0a60 	vsub.f32	s1, s8, s1
 8004fe0:	ee37 7a48 	vsub.f32	s14, s14, s16
 8004fe4:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8004fe8:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8004fec:	ee72 1a21 	vadd.f32	s3, s4, s3
 8004ff0:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8004ff4:	ee38 2a89 	vadd.f32	s4, s17, s18
 8004ff8:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8004ffc:	ee38 8a04 	vadd.f32	s16, s16, s8
 8005000:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8005004:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8005008:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800500c:	eddd 5a03 	vldr	s11, [sp, #12]
 8005010:	edc6 fa00 	vstr	s31, [r6]
 8005014:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8005018:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800501c:	ee30 0a45 	vsub.f32	s0, s0, s10
 8005020:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8005024:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8005028:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800502c:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8005030:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8005034:	ee25 6a86 	vmul.f32	s12, s11, s12
 8005038:	ee74 4a89 	vadd.f32	s9, s9, s18
 800503c:	ee34 3a43 	vsub.f32	s6, s8, s6
 8005040:	ee78 8a85 	vadd.f32	s17, s17, s10
 8005044:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005048:	44c4      	add	ip, r8
 800504a:	45e3      	cmp	fp, ip
 800504c:	edc3 3a00 	vstr	s7, [r3]
 8005050:	edc3 6a01 	vstr	s13, [r3, #4]
 8005054:	4456      	add	r6, sl
 8005056:	ed07 1a01 	vstr	s2, [r7, #-4]
 800505a:	edc7 0a00 	vstr	s1, [r7]
 800505e:	4453      	add	r3, sl
 8005060:	ed80 2a00 	vstr	s4, [r0]
 8005064:	edc0 2a01 	vstr	s5, [r0, #4]
 8005068:	4457      	add	r7, sl
 800506a:	edc2 1a00 	vstr	s3, [r2]
 800506e:	ed82 7a01 	vstr	s14, [r2, #4]
 8005072:	4450      	add	r0, sl
 8005074:	ed85 8a00 	vstr	s16, [r5]
 8005078:	ed85 0a01 	vstr	s0, [r5, #4]
 800507c:	4452      	add	r2, sl
 800507e:	edc1 4a00 	vstr	s9, [r1]
 8005082:	4455      	add	r5, sl
 8005084:	ed81 3a01 	vstr	s6, [r1, #4]
 8005088:	edc4 8a00 	vstr	s17, [r4]
 800508c:	ed84 6a01 	vstr	s12, [r4, #4]
 8005090:	4451      	add	r1, sl
 8005092:	4454      	add	r4, sl
 8005094:	f63f aeea 	bhi.w	8004e6c <arm_radix8_butterfly_f32+0x2fc>
 8005098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800509a:	3308      	adds	r3, #8
 800509c:	930b      	str	r3, [sp, #44]	; 0x2c
 800509e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050a0:	3308      	adds	r3, #8
 80050a2:	930a      	str	r3, [sp, #40]	; 0x28
 80050a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050a6:	3308      	adds	r3, #8
 80050a8:	9309      	str	r3, [sp, #36]	; 0x24
 80050aa:	9b08      	ldr	r3, [sp, #32]
 80050ac:	3308      	adds	r3, #8
 80050ae:	9308      	str	r3, [sp, #32]
 80050b0:	9b07      	ldr	r3, [sp, #28]
 80050b2:	3308      	adds	r3, #8
 80050b4:	9307      	str	r3, [sp, #28]
 80050b6:	9b06      	ldr	r3, [sp, #24]
 80050b8:	3308      	adds	r3, #8
 80050ba:	9306      	str	r3, [sp, #24]
 80050bc:	9b05      	ldr	r3, [sp, #20]
 80050be:	3308      	adds	r3, #8
 80050c0:	9305      	str	r3, [sp, #20]
 80050c2:	9b04      	ldr	r3, [sp, #16]
 80050c4:	3308      	adds	r3, #8
 80050c6:	9304      	str	r3, [sp, #16]
 80050c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050ca:	f109 0901 	add.w	r9, r9, #1
 80050ce:	454b      	cmp	r3, r9
 80050d0:	f47f ae7d 	bne.w	8004dce <arm_radix8_butterfly_f32+0x25e>
 80050d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	b29b      	uxth	r3, r3
 80050da:	46d9      	mov	r9, fp
 80050dc:	9310      	str	r3, [sp, #64]	; 0x40
 80050de:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80050e2:	e554      	b.n	8004b8e <arm_radix8_butterfly_f32+0x1e>
 80050e4:	b015      	add	sp, #84	; 0x54
 80050e6:	ecbd 8b10 	vpop	{d8-d15}
 80050ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ee:	bf00      	nop

080050f0 <pow>:
 80050f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050f4:	ec59 8b10 	vmov	r8, r9, d0
 80050f8:	ec57 6b11 	vmov	r6, r7, d1
 80050fc:	f000 f900 	bl	8005300 <__ieee754_pow>
 8005100:	4b4e      	ldr	r3, [pc, #312]	; (800523c <pow+0x14c>)
 8005102:	f993 3000 	ldrsb.w	r3, [r3]
 8005106:	3301      	adds	r3, #1
 8005108:	ec55 4b10 	vmov	r4, r5, d0
 800510c:	d015      	beq.n	800513a <pow+0x4a>
 800510e:	4632      	mov	r2, r6
 8005110:	463b      	mov	r3, r7
 8005112:	4630      	mov	r0, r6
 8005114:	4639      	mov	r1, r7
 8005116:	f7fb fd11 	bl	8000b3c <__aeabi_dcmpun>
 800511a:	b970      	cbnz	r0, 800513a <pow+0x4a>
 800511c:	4642      	mov	r2, r8
 800511e:	464b      	mov	r3, r9
 8005120:	4640      	mov	r0, r8
 8005122:	4649      	mov	r1, r9
 8005124:	f7fb fd0a 	bl	8000b3c <__aeabi_dcmpun>
 8005128:	2200      	movs	r2, #0
 800512a:	2300      	movs	r3, #0
 800512c:	b148      	cbz	r0, 8005142 <pow+0x52>
 800512e:	4630      	mov	r0, r6
 8005130:	4639      	mov	r1, r7
 8005132:	f7fb fcd1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005136:	2800      	cmp	r0, #0
 8005138:	d17d      	bne.n	8005236 <pow+0x146>
 800513a:	ec45 4b10 	vmov	d0, r4, r5
 800513e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005142:	4640      	mov	r0, r8
 8005144:	4649      	mov	r1, r9
 8005146:	f7fb fcc7 	bl	8000ad8 <__aeabi_dcmpeq>
 800514a:	b1e0      	cbz	r0, 8005186 <pow+0x96>
 800514c:	2200      	movs	r2, #0
 800514e:	2300      	movs	r3, #0
 8005150:	4630      	mov	r0, r6
 8005152:	4639      	mov	r1, r7
 8005154:	f7fb fcc0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005158:	2800      	cmp	r0, #0
 800515a:	d16c      	bne.n	8005236 <pow+0x146>
 800515c:	ec47 6b10 	vmov	d0, r6, r7
 8005160:	f000 feb0 	bl	8005ec4 <finite>
 8005164:	2800      	cmp	r0, #0
 8005166:	d0e8      	beq.n	800513a <pow+0x4a>
 8005168:	2200      	movs	r2, #0
 800516a:	2300      	movs	r3, #0
 800516c:	4630      	mov	r0, r6
 800516e:	4639      	mov	r1, r7
 8005170:	f7fb fcbc 	bl	8000aec <__aeabi_dcmplt>
 8005174:	2800      	cmp	r0, #0
 8005176:	d0e0      	beq.n	800513a <pow+0x4a>
 8005178:	f000 ffcc 	bl	8006114 <__errno>
 800517c:	2321      	movs	r3, #33	; 0x21
 800517e:	6003      	str	r3, [r0, #0]
 8005180:	2400      	movs	r4, #0
 8005182:	4d2f      	ldr	r5, [pc, #188]	; (8005240 <pow+0x150>)
 8005184:	e7d9      	b.n	800513a <pow+0x4a>
 8005186:	ec45 4b10 	vmov	d0, r4, r5
 800518a:	f000 fe9b 	bl	8005ec4 <finite>
 800518e:	bbb8      	cbnz	r0, 8005200 <pow+0x110>
 8005190:	ec49 8b10 	vmov	d0, r8, r9
 8005194:	f000 fe96 	bl	8005ec4 <finite>
 8005198:	b390      	cbz	r0, 8005200 <pow+0x110>
 800519a:	ec47 6b10 	vmov	d0, r6, r7
 800519e:	f000 fe91 	bl	8005ec4 <finite>
 80051a2:	b368      	cbz	r0, 8005200 <pow+0x110>
 80051a4:	4622      	mov	r2, r4
 80051a6:	462b      	mov	r3, r5
 80051a8:	4620      	mov	r0, r4
 80051aa:	4629      	mov	r1, r5
 80051ac:	f7fb fcc6 	bl	8000b3c <__aeabi_dcmpun>
 80051b0:	b160      	cbz	r0, 80051cc <pow+0xdc>
 80051b2:	f000 ffaf 	bl	8006114 <__errno>
 80051b6:	2321      	movs	r3, #33	; 0x21
 80051b8:	6003      	str	r3, [r0, #0]
 80051ba:	2200      	movs	r2, #0
 80051bc:	2300      	movs	r3, #0
 80051be:	4610      	mov	r0, r2
 80051c0:	4619      	mov	r1, r3
 80051c2:	f7fb fb4b 	bl	800085c <__aeabi_ddiv>
 80051c6:	4604      	mov	r4, r0
 80051c8:	460d      	mov	r5, r1
 80051ca:	e7b6      	b.n	800513a <pow+0x4a>
 80051cc:	f000 ffa2 	bl	8006114 <__errno>
 80051d0:	2322      	movs	r3, #34	; 0x22
 80051d2:	6003      	str	r3, [r0, #0]
 80051d4:	2200      	movs	r2, #0
 80051d6:	2300      	movs	r3, #0
 80051d8:	4640      	mov	r0, r8
 80051da:	4649      	mov	r1, r9
 80051dc:	f7fb fc86 	bl	8000aec <__aeabi_dcmplt>
 80051e0:	2400      	movs	r4, #0
 80051e2:	b158      	cbz	r0, 80051fc <pow+0x10c>
 80051e4:	ec47 6b10 	vmov	d0, r6, r7
 80051e8:	f000 fe82 	bl	8005ef0 <rint>
 80051ec:	4632      	mov	r2, r6
 80051ee:	ec51 0b10 	vmov	r0, r1, d0
 80051f2:	463b      	mov	r3, r7
 80051f4:	f7fb fc70 	bl	8000ad8 <__aeabi_dcmpeq>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	d0c2      	beq.n	8005182 <pow+0x92>
 80051fc:	4d11      	ldr	r5, [pc, #68]	; (8005244 <pow+0x154>)
 80051fe:	e79c      	b.n	800513a <pow+0x4a>
 8005200:	2200      	movs	r2, #0
 8005202:	2300      	movs	r3, #0
 8005204:	4620      	mov	r0, r4
 8005206:	4629      	mov	r1, r5
 8005208:	f7fb fc66 	bl	8000ad8 <__aeabi_dcmpeq>
 800520c:	2800      	cmp	r0, #0
 800520e:	d094      	beq.n	800513a <pow+0x4a>
 8005210:	ec49 8b10 	vmov	d0, r8, r9
 8005214:	f000 fe56 	bl	8005ec4 <finite>
 8005218:	2800      	cmp	r0, #0
 800521a:	d08e      	beq.n	800513a <pow+0x4a>
 800521c:	ec47 6b10 	vmov	d0, r6, r7
 8005220:	f000 fe50 	bl	8005ec4 <finite>
 8005224:	2800      	cmp	r0, #0
 8005226:	d088      	beq.n	800513a <pow+0x4a>
 8005228:	f000 ff74 	bl	8006114 <__errno>
 800522c:	2322      	movs	r3, #34	; 0x22
 800522e:	6003      	str	r3, [r0, #0]
 8005230:	2400      	movs	r4, #0
 8005232:	2500      	movs	r5, #0
 8005234:	e781      	b.n	800513a <pow+0x4a>
 8005236:	4d04      	ldr	r5, [pc, #16]	; (8005248 <pow+0x158>)
 8005238:	2400      	movs	r4, #0
 800523a:	e77e      	b.n	800513a <pow+0x4a>
 800523c:	20000009 	.word	0x20000009
 8005240:	fff00000 	.word	0xfff00000
 8005244:	7ff00000 	.word	0x7ff00000
 8005248:	3ff00000 	.word	0x3ff00000

0800524c <sqrt>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	ed2d 8b02 	vpush	{d8}
 8005252:	ec55 4b10 	vmov	r4, r5, d0
 8005256:	f000 fd75 	bl	8005d44 <__ieee754_sqrt>
 800525a:	4b15      	ldr	r3, [pc, #84]	; (80052b0 <sqrt+0x64>)
 800525c:	eeb0 8a40 	vmov.f32	s16, s0
 8005260:	eef0 8a60 	vmov.f32	s17, s1
 8005264:	f993 3000 	ldrsb.w	r3, [r3]
 8005268:	3301      	adds	r3, #1
 800526a:	d019      	beq.n	80052a0 <sqrt+0x54>
 800526c:	4622      	mov	r2, r4
 800526e:	462b      	mov	r3, r5
 8005270:	4620      	mov	r0, r4
 8005272:	4629      	mov	r1, r5
 8005274:	f7fb fc62 	bl	8000b3c <__aeabi_dcmpun>
 8005278:	b990      	cbnz	r0, 80052a0 <sqrt+0x54>
 800527a:	2200      	movs	r2, #0
 800527c:	2300      	movs	r3, #0
 800527e:	4620      	mov	r0, r4
 8005280:	4629      	mov	r1, r5
 8005282:	f7fb fc33 	bl	8000aec <__aeabi_dcmplt>
 8005286:	b158      	cbz	r0, 80052a0 <sqrt+0x54>
 8005288:	f000 ff44 	bl	8006114 <__errno>
 800528c:	2321      	movs	r3, #33	; 0x21
 800528e:	6003      	str	r3, [r0, #0]
 8005290:	2200      	movs	r2, #0
 8005292:	2300      	movs	r3, #0
 8005294:	4610      	mov	r0, r2
 8005296:	4619      	mov	r1, r3
 8005298:	f7fb fae0 	bl	800085c <__aeabi_ddiv>
 800529c:	ec41 0b18 	vmov	d8, r0, r1
 80052a0:	eeb0 0a48 	vmov.f32	s0, s16
 80052a4:	eef0 0a68 	vmov.f32	s1, s17
 80052a8:	ecbd 8b02 	vpop	{d8}
 80052ac:	bd38      	pop	{r3, r4, r5, pc}
 80052ae:	bf00      	nop
 80052b0:	20000009 	.word	0x20000009

080052b4 <sqrtf>:
 80052b4:	b508      	push	{r3, lr}
 80052b6:	ed2d 8b02 	vpush	{d8}
 80052ba:	eeb0 8a40 	vmov.f32	s16, s0
 80052be:	f000 fdf5 	bl	8005eac <__ieee754_sqrtf>
 80052c2:	4b0d      	ldr	r3, [pc, #52]	; (80052f8 <sqrtf+0x44>)
 80052c4:	f993 3000 	ldrsb.w	r3, [r3]
 80052c8:	3301      	adds	r3, #1
 80052ca:	d011      	beq.n	80052f0 <sqrtf+0x3c>
 80052cc:	eeb4 8a48 	vcmp.f32	s16, s16
 80052d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d4:	d60c      	bvs.n	80052f0 <sqrtf+0x3c>
 80052d6:	eddf 8a09 	vldr	s17, [pc, #36]	; 80052fc <sqrtf+0x48>
 80052da:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80052de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e2:	d505      	bpl.n	80052f0 <sqrtf+0x3c>
 80052e4:	f000 ff16 	bl	8006114 <__errno>
 80052e8:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80052ec:	2321      	movs	r3, #33	; 0x21
 80052ee:	6003      	str	r3, [r0, #0]
 80052f0:	ecbd 8b02 	vpop	{d8}
 80052f4:	bd08      	pop	{r3, pc}
 80052f6:	bf00      	nop
 80052f8:	20000009 	.word	0x20000009
 80052fc:	00000000 	.word	0x00000000

08005300 <__ieee754_pow>:
 8005300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005304:	ed2d 8b06 	vpush	{d8-d10}
 8005308:	b08d      	sub	sp, #52	; 0x34
 800530a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800530e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8005312:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8005316:	ea56 0100 	orrs.w	r1, r6, r0
 800531a:	ec53 2b10 	vmov	r2, r3, d0
 800531e:	f000 84d1 	beq.w	8005cc4 <__ieee754_pow+0x9c4>
 8005322:	497f      	ldr	r1, [pc, #508]	; (8005520 <__ieee754_pow+0x220>)
 8005324:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8005328:	428c      	cmp	r4, r1
 800532a:	ee10 8a10 	vmov	r8, s0
 800532e:	4699      	mov	r9, r3
 8005330:	dc09      	bgt.n	8005346 <__ieee754_pow+0x46>
 8005332:	d103      	bne.n	800533c <__ieee754_pow+0x3c>
 8005334:	b97a      	cbnz	r2, 8005356 <__ieee754_pow+0x56>
 8005336:	42a6      	cmp	r6, r4
 8005338:	dd02      	ble.n	8005340 <__ieee754_pow+0x40>
 800533a:	e00c      	b.n	8005356 <__ieee754_pow+0x56>
 800533c:	428e      	cmp	r6, r1
 800533e:	dc02      	bgt.n	8005346 <__ieee754_pow+0x46>
 8005340:	428e      	cmp	r6, r1
 8005342:	d110      	bne.n	8005366 <__ieee754_pow+0x66>
 8005344:	b178      	cbz	r0, 8005366 <__ieee754_pow+0x66>
 8005346:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800534a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800534e:	ea54 0308 	orrs.w	r3, r4, r8
 8005352:	f000 84b7 	beq.w	8005cc4 <__ieee754_pow+0x9c4>
 8005356:	4873      	ldr	r0, [pc, #460]	; (8005524 <__ieee754_pow+0x224>)
 8005358:	b00d      	add	sp, #52	; 0x34
 800535a:	ecbd 8b06 	vpop	{d8-d10}
 800535e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005362:	f000 bdbd 	b.w	8005ee0 <nan>
 8005366:	f1b9 0f00 	cmp.w	r9, #0
 800536a:	da36      	bge.n	80053da <__ieee754_pow+0xda>
 800536c:	496e      	ldr	r1, [pc, #440]	; (8005528 <__ieee754_pow+0x228>)
 800536e:	428e      	cmp	r6, r1
 8005370:	dc51      	bgt.n	8005416 <__ieee754_pow+0x116>
 8005372:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8005376:	428e      	cmp	r6, r1
 8005378:	f340 84af 	ble.w	8005cda <__ieee754_pow+0x9da>
 800537c:	1531      	asrs	r1, r6, #20
 800537e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005382:	2914      	cmp	r1, #20
 8005384:	dd0f      	ble.n	80053a6 <__ieee754_pow+0xa6>
 8005386:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800538a:	fa20 fc01 	lsr.w	ip, r0, r1
 800538e:	fa0c f101 	lsl.w	r1, ip, r1
 8005392:	4281      	cmp	r1, r0
 8005394:	f040 84a1 	bne.w	8005cda <__ieee754_pow+0x9da>
 8005398:	f00c 0c01 	and.w	ip, ip, #1
 800539c:	f1cc 0102 	rsb	r1, ip, #2
 80053a0:	9100      	str	r1, [sp, #0]
 80053a2:	b180      	cbz	r0, 80053c6 <__ieee754_pow+0xc6>
 80053a4:	e059      	b.n	800545a <__ieee754_pow+0x15a>
 80053a6:	2800      	cmp	r0, #0
 80053a8:	d155      	bne.n	8005456 <__ieee754_pow+0x156>
 80053aa:	f1c1 0114 	rsb	r1, r1, #20
 80053ae:	fa46 fc01 	asr.w	ip, r6, r1
 80053b2:	fa0c f101 	lsl.w	r1, ip, r1
 80053b6:	42b1      	cmp	r1, r6
 80053b8:	f040 848c 	bne.w	8005cd4 <__ieee754_pow+0x9d4>
 80053bc:	f00c 0c01 	and.w	ip, ip, #1
 80053c0:	f1cc 0102 	rsb	r1, ip, #2
 80053c4:	9100      	str	r1, [sp, #0]
 80053c6:	4959      	ldr	r1, [pc, #356]	; (800552c <__ieee754_pow+0x22c>)
 80053c8:	428e      	cmp	r6, r1
 80053ca:	d12d      	bne.n	8005428 <__ieee754_pow+0x128>
 80053cc:	2f00      	cmp	r7, #0
 80053ce:	da79      	bge.n	80054c4 <__ieee754_pow+0x1c4>
 80053d0:	4956      	ldr	r1, [pc, #344]	; (800552c <__ieee754_pow+0x22c>)
 80053d2:	2000      	movs	r0, #0
 80053d4:	f7fb fa42 	bl	800085c <__aeabi_ddiv>
 80053d8:	e016      	b.n	8005408 <__ieee754_pow+0x108>
 80053da:	2100      	movs	r1, #0
 80053dc:	9100      	str	r1, [sp, #0]
 80053de:	2800      	cmp	r0, #0
 80053e0:	d13b      	bne.n	800545a <__ieee754_pow+0x15a>
 80053e2:	494f      	ldr	r1, [pc, #316]	; (8005520 <__ieee754_pow+0x220>)
 80053e4:	428e      	cmp	r6, r1
 80053e6:	d1ee      	bne.n	80053c6 <__ieee754_pow+0xc6>
 80053e8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80053ec:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80053f0:	ea53 0308 	orrs.w	r3, r3, r8
 80053f4:	f000 8466 	beq.w	8005cc4 <__ieee754_pow+0x9c4>
 80053f8:	4b4d      	ldr	r3, [pc, #308]	; (8005530 <__ieee754_pow+0x230>)
 80053fa:	429c      	cmp	r4, r3
 80053fc:	dd0d      	ble.n	800541a <__ieee754_pow+0x11a>
 80053fe:	2f00      	cmp	r7, #0
 8005400:	f280 8464 	bge.w	8005ccc <__ieee754_pow+0x9cc>
 8005404:	2000      	movs	r0, #0
 8005406:	2100      	movs	r1, #0
 8005408:	ec41 0b10 	vmov	d0, r0, r1
 800540c:	b00d      	add	sp, #52	; 0x34
 800540e:	ecbd 8b06 	vpop	{d8-d10}
 8005412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005416:	2102      	movs	r1, #2
 8005418:	e7e0      	b.n	80053dc <__ieee754_pow+0xdc>
 800541a:	2f00      	cmp	r7, #0
 800541c:	daf2      	bge.n	8005404 <__ieee754_pow+0x104>
 800541e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8005422:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005426:	e7ef      	b.n	8005408 <__ieee754_pow+0x108>
 8005428:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800542c:	d104      	bne.n	8005438 <__ieee754_pow+0x138>
 800542e:	4610      	mov	r0, r2
 8005430:	4619      	mov	r1, r3
 8005432:	f7fb f8e9 	bl	8000608 <__aeabi_dmul>
 8005436:	e7e7      	b.n	8005408 <__ieee754_pow+0x108>
 8005438:	493e      	ldr	r1, [pc, #248]	; (8005534 <__ieee754_pow+0x234>)
 800543a:	428f      	cmp	r7, r1
 800543c:	d10d      	bne.n	800545a <__ieee754_pow+0x15a>
 800543e:	f1b9 0f00 	cmp.w	r9, #0
 8005442:	db0a      	blt.n	800545a <__ieee754_pow+0x15a>
 8005444:	ec43 2b10 	vmov	d0, r2, r3
 8005448:	b00d      	add	sp, #52	; 0x34
 800544a:	ecbd 8b06 	vpop	{d8-d10}
 800544e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005452:	f000 bc77 	b.w	8005d44 <__ieee754_sqrt>
 8005456:	2100      	movs	r1, #0
 8005458:	9100      	str	r1, [sp, #0]
 800545a:	ec43 2b10 	vmov	d0, r2, r3
 800545e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005462:	f000 fd26 	bl	8005eb2 <fabs>
 8005466:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800546a:	ec51 0b10 	vmov	r0, r1, d0
 800546e:	f1b8 0f00 	cmp.w	r8, #0
 8005472:	d12a      	bne.n	80054ca <__ieee754_pow+0x1ca>
 8005474:	b12c      	cbz	r4, 8005482 <__ieee754_pow+0x182>
 8005476:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800552c <__ieee754_pow+0x22c>
 800547a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800547e:	45e6      	cmp	lr, ip
 8005480:	d123      	bne.n	80054ca <__ieee754_pow+0x1ca>
 8005482:	2f00      	cmp	r7, #0
 8005484:	da05      	bge.n	8005492 <__ieee754_pow+0x192>
 8005486:	4602      	mov	r2, r0
 8005488:	460b      	mov	r3, r1
 800548a:	2000      	movs	r0, #0
 800548c:	4927      	ldr	r1, [pc, #156]	; (800552c <__ieee754_pow+0x22c>)
 800548e:	f7fb f9e5 	bl	800085c <__aeabi_ddiv>
 8005492:	f1b9 0f00 	cmp.w	r9, #0
 8005496:	dab7      	bge.n	8005408 <__ieee754_pow+0x108>
 8005498:	9b00      	ldr	r3, [sp, #0]
 800549a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800549e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80054a2:	4323      	orrs	r3, r4
 80054a4:	d108      	bne.n	80054b8 <__ieee754_pow+0x1b8>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	4610      	mov	r0, r2
 80054ac:	4619      	mov	r1, r3
 80054ae:	f7fa fef3 	bl	8000298 <__aeabi_dsub>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	e78d      	b.n	80053d4 <__ieee754_pow+0xd4>
 80054b8:	9b00      	ldr	r3, [sp, #0]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d1a4      	bne.n	8005408 <__ieee754_pow+0x108>
 80054be:	4602      	mov	r2, r0
 80054c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054c4:	4610      	mov	r0, r2
 80054c6:	4619      	mov	r1, r3
 80054c8:	e79e      	b.n	8005408 <__ieee754_pow+0x108>
 80054ca:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80054ce:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 80054d2:	950a      	str	r5, [sp, #40]	; 0x28
 80054d4:	9d00      	ldr	r5, [sp, #0]
 80054d6:	46ac      	mov	ip, r5
 80054d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80054da:	ea5c 0505 	orrs.w	r5, ip, r5
 80054de:	d0e4      	beq.n	80054aa <__ieee754_pow+0x1aa>
 80054e0:	4b15      	ldr	r3, [pc, #84]	; (8005538 <__ieee754_pow+0x238>)
 80054e2:	429e      	cmp	r6, r3
 80054e4:	f340 80fc 	ble.w	80056e0 <__ieee754_pow+0x3e0>
 80054e8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80054ec:	429e      	cmp	r6, r3
 80054ee:	4b10      	ldr	r3, [pc, #64]	; (8005530 <__ieee754_pow+0x230>)
 80054f0:	dd07      	ble.n	8005502 <__ieee754_pow+0x202>
 80054f2:	429c      	cmp	r4, r3
 80054f4:	dc0a      	bgt.n	800550c <__ieee754_pow+0x20c>
 80054f6:	2f00      	cmp	r7, #0
 80054f8:	da84      	bge.n	8005404 <__ieee754_pow+0x104>
 80054fa:	a307      	add	r3, pc, #28	; (adr r3, 8005518 <__ieee754_pow+0x218>)
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	e795      	b.n	800542e <__ieee754_pow+0x12e>
 8005502:	429c      	cmp	r4, r3
 8005504:	dbf7      	blt.n	80054f6 <__ieee754_pow+0x1f6>
 8005506:	4b09      	ldr	r3, [pc, #36]	; (800552c <__ieee754_pow+0x22c>)
 8005508:	429c      	cmp	r4, r3
 800550a:	dd17      	ble.n	800553c <__ieee754_pow+0x23c>
 800550c:	2f00      	cmp	r7, #0
 800550e:	dcf4      	bgt.n	80054fa <__ieee754_pow+0x1fa>
 8005510:	e778      	b.n	8005404 <__ieee754_pow+0x104>
 8005512:	bf00      	nop
 8005514:	f3af 8000 	nop.w
 8005518:	8800759c 	.word	0x8800759c
 800551c:	7e37e43c 	.word	0x7e37e43c
 8005520:	7ff00000 	.word	0x7ff00000
 8005524:	0801bed7 	.word	0x0801bed7
 8005528:	433fffff 	.word	0x433fffff
 800552c:	3ff00000 	.word	0x3ff00000
 8005530:	3fefffff 	.word	0x3fefffff
 8005534:	3fe00000 	.word	0x3fe00000
 8005538:	41e00000 	.word	0x41e00000
 800553c:	4b64      	ldr	r3, [pc, #400]	; (80056d0 <__ieee754_pow+0x3d0>)
 800553e:	2200      	movs	r2, #0
 8005540:	f7fa feaa 	bl	8000298 <__aeabi_dsub>
 8005544:	a356      	add	r3, pc, #344	; (adr r3, 80056a0 <__ieee754_pow+0x3a0>)
 8005546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554a:	4604      	mov	r4, r0
 800554c:	460d      	mov	r5, r1
 800554e:	f7fb f85b 	bl	8000608 <__aeabi_dmul>
 8005552:	a355      	add	r3, pc, #340	; (adr r3, 80056a8 <__ieee754_pow+0x3a8>)
 8005554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005558:	4606      	mov	r6, r0
 800555a:	460f      	mov	r7, r1
 800555c:	4620      	mov	r0, r4
 800555e:	4629      	mov	r1, r5
 8005560:	f7fb f852 	bl	8000608 <__aeabi_dmul>
 8005564:	4b5b      	ldr	r3, [pc, #364]	; (80056d4 <__ieee754_pow+0x3d4>)
 8005566:	4682      	mov	sl, r0
 8005568:	468b      	mov	fp, r1
 800556a:	2200      	movs	r2, #0
 800556c:	4620      	mov	r0, r4
 800556e:	4629      	mov	r1, r5
 8005570:	f7fb f84a 	bl	8000608 <__aeabi_dmul>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	a14d      	add	r1, pc, #308	; (adr r1, 80056b0 <__ieee754_pow+0x3b0>)
 800557a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800557e:	f7fa fe8b 	bl	8000298 <__aeabi_dsub>
 8005582:	4622      	mov	r2, r4
 8005584:	462b      	mov	r3, r5
 8005586:	f7fb f83f 	bl	8000608 <__aeabi_dmul>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	2000      	movs	r0, #0
 8005590:	4951      	ldr	r1, [pc, #324]	; (80056d8 <__ieee754_pow+0x3d8>)
 8005592:	f7fa fe81 	bl	8000298 <__aeabi_dsub>
 8005596:	4622      	mov	r2, r4
 8005598:	4680      	mov	r8, r0
 800559a:	4689      	mov	r9, r1
 800559c:	462b      	mov	r3, r5
 800559e:	4620      	mov	r0, r4
 80055a0:	4629      	mov	r1, r5
 80055a2:	f7fb f831 	bl	8000608 <__aeabi_dmul>
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	4640      	mov	r0, r8
 80055ac:	4649      	mov	r1, r9
 80055ae:	f7fb f82b 	bl	8000608 <__aeabi_dmul>
 80055b2:	a341      	add	r3, pc, #260	; (adr r3, 80056b8 <__ieee754_pow+0x3b8>)
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	f7fb f826 	bl	8000608 <__aeabi_dmul>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4650      	mov	r0, sl
 80055c2:	4659      	mov	r1, fp
 80055c4:	f7fa fe68 	bl	8000298 <__aeabi_dsub>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4680      	mov	r8, r0
 80055ce:	4689      	mov	r9, r1
 80055d0:	4630      	mov	r0, r6
 80055d2:	4639      	mov	r1, r7
 80055d4:	f7fa fe62 	bl	800029c <__adddf3>
 80055d8:	2400      	movs	r4, #0
 80055da:	4632      	mov	r2, r6
 80055dc:	463b      	mov	r3, r7
 80055de:	4620      	mov	r0, r4
 80055e0:	460d      	mov	r5, r1
 80055e2:	f7fa fe59 	bl	8000298 <__aeabi_dsub>
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	4640      	mov	r0, r8
 80055ec:	4649      	mov	r1, r9
 80055ee:	f7fa fe53 	bl	8000298 <__aeabi_dsub>
 80055f2:	9b00      	ldr	r3, [sp, #0]
 80055f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055f6:	3b01      	subs	r3, #1
 80055f8:	4313      	orrs	r3, r2
 80055fa:	4682      	mov	sl, r0
 80055fc:	468b      	mov	fp, r1
 80055fe:	f040 81f1 	bne.w	80059e4 <__ieee754_pow+0x6e4>
 8005602:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80056c0 <__ieee754_pow+0x3c0>
 8005606:	eeb0 8a47 	vmov.f32	s16, s14
 800560a:	eef0 8a67 	vmov.f32	s17, s15
 800560e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005612:	2600      	movs	r6, #0
 8005614:	4632      	mov	r2, r6
 8005616:	463b      	mov	r3, r7
 8005618:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800561c:	f7fa fe3c 	bl	8000298 <__aeabi_dsub>
 8005620:	4622      	mov	r2, r4
 8005622:	462b      	mov	r3, r5
 8005624:	f7fa fff0 	bl	8000608 <__aeabi_dmul>
 8005628:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800562c:	4680      	mov	r8, r0
 800562e:	4689      	mov	r9, r1
 8005630:	4650      	mov	r0, sl
 8005632:	4659      	mov	r1, fp
 8005634:	f7fa ffe8 	bl	8000608 <__aeabi_dmul>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4640      	mov	r0, r8
 800563e:	4649      	mov	r1, r9
 8005640:	f7fa fe2c 	bl	800029c <__adddf3>
 8005644:	4632      	mov	r2, r6
 8005646:	463b      	mov	r3, r7
 8005648:	4680      	mov	r8, r0
 800564a:	4689      	mov	r9, r1
 800564c:	4620      	mov	r0, r4
 800564e:	4629      	mov	r1, r5
 8005650:	f7fa ffda 	bl	8000608 <__aeabi_dmul>
 8005654:	460b      	mov	r3, r1
 8005656:	4604      	mov	r4, r0
 8005658:	460d      	mov	r5, r1
 800565a:	4602      	mov	r2, r0
 800565c:	4649      	mov	r1, r9
 800565e:	4640      	mov	r0, r8
 8005660:	f7fa fe1c 	bl	800029c <__adddf3>
 8005664:	4b1d      	ldr	r3, [pc, #116]	; (80056dc <__ieee754_pow+0x3dc>)
 8005666:	4299      	cmp	r1, r3
 8005668:	ec45 4b19 	vmov	d9, r4, r5
 800566c:	4606      	mov	r6, r0
 800566e:	460f      	mov	r7, r1
 8005670:	468b      	mov	fp, r1
 8005672:	f340 82fe 	ble.w	8005c72 <__ieee754_pow+0x972>
 8005676:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800567a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800567e:	4303      	orrs	r3, r0
 8005680:	f000 81f0 	beq.w	8005a64 <__ieee754_pow+0x764>
 8005684:	a310      	add	r3, pc, #64	; (adr r3, 80056c8 <__ieee754_pow+0x3c8>)
 8005686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568a:	ec51 0b18 	vmov	r0, r1, d8
 800568e:	f7fa ffbb 	bl	8000608 <__aeabi_dmul>
 8005692:	a30d      	add	r3, pc, #52	; (adr r3, 80056c8 <__ieee754_pow+0x3c8>)
 8005694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005698:	e6cb      	b.n	8005432 <__ieee754_pow+0x132>
 800569a:	bf00      	nop
 800569c:	f3af 8000 	nop.w
 80056a0:	60000000 	.word	0x60000000
 80056a4:	3ff71547 	.word	0x3ff71547
 80056a8:	f85ddf44 	.word	0xf85ddf44
 80056ac:	3e54ae0b 	.word	0x3e54ae0b
 80056b0:	55555555 	.word	0x55555555
 80056b4:	3fd55555 	.word	0x3fd55555
 80056b8:	652b82fe 	.word	0x652b82fe
 80056bc:	3ff71547 	.word	0x3ff71547
 80056c0:	00000000 	.word	0x00000000
 80056c4:	bff00000 	.word	0xbff00000
 80056c8:	8800759c 	.word	0x8800759c
 80056cc:	7e37e43c 	.word	0x7e37e43c
 80056d0:	3ff00000 	.word	0x3ff00000
 80056d4:	3fd00000 	.word	0x3fd00000
 80056d8:	3fe00000 	.word	0x3fe00000
 80056dc:	408fffff 	.word	0x408fffff
 80056e0:	4bd7      	ldr	r3, [pc, #860]	; (8005a40 <__ieee754_pow+0x740>)
 80056e2:	ea03 0309 	and.w	r3, r3, r9
 80056e6:	2200      	movs	r2, #0
 80056e8:	b92b      	cbnz	r3, 80056f6 <__ieee754_pow+0x3f6>
 80056ea:	4bd6      	ldr	r3, [pc, #856]	; (8005a44 <__ieee754_pow+0x744>)
 80056ec:	f7fa ff8c 	bl	8000608 <__aeabi_dmul>
 80056f0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80056f4:	460c      	mov	r4, r1
 80056f6:	1523      	asrs	r3, r4, #20
 80056f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80056fc:	4413      	add	r3, r2
 80056fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005700:	4bd1      	ldr	r3, [pc, #836]	; (8005a48 <__ieee754_pow+0x748>)
 8005702:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005706:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800570a:	429c      	cmp	r4, r3
 800570c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005710:	dd08      	ble.n	8005724 <__ieee754_pow+0x424>
 8005712:	4bce      	ldr	r3, [pc, #824]	; (8005a4c <__ieee754_pow+0x74c>)
 8005714:	429c      	cmp	r4, r3
 8005716:	f340 8163 	ble.w	80059e0 <__ieee754_pow+0x6e0>
 800571a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800571c:	3301      	adds	r3, #1
 800571e:	9309      	str	r3, [sp, #36]	; 0x24
 8005720:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005724:	2400      	movs	r4, #0
 8005726:	00e3      	lsls	r3, r4, #3
 8005728:	930b      	str	r3, [sp, #44]	; 0x2c
 800572a:	4bc9      	ldr	r3, [pc, #804]	; (8005a50 <__ieee754_pow+0x750>)
 800572c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005730:	ed93 7b00 	vldr	d7, [r3]
 8005734:	4629      	mov	r1, r5
 8005736:	ec53 2b17 	vmov	r2, r3, d7
 800573a:	eeb0 8a47 	vmov.f32	s16, s14
 800573e:	eef0 8a67 	vmov.f32	s17, s15
 8005742:	4682      	mov	sl, r0
 8005744:	f7fa fda8 	bl	8000298 <__aeabi_dsub>
 8005748:	4652      	mov	r2, sl
 800574a:	4606      	mov	r6, r0
 800574c:	460f      	mov	r7, r1
 800574e:	462b      	mov	r3, r5
 8005750:	ec51 0b18 	vmov	r0, r1, d8
 8005754:	f7fa fda2 	bl	800029c <__adddf3>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	2000      	movs	r0, #0
 800575e:	49bd      	ldr	r1, [pc, #756]	; (8005a54 <__ieee754_pow+0x754>)
 8005760:	f7fb f87c 	bl	800085c <__aeabi_ddiv>
 8005764:	ec41 0b19 	vmov	d9, r0, r1
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	4630      	mov	r0, r6
 800576e:	4639      	mov	r1, r7
 8005770:	f7fa ff4a 	bl	8000608 <__aeabi_dmul>
 8005774:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005778:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800577c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005780:	2300      	movs	r3, #0
 8005782:	9304      	str	r3, [sp, #16]
 8005784:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005788:	46ab      	mov	fp, r5
 800578a:	106d      	asrs	r5, r5, #1
 800578c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005790:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005794:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005798:	2200      	movs	r2, #0
 800579a:	4640      	mov	r0, r8
 800579c:	4649      	mov	r1, r9
 800579e:	4614      	mov	r4, r2
 80057a0:	461d      	mov	r5, r3
 80057a2:	f7fa ff31 	bl	8000608 <__aeabi_dmul>
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	4630      	mov	r0, r6
 80057ac:	4639      	mov	r1, r7
 80057ae:	f7fa fd73 	bl	8000298 <__aeabi_dsub>
 80057b2:	ec53 2b18 	vmov	r2, r3, d8
 80057b6:	4606      	mov	r6, r0
 80057b8:	460f      	mov	r7, r1
 80057ba:	4620      	mov	r0, r4
 80057bc:	4629      	mov	r1, r5
 80057be:	f7fa fd6b 	bl	8000298 <__aeabi_dsub>
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	4650      	mov	r0, sl
 80057c8:	4659      	mov	r1, fp
 80057ca:	f7fa fd65 	bl	8000298 <__aeabi_dsub>
 80057ce:	4642      	mov	r2, r8
 80057d0:	464b      	mov	r3, r9
 80057d2:	f7fa ff19 	bl	8000608 <__aeabi_dmul>
 80057d6:	4602      	mov	r2, r0
 80057d8:	460b      	mov	r3, r1
 80057da:	4630      	mov	r0, r6
 80057dc:	4639      	mov	r1, r7
 80057de:	f7fa fd5b 	bl	8000298 <__aeabi_dsub>
 80057e2:	ec53 2b19 	vmov	r2, r3, d9
 80057e6:	f7fa ff0f 	bl	8000608 <__aeabi_dmul>
 80057ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057ee:	ec41 0b18 	vmov	d8, r0, r1
 80057f2:	4610      	mov	r0, r2
 80057f4:	4619      	mov	r1, r3
 80057f6:	f7fa ff07 	bl	8000608 <__aeabi_dmul>
 80057fa:	a37d      	add	r3, pc, #500	; (adr r3, 80059f0 <__ieee754_pow+0x6f0>)
 80057fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005800:	4604      	mov	r4, r0
 8005802:	460d      	mov	r5, r1
 8005804:	f7fa ff00 	bl	8000608 <__aeabi_dmul>
 8005808:	a37b      	add	r3, pc, #492	; (adr r3, 80059f8 <__ieee754_pow+0x6f8>)
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	f7fa fd45 	bl	800029c <__adddf3>
 8005812:	4622      	mov	r2, r4
 8005814:	462b      	mov	r3, r5
 8005816:	f7fa fef7 	bl	8000608 <__aeabi_dmul>
 800581a:	a379      	add	r3, pc, #484	; (adr r3, 8005a00 <__ieee754_pow+0x700>)
 800581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005820:	f7fa fd3c 	bl	800029c <__adddf3>
 8005824:	4622      	mov	r2, r4
 8005826:	462b      	mov	r3, r5
 8005828:	f7fa feee 	bl	8000608 <__aeabi_dmul>
 800582c:	a376      	add	r3, pc, #472	; (adr r3, 8005a08 <__ieee754_pow+0x708>)
 800582e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005832:	f7fa fd33 	bl	800029c <__adddf3>
 8005836:	4622      	mov	r2, r4
 8005838:	462b      	mov	r3, r5
 800583a:	f7fa fee5 	bl	8000608 <__aeabi_dmul>
 800583e:	a374      	add	r3, pc, #464	; (adr r3, 8005a10 <__ieee754_pow+0x710>)
 8005840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005844:	f7fa fd2a 	bl	800029c <__adddf3>
 8005848:	4622      	mov	r2, r4
 800584a:	462b      	mov	r3, r5
 800584c:	f7fa fedc 	bl	8000608 <__aeabi_dmul>
 8005850:	a371      	add	r3, pc, #452	; (adr r3, 8005a18 <__ieee754_pow+0x718>)
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	f7fa fd21 	bl	800029c <__adddf3>
 800585a:	4622      	mov	r2, r4
 800585c:	4606      	mov	r6, r0
 800585e:	460f      	mov	r7, r1
 8005860:	462b      	mov	r3, r5
 8005862:	4620      	mov	r0, r4
 8005864:	4629      	mov	r1, r5
 8005866:	f7fa fecf 	bl	8000608 <__aeabi_dmul>
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	4630      	mov	r0, r6
 8005870:	4639      	mov	r1, r7
 8005872:	f7fa fec9 	bl	8000608 <__aeabi_dmul>
 8005876:	4642      	mov	r2, r8
 8005878:	4604      	mov	r4, r0
 800587a:	460d      	mov	r5, r1
 800587c:	464b      	mov	r3, r9
 800587e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005882:	f7fa fd0b 	bl	800029c <__adddf3>
 8005886:	ec53 2b18 	vmov	r2, r3, d8
 800588a:	f7fa febd 	bl	8000608 <__aeabi_dmul>
 800588e:	4622      	mov	r2, r4
 8005890:	462b      	mov	r3, r5
 8005892:	f7fa fd03 	bl	800029c <__adddf3>
 8005896:	4642      	mov	r2, r8
 8005898:	4682      	mov	sl, r0
 800589a:	468b      	mov	fp, r1
 800589c:	464b      	mov	r3, r9
 800589e:	4640      	mov	r0, r8
 80058a0:	4649      	mov	r1, r9
 80058a2:	f7fa feb1 	bl	8000608 <__aeabi_dmul>
 80058a6:	4b6c      	ldr	r3, [pc, #432]	; (8005a58 <__ieee754_pow+0x758>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	4606      	mov	r6, r0
 80058ac:	460f      	mov	r7, r1
 80058ae:	f7fa fcf5 	bl	800029c <__adddf3>
 80058b2:	4652      	mov	r2, sl
 80058b4:	465b      	mov	r3, fp
 80058b6:	f7fa fcf1 	bl	800029c <__adddf3>
 80058ba:	9c04      	ldr	r4, [sp, #16]
 80058bc:	460d      	mov	r5, r1
 80058be:	4622      	mov	r2, r4
 80058c0:	460b      	mov	r3, r1
 80058c2:	4640      	mov	r0, r8
 80058c4:	4649      	mov	r1, r9
 80058c6:	f7fa fe9f 	bl	8000608 <__aeabi_dmul>
 80058ca:	4b63      	ldr	r3, [pc, #396]	; (8005a58 <__ieee754_pow+0x758>)
 80058cc:	4680      	mov	r8, r0
 80058ce:	4689      	mov	r9, r1
 80058d0:	2200      	movs	r2, #0
 80058d2:	4620      	mov	r0, r4
 80058d4:	4629      	mov	r1, r5
 80058d6:	f7fa fcdf 	bl	8000298 <__aeabi_dsub>
 80058da:	4632      	mov	r2, r6
 80058dc:	463b      	mov	r3, r7
 80058de:	f7fa fcdb 	bl	8000298 <__aeabi_dsub>
 80058e2:	4602      	mov	r2, r0
 80058e4:	460b      	mov	r3, r1
 80058e6:	4650      	mov	r0, sl
 80058e8:	4659      	mov	r1, fp
 80058ea:	f7fa fcd5 	bl	8000298 <__aeabi_dsub>
 80058ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058f2:	f7fa fe89 	bl	8000608 <__aeabi_dmul>
 80058f6:	4622      	mov	r2, r4
 80058f8:	4606      	mov	r6, r0
 80058fa:	460f      	mov	r7, r1
 80058fc:	462b      	mov	r3, r5
 80058fe:	ec51 0b18 	vmov	r0, r1, d8
 8005902:	f7fa fe81 	bl	8000608 <__aeabi_dmul>
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	4630      	mov	r0, r6
 800590c:	4639      	mov	r1, r7
 800590e:	f7fa fcc5 	bl	800029c <__adddf3>
 8005912:	4606      	mov	r6, r0
 8005914:	460f      	mov	r7, r1
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	4640      	mov	r0, r8
 800591c:	4649      	mov	r1, r9
 800591e:	f7fa fcbd 	bl	800029c <__adddf3>
 8005922:	9c04      	ldr	r4, [sp, #16]
 8005924:	a33e      	add	r3, pc, #248	; (adr r3, 8005a20 <__ieee754_pow+0x720>)
 8005926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592a:	4620      	mov	r0, r4
 800592c:	460d      	mov	r5, r1
 800592e:	f7fa fe6b 	bl	8000608 <__aeabi_dmul>
 8005932:	4642      	mov	r2, r8
 8005934:	ec41 0b18 	vmov	d8, r0, r1
 8005938:	464b      	mov	r3, r9
 800593a:	4620      	mov	r0, r4
 800593c:	4629      	mov	r1, r5
 800593e:	f7fa fcab 	bl	8000298 <__aeabi_dsub>
 8005942:	4602      	mov	r2, r0
 8005944:	460b      	mov	r3, r1
 8005946:	4630      	mov	r0, r6
 8005948:	4639      	mov	r1, r7
 800594a:	f7fa fca5 	bl	8000298 <__aeabi_dsub>
 800594e:	a336      	add	r3, pc, #216	; (adr r3, 8005a28 <__ieee754_pow+0x728>)
 8005950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005954:	f7fa fe58 	bl	8000608 <__aeabi_dmul>
 8005958:	a335      	add	r3, pc, #212	; (adr r3, 8005a30 <__ieee754_pow+0x730>)
 800595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595e:	4606      	mov	r6, r0
 8005960:	460f      	mov	r7, r1
 8005962:	4620      	mov	r0, r4
 8005964:	4629      	mov	r1, r5
 8005966:	f7fa fe4f 	bl	8000608 <__aeabi_dmul>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	4630      	mov	r0, r6
 8005970:	4639      	mov	r1, r7
 8005972:	f7fa fc93 	bl	800029c <__adddf3>
 8005976:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005978:	4b38      	ldr	r3, [pc, #224]	; (8005a5c <__ieee754_pow+0x75c>)
 800597a:	4413      	add	r3, r2
 800597c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005980:	f7fa fc8c 	bl	800029c <__adddf3>
 8005984:	4682      	mov	sl, r0
 8005986:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005988:	468b      	mov	fp, r1
 800598a:	f7fa fdd3 	bl	8000534 <__aeabi_i2d>
 800598e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005990:	4b33      	ldr	r3, [pc, #204]	; (8005a60 <__ieee754_pow+0x760>)
 8005992:	4413      	add	r3, r2
 8005994:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005998:	4606      	mov	r6, r0
 800599a:	460f      	mov	r7, r1
 800599c:	4652      	mov	r2, sl
 800599e:	465b      	mov	r3, fp
 80059a0:	ec51 0b18 	vmov	r0, r1, d8
 80059a4:	f7fa fc7a 	bl	800029c <__adddf3>
 80059a8:	4642      	mov	r2, r8
 80059aa:	464b      	mov	r3, r9
 80059ac:	f7fa fc76 	bl	800029c <__adddf3>
 80059b0:	4632      	mov	r2, r6
 80059b2:	463b      	mov	r3, r7
 80059b4:	f7fa fc72 	bl	800029c <__adddf3>
 80059b8:	9c04      	ldr	r4, [sp, #16]
 80059ba:	4632      	mov	r2, r6
 80059bc:	463b      	mov	r3, r7
 80059be:	4620      	mov	r0, r4
 80059c0:	460d      	mov	r5, r1
 80059c2:	f7fa fc69 	bl	8000298 <__aeabi_dsub>
 80059c6:	4642      	mov	r2, r8
 80059c8:	464b      	mov	r3, r9
 80059ca:	f7fa fc65 	bl	8000298 <__aeabi_dsub>
 80059ce:	ec53 2b18 	vmov	r2, r3, d8
 80059d2:	f7fa fc61 	bl	8000298 <__aeabi_dsub>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	4650      	mov	r0, sl
 80059dc:	4659      	mov	r1, fp
 80059de:	e606      	b.n	80055ee <__ieee754_pow+0x2ee>
 80059e0:	2401      	movs	r4, #1
 80059e2:	e6a0      	b.n	8005726 <__ieee754_pow+0x426>
 80059e4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8005a38 <__ieee754_pow+0x738>
 80059e8:	e60d      	b.n	8005606 <__ieee754_pow+0x306>
 80059ea:	bf00      	nop
 80059ec:	f3af 8000 	nop.w
 80059f0:	4a454eef 	.word	0x4a454eef
 80059f4:	3fca7e28 	.word	0x3fca7e28
 80059f8:	93c9db65 	.word	0x93c9db65
 80059fc:	3fcd864a 	.word	0x3fcd864a
 8005a00:	a91d4101 	.word	0xa91d4101
 8005a04:	3fd17460 	.word	0x3fd17460
 8005a08:	518f264d 	.word	0x518f264d
 8005a0c:	3fd55555 	.word	0x3fd55555
 8005a10:	db6fabff 	.word	0xdb6fabff
 8005a14:	3fdb6db6 	.word	0x3fdb6db6
 8005a18:	33333303 	.word	0x33333303
 8005a1c:	3fe33333 	.word	0x3fe33333
 8005a20:	e0000000 	.word	0xe0000000
 8005a24:	3feec709 	.word	0x3feec709
 8005a28:	dc3a03fd 	.word	0xdc3a03fd
 8005a2c:	3feec709 	.word	0x3feec709
 8005a30:	145b01f5 	.word	0x145b01f5
 8005a34:	be3e2fe0 	.word	0xbe3e2fe0
 8005a38:	00000000 	.word	0x00000000
 8005a3c:	3ff00000 	.word	0x3ff00000
 8005a40:	7ff00000 	.word	0x7ff00000
 8005a44:	43400000 	.word	0x43400000
 8005a48:	0003988e 	.word	0x0003988e
 8005a4c:	000bb679 	.word	0x000bb679
 8005a50:	0801bc30 	.word	0x0801bc30
 8005a54:	3ff00000 	.word	0x3ff00000
 8005a58:	40080000 	.word	0x40080000
 8005a5c:	0801bc50 	.word	0x0801bc50
 8005a60:	0801bc40 	.word	0x0801bc40
 8005a64:	a3b5      	add	r3, pc, #724	; (adr r3, 8005d3c <__ieee754_pow+0xa3c>)
 8005a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6a:	4640      	mov	r0, r8
 8005a6c:	4649      	mov	r1, r9
 8005a6e:	f7fa fc15 	bl	800029c <__adddf3>
 8005a72:	4622      	mov	r2, r4
 8005a74:	ec41 0b1a 	vmov	d10, r0, r1
 8005a78:	462b      	mov	r3, r5
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	4639      	mov	r1, r7
 8005a7e:	f7fa fc0b 	bl	8000298 <__aeabi_dsub>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	ec51 0b1a 	vmov	r0, r1, d10
 8005a8a:	f7fb f84d 	bl	8000b28 <__aeabi_dcmpgt>
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	f47f adf8 	bne.w	8005684 <__ieee754_pow+0x384>
 8005a94:	4aa4      	ldr	r2, [pc, #656]	; (8005d28 <__ieee754_pow+0xa28>)
 8005a96:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	f340 810b 	ble.w	8005cb6 <__ieee754_pow+0x9b6>
 8005aa0:	151b      	asrs	r3, r3, #20
 8005aa2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005aa6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005aaa:	fa4a f303 	asr.w	r3, sl, r3
 8005aae:	445b      	add	r3, fp
 8005ab0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005ab4:	4e9d      	ldr	r6, [pc, #628]	; (8005d2c <__ieee754_pow+0xa2c>)
 8005ab6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005aba:	4116      	asrs	r6, r2
 8005abc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	ea23 0106 	bic.w	r1, r3, r6
 8005ac6:	f1c2 0214 	rsb	r2, r2, #20
 8005aca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005ace:	fa4a fa02 	asr.w	sl, sl, r2
 8005ad2:	f1bb 0f00 	cmp.w	fp, #0
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4620      	mov	r0, r4
 8005adc:	4629      	mov	r1, r5
 8005ade:	bfb8      	it	lt
 8005ae0:	f1ca 0a00 	rsblt	sl, sl, #0
 8005ae4:	f7fa fbd8 	bl	8000298 <__aeabi_dsub>
 8005ae8:	ec41 0b19 	vmov	d9, r0, r1
 8005aec:	4642      	mov	r2, r8
 8005aee:	464b      	mov	r3, r9
 8005af0:	ec51 0b19 	vmov	r0, r1, d9
 8005af4:	f7fa fbd2 	bl	800029c <__adddf3>
 8005af8:	2400      	movs	r4, #0
 8005afa:	a379      	add	r3, pc, #484	; (adr r3, 8005ce0 <__ieee754_pow+0x9e0>)
 8005afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b00:	4620      	mov	r0, r4
 8005b02:	460d      	mov	r5, r1
 8005b04:	f7fa fd80 	bl	8000608 <__aeabi_dmul>
 8005b08:	ec53 2b19 	vmov	r2, r3, d9
 8005b0c:	4606      	mov	r6, r0
 8005b0e:	460f      	mov	r7, r1
 8005b10:	4620      	mov	r0, r4
 8005b12:	4629      	mov	r1, r5
 8005b14:	f7fa fbc0 	bl	8000298 <__aeabi_dsub>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4640      	mov	r0, r8
 8005b1e:	4649      	mov	r1, r9
 8005b20:	f7fa fbba 	bl	8000298 <__aeabi_dsub>
 8005b24:	a370      	add	r3, pc, #448	; (adr r3, 8005ce8 <__ieee754_pow+0x9e8>)
 8005b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2a:	f7fa fd6d 	bl	8000608 <__aeabi_dmul>
 8005b2e:	a370      	add	r3, pc, #448	; (adr r3, 8005cf0 <__ieee754_pow+0x9f0>)
 8005b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b34:	4680      	mov	r8, r0
 8005b36:	4689      	mov	r9, r1
 8005b38:	4620      	mov	r0, r4
 8005b3a:	4629      	mov	r1, r5
 8005b3c:	f7fa fd64 	bl	8000608 <__aeabi_dmul>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4640      	mov	r0, r8
 8005b46:	4649      	mov	r1, r9
 8005b48:	f7fa fba8 	bl	800029c <__adddf3>
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	460d      	mov	r5, r1
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4630      	mov	r0, r6
 8005b56:	4639      	mov	r1, r7
 8005b58:	f7fa fba0 	bl	800029c <__adddf3>
 8005b5c:	4632      	mov	r2, r6
 8005b5e:	463b      	mov	r3, r7
 8005b60:	4680      	mov	r8, r0
 8005b62:	4689      	mov	r9, r1
 8005b64:	f7fa fb98 	bl	8000298 <__aeabi_dsub>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	4629      	mov	r1, r5
 8005b70:	f7fa fb92 	bl	8000298 <__aeabi_dsub>
 8005b74:	4642      	mov	r2, r8
 8005b76:	4606      	mov	r6, r0
 8005b78:	460f      	mov	r7, r1
 8005b7a:	464b      	mov	r3, r9
 8005b7c:	4640      	mov	r0, r8
 8005b7e:	4649      	mov	r1, r9
 8005b80:	f7fa fd42 	bl	8000608 <__aeabi_dmul>
 8005b84:	a35c      	add	r3, pc, #368	; (adr r3, 8005cf8 <__ieee754_pow+0x9f8>)
 8005b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	460d      	mov	r5, r1
 8005b8e:	f7fa fd3b 	bl	8000608 <__aeabi_dmul>
 8005b92:	a35b      	add	r3, pc, #364	; (adr r3, 8005d00 <__ieee754_pow+0xa00>)
 8005b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b98:	f7fa fb7e 	bl	8000298 <__aeabi_dsub>
 8005b9c:	4622      	mov	r2, r4
 8005b9e:	462b      	mov	r3, r5
 8005ba0:	f7fa fd32 	bl	8000608 <__aeabi_dmul>
 8005ba4:	a358      	add	r3, pc, #352	; (adr r3, 8005d08 <__ieee754_pow+0xa08>)
 8005ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005baa:	f7fa fb77 	bl	800029c <__adddf3>
 8005bae:	4622      	mov	r2, r4
 8005bb0:	462b      	mov	r3, r5
 8005bb2:	f7fa fd29 	bl	8000608 <__aeabi_dmul>
 8005bb6:	a356      	add	r3, pc, #344	; (adr r3, 8005d10 <__ieee754_pow+0xa10>)
 8005bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbc:	f7fa fb6c 	bl	8000298 <__aeabi_dsub>
 8005bc0:	4622      	mov	r2, r4
 8005bc2:	462b      	mov	r3, r5
 8005bc4:	f7fa fd20 	bl	8000608 <__aeabi_dmul>
 8005bc8:	a353      	add	r3, pc, #332	; (adr r3, 8005d18 <__ieee754_pow+0xa18>)
 8005bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bce:	f7fa fb65 	bl	800029c <__adddf3>
 8005bd2:	4622      	mov	r2, r4
 8005bd4:	462b      	mov	r3, r5
 8005bd6:	f7fa fd17 	bl	8000608 <__aeabi_dmul>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4640      	mov	r0, r8
 8005be0:	4649      	mov	r1, r9
 8005be2:	f7fa fb59 	bl	8000298 <__aeabi_dsub>
 8005be6:	4604      	mov	r4, r0
 8005be8:	460d      	mov	r5, r1
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	4640      	mov	r0, r8
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	f7fa fd09 	bl	8000608 <__aeabi_dmul>
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	ec41 0b19 	vmov	d9, r0, r1
 8005bfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c00:	4620      	mov	r0, r4
 8005c02:	4629      	mov	r1, r5
 8005c04:	f7fa fb48 	bl	8000298 <__aeabi_dsub>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	ec51 0b19 	vmov	r0, r1, d9
 8005c10:	f7fa fe24 	bl	800085c <__aeabi_ddiv>
 8005c14:	4632      	mov	r2, r6
 8005c16:	4604      	mov	r4, r0
 8005c18:	460d      	mov	r5, r1
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	4640      	mov	r0, r8
 8005c1e:	4649      	mov	r1, r9
 8005c20:	f7fa fcf2 	bl	8000608 <__aeabi_dmul>
 8005c24:	4632      	mov	r2, r6
 8005c26:	463b      	mov	r3, r7
 8005c28:	f7fa fb38 	bl	800029c <__adddf3>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4620      	mov	r0, r4
 8005c32:	4629      	mov	r1, r5
 8005c34:	f7fa fb30 	bl	8000298 <__aeabi_dsub>
 8005c38:	4642      	mov	r2, r8
 8005c3a:	464b      	mov	r3, r9
 8005c3c:	f7fa fb2c 	bl	8000298 <__aeabi_dsub>
 8005c40:	460b      	mov	r3, r1
 8005c42:	4602      	mov	r2, r0
 8005c44:	493a      	ldr	r1, [pc, #232]	; (8005d30 <__ieee754_pow+0xa30>)
 8005c46:	2000      	movs	r0, #0
 8005c48:	f7fa fb26 	bl	8000298 <__aeabi_dsub>
 8005c4c:	e9cd 0100 	strd	r0, r1, [sp]
 8005c50:	9b01      	ldr	r3, [sp, #4]
 8005c52:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c5a:	da2f      	bge.n	8005cbc <__ieee754_pow+0x9bc>
 8005c5c:	4650      	mov	r0, sl
 8005c5e:	ed9d 0b00 	vldr	d0, [sp]
 8005c62:	f000 f9d1 	bl	8006008 <scalbn>
 8005c66:	ec51 0b10 	vmov	r0, r1, d0
 8005c6a:	ec53 2b18 	vmov	r2, r3, d8
 8005c6e:	f7ff bbe0 	b.w	8005432 <__ieee754_pow+0x132>
 8005c72:	4b30      	ldr	r3, [pc, #192]	; (8005d34 <__ieee754_pow+0xa34>)
 8005c74:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005c78:	429e      	cmp	r6, r3
 8005c7a:	f77f af0b 	ble.w	8005a94 <__ieee754_pow+0x794>
 8005c7e:	4b2e      	ldr	r3, [pc, #184]	; (8005d38 <__ieee754_pow+0xa38>)
 8005c80:	440b      	add	r3, r1
 8005c82:	4303      	orrs	r3, r0
 8005c84:	d00b      	beq.n	8005c9e <__ieee754_pow+0x99e>
 8005c86:	a326      	add	r3, pc, #152	; (adr r3, 8005d20 <__ieee754_pow+0xa20>)
 8005c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8c:	ec51 0b18 	vmov	r0, r1, d8
 8005c90:	f7fa fcba 	bl	8000608 <__aeabi_dmul>
 8005c94:	a322      	add	r3, pc, #136	; (adr r3, 8005d20 <__ieee754_pow+0xa20>)
 8005c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9a:	f7ff bbca 	b.w	8005432 <__ieee754_pow+0x132>
 8005c9e:	4622      	mov	r2, r4
 8005ca0:	462b      	mov	r3, r5
 8005ca2:	f7fa faf9 	bl	8000298 <__aeabi_dsub>
 8005ca6:	4642      	mov	r2, r8
 8005ca8:	464b      	mov	r3, r9
 8005caa:	f7fa ff33 	bl	8000b14 <__aeabi_dcmpge>
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	f43f aef0 	beq.w	8005a94 <__ieee754_pow+0x794>
 8005cb4:	e7e7      	b.n	8005c86 <__ieee754_pow+0x986>
 8005cb6:	f04f 0a00 	mov.w	sl, #0
 8005cba:	e717      	b.n	8005aec <__ieee754_pow+0x7ec>
 8005cbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	e7d2      	b.n	8005c6a <__ieee754_pow+0x96a>
 8005cc4:	491a      	ldr	r1, [pc, #104]	; (8005d30 <__ieee754_pow+0xa30>)
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	f7ff bb9e 	b.w	8005408 <__ieee754_pow+0x108>
 8005ccc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cd0:	f7ff bb9a 	b.w	8005408 <__ieee754_pow+0x108>
 8005cd4:	9000      	str	r0, [sp, #0]
 8005cd6:	f7ff bb76 	b.w	80053c6 <__ieee754_pow+0xc6>
 8005cda:	2100      	movs	r1, #0
 8005cdc:	f7ff bb60 	b.w	80053a0 <__ieee754_pow+0xa0>
 8005ce0:	00000000 	.word	0x00000000
 8005ce4:	3fe62e43 	.word	0x3fe62e43
 8005ce8:	fefa39ef 	.word	0xfefa39ef
 8005cec:	3fe62e42 	.word	0x3fe62e42
 8005cf0:	0ca86c39 	.word	0x0ca86c39
 8005cf4:	be205c61 	.word	0xbe205c61
 8005cf8:	72bea4d0 	.word	0x72bea4d0
 8005cfc:	3e663769 	.word	0x3e663769
 8005d00:	c5d26bf1 	.word	0xc5d26bf1
 8005d04:	3ebbbd41 	.word	0x3ebbbd41
 8005d08:	af25de2c 	.word	0xaf25de2c
 8005d0c:	3f11566a 	.word	0x3f11566a
 8005d10:	16bebd93 	.word	0x16bebd93
 8005d14:	3f66c16c 	.word	0x3f66c16c
 8005d18:	5555553e 	.word	0x5555553e
 8005d1c:	3fc55555 	.word	0x3fc55555
 8005d20:	c2f8f359 	.word	0xc2f8f359
 8005d24:	01a56e1f 	.word	0x01a56e1f
 8005d28:	3fe00000 	.word	0x3fe00000
 8005d2c:	000fffff 	.word	0x000fffff
 8005d30:	3ff00000 	.word	0x3ff00000
 8005d34:	4090cbff 	.word	0x4090cbff
 8005d38:	3f6f3400 	.word	0x3f6f3400
 8005d3c:	652b82fe 	.word	0x652b82fe
 8005d40:	3c971547 	.word	0x3c971547

08005d44 <__ieee754_sqrt>:
 8005d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d48:	ec55 4b10 	vmov	r4, r5, d0
 8005d4c:	4e56      	ldr	r6, [pc, #344]	; (8005ea8 <__ieee754_sqrt+0x164>)
 8005d4e:	43ae      	bics	r6, r5
 8005d50:	ee10 0a10 	vmov	r0, s0
 8005d54:	ee10 3a10 	vmov	r3, s0
 8005d58:	4629      	mov	r1, r5
 8005d5a:	462a      	mov	r2, r5
 8005d5c:	d110      	bne.n	8005d80 <__ieee754_sqrt+0x3c>
 8005d5e:	ee10 2a10 	vmov	r2, s0
 8005d62:	462b      	mov	r3, r5
 8005d64:	f7fa fc50 	bl	8000608 <__aeabi_dmul>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	4629      	mov	r1, r5
 8005d70:	f7fa fa94 	bl	800029c <__adddf3>
 8005d74:	4604      	mov	r4, r0
 8005d76:	460d      	mov	r5, r1
 8005d78:	ec45 4b10 	vmov	d0, r4, r5
 8005d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d80:	2d00      	cmp	r5, #0
 8005d82:	dc10      	bgt.n	8005da6 <__ieee754_sqrt+0x62>
 8005d84:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005d88:	4330      	orrs	r0, r6
 8005d8a:	d0f5      	beq.n	8005d78 <__ieee754_sqrt+0x34>
 8005d8c:	b15d      	cbz	r5, 8005da6 <__ieee754_sqrt+0x62>
 8005d8e:	ee10 2a10 	vmov	r2, s0
 8005d92:	462b      	mov	r3, r5
 8005d94:	ee10 0a10 	vmov	r0, s0
 8005d98:	f7fa fa7e 	bl	8000298 <__aeabi_dsub>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	f7fa fd5c 	bl	800085c <__aeabi_ddiv>
 8005da4:	e7e6      	b.n	8005d74 <__ieee754_sqrt+0x30>
 8005da6:	1509      	asrs	r1, r1, #20
 8005da8:	d076      	beq.n	8005e98 <__ieee754_sqrt+0x154>
 8005daa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005dae:	07ce      	lsls	r6, r1, #31
 8005db0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8005db4:	bf5e      	ittt	pl
 8005db6:	0fda      	lsrpl	r2, r3, #31
 8005db8:	005b      	lslpl	r3, r3, #1
 8005dba:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8005dbe:	0fda      	lsrs	r2, r3, #31
 8005dc0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8005dc4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8005dc8:	2000      	movs	r0, #0
 8005dca:	106d      	asrs	r5, r5, #1
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	f04f 0e16 	mov.w	lr, #22
 8005dd2:	4684      	mov	ip, r0
 8005dd4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005dd8:	eb0c 0401 	add.w	r4, ip, r1
 8005ddc:	4294      	cmp	r4, r2
 8005dde:	bfde      	ittt	le
 8005de0:	1b12      	suble	r2, r2, r4
 8005de2:	eb04 0c01 	addle.w	ip, r4, r1
 8005de6:	1840      	addle	r0, r0, r1
 8005de8:	0052      	lsls	r2, r2, #1
 8005dea:	f1be 0e01 	subs.w	lr, lr, #1
 8005dee:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005df2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005df6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005dfa:	d1ed      	bne.n	8005dd8 <__ieee754_sqrt+0x94>
 8005dfc:	4671      	mov	r1, lr
 8005dfe:	2720      	movs	r7, #32
 8005e00:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005e04:	4562      	cmp	r2, ip
 8005e06:	eb04 060e 	add.w	r6, r4, lr
 8005e0a:	dc02      	bgt.n	8005e12 <__ieee754_sqrt+0xce>
 8005e0c:	d113      	bne.n	8005e36 <__ieee754_sqrt+0xf2>
 8005e0e:	429e      	cmp	r6, r3
 8005e10:	d811      	bhi.n	8005e36 <__ieee754_sqrt+0xf2>
 8005e12:	2e00      	cmp	r6, #0
 8005e14:	eb06 0e04 	add.w	lr, r6, r4
 8005e18:	da43      	bge.n	8005ea2 <__ieee754_sqrt+0x15e>
 8005e1a:	f1be 0f00 	cmp.w	lr, #0
 8005e1e:	db40      	blt.n	8005ea2 <__ieee754_sqrt+0x15e>
 8005e20:	f10c 0801 	add.w	r8, ip, #1
 8005e24:	eba2 020c 	sub.w	r2, r2, ip
 8005e28:	429e      	cmp	r6, r3
 8005e2a:	bf88      	it	hi
 8005e2c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8005e30:	1b9b      	subs	r3, r3, r6
 8005e32:	4421      	add	r1, r4
 8005e34:	46c4      	mov	ip, r8
 8005e36:	0052      	lsls	r2, r2, #1
 8005e38:	3f01      	subs	r7, #1
 8005e3a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005e3e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005e42:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005e46:	d1dd      	bne.n	8005e04 <__ieee754_sqrt+0xc0>
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	d006      	beq.n	8005e5a <__ieee754_sqrt+0x116>
 8005e4c:	1c4c      	adds	r4, r1, #1
 8005e4e:	bf13      	iteet	ne
 8005e50:	3101      	addne	r1, #1
 8005e52:	3001      	addeq	r0, #1
 8005e54:	4639      	moveq	r1, r7
 8005e56:	f021 0101 	bicne.w	r1, r1, #1
 8005e5a:	1043      	asrs	r3, r0, #1
 8005e5c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005e60:	0849      	lsrs	r1, r1, #1
 8005e62:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005e66:	07c2      	lsls	r2, r0, #31
 8005e68:	bf48      	it	mi
 8005e6a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005e6e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8005e72:	460c      	mov	r4, r1
 8005e74:	463d      	mov	r5, r7
 8005e76:	e77f      	b.n	8005d78 <__ieee754_sqrt+0x34>
 8005e78:	0ada      	lsrs	r2, r3, #11
 8005e7a:	3815      	subs	r0, #21
 8005e7c:	055b      	lsls	r3, r3, #21
 8005e7e:	2a00      	cmp	r2, #0
 8005e80:	d0fa      	beq.n	8005e78 <__ieee754_sqrt+0x134>
 8005e82:	02d7      	lsls	r7, r2, #11
 8005e84:	d50a      	bpl.n	8005e9c <__ieee754_sqrt+0x158>
 8005e86:	f1c1 0420 	rsb	r4, r1, #32
 8005e8a:	fa23 f404 	lsr.w	r4, r3, r4
 8005e8e:	1e4d      	subs	r5, r1, #1
 8005e90:	408b      	lsls	r3, r1
 8005e92:	4322      	orrs	r2, r4
 8005e94:	1b41      	subs	r1, r0, r5
 8005e96:	e788      	b.n	8005daa <__ieee754_sqrt+0x66>
 8005e98:	4608      	mov	r0, r1
 8005e9a:	e7f0      	b.n	8005e7e <__ieee754_sqrt+0x13a>
 8005e9c:	0052      	lsls	r2, r2, #1
 8005e9e:	3101      	adds	r1, #1
 8005ea0:	e7ef      	b.n	8005e82 <__ieee754_sqrt+0x13e>
 8005ea2:	46e0      	mov	r8, ip
 8005ea4:	e7be      	b.n	8005e24 <__ieee754_sqrt+0xe0>
 8005ea6:	bf00      	nop
 8005ea8:	7ff00000 	.word	0x7ff00000

08005eac <__ieee754_sqrtf>:
 8005eac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005eb0:	4770      	bx	lr

08005eb2 <fabs>:
 8005eb2:	ec51 0b10 	vmov	r0, r1, d0
 8005eb6:	ee10 2a10 	vmov	r2, s0
 8005eba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005ebe:	ec43 2b10 	vmov	d0, r2, r3
 8005ec2:	4770      	bx	lr

08005ec4 <finite>:
 8005ec4:	b082      	sub	sp, #8
 8005ec6:	ed8d 0b00 	vstr	d0, [sp]
 8005eca:	9801      	ldr	r0, [sp, #4]
 8005ecc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005ed0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005ed4:	0fc0      	lsrs	r0, r0, #31
 8005ed6:	b002      	add	sp, #8
 8005ed8:	4770      	bx	lr
 8005eda:	0000      	movs	r0, r0
 8005edc:	0000      	movs	r0, r0
	...

08005ee0 <nan>:
 8005ee0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005ee8 <nan+0x8>
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	00000000 	.word	0x00000000
 8005eec:	7ff80000 	.word	0x7ff80000

08005ef0 <rint>:
 8005ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ef2:	ec51 0b10 	vmov	r0, r1, d0
 8005ef6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005efa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005efe:	2e13      	cmp	r6, #19
 8005f00:	ee10 4a10 	vmov	r4, s0
 8005f04:	460b      	mov	r3, r1
 8005f06:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8005f0a:	dc58      	bgt.n	8005fbe <rint+0xce>
 8005f0c:	2e00      	cmp	r6, #0
 8005f0e:	da2b      	bge.n	8005f68 <rint+0x78>
 8005f10:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005f14:	4302      	orrs	r2, r0
 8005f16:	d023      	beq.n	8005f60 <rint+0x70>
 8005f18:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8005f1c:	4302      	orrs	r2, r0
 8005f1e:	4254      	negs	r4, r2
 8005f20:	4314      	orrs	r4, r2
 8005f22:	0c4b      	lsrs	r3, r1, #17
 8005f24:	0b24      	lsrs	r4, r4, #12
 8005f26:	045b      	lsls	r3, r3, #17
 8005f28:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8005f2c:	ea44 0103 	orr.w	r1, r4, r3
 8005f30:	4b32      	ldr	r3, [pc, #200]	; (8005ffc <rint+0x10c>)
 8005f32:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005f36:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4630      	mov	r0, r6
 8005f40:	4639      	mov	r1, r7
 8005f42:	f7fa f9ab 	bl	800029c <__adddf3>
 8005f46:	e9cd 0100 	strd	r0, r1, [sp]
 8005f4a:	463b      	mov	r3, r7
 8005f4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f50:	4632      	mov	r2, r6
 8005f52:	f7fa f9a1 	bl	8000298 <__aeabi_dsub>
 8005f56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005f5a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8005f5e:	4639      	mov	r1, r7
 8005f60:	ec41 0b10 	vmov	d0, r0, r1
 8005f64:	b003      	add	sp, #12
 8005f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f68:	4a25      	ldr	r2, [pc, #148]	; (8006000 <rint+0x110>)
 8005f6a:	4132      	asrs	r2, r6
 8005f6c:	ea01 0702 	and.w	r7, r1, r2
 8005f70:	4307      	orrs	r7, r0
 8005f72:	d0f5      	beq.n	8005f60 <rint+0x70>
 8005f74:	0851      	lsrs	r1, r2, #1
 8005f76:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8005f7a:	4314      	orrs	r4, r2
 8005f7c:	d00c      	beq.n	8005f98 <rint+0xa8>
 8005f7e:	ea23 0201 	bic.w	r2, r3, r1
 8005f82:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005f86:	2e13      	cmp	r6, #19
 8005f88:	fa43 f606 	asr.w	r6, r3, r6
 8005f8c:	bf0c      	ite	eq
 8005f8e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8005f92:	2400      	movne	r4, #0
 8005f94:	ea42 0306 	orr.w	r3, r2, r6
 8005f98:	4918      	ldr	r1, [pc, #96]	; (8005ffc <rint+0x10c>)
 8005f9a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8005f9e:	4622      	mov	r2, r4
 8005fa0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	4629      	mov	r1, r5
 8005fa8:	f7fa f978 	bl	800029c <__adddf3>
 8005fac:	e9cd 0100 	strd	r0, r1, [sp]
 8005fb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fb4:	4622      	mov	r2, r4
 8005fb6:	462b      	mov	r3, r5
 8005fb8:	f7fa f96e 	bl	8000298 <__aeabi_dsub>
 8005fbc:	e7d0      	b.n	8005f60 <rint+0x70>
 8005fbe:	2e33      	cmp	r6, #51	; 0x33
 8005fc0:	dd07      	ble.n	8005fd2 <rint+0xe2>
 8005fc2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005fc6:	d1cb      	bne.n	8005f60 <rint+0x70>
 8005fc8:	ee10 2a10 	vmov	r2, s0
 8005fcc:	f7fa f966 	bl	800029c <__adddf3>
 8005fd0:	e7c6      	b.n	8005f60 <rint+0x70>
 8005fd2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8005fd6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005fda:	40d6      	lsrs	r6, r2
 8005fdc:	4230      	tst	r0, r6
 8005fde:	d0bf      	beq.n	8005f60 <rint+0x70>
 8005fe0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8005fe4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8005fe8:	bf1f      	itttt	ne
 8005fea:	ea24 0101 	bicne.w	r1, r4, r1
 8005fee:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8005ff2:	fa44 f202 	asrne.w	r2, r4, r2
 8005ff6:	ea41 0402 	orrne.w	r4, r1, r2
 8005ffa:	e7cd      	b.n	8005f98 <rint+0xa8>
 8005ffc:	0801bc60 	.word	0x0801bc60
 8006000:	000fffff 	.word	0x000fffff
 8006004:	00000000 	.word	0x00000000

08006008 <scalbn>:
 8006008:	b570      	push	{r4, r5, r6, lr}
 800600a:	ec55 4b10 	vmov	r4, r5, d0
 800600e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006012:	4606      	mov	r6, r0
 8006014:	462b      	mov	r3, r5
 8006016:	b99a      	cbnz	r2, 8006040 <scalbn+0x38>
 8006018:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800601c:	4323      	orrs	r3, r4
 800601e:	d036      	beq.n	800608e <scalbn+0x86>
 8006020:	4b39      	ldr	r3, [pc, #228]	; (8006108 <scalbn+0x100>)
 8006022:	4629      	mov	r1, r5
 8006024:	ee10 0a10 	vmov	r0, s0
 8006028:	2200      	movs	r2, #0
 800602a:	f7fa faed 	bl	8000608 <__aeabi_dmul>
 800602e:	4b37      	ldr	r3, [pc, #220]	; (800610c <scalbn+0x104>)
 8006030:	429e      	cmp	r6, r3
 8006032:	4604      	mov	r4, r0
 8006034:	460d      	mov	r5, r1
 8006036:	da10      	bge.n	800605a <scalbn+0x52>
 8006038:	a32b      	add	r3, pc, #172	; (adr r3, 80060e8 <scalbn+0xe0>)
 800603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603e:	e03a      	b.n	80060b6 <scalbn+0xae>
 8006040:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006044:	428a      	cmp	r2, r1
 8006046:	d10c      	bne.n	8006062 <scalbn+0x5a>
 8006048:	ee10 2a10 	vmov	r2, s0
 800604c:	4620      	mov	r0, r4
 800604e:	4629      	mov	r1, r5
 8006050:	f7fa f924 	bl	800029c <__adddf3>
 8006054:	4604      	mov	r4, r0
 8006056:	460d      	mov	r5, r1
 8006058:	e019      	b.n	800608e <scalbn+0x86>
 800605a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800605e:	460b      	mov	r3, r1
 8006060:	3a36      	subs	r2, #54	; 0x36
 8006062:	4432      	add	r2, r6
 8006064:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006068:	428a      	cmp	r2, r1
 800606a:	dd08      	ble.n	800607e <scalbn+0x76>
 800606c:	2d00      	cmp	r5, #0
 800606e:	a120      	add	r1, pc, #128	; (adr r1, 80060f0 <scalbn+0xe8>)
 8006070:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006074:	da1c      	bge.n	80060b0 <scalbn+0xa8>
 8006076:	a120      	add	r1, pc, #128	; (adr r1, 80060f8 <scalbn+0xf0>)
 8006078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800607c:	e018      	b.n	80060b0 <scalbn+0xa8>
 800607e:	2a00      	cmp	r2, #0
 8006080:	dd08      	ble.n	8006094 <scalbn+0x8c>
 8006082:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006086:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800608a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800608e:	ec45 4b10 	vmov	d0, r4, r5
 8006092:	bd70      	pop	{r4, r5, r6, pc}
 8006094:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006098:	da19      	bge.n	80060ce <scalbn+0xc6>
 800609a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800609e:	429e      	cmp	r6, r3
 80060a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80060a4:	dd0a      	ble.n	80060bc <scalbn+0xb4>
 80060a6:	a112      	add	r1, pc, #72	; (adr r1, 80060f0 <scalbn+0xe8>)
 80060a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1e2      	bne.n	8006076 <scalbn+0x6e>
 80060b0:	a30f      	add	r3, pc, #60	; (adr r3, 80060f0 <scalbn+0xe8>)
 80060b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b6:	f7fa faa7 	bl	8000608 <__aeabi_dmul>
 80060ba:	e7cb      	b.n	8006054 <scalbn+0x4c>
 80060bc:	a10a      	add	r1, pc, #40	; (adr r1, 80060e8 <scalbn+0xe0>)
 80060be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0b8      	beq.n	8006038 <scalbn+0x30>
 80060c6:	a10e      	add	r1, pc, #56	; (adr r1, 8006100 <scalbn+0xf8>)
 80060c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060cc:	e7b4      	b.n	8006038 <scalbn+0x30>
 80060ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80060d2:	3236      	adds	r2, #54	; 0x36
 80060d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80060d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80060dc:	4620      	mov	r0, r4
 80060de:	4b0c      	ldr	r3, [pc, #48]	; (8006110 <scalbn+0x108>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	e7e8      	b.n	80060b6 <scalbn+0xae>
 80060e4:	f3af 8000 	nop.w
 80060e8:	c2f8f359 	.word	0xc2f8f359
 80060ec:	01a56e1f 	.word	0x01a56e1f
 80060f0:	8800759c 	.word	0x8800759c
 80060f4:	7e37e43c 	.word	0x7e37e43c
 80060f8:	8800759c 	.word	0x8800759c
 80060fc:	fe37e43c 	.word	0xfe37e43c
 8006100:	c2f8f359 	.word	0xc2f8f359
 8006104:	81a56e1f 	.word	0x81a56e1f
 8006108:	43500000 	.word	0x43500000
 800610c:	ffff3cb0 	.word	0xffff3cb0
 8006110:	3c900000 	.word	0x3c900000

08006114 <__errno>:
 8006114:	4b01      	ldr	r3, [pc, #4]	; (800611c <__errno+0x8>)
 8006116:	6818      	ldr	r0, [r3, #0]
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	2000000c 	.word	0x2000000c

08006120 <__libc_init_array>:
 8006120:	b570      	push	{r4, r5, r6, lr}
 8006122:	4d0d      	ldr	r5, [pc, #52]	; (8006158 <__libc_init_array+0x38>)
 8006124:	4c0d      	ldr	r4, [pc, #52]	; (800615c <__libc_init_array+0x3c>)
 8006126:	1b64      	subs	r4, r4, r5
 8006128:	10a4      	asrs	r4, r4, #2
 800612a:	2600      	movs	r6, #0
 800612c:	42a6      	cmp	r6, r4
 800612e:	d109      	bne.n	8006144 <__libc_init_array+0x24>
 8006130:	4d0b      	ldr	r5, [pc, #44]	; (8006160 <__libc_init_array+0x40>)
 8006132:	4c0c      	ldr	r4, [pc, #48]	; (8006164 <__libc_init_array+0x44>)
 8006134:	f002 fcf0 	bl	8008b18 <_init>
 8006138:	1b64      	subs	r4, r4, r5
 800613a:	10a4      	asrs	r4, r4, #2
 800613c:	2600      	movs	r6, #0
 800613e:	42a6      	cmp	r6, r4
 8006140:	d105      	bne.n	800614e <__libc_init_array+0x2e>
 8006142:	bd70      	pop	{r4, r5, r6, pc}
 8006144:	f855 3b04 	ldr.w	r3, [r5], #4
 8006148:	4798      	blx	r3
 800614a:	3601      	adds	r6, #1
 800614c:	e7ee      	b.n	800612c <__libc_init_array+0xc>
 800614e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006152:	4798      	blx	r3
 8006154:	3601      	adds	r6, #1
 8006156:	e7f2      	b.n	800613e <__libc_init_array+0x1e>
 8006158:	0801c05c 	.word	0x0801c05c
 800615c:	0801c05c 	.word	0x0801c05c
 8006160:	0801c05c 	.word	0x0801c05c
 8006164:	0801c060 	.word	0x0801c060

08006168 <memcpy>:
 8006168:	440a      	add	r2, r1
 800616a:	4291      	cmp	r1, r2
 800616c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006170:	d100      	bne.n	8006174 <memcpy+0xc>
 8006172:	4770      	bx	lr
 8006174:	b510      	push	{r4, lr}
 8006176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800617a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800617e:	4291      	cmp	r1, r2
 8006180:	d1f9      	bne.n	8006176 <memcpy+0xe>
 8006182:	bd10      	pop	{r4, pc}

08006184 <memset>:
 8006184:	4402      	add	r2, r0
 8006186:	4603      	mov	r3, r0
 8006188:	4293      	cmp	r3, r2
 800618a:	d100      	bne.n	800618e <memset+0xa>
 800618c:	4770      	bx	lr
 800618e:	f803 1b01 	strb.w	r1, [r3], #1
 8006192:	e7f9      	b.n	8006188 <memset+0x4>

08006194 <__cvt>:
 8006194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006198:	ec55 4b10 	vmov	r4, r5, d0
 800619c:	2d00      	cmp	r5, #0
 800619e:	460e      	mov	r6, r1
 80061a0:	4619      	mov	r1, r3
 80061a2:	462b      	mov	r3, r5
 80061a4:	bfbb      	ittet	lt
 80061a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80061aa:	461d      	movlt	r5, r3
 80061ac:	2300      	movge	r3, #0
 80061ae:	232d      	movlt	r3, #45	; 0x2d
 80061b0:	700b      	strb	r3, [r1, #0]
 80061b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80061b8:	4691      	mov	r9, r2
 80061ba:	f023 0820 	bic.w	r8, r3, #32
 80061be:	bfbc      	itt	lt
 80061c0:	4622      	movlt	r2, r4
 80061c2:	4614      	movlt	r4, r2
 80061c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061c8:	d005      	beq.n	80061d6 <__cvt+0x42>
 80061ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80061ce:	d100      	bne.n	80061d2 <__cvt+0x3e>
 80061d0:	3601      	adds	r6, #1
 80061d2:	2102      	movs	r1, #2
 80061d4:	e000      	b.n	80061d8 <__cvt+0x44>
 80061d6:	2103      	movs	r1, #3
 80061d8:	ab03      	add	r3, sp, #12
 80061da:	9301      	str	r3, [sp, #4]
 80061dc:	ab02      	add	r3, sp, #8
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	ec45 4b10 	vmov	d0, r4, r5
 80061e4:	4653      	mov	r3, sl
 80061e6:	4632      	mov	r2, r6
 80061e8:	f000 fcca 	bl	8006b80 <_dtoa_r>
 80061ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80061f0:	4607      	mov	r7, r0
 80061f2:	d102      	bne.n	80061fa <__cvt+0x66>
 80061f4:	f019 0f01 	tst.w	r9, #1
 80061f8:	d022      	beq.n	8006240 <__cvt+0xac>
 80061fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061fe:	eb07 0906 	add.w	r9, r7, r6
 8006202:	d110      	bne.n	8006226 <__cvt+0x92>
 8006204:	783b      	ldrb	r3, [r7, #0]
 8006206:	2b30      	cmp	r3, #48	; 0x30
 8006208:	d10a      	bne.n	8006220 <__cvt+0x8c>
 800620a:	2200      	movs	r2, #0
 800620c:	2300      	movs	r3, #0
 800620e:	4620      	mov	r0, r4
 8006210:	4629      	mov	r1, r5
 8006212:	f7fa fc61 	bl	8000ad8 <__aeabi_dcmpeq>
 8006216:	b918      	cbnz	r0, 8006220 <__cvt+0x8c>
 8006218:	f1c6 0601 	rsb	r6, r6, #1
 800621c:	f8ca 6000 	str.w	r6, [sl]
 8006220:	f8da 3000 	ldr.w	r3, [sl]
 8006224:	4499      	add	r9, r3
 8006226:	2200      	movs	r2, #0
 8006228:	2300      	movs	r3, #0
 800622a:	4620      	mov	r0, r4
 800622c:	4629      	mov	r1, r5
 800622e:	f7fa fc53 	bl	8000ad8 <__aeabi_dcmpeq>
 8006232:	b108      	cbz	r0, 8006238 <__cvt+0xa4>
 8006234:	f8cd 900c 	str.w	r9, [sp, #12]
 8006238:	2230      	movs	r2, #48	; 0x30
 800623a:	9b03      	ldr	r3, [sp, #12]
 800623c:	454b      	cmp	r3, r9
 800623e:	d307      	bcc.n	8006250 <__cvt+0xbc>
 8006240:	9b03      	ldr	r3, [sp, #12]
 8006242:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006244:	1bdb      	subs	r3, r3, r7
 8006246:	4638      	mov	r0, r7
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	b004      	add	sp, #16
 800624c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006250:	1c59      	adds	r1, r3, #1
 8006252:	9103      	str	r1, [sp, #12]
 8006254:	701a      	strb	r2, [r3, #0]
 8006256:	e7f0      	b.n	800623a <__cvt+0xa6>

08006258 <__exponent>:
 8006258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800625a:	4603      	mov	r3, r0
 800625c:	2900      	cmp	r1, #0
 800625e:	bfb8      	it	lt
 8006260:	4249      	neglt	r1, r1
 8006262:	f803 2b02 	strb.w	r2, [r3], #2
 8006266:	bfb4      	ite	lt
 8006268:	222d      	movlt	r2, #45	; 0x2d
 800626a:	222b      	movge	r2, #43	; 0x2b
 800626c:	2909      	cmp	r1, #9
 800626e:	7042      	strb	r2, [r0, #1]
 8006270:	dd2a      	ble.n	80062c8 <__exponent+0x70>
 8006272:	f10d 0407 	add.w	r4, sp, #7
 8006276:	46a4      	mov	ip, r4
 8006278:	270a      	movs	r7, #10
 800627a:	46a6      	mov	lr, r4
 800627c:	460a      	mov	r2, r1
 800627e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006282:	fb07 1516 	mls	r5, r7, r6, r1
 8006286:	3530      	adds	r5, #48	; 0x30
 8006288:	2a63      	cmp	r2, #99	; 0x63
 800628a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800628e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006292:	4631      	mov	r1, r6
 8006294:	dcf1      	bgt.n	800627a <__exponent+0x22>
 8006296:	3130      	adds	r1, #48	; 0x30
 8006298:	f1ae 0502 	sub.w	r5, lr, #2
 800629c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80062a0:	1c44      	adds	r4, r0, #1
 80062a2:	4629      	mov	r1, r5
 80062a4:	4561      	cmp	r1, ip
 80062a6:	d30a      	bcc.n	80062be <__exponent+0x66>
 80062a8:	f10d 0209 	add.w	r2, sp, #9
 80062ac:	eba2 020e 	sub.w	r2, r2, lr
 80062b0:	4565      	cmp	r5, ip
 80062b2:	bf88      	it	hi
 80062b4:	2200      	movhi	r2, #0
 80062b6:	4413      	add	r3, r2
 80062b8:	1a18      	subs	r0, r3, r0
 80062ba:	b003      	add	sp, #12
 80062bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80062c6:	e7ed      	b.n	80062a4 <__exponent+0x4c>
 80062c8:	2330      	movs	r3, #48	; 0x30
 80062ca:	3130      	adds	r1, #48	; 0x30
 80062cc:	7083      	strb	r3, [r0, #2]
 80062ce:	70c1      	strb	r1, [r0, #3]
 80062d0:	1d03      	adds	r3, r0, #4
 80062d2:	e7f1      	b.n	80062b8 <__exponent+0x60>

080062d4 <_printf_float>:
 80062d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d8:	ed2d 8b02 	vpush	{d8}
 80062dc:	b08d      	sub	sp, #52	; 0x34
 80062de:	460c      	mov	r4, r1
 80062e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80062e4:	4616      	mov	r6, r2
 80062e6:	461f      	mov	r7, r3
 80062e8:	4605      	mov	r5, r0
 80062ea:	f001 fa35 	bl	8007758 <_localeconv_r>
 80062ee:	f8d0 a000 	ldr.w	sl, [r0]
 80062f2:	4650      	mov	r0, sl
 80062f4:	f7f9 ff74 	bl	80001e0 <strlen>
 80062f8:	2300      	movs	r3, #0
 80062fa:	930a      	str	r3, [sp, #40]	; 0x28
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	9305      	str	r3, [sp, #20]
 8006300:	f8d8 3000 	ldr.w	r3, [r8]
 8006304:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006308:	3307      	adds	r3, #7
 800630a:	f023 0307 	bic.w	r3, r3, #7
 800630e:	f103 0208 	add.w	r2, r3, #8
 8006312:	f8c8 2000 	str.w	r2, [r8]
 8006316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800631e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006322:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006326:	9307      	str	r3, [sp, #28]
 8006328:	f8cd 8018 	str.w	r8, [sp, #24]
 800632c:	ee08 0a10 	vmov	s16, r0
 8006330:	4b9f      	ldr	r3, [pc, #636]	; (80065b0 <_printf_float+0x2dc>)
 8006332:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006336:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800633a:	f7fa fbff 	bl	8000b3c <__aeabi_dcmpun>
 800633e:	bb88      	cbnz	r0, 80063a4 <_printf_float+0xd0>
 8006340:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006344:	4b9a      	ldr	r3, [pc, #616]	; (80065b0 <_printf_float+0x2dc>)
 8006346:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800634a:	f7fa fbd9 	bl	8000b00 <__aeabi_dcmple>
 800634e:	bb48      	cbnz	r0, 80063a4 <_printf_float+0xd0>
 8006350:	2200      	movs	r2, #0
 8006352:	2300      	movs	r3, #0
 8006354:	4640      	mov	r0, r8
 8006356:	4649      	mov	r1, r9
 8006358:	f7fa fbc8 	bl	8000aec <__aeabi_dcmplt>
 800635c:	b110      	cbz	r0, 8006364 <_printf_float+0x90>
 800635e:	232d      	movs	r3, #45	; 0x2d
 8006360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006364:	4b93      	ldr	r3, [pc, #588]	; (80065b4 <_printf_float+0x2e0>)
 8006366:	4894      	ldr	r0, [pc, #592]	; (80065b8 <_printf_float+0x2e4>)
 8006368:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800636c:	bf94      	ite	ls
 800636e:	4698      	movls	r8, r3
 8006370:	4680      	movhi	r8, r0
 8006372:	2303      	movs	r3, #3
 8006374:	6123      	str	r3, [r4, #16]
 8006376:	9b05      	ldr	r3, [sp, #20]
 8006378:	f023 0204 	bic.w	r2, r3, #4
 800637c:	6022      	str	r2, [r4, #0]
 800637e:	f04f 0900 	mov.w	r9, #0
 8006382:	9700      	str	r7, [sp, #0]
 8006384:	4633      	mov	r3, r6
 8006386:	aa0b      	add	r2, sp, #44	; 0x2c
 8006388:	4621      	mov	r1, r4
 800638a:	4628      	mov	r0, r5
 800638c:	f000 f9d8 	bl	8006740 <_printf_common>
 8006390:	3001      	adds	r0, #1
 8006392:	f040 8090 	bne.w	80064b6 <_printf_float+0x1e2>
 8006396:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800639a:	b00d      	add	sp, #52	; 0x34
 800639c:	ecbd 8b02 	vpop	{d8}
 80063a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a4:	4642      	mov	r2, r8
 80063a6:	464b      	mov	r3, r9
 80063a8:	4640      	mov	r0, r8
 80063aa:	4649      	mov	r1, r9
 80063ac:	f7fa fbc6 	bl	8000b3c <__aeabi_dcmpun>
 80063b0:	b140      	cbz	r0, 80063c4 <_printf_float+0xf0>
 80063b2:	464b      	mov	r3, r9
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	bfbc      	itt	lt
 80063b8:	232d      	movlt	r3, #45	; 0x2d
 80063ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80063be:	487f      	ldr	r0, [pc, #508]	; (80065bc <_printf_float+0x2e8>)
 80063c0:	4b7f      	ldr	r3, [pc, #508]	; (80065c0 <_printf_float+0x2ec>)
 80063c2:	e7d1      	b.n	8006368 <_printf_float+0x94>
 80063c4:	6863      	ldr	r3, [r4, #4]
 80063c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80063ca:	9206      	str	r2, [sp, #24]
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	d13f      	bne.n	8006450 <_printf_float+0x17c>
 80063d0:	2306      	movs	r3, #6
 80063d2:	6063      	str	r3, [r4, #4]
 80063d4:	9b05      	ldr	r3, [sp, #20]
 80063d6:	6861      	ldr	r1, [r4, #4]
 80063d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80063dc:	2300      	movs	r3, #0
 80063de:	9303      	str	r3, [sp, #12]
 80063e0:	ab0a      	add	r3, sp, #40	; 0x28
 80063e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80063e6:	ab09      	add	r3, sp, #36	; 0x24
 80063e8:	ec49 8b10 	vmov	d0, r8, r9
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	6022      	str	r2, [r4, #0]
 80063f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80063f4:	4628      	mov	r0, r5
 80063f6:	f7ff fecd 	bl	8006194 <__cvt>
 80063fa:	9b06      	ldr	r3, [sp, #24]
 80063fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063fe:	2b47      	cmp	r3, #71	; 0x47
 8006400:	4680      	mov	r8, r0
 8006402:	d108      	bne.n	8006416 <_printf_float+0x142>
 8006404:	1cc8      	adds	r0, r1, #3
 8006406:	db02      	blt.n	800640e <_printf_float+0x13a>
 8006408:	6863      	ldr	r3, [r4, #4]
 800640a:	4299      	cmp	r1, r3
 800640c:	dd41      	ble.n	8006492 <_printf_float+0x1be>
 800640e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006412:	fa5f fb8b 	uxtb.w	fp, fp
 8006416:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800641a:	d820      	bhi.n	800645e <_printf_float+0x18a>
 800641c:	3901      	subs	r1, #1
 800641e:	465a      	mov	r2, fp
 8006420:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006424:	9109      	str	r1, [sp, #36]	; 0x24
 8006426:	f7ff ff17 	bl	8006258 <__exponent>
 800642a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800642c:	1813      	adds	r3, r2, r0
 800642e:	2a01      	cmp	r2, #1
 8006430:	4681      	mov	r9, r0
 8006432:	6123      	str	r3, [r4, #16]
 8006434:	dc02      	bgt.n	800643c <_printf_float+0x168>
 8006436:	6822      	ldr	r2, [r4, #0]
 8006438:	07d2      	lsls	r2, r2, #31
 800643a:	d501      	bpl.n	8006440 <_printf_float+0x16c>
 800643c:	3301      	adds	r3, #1
 800643e:	6123      	str	r3, [r4, #16]
 8006440:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006444:	2b00      	cmp	r3, #0
 8006446:	d09c      	beq.n	8006382 <_printf_float+0xae>
 8006448:	232d      	movs	r3, #45	; 0x2d
 800644a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800644e:	e798      	b.n	8006382 <_printf_float+0xae>
 8006450:	9a06      	ldr	r2, [sp, #24]
 8006452:	2a47      	cmp	r2, #71	; 0x47
 8006454:	d1be      	bne.n	80063d4 <_printf_float+0x100>
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1bc      	bne.n	80063d4 <_printf_float+0x100>
 800645a:	2301      	movs	r3, #1
 800645c:	e7b9      	b.n	80063d2 <_printf_float+0xfe>
 800645e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006462:	d118      	bne.n	8006496 <_printf_float+0x1c2>
 8006464:	2900      	cmp	r1, #0
 8006466:	6863      	ldr	r3, [r4, #4]
 8006468:	dd0b      	ble.n	8006482 <_printf_float+0x1ae>
 800646a:	6121      	str	r1, [r4, #16]
 800646c:	b913      	cbnz	r3, 8006474 <_printf_float+0x1a0>
 800646e:	6822      	ldr	r2, [r4, #0]
 8006470:	07d0      	lsls	r0, r2, #31
 8006472:	d502      	bpl.n	800647a <_printf_float+0x1a6>
 8006474:	3301      	adds	r3, #1
 8006476:	440b      	add	r3, r1
 8006478:	6123      	str	r3, [r4, #16]
 800647a:	65a1      	str	r1, [r4, #88]	; 0x58
 800647c:	f04f 0900 	mov.w	r9, #0
 8006480:	e7de      	b.n	8006440 <_printf_float+0x16c>
 8006482:	b913      	cbnz	r3, 800648a <_printf_float+0x1b6>
 8006484:	6822      	ldr	r2, [r4, #0]
 8006486:	07d2      	lsls	r2, r2, #31
 8006488:	d501      	bpl.n	800648e <_printf_float+0x1ba>
 800648a:	3302      	adds	r3, #2
 800648c:	e7f4      	b.n	8006478 <_printf_float+0x1a4>
 800648e:	2301      	movs	r3, #1
 8006490:	e7f2      	b.n	8006478 <_printf_float+0x1a4>
 8006492:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006498:	4299      	cmp	r1, r3
 800649a:	db05      	blt.n	80064a8 <_printf_float+0x1d4>
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	6121      	str	r1, [r4, #16]
 80064a0:	07d8      	lsls	r0, r3, #31
 80064a2:	d5ea      	bpl.n	800647a <_printf_float+0x1a6>
 80064a4:	1c4b      	adds	r3, r1, #1
 80064a6:	e7e7      	b.n	8006478 <_printf_float+0x1a4>
 80064a8:	2900      	cmp	r1, #0
 80064aa:	bfd4      	ite	le
 80064ac:	f1c1 0202 	rsble	r2, r1, #2
 80064b0:	2201      	movgt	r2, #1
 80064b2:	4413      	add	r3, r2
 80064b4:	e7e0      	b.n	8006478 <_printf_float+0x1a4>
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	055a      	lsls	r2, r3, #21
 80064ba:	d407      	bmi.n	80064cc <_printf_float+0x1f8>
 80064bc:	6923      	ldr	r3, [r4, #16]
 80064be:	4642      	mov	r2, r8
 80064c0:	4631      	mov	r1, r6
 80064c2:	4628      	mov	r0, r5
 80064c4:	47b8      	blx	r7
 80064c6:	3001      	adds	r0, #1
 80064c8:	d12c      	bne.n	8006524 <_printf_float+0x250>
 80064ca:	e764      	b.n	8006396 <_printf_float+0xc2>
 80064cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064d0:	f240 80e0 	bls.w	8006694 <_printf_float+0x3c0>
 80064d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064d8:	2200      	movs	r2, #0
 80064da:	2300      	movs	r3, #0
 80064dc:	f7fa fafc 	bl	8000ad8 <__aeabi_dcmpeq>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d034      	beq.n	800654e <_printf_float+0x27a>
 80064e4:	4a37      	ldr	r2, [pc, #220]	; (80065c4 <_printf_float+0x2f0>)
 80064e6:	2301      	movs	r3, #1
 80064e8:	4631      	mov	r1, r6
 80064ea:	4628      	mov	r0, r5
 80064ec:	47b8      	blx	r7
 80064ee:	3001      	adds	r0, #1
 80064f0:	f43f af51 	beq.w	8006396 <_printf_float+0xc2>
 80064f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064f8:	429a      	cmp	r2, r3
 80064fa:	db02      	blt.n	8006502 <_printf_float+0x22e>
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	07d8      	lsls	r0, r3, #31
 8006500:	d510      	bpl.n	8006524 <_printf_float+0x250>
 8006502:	ee18 3a10 	vmov	r3, s16
 8006506:	4652      	mov	r2, sl
 8006508:	4631      	mov	r1, r6
 800650a:	4628      	mov	r0, r5
 800650c:	47b8      	blx	r7
 800650e:	3001      	adds	r0, #1
 8006510:	f43f af41 	beq.w	8006396 <_printf_float+0xc2>
 8006514:	f04f 0800 	mov.w	r8, #0
 8006518:	f104 091a 	add.w	r9, r4, #26
 800651c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800651e:	3b01      	subs	r3, #1
 8006520:	4543      	cmp	r3, r8
 8006522:	dc09      	bgt.n	8006538 <_printf_float+0x264>
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	079b      	lsls	r3, r3, #30
 8006528:	f100 8105 	bmi.w	8006736 <_printf_float+0x462>
 800652c:	68e0      	ldr	r0, [r4, #12]
 800652e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006530:	4298      	cmp	r0, r3
 8006532:	bfb8      	it	lt
 8006534:	4618      	movlt	r0, r3
 8006536:	e730      	b.n	800639a <_printf_float+0xc6>
 8006538:	2301      	movs	r3, #1
 800653a:	464a      	mov	r2, r9
 800653c:	4631      	mov	r1, r6
 800653e:	4628      	mov	r0, r5
 8006540:	47b8      	blx	r7
 8006542:	3001      	adds	r0, #1
 8006544:	f43f af27 	beq.w	8006396 <_printf_float+0xc2>
 8006548:	f108 0801 	add.w	r8, r8, #1
 800654c:	e7e6      	b.n	800651c <_printf_float+0x248>
 800654e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006550:	2b00      	cmp	r3, #0
 8006552:	dc39      	bgt.n	80065c8 <_printf_float+0x2f4>
 8006554:	4a1b      	ldr	r2, [pc, #108]	; (80065c4 <_printf_float+0x2f0>)
 8006556:	2301      	movs	r3, #1
 8006558:	4631      	mov	r1, r6
 800655a:	4628      	mov	r0, r5
 800655c:	47b8      	blx	r7
 800655e:	3001      	adds	r0, #1
 8006560:	f43f af19 	beq.w	8006396 <_printf_float+0xc2>
 8006564:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006568:	4313      	orrs	r3, r2
 800656a:	d102      	bne.n	8006572 <_printf_float+0x29e>
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	07d9      	lsls	r1, r3, #31
 8006570:	d5d8      	bpl.n	8006524 <_printf_float+0x250>
 8006572:	ee18 3a10 	vmov	r3, s16
 8006576:	4652      	mov	r2, sl
 8006578:	4631      	mov	r1, r6
 800657a:	4628      	mov	r0, r5
 800657c:	47b8      	blx	r7
 800657e:	3001      	adds	r0, #1
 8006580:	f43f af09 	beq.w	8006396 <_printf_float+0xc2>
 8006584:	f04f 0900 	mov.w	r9, #0
 8006588:	f104 0a1a 	add.w	sl, r4, #26
 800658c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800658e:	425b      	negs	r3, r3
 8006590:	454b      	cmp	r3, r9
 8006592:	dc01      	bgt.n	8006598 <_printf_float+0x2c4>
 8006594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006596:	e792      	b.n	80064be <_printf_float+0x1ea>
 8006598:	2301      	movs	r3, #1
 800659a:	4652      	mov	r2, sl
 800659c:	4631      	mov	r1, r6
 800659e:	4628      	mov	r0, r5
 80065a0:	47b8      	blx	r7
 80065a2:	3001      	adds	r0, #1
 80065a4:	f43f aef7 	beq.w	8006396 <_printf_float+0xc2>
 80065a8:	f109 0901 	add.w	r9, r9, #1
 80065ac:	e7ee      	b.n	800658c <_printf_float+0x2b8>
 80065ae:	bf00      	nop
 80065b0:	7fefffff 	.word	0x7fefffff
 80065b4:	0801bc74 	.word	0x0801bc74
 80065b8:	0801bc78 	.word	0x0801bc78
 80065bc:	0801bc80 	.word	0x0801bc80
 80065c0:	0801bc7c 	.word	0x0801bc7c
 80065c4:	0801bc84 	.word	0x0801bc84
 80065c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065cc:	429a      	cmp	r2, r3
 80065ce:	bfa8      	it	ge
 80065d0:	461a      	movge	r2, r3
 80065d2:	2a00      	cmp	r2, #0
 80065d4:	4691      	mov	r9, r2
 80065d6:	dc37      	bgt.n	8006648 <_printf_float+0x374>
 80065d8:	f04f 0b00 	mov.w	fp, #0
 80065dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065e0:	f104 021a 	add.w	r2, r4, #26
 80065e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065e6:	9305      	str	r3, [sp, #20]
 80065e8:	eba3 0309 	sub.w	r3, r3, r9
 80065ec:	455b      	cmp	r3, fp
 80065ee:	dc33      	bgt.n	8006658 <_printf_float+0x384>
 80065f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065f4:	429a      	cmp	r2, r3
 80065f6:	db3b      	blt.n	8006670 <_printf_float+0x39c>
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	07da      	lsls	r2, r3, #31
 80065fc:	d438      	bmi.n	8006670 <_printf_float+0x39c>
 80065fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006600:	9b05      	ldr	r3, [sp, #20]
 8006602:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	eba2 0901 	sub.w	r9, r2, r1
 800660a:	4599      	cmp	r9, r3
 800660c:	bfa8      	it	ge
 800660e:	4699      	movge	r9, r3
 8006610:	f1b9 0f00 	cmp.w	r9, #0
 8006614:	dc35      	bgt.n	8006682 <_printf_float+0x3ae>
 8006616:	f04f 0800 	mov.w	r8, #0
 800661a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800661e:	f104 0a1a 	add.w	sl, r4, #26
 8006622:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006626:	1a9b      	subs	r3, r3, r2
 8006628:	eba3 0309 	sub.w	r3, r3, r9
 800662c:	4543      	cmp	r3, r8
 800662e:	f77f af79 	ble.w	8006524 <_printf_float+0x250>
 8006632:	2301      	movs	r3, #1
 8006634:	4652      	mov	r2, sl
 8006636:	4631      	mov	r1, r6
 8006638:	4628      	mov	r0, r5
 800663a:	47b8      	blx	r7
 800663c:	3001      	adds	r0, #1
 800663e:	f43f aeaa 	beq.w	8006396 <_printf_float+0xc2>
 8006642:	f108 0801 	add.w	r8, r8, #1
 8006646:	e7ec      	b.n	8006622 <_printf_float+0x34e>
 8006648:	4613      	mov	r3, r2
 800664a:	4631      	mov	r1, r6
 800664c:	4642      	mov	r2, r8
 800664e:	4628      	mov	r0, r5
 8006650:	47b8      	blx	r7
 8006652:	3001      	adds	r0, #1
 8006654:	d1c0      	bne.n	80065d8 <_printf_float+0x304>
 8006656:	e69e      	b.n	8006396 <_printf_float+0xc2>
 8006658:	2301      	movs	r3, #1
 800665a:	4631      	mov	r1, r6
 800665c:	4628      	mov	r0, r5
 800665e:	9205      	str	r2, [sp, #20]
 8006660:	47b8      	blx	r7
 8006662:	3001      	adds	r0, #1
 8006664:	f43f ae97 	beq.w	8006396 <_printf_float+0xc2>
 8006668:	9a05      	ldr	r2, [sp, #20]
 800666a:	f10b 0b01 	add.w	fp, fp, #1
 800666e:	e7b9      	b.n	80065e4 <_printf_float+0x310>
 8006670:	ee18 3a10 	vmov	r3, s16
 8006674:	4652      	mov	r2, sl
 8006676:	4631      	mov	r1, r6
 8006678:	4628      	mov	r0, r5
 800667a:	47b8      	blx	r7
 800667c:	3001      	adds	r0, #1
 800667e:	d1be      	bne.n	80065fe <_printf_float+0x32a>
 8006680:	e689      	b.n	8006396 <_printf_float+0xc2>
 8006682:	9a05      	ldr	r2, [sp, #20]
 8006684:	464b      	mov	r3, r9
 8006686:	4442      	add	r2, r8
 8006688:	4631      	mov	r1, r6
 800668a:	4628      	mov	r0, r5
 800668c:	47b8      	blx	r7
 800668e:	3001      	adds	r0, #1
 8006690:	d1c1      	bne.n	8006616 <_printf_float+0x342>
 8006692:	e680      	b.n	8006396 <_printf_float+0xc2>
 8006694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006696:	2a01      	cmp	r2, #1
 8006698:	dc01      	bgt.n	800669e <_printf_float+0x3ca>
 800669a:	07db      	lsls	r3, r3, #31
 800669c:	d538      	bpl.n	8006710 <_printf_float+0x43c>
 800669e:	2301      	movs	r3, #1
 80066a0:	4642      	mov	r2, r8
 80066a2:	4631      	mov	r1, r6
 80066a4:	4628      	mov	r0, r5
 80066a6:	47b8      	blx	r7
 80066a8:	3001      	adds	r0, #1
 80066aa:	f43f ae74 	beq.w	8006396 <_printf_float+0xc2>
 80066ae:	ee18 3a10 	vmov	r3, s16
 80066b2:	4652      	mov	r2, sl
 80066b4:	4631      	mov	r1, r6
 80066b6:	4628      	mov	r0, r5
 80066b8:	47b8      	blx	r7
 80066ba:	3001      	adds	r0, #1
 80066bc:	f43f ae6b 	beq.w	8006396 <_printf_float+0xc2>
 80066c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066c4:	2200      	movs	r2, #0
 80066c6:	2300      	movs	r3, #0
 80066c8:	f7fa fa06 	bl	8000ad8 <__aeabi_dcmpeq>
 80066cc:	b9d8      	cbnz	r0, 8006706 <_printf_float+0x432>
 80066ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066d0:	f108 0201 	add.w	r2, r8, #1
 80066d4:	3b01      	subs	r3, #1
 80066d6:	4631      	mov	r1, r6
 80066d8:	4628      	mov	r0, r5
 80066da:	47b8      	blx	r7
 80066dc:	3001      	adds	r0, #1
 80066de:	d10e      	bne.n	80066fe <_printf_float+0x42a>
 80066e0:	e659      	b.n	8006396 <_printf_float+0xc2>
 80066e2:	2301      	movs	r3, #1
 80066e4:	4652      	mov	r2, sl
 80066e6:	4631      	mov	r1, r6
 80066e8:	4628      	mov	r0, r5
 80066ea:	47b8      	blx	r7
 80066ec:	3001      	adds	r0, #1
 80066ee:	f43f ae52 	beq.w	8006396 <_printf_float+0xc2>
 80066f2:	f108 0801 	add.w	r8, r8, #1
 80066f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f8:	3b01      	subs	r3, #1
 80066fa:	4543      	cmp	r3, r8
 80066fc:	dcf1      	bgt.n	80066e2 <_printf_float+0x40e>
 80066fe:	464b      	mov	r3, r9
 8006700:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006704:	e6dc      	b.n	80064c0 <_printf_float+0x1ec>
 8006706:	f04f 0800 	mov.w	r8, #0
 800670a:	f104 0a1a 	add.w	sl, r4, #26
 800670e:	e7f2      	b.n	80066f6 <_printf_float+0x422>
 8006710:	2301      	movs	r3, #1
 8006712:	4642      	mov	r2, r8
 8006714:	e7df      	b.n	80066d6 <_printf_float+0x402>
 8006716:	2301      	movs	r3, #1
 8006718:	464a      	mov	r2, r9
 800671a:	4631      	mov	r1, r6
 800671c:	4628      	mov	r0, r5
 800671e:	47b8      	blx	r7
 8006720:	3001      	adds	r0, #1
 8006722:	f43f ae38 	beq.w	8006396 <_printf_float+0xc2>
 8006726:	f108 0801 	add.w	r8, r8, #1
 800672a:	68e3      	ldr	r3, [r4, #12]
 800672c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800672e:	1a5b      	subs	r3, r3, r1
 8006730:	4543      	cmp	r3, r8
 8006732:	dcf0      	bgt.n	8006716 <_printf_float+0x442>
 8006734:	e6fa      	b.n	800652c <_printf_float+0x258>
 8006736:	f04f 0800 	mov.w	r8, #0
 800673a:	f104 0919 	add.w	r9, r4, #25
 800673e:	e7f4      	b.n	800672a <_printf_float+0x456>

08006740 <_printf_common>:
 8006740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006744:	4616      	mov	r6, r2
 8006746:	4699      	mov	r9, r3
 8006748:	688a      	ldr	r2, [r1, #8]
 800674a:	690b      	ldr	r3, [r1, #16]
 800674c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006750:	4293      	cmp	r3, r2
 8006752:	bfb8      	it	lt
 8006754:	4613      	movlt	r3, r2
 8006756:	6033      	str	r3, [r6, #0]
 8006758:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800675c:	4607      	mov	r7, r0
 800675e:	460c      	mov	r4, r1
 8006760:	b10a      	cbz	r2, 8006766 <_printf_common+0x26>
 8006762:	3301      	adds	r3, #1
 8006764:	6033      	str	r3, [r6, #0]
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	0699      	lsls	r1, r3, #26
 800676a:	bf42      	ittt	mi
 800676c:	6833      	ldrmi	r3, [r6, #0]
 800676e:	3302      	addmi	r3, #2
 8006770:	6033      	strmi	r3, [r6, #0]
 8006772:	6825      	ldr	r5, [r4, #0]
 8006774:	f015 0506 	ands.w	r5, r5, #6
 8006778:	d106      	bne.n	8006788 <_printf_common+0x48>
 800677a:	f104 0a19 	add.w	sl, r4, #25
 800677e:	68e3      	ldr	r3, [r4, #12]
 8006780:	6832      	ldr	r2, [r6, #0]
 8006782:	1a9b      	subs	r3, r3, r2
 8006784:	42ab      	cmp	r3, r5
 8006786:	dc26      	bgt.n	80067d6 <_printf_common+0x96>
 8006788:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800678c:	1e13      	subs	r3, r2, #0
 800678e:	6822      	ldr	r2, [r4, #0]
 8006790:	bf18      	it	ne
 8006792:	2301      	movne	r3, #1
 8006794:	0692      	lsls	r2, r2, #26
 8006796:	d42b      	bmi.n	80067f0 <_printf_common+0xb0>
 8006798:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800679c:	4649      	mov	r1, r9
 800679e:	4638      	mov	r0, r7
 80067a0:	47c0      	blx	r8
 80067a2:	3001      	adds	r0, #1
 80067a4:	d01e      	beq.n	80067e4 <_printf_common+0xa4>
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	68e5      	ldr	r5, [r4, #12]
 80067aa:	6832      	ldr	r2, [r6, #0]
 80067ac:	f003 0306 	and.w	r3, r3, #6
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	bf08      	it	eq
 80067b4:	1aad      	subeq	r5, r5, r2
 80067b6:	68a3      	ldr	r3, [r4, #8]
 80067b8:	6922      	ldr	r2, [r4, #16]
 80067ba:	bf0c      	ite	eq
 80067bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067c0:	2500      	movne	r5, #0
 80067c2:	4293      	cmp	r3, r2
 80067c4:	bfc4      	itt	gt
 80067c6:	1a9b      	subgt	r3, r3, r2
 80067c8:	18ed      	addgt	r5, r5, r3
 80067ca:	2600      	movs	r6, #0
 80067cc:	341a      	adds	r4, #26
 80067ce:	42b5      	cmp	r5, r6
 80067d0:	d11a      	bne.n	8006808 <_printf_common+0xc8>
 80067d2:	2000      	movs	r0, #0
 80067d4:	e008      	b.n	80067e8 <_printf_common+0xa8>
 80067d6:	2301      	movs	r3, #1
 80067d8:	4652      	mov	r2, sl
 80067da:	4649      	mov	r1, r9
 80067dc:	4638      	mov	r0, r7
 80067de:	47c0      	blx	r8
 80067e0:	3001      	adds	r0, #1
 80067e2:	d103      	bne.n	80067ec <_printf_common+0xac>
 80067e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ec:	3501      	adds	r5, #1
 80067ee:	e7c6      	b.n	800677e <_printf_common+0x3e>
 80067f0:	18e1      	adds	r1, r4, r3
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	2030      	movs	r0, #48	; 0x30
 80067f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067fa:	4422      	add	r2, r4
 80067fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006800:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006804:	3302      	adds	r3, #2
 8006806:	e7c7      	b.n	8006798 <_printf_common+0x58>
 8006808:	2301      	movs	r3, #1
 800680a:	4622      	mov	r2, r4
 800680c:	4649      	mov	r1, r9
 800680e:	4638      	mov	r0, r7
 8006810:	47c0      	blx	r8
 8006812:	3001      	adds	r0, #1
 8006814:	d0e6      	beq.n	80067e4 <_printf_common+0xa4>
 8006816:	3601      	adds	r6, #1
 8006818:	e7d9      	b.n	80067ce <_printf_common+0x8e>
	...

0800681c <_printf_i>:
 800681c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006820:	460c      	mov	r4, r1
 8006822:	4691      	mov	r9, r2
 8006824:	7e27      	ldrb	r7, [r4, #24]
 8006826:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006828:	2f78      	cmp	r7, #120	; 0x78
 800682a:	4680      	mov	r8, r0
 800682c:	469a      	mov	sl, r3
 800682e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006832:	d807      	bhi.n	8006844 <_printf_i+0x28>
 8006834:	2f62      	cmp	r7, #98	; 0x62
 8006836:	d80a      	bhi.n	800684e <_printf_i+0x32>
 8006838:	2f00      	cmp	r7, #0
 800683a:	f000 80d8 	beq.w	80069ee <_printf_i+0x1d2>
 800683e:	2f58      	cmp	r7, #88	; 0x58
 8006840:	f000 80a3 	beq.w	800698a <_printf_i+0x16e>
 8006844:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006848:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800684c:	e03a      	b.n	80068c4 <_printf_i+0xa8>
 800684e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006852:	2b15      	cmp	r3, #21
 8006854:	d8f6      	bhi.n	8006844 <_printf_i+0x28>
 8006856:	a001      	add	r0, pc, #4	; (adr r0, 800685c <_printf_i+0x40>)
 8006858:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800685c:	080068b5 	.word	0x080068b5
 8006860:	080068c9 	.word	0x080068c9
 8006864:	08006845 	.word	0x08006845
 8006868:	08006845 	.word	0x08006845
 800686c:	08006845 	.word	0x08006845
 8006870:	08006845 	.word	0x08006845
 8006874:	080068c9 	.word	0x080068c9
 8006878:	08006845 	.word	0x08006845
 800687c:	08006845 	.word	0x08006845
 8006880:	08006845 	.word	0x08006845
 8006884:	08006845 	.word	0x08006845
 8006888:	080069d5 	.word	0x080069d5
 800688c:	080068f9 	.word	0x080068f9
 8006890:	080069b7 	.word	0x080069b7
 8006894:	08006845 	.word	0x08006845
 8006898:	08006845 	.word	0x08006845
 800689c:	080069f7 	.word	0x080069f7
 80068a0:	08006845 	.word	0x08006845
 80068a4:	080068f9 	.word	0x080068f9
 80068a8:	08006845 	.word	0x08006845
 80068ac:	08006845 	.word	0x08006845
 80068b0:	080069bf 	.word	0x080069bf
 80068b4:	680b      	ldr	r3, [r1, #0]
 80068b6:	1d1a      	adds	r2, r3, #4
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	600a      	str	r2, [r1, #0]
 80068bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068c4:	2301      	movs	r3, #1
 80068c6:	e0a3      	b.n	8006a10 <_printf_i+0x1f4>
 80068c8:	6825      	ldr	r5, [r4, #0]
 80068ca:	6808      	ldr	r0, [r1, #0]
 80068cc:	062e      	lsls	r6, r5, #24
 80068ce:	f100 0304 	add.w	r3, r0, #4
 80068d2:	d50a      	bpl.n	80068ea <_printf_i+0xce>
 80068d4:	6805      	ldr	r5, [r0, #0]
 80068d6:	600b      	str	r3, [r1, #0]
 80068d8:	2d00      	cmp	r5, #0
 80068da:	da03      	bge.n	80068e4 <_printf_i+0xc8>
 80068dc:	232d      	movs	r3, #45	; 0x2d
 80068de:	426d      	negs	r5, r5
 80068e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068e4:	485e      	ldr	r0, [pc, #376]	; (8006a60 <_printf_i+0x244>)
 80068e6:	230a      	movs	r3, #10
 80068e8:	e019      	b.n	800691e <_printf_i+0x102>
 80068ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80068ee:	6805      	ldr	r5, [r0, #0]
 80068f0:	600b      	str	r3, [r1, #0]
 80068f2:	bf18      	it	ne
 80068f4:	b22d      	sxthne	r5, r5
 80068f6:	e7ef      	b.n	80068d8 <_printf_i+0xbc>
 80068f8:	680b      	ldr	r3, [r1, #0]
 80068fa:	6825      	ldr	r5, [r4, #0]
 80068fc:	1d18      	adds	r0, r3, #4
 80068fe:	6008      	str	r0, [r1, #0]
 8006900:	0628      	lsls	r0, r5, #24
 8006902:	d501      	bpl.n	8006908 <_printf_i+0xec>
 8006904:	681d      	ldr	r5, [r3, #0]
 8006906:	e002      	b.n	800690e <_printf_i+0xf2>
 8006908:	0669      	lsls	r1, r5, #25
 800690a:	d5fb      	bpl.n	8006904 <_printf_i+0xe8>
 800690c:	881d      	ldrh	r5, [r3, #0]
 800690e:	4854      	ldr	r0, [pc, #336]	; (8006a60 <_printf_i+0x244>)
 8006910:	2f6f      	cmp	r7, #111	; 0x6f
 8006912:	bf0c      	ite	eq
 8006914:	2308      	moveq	r3, #8
 8006916:	230a      	movne	r3, #10
 8006918:	2100      	movs	r1, #0
 800691a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800691e:	6866      	ldr	r6, [r4, #4]
 8006920:	60a6      	str	r6, [r4, #8]
 8006922:	2e00      	cmp	r6, #0
 8006924:	bfa2      	ittt	ge
 8006926:	6821      	ldrge	r1, [r4, #0]
 8006928:	f021 0104 	bicge.w	r1, r1, #4
 800692c:	6021      	strge	r1, [r4, #0]
 800692e:	b90d      	cbnz	r5, 8006934 <_printf_i+0x118>
 8006930:	2e00      	cmp	r6, #0
 8006932:	d04d      	beq.n	80069d0 <_printf_i+0x1b4>
 8006934:	4616      	mov	r6, r2
 8006936:	fbb5 f1f3 	udiv	r1, r5, r3
 800693a:	fb03 5711 	mls	r7, r3, r1, r5
 800693e:	5dc7      	ldrb	r7, [r0, r7]
 8006940:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006944:	462f      	mov	r7, r5
 8006946:	42bb      	cmp	r3, r7
 8006948:	460d      	mov	r5, r1
 800694a:	d9f4      	bls.n	8006936 <_printf_i+0x11a>
 800694c:	2b08      	cmp	r3, #8
 800694e:	d10b      	bne.n	8006968 <_printf_i+0x14c>
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	07df      	lsls	r7, r3, #31
 8006954:	d508      	bpl.n	8006968 <_printf_i+0x14c>
 8006956:	6923      	ldr	r3, [r4, #16]
 8006958:	6861      	ldr	r1, [r4, #4]
 800695a:	4299      	cmp	r1, r3
 800695c:	bfde      	ittt	le
 800695e:	2330      	movle	r3, #48	; 0x30
 8006960:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006964:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006968:	1b92      	subs	r2, r2, r6
 800696a:	6122      	str	r2, [r4, #16]
 800696c:	f8cd a000 	str.w	sl, [sp]
 8006970:	464b      	mov	r3, r9
 8006972:	aa03      	add	r2, sp, #12
 8006974:	4621      	mov	r1, r4
 8006976:	4640      	mov	r0, r8
 8006978:	f7ff fee2 	bl	8006740 <_printf_common>
 800697c:	3001      	adds	r0, #1
 800697e:	d14c      	bne.n	8006a1a <_printf_i+0x1fe>
 8006980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006984:	b004      	add	sp, #16
 8006986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800698a:	4835      	ldr	r0, [pc, #212]	; (8006a60 <_printf_i+0x244>)
 800698c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	680e      	ldr	r6, [r1, #0]
 8006994:	061f      	lsls	r7, r3, #24
 8006996:	f856 5b04 	ldr.w	r5, [r6], #4
 800699a:	600e      	str	r6, [r1, #0]
 800699c:	d514      	bpl.n	80069c8 <_printf_i+0x1ac>
 800699e:	07d9      	lsls	r1, r3, #31
 80069a0:	bf44      	itt	mi
 80069a2:	f043 0320 	orrmi.w	r3, r3, #32
 80069a6:	6023      	strmi	r3, [r4, #0]
 80069a8:	b91d      	cbnz	r5, 80069b2 <_printf_i+0x196>
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	f023 0320 	bic.w	r3, r3, #32
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	2310      	movs	r3, #16
 80069b4:	e7b0      	b.n	8006918 <_printf_i+0xfc>
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	f043 0320 	orr.w	r3, r3, #32
 80069bc:	6023      	str	r3, [r4, #0]
 80069be:	2378      	movs	r3, #120	; 0x78
 80069c0:	4828      	ldr	r0, [pc, #160]	; (8006a64 <_printf_i+0x248>)
 80069c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069c6:	e7e3      	b.n	8006990 <_printf_i+0x174>
 80069c8:	065e      	lsls	r6, r3, #25
 80069ca:	bf48      	it	mi
 80069cc:	b2ad      	uxthmi	r5, r5
 80069ce:	e7e6      	b.n	800699e <_printf_i+0x182>
 80069d0:	4616      	mov	r6, r2
 80069d2:	e7bb      	b.n	800694c <_printf_i+0x130>
 80069d4:	680b      	ldr	r3, [r1, #0]
 80069d6:	6826      	ldr	r6, [r4, #0]
 80069d8:	6960      	ldr	r0, [r4, #20]
 80069da:	1d1d      	adds	r5, r3, #4
 80069dc:	600d      	str	r5, [r1, #0]
 80069de:	0635      	lsls	r5, r6, #24
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	d501      	bpl.n	80069e8 <_printf_i+0x1cc>
 80069e4:	6018      	str	r0, [r3, #0]
 80069e6:	e002      	b.n	80069ee <_printf_i+0x1d2>
 80069e8:	0671      	lsls	r1, r6, #25
 80069ea:	d5fb      	bpl.n	80069e4 <_printf_i+0x1c8>
 80069ec:	8018      	strh	r0, [r3, #0]
 80069ee:	2300      	movs	r3, #0
 80069f0:	6123      	str	r3, [r4, #16]
 80069f2:	4616      	mov	r6, r2
 80069f4:	e7ba      	b.n	800696c <_printf_i+0x150>
 80069f6:	680b      	ldr	r3, [r1, #0]
 80069f8:	1d1a      	adds	r2, r3, #4
 80069fa:	600a      	str	r2, [r1, #0]
 80069fc:	681e      	ldr	r6, [r3, #0]
 80069fe:	6862      	ldr	r2, [r4, #4]
 8006a00:	2100      	movs	r1, #0
 8006a02:	4630      	mov	r0, r6
 8006a04:	f7f9 fbf4 	bl	80001f0 <memchr>
 8006a08:	b108      	cbz	r0, 8006a0e <_printf_i+0x1f2>
 8006a0a:	1b80      	subs	r0, r0, r6
 8006a0c:	6060      	str	r0, [r4, #4]
 8006a0e:	6863      	ldr	r3, [r4, #4]
 8006a10:	6123      	str	r3, [r4, #16]
 8006a12:	2300      	movs	r3, #0
 8006a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a18:	e7a8      	b.n	800696c <_printf_i+0x150>
 8006a1a:	6923      	ldr	r3, [r4, #16]
 8006a1c:	4632      	mov	r2, r6
 8006a1e:	4649      	mov	r1, r9
 8006a20:	4640      	mov	r0, r8
 8006a22:	47d0      	blx	sl
 8006a24:	3001      	adds	r0, #1
 8006a26:	d0ab      	beq.n	8006980 <_printf_i+0x164>
 8006a28:	6823      	ldr	r3, [r4, #0]
 8006a2a:	079b      	lsls	r3, r3, #30
 8006a2c:	d413      	bmi.n	8006a56 <_printf_i+0x23a>
 8006a2e:	68e0      	ldr	r0, [r4, #12]
 8006a30:	9b03      	ldr	r3, [sp, #12]
 8006a32:	4298      	cmp	r0, r3
 8006a34:	bfb8      	it	lt
 8006a36:	4618      	movlt	r0, r3
 8006a38:	e7a4      	b.n	8006984 <_printf_i+0x168>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	4632      	mov	r2, r6
 8006a3e:	4649      	mov	r1, r9
 8006a40:	4640      	mov	r0, r8
 8006a42:	47d0      	blx	sl
 8006a44:	3001      	adds	r0, #1
 8006a46:	d09b      	beq.n	8006980 <_printf_i+0x164>
 8006a48:	3501      	adds	r5, #1
 8006a4a:	68e3      	ldr	r3, [r4, #12]
 8006a4c:	9903      	ldr	r1, [sp, #12]
 8006a4e:	1a5b      	subs	r3, r3, r1
 8006a50:	42ab      	cmp	r3, r5
 8006a52:	dcf2      	bgt.n	8006a3a <_printf_i+0x21e>
 8006a54:	e7eb      	b.n	8006a2e <_printf_i+0x212>
 8006a56:	2500      	movs	r5, #0
 8006a58:	f104 0619 	add.w	r6, r4, #25
 8006a5c:	e7f5      	b.n	8006a4a <_printf_i+0x22e>
 8006a5e:	bf00      	nop
 8006a60:	0801bc86 	.word	0x0801bc86
 8006a64:	0801bc97 	.word	0x0801bc97

08006a68 <quorem>:
 8006a68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6c:	6903      	ldr	r3, [r0, #16]
 8006a6e:	690c      	ldr	r4, [r1, #16]
 8006a70:	42a3      	cmp	r3, r4
 8006a72:	4607      	mov	r7, r0
 8006a74:	f2c0 8081 	blt.w	8006b7a <quorem+0x112>
 8006a78:	3c01      	subs	r4, #1
 8006a7a:	f101 0814 	add.w	r8, r1, #20
 8006a7e:	f100 0514 	add.w	r5, r0, #20
 8006a82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a86:	9301      	str	r3, [sp, #4]
 8006a88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a90:	3301      	adds	r3, #1
 8006a92:	429a      	cmp	r2, r3
 8006a94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006aa0:	d331      	bcc.n	8006b06 <quorem+0x9e>
 8006aa2:	f04f 0e00 	mov.w	lr, #0
 8006aa6:	4640      	mov	r0, r8
 8006aa8:	46ac      	mov	ip, r5
 8006aaa:	46f2      	mov	sl, lr
 8006aac:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ab0:	b293      	uxth	r3, r2
 8006ab2:	fb06 e303 	mla	r3, r6, r3, lr
 8006ab6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	ebaa 0303 	sub.w	r3, sl, r3
 8006ac0:	0c12      	lsrs	r2, r2, #16
 8006ac2:	f8dc a000 	ldr.w	sl, [ip]
 8006ac6:	fb06 e202 	mla	r2, r6, r2, lr
 8006aca:	fa13 f38a 	uxtah	r3, r3, sl
 8006ace:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ad2:	fa1f fa82 	uxth.w	sl, r2
 8006ad6:	f8dc 2000 	ldr.w	r2, [ip]
 8006ada:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006ade:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ae8:	4581      	cmp	r9, r0
 8006aea:	f84c 3b04 	str.w	r3, [ip], #4
 8006aee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006af2:	d2db      	bcs.n	8006aac <quorem+0x44>
 8006af4:	f855 300b 	ldr.w	r3, [r5, fp]
 8006af8:	b92b      	cbnz	r3, 8006b06 <quorem+0x9e>
 8006afa:	9b01      	ldr	r3, [sp, #4]
 8006afc:	3b04      	subs	r3, #4
 8006afe:	429d      	cmp	r5, r3
 8006b00:	461a      	mov	r2, r3
 8006b02:	d32e      	bcc.n	8006b62 <quorem+0xfa>
 8006b04:	613c      	str	r4, [r7, #16]
 8006b06:	4638      	mov	r0, r7
 8006b08:	f001 f8b0 	bl	8007c6c <__mcmp>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	db24      	blt.n	8006b5a <quorem+0xf2>
 8006b10:	3601      	adds	r6, #1
 8006b12:	4628      	mov	r0, r5
 8006b14:	f04f 0c00 	mov.w	ip, #0
 8006b18:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b1c:	f8d0 e000 	ldr.w	lr, [r0]
 8006b20:	b293      	uxth	r3, r2
 8006b22:	ebac 0303 	sub.w	r3, ip, r3
 8006b26:	0c12      	lsrs	r2, r2, #16
 8006b28:	fa13 f38e 	uxtah	r3, r3, lr
 8006b2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b3a:	45c1      	cmp	r9, r8
 8006b3c:	f840 3b04 	str.w	r3, [r0], #4
 8006b40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b44:	d2e8      	bcs.n	8006b18 <quorem+0xb0>
 8006b46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b4e:	b922      	cbnz	r2, 8006b5a <quorem+0xf2>
 8006b50:	3b04      	subs	r3, #4
 8006b52:	429d      	cmp	r5, r3
 8006b54:	461a      	mov	r2, r3
 8006b56:	d30a      	bcc.n	8006b6e <quorem+0x106>
 8006b58:	613c      	str	r4, [r7, #16]
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	b003      	add	sp, #12
 8006b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b62:	6812      	ldr	r2, [r2, #0]
 8006b64:	3b04      	subs	r3, #4
 8006b66:	2a00      	cmp	r2, #0
 8006b68:	d1cc      	bne.n	8006b04 <quorem+0x9c>
 8006b6a:	3c01      	subs	r4, #1
 8006b6c:	e7c7      	b.n	8006afe <quorem+0x96>
 8006b6e:	6812      	ldr	r2, [r2, #0]
 8006b70:	3b04      	subs	r3, #4
 8006b72:	2a00      	cmp	r2, #0
 8006b74:	d1f0      	bne.n	8006b58 <quorem+0xf0>
 8006b76:	3c01      	subs	r4, #1
 8006b78:	e7eb      	b.n	8006b52 <quorem+0xea>
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	e7ee      	b.n	8006b5c <quorem+0xf4>
	...

08006b80 <_dtoa_r>:
 8006b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	ed2d 8b02 	vpush	{d8}
 8006b88:	ec57 6b10 	vmov	r6, r7, d0
 8006b8c:	b095      	sub	sp, #84	; 0x54
 8006b8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b94:	9105      	str	r1, [sp, #20]
 8006b96:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006b9a:	4604      	mov	r4, r0
 8006b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ba0:	b975      	cbnz	r5, 8006bc0 <_dtoa_r+0x40>
 8006ba2:	2010      	movs	r0, #16
 8006ba4:	f000 fddc 	bl	8007760 <malloc>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	6260      	str	r0, [r4, #36]	; 0x24
 8006bac:	b920      	cbnz	r0, 8006bb8 <_dtoa_r+0x38>
 8006bae:	4bb2      	ldr	r3, [pc, #712]	; (8006e78 <_dtoa_r+0x2f8>)
 8006bb0:	21ea      	movs	r1, #234	; 0xea
 8006bb2:	48b2      	ldr	r0, [pc, #712]	; (8006e7c <_dtoa_r+0x2fc>)
 8006bb4:	f001 fa24 	bl	8008000 <__assert_func>
 8006bb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006bbc:	6005      	str	r5, [r0, #0]
 8006bbe:	60c5      	str	r5, [r0, #12]
 8006bc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bc2:	6819      	ldr	r1, [r3, #0]
 8006bc4:	b151      	cbz	r1, 8006bdc <_dtoa_r+0x5c>
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	604a      	str	r2, [r1, #4]
 8006bca:	2301      	movs	r3, #1
 8006bcc:	4093      	lsls	r3, r2
 8006bce:	608b      	str	r3, [r1, #8]
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f000 fe0d 	bl	80077f0 <_Bfree>
 8006bd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	1e3b      	subs	r3, r7, #0
 8006bde:	bfb9      	ittee	lt
 8006be0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006be4:	9303      	strlt	r3, [sp, #12]
 8006be6:	2300      	movge	r3, #0
 8006be8:	f8c8 3000 	strge.w	r3, [r8]
 8006bec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006bf0:	4ba3      	ldr	r3, [pc, #652]	; (8006e80 <_dtoa_r+0x300>)
 8006bf2:	bfbc      	itt	lt
 8006bf4:	2201      	movlt	r2, #1
 8006bf6:	f8c8 2000 	strlt.w	r2, [r8]
 8006bfa:	ea33 0309 	bics.w	r3, r3, r9
 8006bfe:	d11b      	bne.n	8006c38 <_dtoa_r+0xb8>
 8006c00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c02:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c06:	6013      	str	r3, [r2, #0]
 8006c08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c0c:	4333      	orrs	r3, r6
 8006c0e:	f000 857a 	beq.w	8007706 <_dtoa_r+0xb86>
 8006c12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c14:	b963      	cbnz	r3, 8006c30 <_dtoa_r+0xb0>
 8006c16:	4b9b      	ldr	r3, [pc, #620]	; (8006e84 <_dtoa_r+0x304>)
 8006c18:	e024      	b.n	8006c64 <_dtoa_r+0xe4>
 8006c1a:	4b9b      	ldr	r3, [pc, #620]	; (8006e88 <_dtoa_r+0x308>)
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	3308      	adds	r3, #8
 8006c20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	9800      	ldr	r0, [sp, #0]
 8006c26:	b015      	add	sp, #84	; 0x54
 8006c28:	ecbd 8b02 	vpop	{d8}
 8006c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c30:	4b94      	ldr	r3, [pc, #592]	; (8006e84 <_dtoa_r+0x304>)
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	3303      	adds	r3, #3
 8006c36:	e7f3      	b.n	8006c20 <_dtoa_r+0xa0>
 8006c38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	ec51 0b17 	vmov	r0, r1, d7
 8006c42:	2300      	movs	r3, #0
 8006c44:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006c48:	f7f9 ff46 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c4c:	4680      	mov	r8, r0
 8006c4e:	b158      	cbz	r0, 8006c68 <_dtoa_r+0xe8>
 8006c50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c52:	2301      	movs	r3, #1
 8006c54:	6013      	str	r3, [r2, #0]
 8006c56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 8551 	beq.w	8007700 <_dtoa_r+0xb80>
 8006c5e:	488b      	ldr	r0, [pc, #556]	; (8006e8c <_dtoa_r+0x30c>)
 8006c60:	6018      	str	r0, [r3, #0]
 8006c62:	1e43      	subs	r3, r0, #1
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	e7dd      	b.n	8006c24 <_dtoa_r+0xa4>
 8006c68:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006c6c:	aa12      	add	r2, sp, #72	; 0x48
 8006c6e:	a913      	add	r1, sp, #76	; 0x4c
 8006c70:	4620      	mov	r0, r4
 8006c72:	f001 f89f 	bl	8007db4 <__d2b>
 8006c76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006c7a:	4683      	mov	fp, r0
 8006c7c:	2d00      	cmp	r5, #0
 8006c7e:	d07c      	beq.n	8006d7a <_dtoa_r+0x1fa>
 8006c80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c82:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006c86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c8a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006c8e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006c92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006c96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c9a:	4b7d      	ldr	r3, [pc, #500]	; (8006e90 <_dtoa_r+0x310>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	4639      	mov	r1, r7
 8006ca2:	f7f9 faf9 	bl	8000298 <__aeabi_dsub>
 8006ca6:	a36e      	add	r3, pc, #440	; (adr r3, 8006e60 <_dtoa_r+0x2e0>)
 8006ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cac:	f7f9 fcac 	bl	8000608 <__aeabi_dmul>
 8006cb0:	a36d      	add	r3, pc, #436	; (adr r3, 8006e68 <_dtoa_r+0x2e8>)
 8006cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb6:	f7f9 faf1 	bl	800029c <__adddf3>
 8006cba:	4606      	mov	r6, r0
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	460f      	mov	r7, r1
 8006cc0:	f7f9 fc38 	bl	8000534 <__aeabi_i2d>
 8006cc4:	a36a      	add	r3, pc, #424	; (adr r3, 8006e70 <_dtoa_r+0x2f0>)
 8006cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cca:	f7f9 fc9d 	bl	8000608 <__aeabi_dmul>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	4639      	mov	r1, r7
 8006cd6:	f7f9 fae1 	bl	800029c <__adddf3>
 8006cda:	4606      	mov	r6, r0
 8006cdc:	460f      	mov	r7, r1
 8006cde:	f7f9 ff43 	bl	8000b68 <__aeabi_d2iz>
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	4682      	mov	sl, r0
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	4630      	mov	r0, r6
 8006cea:	4639      	mov	r1, r7
 8006cec:	f7f9 fefe 	bl	8000aec <__aeabi_dcmplt>
 8006cf0:	b148      	cbz	r0, 8006d06 <_dtoa_r+0x186>
 8006cf2:	4650      	mov	r0, sl
 8006cf4:	f7f9 fc1e 	bl	8000534 <__aeabi_i2d>
 8006cf8:	4632      	mov	r2, r6
 8006cfa:	463b      	mov	r3, r7
 8006cfc:	f7f9 feec 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d00:	b908      	cbnz	r0, 8006d06 <_dtoa_r+0x186>
 8006d02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006d06:	f1ba 0f16 	cmp.w	sl, #22
 8006d0a:	d854      	bhi.n	8006db6 <_dtoa_r+0x236>
 8006d0c:	4b61      	ldr	r3, [pc, #388]	; (8006e94 <_dtoa_r+0x314>)
 8006d0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d1a:	f7f9 fee7 	bl	8000aec <__aeabi_dcmplt>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	d04b      	beq.n	8006dba <_dtoa_r+0x23a>
 8006d22:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006d26:	2300      	movs	r3, #0
 8006d28:	930e      	str	r3, [sp, #56]	; 0x38
 8006d2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d2c:	1b5d      	subs	r5, r3, r5
 8006d2e:	1e6b      	subs	r3, r5, #1
 8006d30:	9304      	str	r3, [sp, #16]
 8006d32:	bf43      	ittte	mi
 8006d34:	2300      	movmi	r3, #0
 8006d36:	f1c5 0801 	rsbmi	r8, r5, #1
 8006d3a:	9304      	strmi	r3, [sp, #16]
 8006d3c:	f04f 0800 	movpl.w	r8, #0
 8006d40:	f1ba 0f00 	cmp.w	sl, #0
 8006d44:	db3b      	blt.n	8006dbe <_dtoa_r+0x23e>
 8006d46:	9b04      	ldr	r3, [sp, #16]
 8006d48:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006d4c:	4453      	add	r3, sl
 8006d4e:	9304      	str	r3, [sp, #16]
 8006d50:	2300      	movs	r3, #0
 8006d52:	9306      	str	r3, [sp, #24]
 8006d54:	9b05      	ldr	r3, [sp, #20]
 8006d56:	2b09      	cmp	r3, #9
 8006d58:	d869      	bhi.n	8006e2e <_dtoa_r+0x2ae>
 8006d5a:	2b05      	cmp	r3, #5
 8006d5c:	bfc4      	itt	gt
 8006d5e:	3b04      	subgt	r3, #4
 8006d60:	9305      	strgt	r3, [sp, #20]
 8006d62:	9b05      	ldr	r3, [sp, #20]
 8006d64:	f1a3 0302 	sub.w	r3, r3, #2
 8006d68:	bfcc      	ite	gt
 8006d6a:	2500      	movgt	r5, #0
 8006d6c:	2501      	movle	r5, #1
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d869      	bhi.n	8006e46 <_dtoa_r+0x2c6>
 8006d72:	e8df f003 	tbb	[pc, r3]
 8006d76:	4e2c      	.short	0x4e2c
 8006d78:	5a4c      	.short	0x5a4c
 8006d7a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006d7e:	441d      	add	r5, r3
 8006d80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d84:	2b20      	cmp	r3, #32
 8006d86:	bfc1      	itttt	gt
 8006d88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d8c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006d90:	fa09 f303 	lslgt.w	r3, r9, r3
 8006d94:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006d98:	bfda      	itte	le
 8006d9a:	f1c3 0320 	rsble	r3, r3, #32
 8006d9e:	fa06 f003 	lslle.w	r0, r6, r3
 8006da2:	4318      	orrgt	r0, r3
 8006da4:	f7f9 fbb6 	bl	8000514 <__aeabi_ui2d>
 8006da8:	2301      	movs	r3, #1
 8006daa:	4606      	mov	r6, r0
 8006dac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006db0:	3d01      	subs	r5, #1
 8006db2:	9310      	str	r3, [sp, #64]	; 0x40
 8006db4:	e771      	b.n	8006c9a <_dtoa_r+0x11a>
 8006db6:	2301      	movs	r3, #1
 8006db8:	e7b6      	b.n	8006d28 <_dtoa_r+0x1a8>
 8006dba:	900e      	str	r0, [sp, #56]	; 0x38
 8006dbc:	e7b5      	b.n	8006d2a <_dtoa_r+0x1aa>
 8006dbe:	f1ca 0300 	rsb	r3, sl, #0
 8006dc2:	9306      	str	r3, [sp, #24]
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	eba8 080a 	sub.w	r8, r8, sl
 8006dca:	930d      	str	r3, [sp, #52]	; 0x34
 8006dcc:	e7c2      	b.n	8006d54 <_dtoa_r+0x1d4>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	9308      	str	r3, [sp, #32]
 8006dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	dc39      	bgt.n	8006e4c <_dtoa_r+0x2cc>
 8006dd8:	f04f 0901 	mov.w	r9, #1
 8006ddc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006de0:	464b      	mov	r3, r9
 8006de2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006de6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006de8:	2200      	movs	r2, #0
 8006dea:	6042      	str	r2, [r0, #4]
 8006dec:	2204      	movs	r2, #4
 8006dee:	f102 0614 	add.w	r6, r2, #20
 8006df2:	429e      	cmp	r6, r3
 8006df4:	6841      	ldr	r1, [r0, #4]
 8006df6:	d92f      	bls.n	8006e58 <_dtoa_r+0x2d8>
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f000 fcb9 	bl	8007770 <_Balloc>
 8006dfe:	9000      	str	r0, [sp, #0]
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d14b      	bne.n	8006e9c <_dtoa_r+0x31c>
 8006e04:	4b24      	ldr	r3, [pc, #144]	; (8006e98 <_dtoa_r+0x318>)
 8006e06:	4602      	mov	r2, r0
 8006e08:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e0c:	e6d1      	b.n	8006bb2 <_dtoa_r+0x32>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e7de      	b.n	8006dd0 <_dtoa_r+0x250>
 8006e12:	2300      	movs	r3, #0
 8006e14:	9308      	str	r3, [sp, #32]
 8006e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e18:	eb0a 0903 	add.w	r9, sl, r3
 8006e1c:	f109 0301 	add.w	r3, r9, #1
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	9301      	str	r3, [sp, #4]
 8006e24:	bfb8      	it	lt
 8006e26:	2301      	movlt	r3, #1
 8006e28:	e7dd      	b.n	8006de6 <_dtoa_r+0x266>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e7f2      	b.n	8006e14 <_dtoa_r+0x294>
 8006e2e:	2501      	movs	r5, #1
 8006e30:	2300      	movs	r3, #0
 8006e32:	9305      	str	r3, [sp, #20]
 8006e34:	9508      	str	r5, [sp, #32]
 8006e36:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e40:	2312      	movs	r3, #18
 8006e42:	9209      	str	r2, [sp, #36]	; 0x24
 8006e44:	e7cf      	b.n	8006de6 <_dtoa_r+0x266>
 8006e46:	2301      	movs	r3, #1
 8006e48:	9308      	str	r3, [sp, #32]
 8006e4a:	e7f4      	b.n	8006e36 <_dtoa_r+0x2b6>
 8006e4c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006e50:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e54:	464b      	mov	r3, r9
 8006e56:	e7c6      	b.n	8006de6 <_dtoa_r+0x266>
 8006e58:	3101      	adds	r1, #1
 8006e5a:	6041      	str	r1, [r0, #4]
 8006e5c:	0052      	lsls	r2, r2, #1
 8006e5e:	e7c6      	b.n	8006dee <_dtoa_r+0x26e>
 8006e60:	636f4361 	.word	0x636f4361
 8006e64:	3fd287a7 	.word	0x3fd287a7
 8006e68:	8b60c8b3 	.word	0x8b60c8b3
 8006e6c:	3fc68a28 	.word	0x3fc68a28
 8006e70:	509f79fb 	.word	0x509f79fb
 8006e74:	3fd34413 	.word	0x3fd34413
 8006e78:	0801bcb5 	.word	0x0801bcb5
 8006e7c:	0801bccc 	.word	0x0801bccc
 8006e80:	7ff00000 	.word	0x7ff00000
 8006e84:	0801bcb1 	.word	0x0801bcb1
 8006e88:	0801bca8 	.word	0x0801bca8
 8006e8c:	0801bc85 	.word	0x0801bc85
 8006e90:	3ff80000 	.word	0x3ff80000
 8006e94:	0801bdc8 	.word	0x0801bdc8
 8006e98:	0801bd2b 	.word	0x0801bd2b
 8006e9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e9e:	9a00      	ldr	r2, [sp, #0]
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	9b01      	ldr	r3, [sp, #4]
 8006ea4:	2b0e      	cmp	r3, #14
 8006ea6:	f200 80ad 	bhi.w	8007004 <_dtoa_r+0x484>
 8006eaa:	2d00      	cmp	r5, #0
 8006eac:	f000 80aa 	beq.w	8007004 <_dtoa_r+0x484>
 8006eb0:	f1ba 0f00 	cmp.w	sl, #0
 8006eb4:	dd36      	ble.n	8006f24 <_dtoa_r+0x3a4>
 8006eb6:	4ac3      	ldr	r2, [pc, #780]	; (80071c4 <_dtoa_r+0x644>)
 8006eb8:	f00a 030f 	and.w	r3, sl, #15
 8006ebc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ec0:	ed93 7b00 	vldr	d7, [r3]
 8006ec4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006ec8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006ecc:	eeb0 8a47 	vmov.f32	s16, s14
 8006ed0:	eef0 8a67 	vmov.f32	s17, s15
 8006ed4:	d016      	beq.n	8006f04 <_dtoa_r+0x384>
 8006ed6:	4bbc      	ldr	r3, [pc, #752]	; (80071c8 <_dtoa_r+0x648>)
 8006ed8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006edc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ee0:	f7f9 fcbc 	bl	800085c <__aeabi_ddiv>
 8006ee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ee8:	f007 070f 	and.w	r7, r7, #15
 8006eec:	2503      	movs	r5, #3
 8006eee:	4eb6      	ldr	r6, [pc, #728]	; (80071c8 <_dtoa_r+0x648>)
 8006ef0:	b957      	cbnz	r7, 8006f08 <_dtoa_r+0x388>
 8006ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ef6:	ec53 2b18 	vmov	r2, r3, d8
 8006efa:	f7f9 fcaf 	bl	800085c <__aeabi_ddiv>
 8006efe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f02:	e029      	b.n	8006f58 <_dtoa_r+0x3d8>
 8006f04:	2502      	movs	r5, #2
 8006f06:	e7f2      	b.n	8006eee <_dtoa_r+0x36e>
 8006f08:	07f9      	lsls	r1, r7, #31
 8006f0a:	d508      	bpl.n	8006f1e <_dtoa_r+0x39e>
 8006f0c:	ec51 0b18 	vmov	r0, r1, d8
 8006f10:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f14:	f7f9 fb78 	bl	8000608 <__aeabi_dmul>
 8006f18:	ec41 0b18 	vmov	d8, r0, r1
 8006f1c:	3501      	adds	r5, #1
 8006f1e:	107f      	asrs	r7, r7, #1
 8006f20:	3608      	adds	r6, #8
 8006f22:	e7e5      	b.n	8006ef0 <_dtoa_r+0x370>
 8006f24:	f000 80a6 	beq.w	8007074 <_dtoa_r+0x4f4>
 8006f28:	f1ca 0600 	rsb	r6, sl, #0
 8006f2c:	4ba5      	ldr	r3, [pc, #660]	; (80071c4 <_dtoa_r+0x644>)
 8006f2e:	4fa6      	ldr	r7, [pc, #664]	; (80071c8 <_dtoa_r+0x648>)
 8006f30:	f006 020f 	and.w	r2, r6, #15
 8006f34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f40:	f7f9 fb62 	bl	8000608 <__aeabi_dmul>
 8006f44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f48:	1136      	asrs	r6, r6, #4
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	2502      	movs	r5, #2
 8006f4e:	2e00      	cmp	r6, #0
 8006f50:	f040 8085 	bne.w	800705e <_dtoa_r+0x4de>
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1d2      	bne.n	8006efe <_dtoa_r+0x37e>
 8006f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 808c 	beq.w	8007078 <_dtoa_r+0x4f8>
 8006f60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f64:	4b99      	ldr	r3, [pc, #612]	; (80071cc <_dtoa_r+0x64c>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	4630      	mov	r0, r6
 8006f6a:	4639      	mov	r1, r7
 8006f6c:	f7f9 fdbe 	bl	8000aec <__aeabi_dcmplt>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	f000 8081 	beq.w	8007078 <_dtoa_r+0x4f8>
 8006f76:	9b01      	ldr	r3, [sp, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d07d      	beq.n	8007078 <_dtoa_r+0x4f8>
 8006f7c:	f1b9 0f00 	cmp.w	r9, #0
 8006f80:	dd3c      	ble.n	8006ffc <_dtoa_r+0x47c>
 8006f82:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006f86:	9307      	str	r3, [sp, #28]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	4b91      	ldr	r3, [pc, #580]	; (80071d0 <_dtoa_r+0x650>)
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	4639      	mov	r1, r7
 8006f90:	f7f9 fb3a 	bl	8000608 <__aeabi_dmul>
 8006f94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f98:	3501      	adds	r5, #1
 8006f9a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006f9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	f7f9 fac6 	bl	8000534 <__aeabi_i2d>
 8006fa8:	4632      	mov	r2, r6
 8006faa:	463b      	mov	r3, r7
 8006fac:	f7f9 fb2c 	bl	8000608 <__aeabi_dmul>
 8006fb0:	4b88      	ldr	r3, [pc, #544]	; (80071d4 <_dtoa_r+0x654>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f7f9 f972 	bl	800029c <__adddf3>
 8006fb8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fc0:	9303      	str	r3, [sp, #12]
 8006fc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d15c      	bne.n	8007082 <_dtoa_r+0x502>
 8006fc8:	4b83      	ldr	r3, [pc, #524]	; (80071d8 <_dtoa_r+0x658>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	4630      	mov	r0, r6
 8006fce:	4639      	mov	r1, r7
 8006fd0:	f7f9 f962 	bl	8000298 <__aeabi_dsub>
 8006fd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fd8:	4606      	mov	r6, r0
 8006fda:	460f      	mov	r7, r1
 8006fdc:	f7f9 fda4 	bl	8000b28 <__aeabi_dcmpgt>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	f040 8296 	bne.w	8007512 <_dtoa_r+0x992>
 8006fe6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006fea:	4630      	mov	r0, r6
 8006fec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ff0:	4639      	mov	r1, r7
 8006ff2:	f7f9 fd7b 	bl	8000aec <__aeabi_dcmplt>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	f040 8288 	bne.w	800750c <_dtoa_r+0x98c>
 8006ffc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007000:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007004:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007006:	2b00      	cmp	r3, #0
 8007008:	f2c0 8158 	blt.w	80072bc <_dtoa_r+0x73c>
 800700c:	f1ba 0f0e 	cmp.w	sl, #14
 8007010:	f300 8154 	bgt.w	80072bc <_dtoa_r+0x73c>
 8007014:	4b6b      	ldr	r3, [pc, #428]	; (80071c4 <_dtoa_r+0x644>)
 8007016:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800701a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800701e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007020:	2b00      	cmp	r3, #0
 8007022:	f280 80e3 	bge.w	80071ec <_dtoa_r+0x66c>
 8007026:	9b01      	ldr	r3, [sp, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	f300 80df 	bgt.w	80071ec <_dtoa_r+0x66c>
 800702e:	f040 826d 	bne.w	800750c <_dtoa_r+0x98c>
 8007032:	4b69      	ldr	r3, [pc, #420]	; (80071d8 <_dtoa_r+0x658>)
 8007034:	2200      	movs	r2, #0
 8007036:	4640      	mov	r0, r8
 8007038:	4649      	mov	r1, r9
 800703a:	f7f9 fae5 	bl	8000608 <__aeabi_dmul>
 800703e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007042:	f7f9 fd67 	bl	8000b14 <__aeabi_dcmpge>
 8007046:	9e01      	ldr	r6, [sp, #4]
 8007048:	4637      	mov	r7, r6
 800704a:	2800      	cmp	r0, #0
 800704c:	f040 8243 	bne.w	80074d6 <_dtoa_r+0x956>
 8007050:	9d00      	ldr	r5, [sp, #0]
 8007052:	2331      	movs	r3, #49	; 0x31
 8007054:	f805 3b01 	strb.w	r3, [r5], #1
 8007058:	f10a 0a01 	add.w	sl, sl, #1
 800705c:	e23f      	b.n	80074de <_dtoa_r+0x95e>
 800705e:	07f2      	lsls	r2, r6, #31
 8007060:	d505      	bpl.n	800706e <_dtoa_r+0x4ee>
 8007062:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007066:	f7f9 facf 	bl	8000608 <__aeabi_dmul>
 800706a:	3501      	adds	r5, #1
 800706c:	2301      	movs	r3, #1
 800706e:	1076      	asrs	r6, r6, #1
 8007070:	3708      	adds	r7, #8
 8007072:	e76c      	b.n	8006f4e <_dtoa_r+0x3ce>
 8007074:	2502      	movs	r5, #2
 8007076:	e76f      	b.n	8006f58 <_dtoa_r+0x3d8>
 8007078:	9b01      	ldr	r3, [sp, #4]
 800707a:	f8cd a01c 	str.w	sl, [sp, #28]
 800707e:	930c      	str	r3, [sp, #48]	; 0x30
 8007080:	e78d      	b.n	8006f9e <_dtoa_r+0x41e>
 8007082:	9900      	ldr	r1, [sp, #0]
 8007084:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007086:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007088:	4b4e      	ldr	r3, [pc, #312]	; (80071c4 <_dtoa_r+0x644>)
 800708a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800708e:	4401      	add	r1, r0
 8007090:	9102      	str	r1, [sp, #8]
 8007092:	9908      	ldr	r1, [sp, #32]
 8007094:	eeb0 8a47 	vmov.f32	s16, s14
 8007098:	eef0 8a67 	vmov.f32	s17, s15
 800709c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070a4:	2900      	cmp	r1, #0
 80070a6:	d045      	beq.n	8007134 <_dtoa_r+0x5b4>
 80070a8:	494c      	ldr	r1, [pc, #304]	; (80071dc <_dtoa_r+0x65c>)
 80070aa:	2000      	movs	r0, #0
 80070ac:	f7f9 fbd6 	bl	800085c <__aeabi_ddiv>
 80070b0:	ec53 2b18 	vmov	r2, r3, d8
 80070b4:	f7f9 f8f0 	bl	8000298 <__aeabi_dsub>
 80070b8:	9d00      	ldr	r5, [sp, #0]
 80070ba:	ec41 0b18 	vmov	d8, r0, r1
 80070be:	4639      	mov	r1, r7
 80070c0:	4630      	mov	r0, r6
 80070c2:	f7f9 fd51 	bl	8000b68 <__aeabi_d2iz>
 80070c6:	900c      	str	r0, [sp, #48]	; 0x30
 80070c8:	f7f9 fa34 	bl	8000534 <__aeabi_i2d>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	4630      	mov	r0, r6
 80070d2:	4639      	mov	r1, r7
 80070d4:	f7f9 f8e0 	bl	8000298 <__aeabi_dsub>
 80070d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070da:	3330      	adds	r3, #48	; 0x30
 80070dc:	f805 3b01 	strb.w	r3, [r5], #1
 80070e0:	ec53 2b18 	vmov	r2, r3, d8
 80070e4:	4606      	mov	r6, r0
 80070e6:	460f      	mov	r7, r1
 80070e8:	f7f9 fd00 	bl	8000aec <__aeabi_dcmplt>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d165      	bne.n	80071bc <_dtoa_r+0x63c>
 80070f0:	4632      	mov	r2, r6
 80070f2:	463b      	mov	r3, r7
 80070f4:	4935      	ldr	r1, [pc, #212]	; (80071cc <_dtoa_r+0x64c>)
 80070f6:	2000      	movs	r0, #0
 80070f8:	f7f9 f8ce 	bl	8000298 <__aeabi_dsub>
 80070fc:	ec53 2b18 	vmov	r2, r3, d8
 8007100:	f7f9 fcf4 	bl	8000aec <__aeabi_dcmplt>
 8007104:	2800      	cmp	r0, #0
 8007106:	f040 80b9 	bne.w	800727c <_dtoa_r+0x6fc>
 800710a:	9b02      	ldr	r3, [sp, #8]
 800710c:	429d      	cmp	r5, r3
 800710e:	f43f af75 	beq.w	8006ffc <_dtoa_r+0x47c>
 8007112:	4b2f      	ldr	r3, [pc, #188]	; (80071d0 <_dtoa_r+0x650>)
 8007114:	ec51 0b18 	vmov	r0, r1, d8
 8007118:	2200      	movs	r2, #0
 800711a:	f7f9 fa75 	bl	8000608 <__aeabi_dmul>
 800711e:	4b2c      	ldr	r3, [pc, #176]	; (80071d0 <_dtoa_r+0x650>)
 8007120:	ec41 0b18 	vmov	d8, r0, r1
 8007124:	2200      	movs	r2, #0
 8007126:	4630      	mov	r0, r6
 8007128:	4639      	mov	r1, r7
 800712a:	f7f9 fa6d 	bl	8000608 <__aeabi_dmul>
 800712e:	4606      	mov	r6, r0
 8007130:	460f      	mov	r7, r1
 8007132:	e7c4      	b.n	80070be <_dtoa_r+0x53e>
 8007134:	ec51 0b17 	vmov	r0, r1, d7
 8007138:	f7f9 fa66 	bl	8000608 <__aeabi_dmul>
 800713c:	9b02      	ldr	r3, [sp, #8]
 800713e:	9d00      	ldr	r5, [sp, #0]
 8007140:	930c      	str	r3, [sp, #48]	; 0x30
 8007142:	ec41 0b18 	vmov	d8, r0, r1
 8007146:	4639      	mov	r1, r7
 8007148:	4630      	mov	r0, r6
 800714a:	f7f9 fd0d 	bl	8000b68 <__aeabi_d2iz>
 800714e:	9011      	str	r0, [sp, #68]	; 0x44
 8007150:	f7f9 f9f0 	bl	8000534 <__aeabi_i2d>
 8007154:	4602      	mov	r2, r0
 8007156:	460b      	mov	r3, r1
 8007158:	4630      	mov	r0, r6
 800715a:	4639      	mov	r1, r7
 800715c:	f7f9 f89c 	bl	8000298 <__aeabi_dsub>
 8007160:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007162:	3330      	adds	r3, #48	; 0x30
 8007164:	f805 3b01 	strb.w	r3, [r5], #1
 8007168:	9b02      	ldr	r3, [sp, #8]
 800716a:	429d      	cmp	r5, r3
 800716c:	4606      	mov	r6, r0
 800716e:	460f      	mov	r7, r1
 8007170:	f04f 0200 	mov.w	r2, #0
 8007174:	d134      	bne.n	80071e0 <_dtoa_r+0x660>
 8007176:	4b19      	ldr	r3, [pc, #100]	; (80071dc <_dtoa_r+0x65c>)
 8007178:	ec51 0b18 	vmov	r0, r1, d8
 800717c:	f7f9 f88e 	bl	800029c <__adddf3>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4630      	mov	r0, r6
 8007186:	4639      	mov	r1, r7
 8007188:	f7f9 fcce 	bl	8000b28 <__aeabi_dcmpgt>
 800718c:	2800      	cmp	r0, #0
 800718e:	d175      	bne.n	800727c <_dtoa_r+0x6fc>
 8007190:	ec53 2b18 	vmov	r2, r3, d8
 8007194:	4911      	ldr	r1, [pc, #68]	; (80071dc <_dtoa_r+0x65c>)
 8007196:	2000      	movs	r0, #0
 8007198:	f7f9 f87e 	bl	8000298 <__aeabi_dsub>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	4630      	mov	r0, r6
 80071a2:	4639      	mov	r1, r7
 80071a4:	f7f9 fca2 	bl	8000aec <__aeabi_dcmplt>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	f43f af27 	beq.w	8006ffc <_dtoa_r+0x47c>
 80071ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071b0:	1e6b      	subs	r3, r5, #1
 80071b2:	930c      	str	r3, [sp, #48]	; 0x30
 80071b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80071b8:	2b30      	cmp	r3, #48	; 0x30
 80071ba:	d0f8      	beq.n	80071ae <_dtoa_r+0x62e>
 80071bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80071c0:	e04a      	b.n	8007258 <_dtoa_r+0x6d8>
 80071c2:	bf00      	nop
 80071c4:	0801bdc8 	.word	0x0801bdc8
 80071c8:	0801bda0 	.word	0x0801bda0
 80071cc:	3ff00000 	.word	0x3ff00000
 80071d0:	40240000 	.word	0x40240000
 80071d4:	401c0000 	.word	0x401c0000
 80071d8:	40140000 	.word	0x40140000
 80071dc:	3fe00000 	.word	0x3fe00000
 80071e0:	4baf      	ldr	r3, [pc, #700]	; (80074a0 <_dtoa_r+0x920>)
 80071e2:	f7f9 fa11 	bl	8000608 <__aeabi_dmul>
 80071e6:	4606      	mov	r6, r0
 80071e8:	460f      	mov	r7, r1
 80071ea:	e7ac      	b.n	8007146 <_dtoa_r+0x5c6>
 80071ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80071f0:	9d00      	ldr	r5, [sp, #0]
 80071f2:	4642      	mov	r2, r8
 80071f4:	464b      	mov	r3, r9
 80071f6:	4630      	mov	r0, r6
 80071f8:	4639      	mov	r1, r7
 80071fa:	f7f9 fb2f 	bl	800085c <__aeabi_ddiv>
 80071fe:	f7f9 fcb3 	bl	8000b68 <__aeabi_d2iz>
 8007202:	9002      	str	r0, [sp, #8]
 8007204:	f7f9 f996 	bl	8000534 <__aeabi_i2d>
 8007208:	4642      	mov	r2, r8
 800720a:	464b      	mov	r3, r9
 800720c:	f7f9 f9fc 	bl	8000608 <__aeabi_dmul>
 8007210:	4602      	mov	r2, r0
 8007212:	460b      	mov	r3, r1
 8007214:	4630      	mov	r0, r6
 8007216:	4639      	mov	r1, r7
 8007218:	f7f9 f83e 	bl	8000298 <__aeabi_dsub>
 800721c:	9e02      	ldr	r6, [sp, #8]
 800721e:	9f01      	ldr	r7, [sp, #4]
 8007220:	3630      	adds	r6, #48	; 0x30
 8007222:	f805 6b01 	strb.w	r6, [r5], #1
 8007226:	9e00      	ldr	r6, [sp, #0]
 8007228:	1bae      	subs	r6, r5, r6
 800722a:	42b7      	cmp	r7, r6
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	d137      	bne.n	80072a2 <_dtoa_r+0x722>
 8007232:	f7f9 f833 	bl	800029c <__adddf3>
 8007236:	4642      	mov	r2, r8
 8007238:	464b      	mov	r3, r9
 800723a:	4606      	mov	r6, r0
 800723c:	460f      	mov	r7, r1
 800723e:	f7f9 fc73 	bl	8000b28 <__aeabi_dcmpgt>
 8007242:	b9c8      	cbnz	r0, 8007278 <_dtoa_r+0x6f8>
 8007244:	4642      	mov	r2, r8
 8007246:	464b      	mov	r3, r9
 8007248:	4630      	mov	r0, r6
 800724a:	4639      	mov	r1, r7
 800724c:	f7f9 fc44 	bl	8000ad8 <__aeabi_dcmpeq>
 8007250:	b110      	cbz	r0, 8007258 <_dtoa_r+0x6d8>
 8007252:	9b02      	ldr	r3, [sp, #8]
 8007254:	07d9      	lsls	r1, r3, #31
 8007256:	d40f      	bmi.n	8007278 <_dtoa_r+0x6f8>
 8007258:	4620      	mov	r0, r4
 800725a:	4659      	mov	r1, fp
 800725c:	f000 fac8 	bl	80077f0 <_Bfree>
 8007260:	2300      	movs	r3, #0
 8007262:	702b      	strb	r3, [r5, #0]
 8007264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007266:	f10a 0001 	add.w	r0, sl, #1
 800726a:	6018      	str	r0, [r3, #0]
 800726c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800726e:	2b00      	cmp	r3, #0
 8007270:	f43f acd8 	beq.w	8006c24 <_dtoa_r+0xa4>
 8007274:	601d      	str	r5, [r3, #0]
 8007276:	e4d5      	b.n	8006c24 <_dtoa_r+0xa4>
 8007278:	f8cd a01c 	str.w	sl, [sp, #28]
 800727c:	462b      	mov	r3, r5
 800727e:	461d      	mov	r5, r3
 8007280:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007284:	2a39      	cmp	r2, #57	; 0x39
 8007286:	d108      	bne.n	800729a <_dtoa_r+0x71a>
 8007288:	9a00      	ldr	r2, [sp, #0]
 800728a:	429a      	cmp	r2, r3
 800728c:	d1f7      	bne.n	800727e <_dtoa_r+0x6fe>
 800728e:	9a07      	ldr	r2, [sp, #28]
 8007290:	9900      	ldr	r1, [sp, #0]
 8007292:	3201      	adds	r2, #1
 8007294:	9207      	str	r2, [sp, #28]
 8007296:	2230      	movs	r2, #48	; 0x30
 8007298:	700a      	strb	r2, [r1, #0]
 800729a:	781a      	ldrb	r2, [r3, #0]
 800729c:	3201      	adds	r2, #1
 800729e:	701a      	strb	r2, [r3, #0]
 80072a0:	e78c      	b.n	80071bc <_dtoa_r+0x63c>
 80072a2:	4b7f      	ldr	r3, [pc, #508]	; (80074a0 <_dtoa_r+0x920>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	f7f9 f9af 	bl	8000608 <__aeabi_dmul>
 80072aa:	2200      	movs	r2, #0
 80072ac:	2300      	movs	r3, #0
 80072ae:	4606      	mov	r6, r0
 80072b0:	460f      	mov	r7, r1
 80072b2:	f7f9 fc11 	bl	8000ad8 <__aeabi_dcmpeq>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d09b      	beq.n	80071f2 <_dtoa_r+0x672>
 80072ba:	e7cd      	b.n	8007258 <_dtoa_r+0x6d8>
 80072bc:	9a08      	ldr	r2, [sp, #32]
 80072be:	2a00      	cmp	r2, #0
 80072c0:	f000 80c4 	beq.w	800744c <_dtoa_r+0x8cc>
 80072c4:	9a05      	ldr	r2, [sp, #20]
 80072c6:	2a01      	cmp	r2, #1
 80072c8:	f300 80a8 	bgt.w	800741c <_dtoa_r+0x89c>
 80072cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072ce:	2a00      	cmp	r2, #0
 80072d0:	f000 80a0 	beq.w	8007414 <_dtoa_r+0x894>
 80072d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80072d8:	9e06      	ldr	r6, [sp, #24]
 80072da:	4645      	mov	r5, r8
 80072dc:	9a04      	ldr	r2, [sp, #16]
 80072de:	2101      	movs	r1, #1
 80072e0:	441a      	add	r2, r3
 80072e2:	4620      	mov	r0, r4
 80072e4:	4498      	add	r8, r3
 80072e6:	9204      	str	r2, [sp, #16]
 80072e8:	f000 fb3e 	bl	8007968 <__i2b>
 80072ec:	4607      	mov	r7, r0
 80072ee:	2d00      	cmp	r5, #0
 80072f0:	dd0b      	ble.n	800730a <_dtoa_r+0x78a>
 80072f2:	9b04      	ldr	r3, [sp, #16]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	dd08      	ble.n	800730a <_dtoa_r+0x78a>
 80072f8:	42ab      	cmp	r3, r5
 80072fa:	9a04      	ldr	r2, [sp, #16]
 80072fc:	bfa8      	it	ge
 80072fe:	462b      	movge	r3, r5
 8007300:	eba8 0803 	sub.w	r8, r8, r3
 8007304:	1aed      	subs	r5, r5, r3
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	9304      	str	r3, [sp, #16]
 800730a:	9b06      	ldr	r3, [sp, #24]
 800730c:	b1fb      	cbz	r3, 800734e <_dtoa_r+0x7ce>
 800730e:	9b08      	ldr	r3, [sp, #32]
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 809f 	beq.w	8007454 <_dtoa_r+0x8d4>
 8007316:	2e00      	cmp	r6, #0
 8007318:	dd11      	ble.n	800733e <_dtoa_r+0x7be>
 800731a:	4639      	mov	r1, r7
 800731c:	4632      	mov	r2, r6
 800731e:	4620      	mov	r0, r4
 8007320:	f000 fbde 	bl	8007ae0 <__pow5mult>
 8007324:	465a      	mov	r2, fp
 8007326:	4601      	mov	r1, r0
 8007328:	4607      	mov	r7, r0
 800732a:	4620      	mov	r0, r4
 800732c:	f000 fb32 	bl	8007994 <__multiply>
 8007330:	4659      	mov	r1, fp
 8007332:	9007      	str	r0, [sp, #28]
 8007334:	4620      	mov	r0, r4
 8007336:	f000 fa5b 	bl	80077f0 <_Bfree>
 800733a:	9b07      	ldr	r3, [sp, #28]
 800733c:	469b      	mov	fp, r3
 800733e:	9b06      	ldr	r3, [sp, #24]
 8007340:	1b9a      	subs	r2, r3, r6
 8007342:	d004      	beq.n	800734e <_dtoa_r+0x7ce>
 8007344:	4659      	mov	r1, fp
 8007346:	4620      	mov	r0, r4
 8007348:	f000 fbca 	bl	8007ae0 <__pow5mult>
 800734c:	4683      	mov	fp, r0
 800734e:	2101      	movs	r1, #1
 8007350:	4620      	mov	r0, r4
 8007352:	f000 fb09 	bl	8007968 <__i2b>
 8007356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007358:	2b00      	cmp	r3, #0
 800735a:	4606      	mov	r6, r0
 800735c:	dd7c      	ble.n	8007458 <_dtoa_r+0x8d8>
 800735e:	461a      	mov	r2, r3
 8007360:	4601      	mov	r1, r0
 8007362:	4620      	mov	r0, r4
 8007364:	f000 fbbc 	bl	8007ae0 <__pow5mult>
 8007368:	9b05      	ldr	r3, [sp, #20]
 800736a:	2b01      	cmp	r3, #1
 800736c:	4606      	mov	r6, r0
 800736e:	dd76      	ble.n	800745e <_dtoa_r+0x8de>
 8007370:	2300      	movs	r3, #0
 8007372:	9306      	str	r3, [sp, #24]
 8007374:	6933      	ldr	r3, [r6, #16]
 8007376:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800737a:	6918      	ldr	r0, [r3, #16]
 800737c:	f000 faa4 	bl	80078c8 <__hi0bits>
 8007380:	f1c0 0020 	rsb	r0, r0, #32
 8007384:	9b04      	ldr	r3, [sp, #16]
 8007386:	4418      	add	r0, r3
 8007388:	f010 001f 	ands.w	r0, r0, #31
 800738c:	f000 8086 	beq.w	800749c <_dtoa_r+0x91c>
 8007390:	f1c0 0320 	rsb	r3, r0, #32
 8007394:	2b04      	cmp	r3, #4
 8007396:	dd7f      	ble.n	8007498 <_dtoa_r+0x918>
 8007398:	f1c0 001c 	rsb	r0, r0, #28
 800739c:	9b04      	ldr	r3, [sp, #16]
 800739e:	4403      	add	r3, r0
 80073a0:	4480      	add	r8, r0
 80073a2:	4405      	add	r5, r0
 80073a4:	9304      	str	r3, [sp, #16]
 80073a6:	f1b8 0f00 	cmp.w	r8, #0
 80073aa:	dd05      	ble.n	80073b8 <_dtoa_r+0x838>
 80073ac:	4659      	mov	r1, fp
 80073ae:	4642      	mov	r2, r8
 80073b0:	4620      	mov	r0, r4
 80073b2:	f000 fbef 	bl	8007b94 <__lshift>
 80073b6:	4683      	mov	fp, r0
 80073b8:	9b04      	ldr	r3, [sp, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	dd05      	ble.n	80073ca <_dtoa_r+0x84a>
 80073be:	4631      	mov	r1, r6
 80073c0:	461a      	mov	r2, r3
 80073c2:	4620      	mov	r0, r4
 80073c4:	f000 fbe6 	bl	8007b94 <__lshift>
 80073c8:	4606      	mov	r6, r0
 80073ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d069      	beq.n	80074a4 <_dtoa_r+0x924>
 80073d0:	4631      	mov	r1, r6
 80073d2:	4658      	mov	r0, fp
 80073d4:	f000 fc4a 	bl	8007c6c <__mcmp>
 80073d8:	2800      	cmp	r0, #0
 80073da:	da63      	bge.n	80074a4 <_dtoa_r+0x924>
 80073dc:	2300      	movs	r3, #0
 80073de:	4659      	mov	r1, fp
 80073e0:	220a      	movs	r2, #10
 80073e2:	4620      	mov	r0, r4
 80073e4:	f000 fa26 	bl	8007834 <__multadd>
 80073e8:	9b08      	ldr	r3, [sp, #32]
 80073ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80073ee:	4683      	mov	fp, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 818f 	beq.w	8007714 <_dtoa_r+0xb94>
 80073f6:	4639      	mov	r1, r7
 80073f8:	2300      	movs	r3, #0
 80073fa:	220a      	movs	r2, #10
 80073fc:	4620      	mov	r0, r4
 80073fe:	f000 fa19 	bl	8007834 <__multadd>
 8007402:	f1b9 0f00 	cmp.w	r9, #0
 8007406:	4607      	mov	r7, r0
 8007408:	f300 808e 	bgt.w	8007528 <_dtoa_r+0x9a8>
 800740c:	9b05      	ldr	r3, [sp, #20]
 800740e:	2b02      	cmp	r3, #2
 8007410:	dc50      	bgt.n	80074b4 <_dtoa_r+0x934>
 8007412:	e089      	b.n	8007528 <_dtoa_r+0x9a8>
 8007414:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007416:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800741a:	e75d      	b.n	80072d8 <_dtoa_r+0x758>
 800741c:	9b01      	ldr	r3, [sp, #4]
 800741e:	1e5e      	subs	r6, r3, #1
 8007420:	9b06      	ldr	r3, [sp, #24]
 8007422:	42b3      	cmp	r3, r6
 8007424:	bfbf      	itttt	lt
 8007426:	9b06      	ldrlt	r3, [sp, #24]
 8007428:	9606      	strlt	r6, [sp, #24]
 800742a:	1af2      	sublt	r2, r6, r3
 800742c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800742e:	bfb6      	itet	lt
 8007430:	189b      	addlt	r3, r3, r2
 8007432:	1b9e      	subge	r6, r3, r6
 8007434:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007436:	9b01      	ldr	r3, [sp, #4]
 8007438:	bfb8      	it	lt
 800743a:	2600      	movlt	r6, #0
 800743c:	2b00      	cmp	r3, #0
 800743e:	bfb5      	itete	lt
 8007440:	eba8 0503 	sublt.w	r5, r8, r3
 8007444:	9b01      	ldrge	r3, [sp, #4]
 8007446:	2300      	movlt	r3, #0
 8007448:	4645      	movge	r5, r8
 800744a:	e747      	b.n	80072dc <_dtoa_r+0x75c>
 800744c:	9e06      	ldr	r6, [sp, #24]
 800744e:	9f08      	ldr	r7, [sp, #32]
 8007450:	4645      	mov	r5, r8
 8007452:	e74c      	b.n	80072ee <_dtoa_r+0x76e>
 8007454:	9a06      	ldr	r2, [sp, #24]
 8007456:	e775      	b.n	8007344 <_dtoa_r+0x7c4>
 8007458:	9b05      	ldr	r3, [sp, #20]
 800745a:	2b01      	cmp	r3, #1
 800745c:	dc18      	bgt.n	8007490 <_dtoa_r+0x910>
 800745e:	9b02      	ldr	r3, [sp, #8]
 8007460:	b9b3      	cbnz	r3, 8007490 <_dtoa_r+0x910>
 8007462:	9b03      	ldr	r3, [sp, #12]
 8007464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007468:	b9a3      	cbnz	r3, 8007494 <_dtoa_r+0x914>
 800746a:	9b03      	ldr	r3, [sp, #12]
 800746c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007470:	0d1b      	lsrs	r3, r3, #20
 8007472:	051b      	lsls	r3, r3, #20
 8007474:	b12b      	cbz	r3, 8007482 <_dtoa_r+0x902>
 8007476:	9b04      	ldr	r3, [sp, #16]
 8007478:	3301      	adds	r3, #1
 800747a:	9304      	str	r3, [sp, #16]
 800747c:	f108 0801 	add.w	r8, r8, #1
 8007480:	2301      	movs	r3, #1
 8007482:	9306      	str	r3, [sp, #24]
 8007484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007486:	2b00      	cmp	r3, #0
 8007488:	f47f af74 	bne.w	8007374 <_dtoa_r+0x7f4>
 800748c:	2001      	movs	r0, #1
 800748e:	e779      	b.n	8007384 <_dtoa_r+0x804>
 8007490:	2300      	movs	r3, #0
 8007492:	e7f6      	b.n	8007482 <_dtoa_r+0x902>
 8007494:	9b02      	ldr	r3, [sp, #8]
 8007496:	e7f4      	b.n	8007482 <_dtoa_r+0x902>
 8007498:	d085      	beq.n	80073a6 <_dtoa_r+0x826>
 800749a:	4618      	mov	r0, r3
 800749c:	301c      	adds	r0, #28
 800749e:	e77d      	b.n	800739c <_dtoa_r+0x81c>
 80074a0:	40240000 	.word	0x40240000
 80074a4:	9b01      	ldr	r3, [sp, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	dc38      	bgt.n	800751c <_dtoa_r+0x99c>
 80074aa:	9b05      	ldr	r3, [sp, #20]
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	dd35      	ble.n	800751c <_dtoa_r+0x99c>
 80074b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80074b4:	f1b9 0f00 	cmp.w	r9, #0
 80074b8:	d10d      	bne.n	80074d6 <_dtoa_r+0x956>
 80074ba:	4631      	mov	r1, r6
 80074bc:	464b      	mov	r3, r9
 80074be:	2205      	movs	r2, #5
 80074c0:	4620      	mov	r0, r4
 80074c2:	f000 f9b7 	bl	8007834 <__multadd>
 80074c6:	4601      	mov	r1, r0
 80074c8:	4606      	mov	r6, r0
 80074ca:	4658      	mov	r0, fp
 80074cc:	f000 fbce 	bl	8007c6c <__mcmp>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	f73f adbd 	bgt.w	8007050 <_dtoa_r+0x4d0>
 80074d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d8:	9d00      	ldr	r5, [sp, #0]
 80074da:	ea6f 0a03 	mvn.w	sl, r3
 80074de:	f04f 0800 	mov.w	r8, #0
 80074e2:	4631      	mov	r1, r6
 80074e4:	4620      	mov	r0, r4
 80074e6:	f000 f983 	bl	80077f0 <_Bfree>
 80074ea:	2f00      	cmp	r7, #0
 80074ec:	f43f aeb4 	beq.w	8007258 <_dtoa_r+0x6d8>
 80074f0:	f1b8 0f00 	cmp.w	r8, #0
 80074f4:	d005      	beq.n	8007502 <_dtoa_r+0x982>
 80074f6:	45b8      	cmp	r8, r7
 80074f8:	d003      	beq.n	8007502 <_dtoa_r+0x982>
 80074fa:	4641      	mov	r1, r8
 80074fc:	4620      	mov	r0, r4
 80074fe:	f000 f977 	bl	80077f0 <_Bfree>
 8007502:	4639      	mov	r1, r7
 8007504:	4620      	mov	r0, r4
 8007506:	f000 f973 	bl	80077f0 <_Bfree>
 800750a:	e6a5      	b.n	8007258 <_dtoa_r+0x6d8>
 800750c:	2600      	movs	r6, #0
 800750e:	4637      	mov	r7, r6
 8007510:	e7e1      	b.n	80074d6 <_dtoa_r+0x956>
 8007512:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007514:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007518:	4637      	mov	r7, r6
 800751a:	e599      	b.n	8007050 <_dtoa_r+0x4d0>
 800751c:	9b08      	ldr	r3, [sp, #32]
 800751e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 80fd 	beq.w	8007722 <_dtoa_r+0xba2>
 8007528:	2d00      	cmp	r5, #0
 800752a:	dd05      	ble.n	8007538 <_dtoa_r+0x9b8>
 800752c:	4639      	mov	r1, r7
 800752e:	462a      	mov	r2, r5
 8007530:	4620      	mov	r0, r4
 8007532:	f000 fb2f 	bl	8007b94 <__lshift>
 8007536:	4607      	mov	r7, r0
 8007538:	9b06      	ldr	r3, [sp, #24]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d05c      	beq.n	80075f8 <_dtoa_r+0xa78>
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	4620      	mov	r0, r4
 8007542:	f000 f915 	bl	8007770 <_Balloc>
 8007546:	4605      	mov	r5, r0
 8007548:	b928      	cbnz	r0, 8007556 <_dtoa_r+0x9d6>
 800754a:	4b80      	ldr	r3, [pc, #512]	; (800774c <_dtoa_r+0xbcc>)
 800754c:	4602      	mov	r2, r0
 800754e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007552:	f7ff bb2e 	b.w	8006bb2 <_dtoa_r+0x32>
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	3202      	adds	r2, #2
 800755a:	0092      	lsls	r2, r2, #2
 800755c:	f107 010c 	add.w	r1, r7, #12
 8007560:	300c      	adds	r0, #12
 8007562:	f7fe fe01 	bl	8006168 <memcpy>
 8007566:	2201      	movs	r2, #1
 8007568:	4629      	mov	r1, r5
 800756a:	4620      	mov	r0, r4
 800756c:	f000 fb12 	bl	8007b94 <__lshift>
 8007570:	9b00      	ldr	r3, [sp, #0]
 8007572:	3301      	adds	r3, #1
 8007574:	9301      	str	r3, [sp, #4]
 8007576:	9b00      	ldr	r3, [sp, #0]
 8007578:	444b      	add	r3, r9
 800757a:	9307      	str	r3, [sp, #28]
 800757c:	9b02      	ldr	r3, [sp, #8]
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	46b8      	mov	r8, r7
 8007584:	9306      	str	r3, [sp, #24]
 8007586:	4607      	mov	r7, r0
 8007588:	9b01      	ldr	r3, [sp, #4]
 800758a:	4631      	mov	r1, r6
 800758c:	3b01      	subs	r3, #1
 800758e:	4658      	mov	r0, fp
 8007590:	9302      	str	r3, [sp, #8]
 8007592:	f7ff fa69 	bl	8006a68 <quorem>
 8007596:	4603      	mov	r3, r0
 8007598:	3330      	adds	r3, #48	; 0x30
 800759a:	9004      	str	r0, [sp, #16]
 800759c:	4641      	mov	r1, r8
 800759e:	4658      	mov	r0, fp
 80075a0:	9308      	str	r3, [sp, #32]
 80075a2:	f000 fb63 	bl	8007c6c <__mcmp>
 80075a6:	463a      	mov	r2, r7
 80075a8:	4681      	mov	r9, r0
 80075aa:	4631      	mov	r1, r6
 80075ac:	4620      	mov	r0, r4
 80075ae:	f000 fb79 	bl	8007ca4 <__mdiff>
 80075b2:	68c2      	ldr	r2, [r0, #12]
 80075b4:	9b08      	ldr	r3, [sp, #32]
 80075b6:	4605      	mov	r5, r0
 80075b8:	bb02      	cbnz	r2, 80075fc <_dtoa_r+0xa7c>
 80075ba:	4601      	mov	r1, r0
 80075bc:	4658      	mov	r0, fp
 80075be:	f000 fb55 	bl	8007c6c <__mcmp>
 80075c2:	9b08      	ldr	r3, [sp, #32]
 80075c4:	4602      	mov	r2, r0
 80075c6:	4629      	mov	r1, r5
 80075c8:	4620      	mov	r0, r4
 80075ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80075ce:	f000 f90f 	bl	80077f0 <_Bfree>
 80075d2:	9b05      	ldr	r3, [sp, #20]
 80075d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075d6:	9d01      	ldr	r5, [sp, #4]
 80075d8:	ea43 0102 	orr.w	r1, r3, r2
 80075dc:	9b06      	ldr	r3, [sp, #24]
 80075de:	430b      	orrs	r3, r1
 80075e0:	9b08      	ldr	r3, [sp, #32]
 80075e2:	d10d      	bne.n	8007600 <_dtoa_r+0xa80>
 80075e4:	2b39      	cmp	r3, #57	; 0x39
 80075e6:	d029      	beq.n	800763c <_dtoa_r+0xabc>
 80075e8:	f1b9 0f00 	cmp.w	r9, #0
 80075ec:	dd01      	ble.n	80075f2 <_dtoa_r+0xa72>
 80075ee:	9b04      	ldr	r3, [sp, #16]
 80075f0:	3331      	adds	r3, #49	; 0x31
 80075f2:	9a02      	ldr	r2, [sp, #8]
 80075f4:	7013      	strb	r3, [r2, #0]
 80075f6:	e774      	b.n	80074e2 <_dtoa_r+0x962>
 80075f8:	4638      	mov	r0, r7
 80075fa:	e7b9      	b.n	8007570 <_dtoa_r+0x9f0>
 80075fc:	2201      	movs	r2, #1
 80075fe:	e7e2      	b.n	80075c6 <_dtoa_r+0xa46>
 8007600:	f1b9 0f00 	cmp.w	r9, #0
 8007604:	db06      	blt.n	8007614 <_dtoa_r+0xa94>
 8007606:	9905      	ldr	r1, [sp, #20]
 8007608:	ea41 0909 	orr.w	r9, r1, r9
 800760c:	9906      	ldr	r1, [sp, #24]
 800760e:	ea59 0101 	orrs.w	r1, r9, r1
 8007612:	d120      	bne.n	8007656 <_dtoa_r+0xad6>
 8007614:	2a00      	cmp	r2, #0
 8007616:	ddec      	ble.n	80075f2 <_dtoa_r+0xa72>
 8007618:	4659      	mov	r1, fp
 800761a:	2201      	movs	r2, #1
 800761c:	4620      	mov	r0, r4
 800761e:	9301      	str	r3, [sp, #4]
 8007620:	f000 fab8 	bl	8007b94 <__lshift>
 8007624:	4631      	mov	r1, r6
 8007626:	4683      	mov	fp, r0
 8007628:	f000 fb20 	bl	8007c6c <__mcmp>
 800762c:	2800      	cmp	r0, #0
 800762e:	9b01      	ldr	r3, [sp, #4]
 8007630:	dc02      	bgt.n	8007638 <_dtoa_r+0xab8>
 8007632:	d1de      	bne.n	80075f2 <_dtoa_r+0xa72>
 8007634:	07da      	lsls	r2, r3, #31
 8007636:	d5dc      	bpl.n	80075f2 <_dtoa_r+0xa72>
 8007638:	2b39      	cmp	r3, #57	; 0x39
 800763a:	d1d8      	bne.n	80075ee <_dtoa_r+0xa6e>
 800763c:	9a02      	ldr	r2, [sp, #8]
 800763e:	2339      	movs	r3, #57	; 0x39
 8007640:	7013      	strb	r3, [r2, #0]
 8007642:	462b      	mov	r3, r5
 8007644:	461d      	mov	r5, r3
 8007646:	3b01      	subs	r3, #1
 8007648:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800764c:	2a39      	cmp	r2, #57	; 0x39
 800764e:	d050      	beq.n	80076f2 <_dtoa_r+0xb72>
 8007650:	3201      	adds	r2, #1
 8007652:	701a      	strb	r2, [r3, #0]
 8007654:	e745      	b.n	80074e2 <_dtoa_r+0x962>
 8007656:	2a00      	cmp	r2, #0
 8007658:	dd03      	ble.n	8007662 <_dtoa_r+0xae2>
 800765a:	2b39      	cmp	r3, #57	; 0x39
 800765c:	d0ee      	beq.n	800763c <_dtoa_r+0xabc>
 800765e:	3301      	adds	r3, #1
 8007660:	e7c7      	b.n	80075f2 <_dtoa_r+0xa72>
 8007662:	9a01      	ldr	r2, [sp, #4]
 8007664:	9907      	ldr	r1, [sp, #28]
 8007666:	f802 3c01 	strb.w	r3, [r2, #-1]
 800766a:	428a      	cmp	r2, r1
 800766c:	d02a      	beq.n	80076c4 <_dtoa_r+0xb44>
 800766e:	4659      	mov	r1, fp
 8007670:	2300      	movs	r3, #0
 8007672:	220a      	movs	r2, #10
 8007674:	4620      	mov	r0, r4
 8007676:	f000 f8dd 	bl	8007834 <__multadd>
 800767a:	45b8      	cmp	r8, r7
 800767c:	4683      	mov	fp, r0
 800767e:	f04f 0300 	mov.w	r3, #0
 8007682:	f04f 020a 	mov.w	r2, #10
 8007686:	4641      	mov	r1, r8
 8007688:	4620      	mov	r0, r4
 800768a:	d107      	bne.n	800769c <_dtoa_r+0xb1c>
 800768c:	f000 f8d2 	bl	8007834 <__multadd>
 8007690:	4680      	mov	r8, r0
 8007692:	4607      	mov	r7, r0
 8007694:	9b01      	ldr	r3, [sp, #4]
 8007696:	3301      	adds	r3, #1
 8007698:	9301      	str	r3, [sp, #4]
 800769a:	e775      	b.n	8007588 <_dtoa_r+0xa08>
 800769c:	f000 f8ca 	bl	8007834 <__multadd>
 80076a0:	4639      	mov	r1, r7
 80076a2:	4680      	mov	r8, r0
 80076a4:	2300      	movs	r3, #0
 80076a6:	220a      	movs	r2, #10
 80076a8:	4620      	mov	r0, r4
 80076aa:	f000 f8c3 	bl	8007834 <__multadd>
 80076ae:	4607      	mov	r7, r0
 80076b0:	e7f0      	b.n	8007694 <_dtoa_r+0xb14>
 80076b2:	f1b9 0f00 	cmp.w	r9, #0
 80076b6:	9a00      	ldr	r2, [sp, #0]
 80076b8:	bfcc      	ite	gt
 80076ba:	464d      	movgt	r5, r9
 80076bc:	2501      	movle	r5, #1
 80076be:	4415      	add	r5, r2
 80076c0:	f04f 0800 	mov.w	r8, #0
 80076c4:	4659      	mov	r1, fp
 80076c6:	2201      	movs	r2, #1
 80076c8:	4620      	mov	r0, r4
 80076ca:	9301      	str	r3, [sp, #4]
 80076cc:	f000 fa62 	bl	8007b94 <__lshift>
 80076d0:	4631      	mov	r1, r6
 80076d2:	4683      	mov	fp, r0
 80076d4:	f000 faca 	bl	8007c6c <__mcmp>
 80076d8:	2800      	cmp	r0, #0
 80076da:	dcb2      	bgt.n	8007642 <_dtoa_r+0xac2>
 80076dc:	d102      	bne.n	80076e4 <_dtoa_r+0xb64>
 80076de:	9b01      	ldr	r3, [sp, #4]
 80076e0:	07db      	lsls	r3, r3, #31
 80076e2:	d4ae      	bmi.n	8007642 <_dtoa_r+0xac2>
 80076e4:	462b      	mov	r3, r5
 80076e6:	461d      	mov	r5, r3
 80076e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076ec:	2a30      	cmp	r2, #48	; 0x30
 80076ee:	d0fa      	beq.n	80076e6 <_dtoa_r+0xb66>
 80076f0:	e6f7      	b.n	80074e2 <_dtoa_r+0x962>
 80076f2:	9a00      	ldr	r2, [sp, #0]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d1a5      	bne.n	8007644 <_dtoa_r+0xac4>
 80076f8:	f10a 0a01 	add.w	sl, sl, #1
 80076fc:	2331      	movs	r3, #49	; 0x31
 80076fe:	e779      	b.n	80075f4 <_dtoa_r+0xa74>
 8007700:	4b13      	ldr	r3, [pc, #76]	; (8007750 <_dtoa_r+0xbd0>)
 8007702:	f7ff baaf 	b.w	8006c64 <_dtoa_r+0xe4>
 8007706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007708:	2b00      	cmp	r3, #0
 800770a:	f47f aa86 	bne.w	8006c1a <_dtoa_r+0x9a>
 800770e:	4b11      	ldr	r3, [pc, #68]	; (8007754 <_dtoa_r+0xbd4>)
 8007710:	f7ff baa8 	b.w	8006c64 <_dtoa_r+0xe4>
 8007714:	f1b9 0f00 	cmp.w	r9, #0
 8007718:	dc03      	bgt.n	8007722 <_dtoa_r+0xba2>
 800771a:	9b05      	ldr	r3, [sp, #20]
 800771c:	2b02      	cmp	r3, #2
 800771e:	f73f aec9 	bgt.w	80074b4 <_dtoa_r+0x934>
 8007722:	9d00      	ldr	r5, [sp, #0]
 8007724:	4631      	mov	r1, r6
 8007726:	4658      	mov	r0, fp
 8007728:	f7ff f99e 	bl	8006a68 <quorem>
 800772c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007730:	f805 3b01 	strb.w	r3, [r5], #1
 8007734:	9a00      	ldr	r2, [sp, #0]
 8007736:	1aaa      	subs	r2, r5, r2
 8007738:	4591      	cmp	r9, r2
 800773a:	ddba      	ble.n	80076b2 <_dtoa_r+0xb32>
 800773c:	4659      	mov	r1, fp
 800773e:	2300      	movs	r3, #0
 8007740:	220a      	movs	r2, #10
 8007742:	4620      	mov	r0, r4
 8007744:	f000 f876 	bl	8007834 <__multadd>
 8007748:	4683      	mov	fp, r0
 800774a:	e7eb      	b.n	8007724 <_dtoa_r+0xba4>
 800774c:	0801bd2b 	.word	0x0801bd2b
 8007750:	0801bc84 	.word	0x0801bc84
 8007754:	0801bca8 	.word	0x0801bca8

08007758 <_localeconv_r>:
 8007758:	4800      	ldr	r0, [pc, #0]	; (800775c <_localeconv_r+0x4>)
 800775a:	4770      	bx	lr
 800775c:	20000160 	.word	0x20000160

08007760 <malloc>:
 8007760:	4b02      	ldr	r3, [pc, #8]	; (800776c <malloc+0xc>)
 8007762:	4601      	mov	r1, r0
 8007764:	6818      	ldr	r0, [r3, #0]
 8007766:	f000 bbe1 	b.w	8007f2c <_malloc_r>
 800776a:	bf00      	nop
 800776c:	2000000c 	.word	0x2000000c

08007770 <_Balloc>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007774:	4604      	mov	r4, r0
 8007776:	460d      	mov	r5, r1
 8007778:	b976      	cbnz	r6, 8007798 <_Balloc+0x28>
 800777a:	2010      	movs	r0, #16
 800777c:	f7ff fff0 	bl	8007760 <malloc>
 8007780:	4602      	mov	r2, r0
 8007782:	6260      	str	r0, [r4, #36]	; 0x24
 8007784:	b920      	cbnz	r0, 8007790 <_Balloc+0x20>
 8007786:	4b18      	ldr	r3, [pc, #96]	; (80077e8 <_Balloc+0x78>)
 8007788:	4818      	ldr	r0, [pc, #96]	; (80077ec <_Balloc+0x7c>)
 800778a:	2166      	movs	r1, #102	; 0x66
 800778c:	f000 fc38 	bl	8008000 <__assert_func>
 8007790:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007794:	6006      	str	r6, [r0, #0]
 8007796:	60c6      	str	r6, [r0, #12]
 8007798:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800779a:	68f3      	ldr	r3, [r6, #12]
 800779c:	b183      	cbz	r3, 80077c0 <_Balloc+0x50>
 800779e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077a6:	b9b8      	cbnz	r0, 80077d8 <_Balloc+0x68>
 80077a8:	2101      	movs	r1, #1
 80077aa:	fa01 f605 	lsl.w	r6, r1, r5
 80077ae:	1d72      	adds	r2, r6, #5
 80077b0:	0092      	lsls	r2, r2, #2
 80077b2:	4620      	mov	r0, r4
 80077b4:	f000 fb5a 	bl	8007e6c <_calloc_r>
 80077b8:	b160      	cbz	r0, 80077d4 <_Balloc+0x64>
 80077ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077be:	e00e      	b.n	80077de <_Balloc+0x6e>
 80077c0:	2221      	movs	r2, #33	; 0x21
 80077c2:	2104      	movs	r1, #4
 80077c4:	4620      	mov	r0, r4
 80077c6:	f000 fb51 	bl	8007e6c <_calloc_r>
 80077ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077cc:	60f0      	str	r0, [r6, #12]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1e4      	bne.n	800779e <_Balloc+0x2e>
 80077d4:	2000      	movs	r0, #0
 80077d6:	bd70      	pop	{r4, r5, r6, pc}
 80077d8:	6802      	ldr	r2, [r0, #0]
 80077da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077de:	2300      	movs	r3, #0
 80077e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077e4:	e7f7      	b.n	80077d6 <_Balloc+0x66>
 80077e6:	bf00      	nop
 80077e8:	0801bcb5 	.word	0x0801bcb5
 80077ec:	0801bd3c 	.word	0x0801bd3c

080077f0 <_Bfree>:
 80077f0:	b570      	push	{r4, r5, r6, lr}
 80077f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077f4:	4605      	mov	r5, r0
 80077f6:	460c      	mov	r4, r1
 80077f8:	b976      	cbnz	r6, 8007818 <_Bfree+0x28>
 80077fa:	2010      	movs	r0, #16
 80077fc:	f7ff ffb0 	bl	8007760 <malloc>
 8007800:	4602      	mov	r2, r0
 8007802:	6268      	str	r0, [r5, #36]	; 0x24
 8007804:	b920      	cbnz	r0, 8007810 <_Bfree+0x20>
 8007806:	4b09      	ldr	r3, [pc, #36]	; (800782c <_Bfree+0x3c>)
 8007808:	4809      	ldr	r0, [pc, #36]	; (8007830 <_Bfree+0x40>)
 800780a:	218a      	movs	r1, #138	; 0x8a
 800780c:	f000 fbf8 	bl	8008000 <__assert_func>
 8007810:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007814:	6006      	str	r6, [r0, #0]
 8007816:	60c6      	str	r6, [r0, #12]
 8007818:	b13c      	cbz	r4, 800782a <_Bfree+0x3a>
 800781a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800781c:	6862      	ldr	r2, [r4, #4]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007824:	6021      	str	r1, [r4, #0]
 8007826:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800782a:	bd70      	pop	{r4, r5, r6, pc}
 800782c:	0801bcb5 	.word	0x0801bcb5
 8007830:	0801bd3c 	.word	0x0801bd3c

08007834 <__multadd>:
 8007834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007838:	690e      	ldr	r6, [r1, #16]
 800783a:	4607      	mov	r7, r0
 800783c:	4698      	mov	r8, r3
 800783e:	460c      	mov	r4, r1
 8007840:	f101 0014 	add.w	r0, r1, #20
 8007844:	2300      	movs	r3, #0
 8007846:	6805      	ldr	r5, [r0, #0]
 8007848:	b2a9      	uxth	r1, r5
 800784a:	fb02 8101 	mla	r1, r2, r1, r8
 800784e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007852:	0c2d      	lsrs	r5, r5, #16
 8007854:	fb02 c505 	mla	r5, r2, r5, ip
 8007858:	b289      	uxth	r1, r1
 800785a:	3301      	adds	r3, #1
 800785c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007860:	429e      	cmp	r6, r3
 8007862:	f840 1b04 	str.w	r1, [r0], #4
 8007866:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800786a:	dcec      	bgt.n	8007846 <__multadd+0x12>
 800786c:	f1b8 0f00 	cmp.w	r8, #0
 8007870:	d022      	beq.n	80078b8 <__multadd+0x84>
 8007872:	68a3      	ldr	r3, [r4, #8]
 8007874:	42b3      	cmp	r3, r6
 8007876:	dc19      	bgt.n	80078ac <__multadd+0x78>
 8007878:	6861      	ldr	r1, [r4, #4]
 800787a:	4638      	mov	r0, r7
 800787c:	3101      	adds	r1, #1
 800787e:	f7ff ff77 	bl	8007770 <_Balloc>
 8007882:	4605      	mov	r5, r0
 8007884:	b928      	cbnz	r0, 8007892 <__multadd+0x5e>
 8007886:	4602      	mov	r2, r0
 8007888:	4b0d      	ldr	r3, [pc, #52]	; (80078c0 <__multadd+0x8c>)
 800788a:	480e      	ldr	r0, [pc, #56]	; (80078c4 <__multadd+0x90>)
 800788c:	21b5      	movs	r1, #181	; 0xb5
 800788e:	f000 fbb7 	bl	8008000 <__assert_func>
 8007892:	6922      	ldr	r2, [r4, #16]
 8007894:	3202      	adds	r2, #2
 8007896:	f104 010c 	add.w	r1, r4, #12
 800789a:	0092      	lsls	r2, r2, #2
 800789c:	300c      	adds	r0, #12
 800789e:	f7fe fc63 	bl	8006168 <memcpy>
 80078a2:	4621      	mov	r1, r4
 80078a4:	4638      	mov	r0, r7
 80078a6:	f7ff ffa3 	bl	80077f0 <_Bfree>
 80078aa:	462c      	mov	r4, r5
 80078ac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80078b0:	3601      	adds	r6, #1
 80078b2:	f8c3 8014 	str.w	r8, [r3, #20]
 80078b6:	6126      	str	r6, [r4, #16]
 80078b8:	4620      	mov	r0, r4
 80078ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078be:	bf00      	nop
 80078c0:	0801bd2b 	.word	0x0801bd2b
 80078c4:	0801bd3c 	.word	0x0801bd3c

080078c8 <__hi0bits>:
 80078c8:	0c03      	lsrs	r3, r0, #16
 80078ca:	041b      	lsls	r3, r3, #16
 80078cc:	b9d3      	cbnz	r3, 8007904 <__hi0bits+0x3c>
 80078ce:	0400      	lsls	r0, r0, #16
 80078d0:	2310      	movs	r3, #16
 80078d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80078d6:	bf04      	itt	eq
 80078d8:	0200      	lsleq	r0, r0, #8
 80078da:	3308      	addeq	r3, #8
 80078dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80078e0:	bf04      	itt	eq
 80078e2:	0100      	lsleq	r0, r0, #4
 80078e4:	3304      	addeq	r3, #4
 80078e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80078ea:	bf04      	itt	eq
 80078ec:	0080      	lsleq	r0, r0, #2
 80078ee:	3302      	addeq	r3, #2
 80078f0:	2800      	cmp	r0, #0
 80078f2:	db05      	blt.n	8007900 <__hi0bits+0x38>
 80078f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80078f8:	f103 0301 	add.w	r3, r3, #1
 80078fc:	bf08      	it	eq
 80078fe:	2320      	moveq	r3, #32
 8007900:	4618      	mov	r0, r3
 8007902:	4770      	bx	lr
 8007904:	2300      	movs	r3, #0
 8007906:	e7e4      	b.n	80078d2 <__hi0bits+0xa>

08007908 <__lo0bits>:
 8007908:	6803      	ldr	r3, [r0, #0]
 800790a:	f013 0207 	ands.w	r2, r3, #7
 800790e:	4601      	mov	r1, r0
 8007910:	d00b      	beq.n	800792a <__lo0bits+0x22>
 8007912:	07da      	lsls	r2, r3, #31
 8007914:	d424      	bmi.n	8007960 <__lo0bits+0x58>
 8007916:	0798      	lsls	r0, r3, #30
 8007918:	bf49      	itett	mi
 800791a:	085b      	lsrmi	r3, r3, #1
 800791c:	089b      	lsrpl	r3, r3, #2
 800791e:	2001      	movmi	r0, #1
 8007920:	600b      	strmi	r3, [r1, #0]
 8007922:	bf5c      	itt	pl
 8007924:	600b      	strpl	r3, [r1, #0]
 8007926:	2002      	movpl	r0, #2
 8007928:	4770      	bx	lr
 800792a:	b298      	uxth	r0, r3
 800792c:	b9b0      	cbnz	r0, 800795c <__lo0bits+0x54>
 800792e:	0c1b      	lsrs	r3, r3, #16
 8007930:	2010      	movs	r0, #16
 8007932:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007936:	bf04      	itt	eq
 8007938:	0a1b      	lsreq	r3, r3, #8
 800793a:	3008      	addeq	r0, #8
 800793c:	071a      	lsls	r2, r3, #28
 800793e:	bf04      	itt	eq
 8007940:	091b      	lsreq	r3, r3, #4
 8007942:	3004      	addeq	r0, #4
 8007944:	079a      	lsls	r2, r3, #30
 8007946:	bf04      	itt	eq
 8007948:	089b      	lsreq	r3, r3, #2
 800794a:	3002      	addeq	r0, #2
 800794c:	07da      	lsls	r2, r3, #31
 800794e:	d403      	bmi.n	8007958 <__lo0bits+0x50>
 8007950:	085b      	lsrs	r3, r3, #1
 8007952:	f100 0001 	add.w	r0, r0, #1
 8007956:	d005      	beq.n	8007964 <__lo0bits+0x5c>
 8007958:	600b      	str	r3, [r1, #0]
 800795a:	4770      	bx	lr
 800795c:	4610      	mov	r0, r2
 800795e:	e7e8      	b.n	8007932 <__lo0bits+0x2a>
 8007960:	2000      	movs	r0, #0
 8007962:	4770      	bx	lr
 8007964:	2020      	movs	r0, #32
 8007966:	4770      	bx	lr

08007968 <__i2b>:
 8007968:	b510      	push	{r4, lr}
 800796a:	460c      	mov	r4, r1
 800796c:	2101      	movs	r1, #1
 800796e:	f7ff feff 	bl	8007770 <_Balloc>
 8007972:	4602      	mov	r2, r0
 8007974:	b928      	cbnz	r0, 8007982 <__i2b+0x1a>
 8007976:	4b05      	ldr	r3, [pc, #20]	; (800798c <__i2b+0x24>)
 8007978:	4805      	ldr	r0, [pc, #20]	; (8007990 <__i2b+0x28>)
 800797a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800797e:	f000 fb3f 	bl	8008000 <__assert_func>
 8007982:	2301      	movs	r3, #1
 8007984:	6144      	str	r4, [r0, #20]
 8007986:	6103      	str	r3, [r0, #16]
 8007988:	bd10      	pop	{r4, pc}
 800798a:	bf00      	nop
 800798c:	0801bd2b 	.word	0x0801bd2b
 8007990:	0801bd3c 	.word	0x0801bd3c

08007994 <__multiply>:
 8007994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007998:	4614      	mov	r4, r2
 800799a:	690a      	ldr	r2, [r1, #16]
 800799c:	6923      	ldr	r3, [r4, #16]
 800799e:	429a      	cmp	r2, r3
 80079a0:	bfb8      	it	lt
 80079a2:	460b      	movlt	r3, r1
 80079a4:	460d      	mov	r5, r1
 80079a6:	bfbc      	itt	lt
 80079a8:	4625      	movlt	r5, r4
 80079aa:	461c      	movlt	r4, r3
 80079ac:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80079b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80079b4:	68ab      	ldr	r3, [r5, #8]
 80079b6:	6869      	ldr	r1, [r5, #4]
 80079b8:	eb0a 0709 	add.w	r7, sl, r9
 80079bc:	42bb      	cmp	r3, r7
 80079be:	b085      	sub	sp, #20
 80079c0:	bfb8      	it	lt
 80079c2:	3101      	addlt	r1, #1
 80079c4:	f7ff fed4 	bl	8007770 <_Balloc>
 80079c8:	b930      	cbnz	r0, 80079d8 <__multiply+0x44>
 80079ca:	4602      	mov	r2, r0
 80079cc:	4b42      	ldr	r3, [pc, #264]	; (8007ad8 <__multiply+0x144>)
 80079ce:	4843      	ldr	r0, [pc, #268]	; (8007adc <__multiply+0x148>)
 80079d0:	f240 115d 	movw	r1, #349	; 0x15d
 80079d4:	f000 fb14 	bl	8008000 <__assert_func>
 80079d8:	f100 0614 	add.w	r6, r0, #20
 80079dc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80079e0:	4633      	mov	r3, r6
 80079e2:	2200      	movs	r2, #0
 80079e4:	4543      	cmp	r3, r8
 80079e6:	d31e      	bcc.n	8007a26 <__multiply+0x92>
 80079e8:	f105 0c14 	add.w	ip, r5, #20
 80079ec:	f104 0314 	add.w	r3, r4, #20
 80079f0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80079f4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80079f8:	9202      	str	r2, [sp, #8]
 80079fa:	ebac 0205 	sub.w	r2, ip, r5
 80079fe:	3a15      	subs	r2, #21
 8007a00:	f022 0203 	bic.w	r2, r2, #3
 8007a04:	3204      	adds	r2, #4
 8007a06:	f105 0115 	add.w	r1, r5, #21
 8007a0a:	458c      	cmp	ip, r1
 8007a0c:	bf38      	it	cc
 8007a0e:	2204      	movcc	r2, #4
 8007a10:	9201      	str	r2, [sp, #4]
 8007a12:	9a02      	ldr	r2, [sp, #8]
 8007a14:	9303      	str	r3, [sp, #12]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d808      	bhi.n	8007a2c <__multiply+0x98>
 8007a1a:	2f00      	cmp	r7, #0
 8007a1c:	dc55      	bgt.n	8007aca <__multiply+0x136>
 8007a1e:	6107      	str	r7, [r0, #16]
 8007a20:	b005      	add	sp, #20
 8007a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a26:	f843 2b04 	str.w	r2, [r3], #4
 8007a2a:	e7db      	b.n	80079e4 <__multiply+0x50>
 8007a2c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a30:	f1ba 0f00 	cmp.w	sl, #0
 8007a34:	d020      	beq.n	8007a78 <__multiply+0xe4>
 8007a36:	f105 0e14 	add.w	lr, r5, #20
 8007a3a:	46b1      	mov	r9, r6
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007a42:	f8d9 b000 	ldr.w	fp, [r9]
 8007a46:	b2a1      	uxth	r1, r4
 8007a48:	fa1f fb8b 	uxth.w	fp, fp
 8007a4c:	fb0a b101 	mla	r1, sl, r1, fp
 8007a50:	4411      	add	r1, r2
 8007a52:	f8d9 2000 	ldr.w	r2, [r9]
 8007a56:	0c24      	lsrs	r4, r4, #16
 8007a58:	0c12      	lsrs	r2, r2, #16
 8007a5a:	fb0a 2404 	mla	r4, sl, r4, r2
 8007a5e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007a62:	b289      	uxth	r1, r1
 8007a64:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007a68:	45f4      	cmp	ip, lr
 8007a6a:	f849 1b04 	str.w	r1, [r9], #4
 8007a6e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007a72:	d8e4      	bhi.n	8007a3e <__multiply+0xaa>
 8007a74:	9901      	ldr	r1, [sp, #4]
 8007a76:	5072      	str	r2, [r6, r1]
 8007a78:	9a03      	ldr	r2, [sp, #12]
 8007a7a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a7e:	3304      	adds	r3, #4
 8007a80:	f1b9 0f00 	cmp.w	r9, #0
 8007a84:	d01f      	beq.n	8007ac6 <__multiply+0x132>
 8007a86:	6834      	ldr	r4, [r6, #0]
 8007a88:	f105 0114 	add.w	r1, r5, #20
 8007a8c:	46b6      	mov	lr, r6
 8007a8e:	f04f 0a00 	mov.w	sl, #0
 8007a92:	880a      	ldrh	r2, [r1, #0]
 8007a94:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007a98:	fb09 b202 	mla	r2, r9, r2, fp
 8007a9c:	4492      	add	sl, r2
 8007a9e:	b2a4      	uxth	r4, r4
 8007aa0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007aa4:	f84e 4b04 	str.w	r4, [lr], #4
 8007aa8:	f851 4b04 	ldr.w	r4, [r1], #4
 8007aac:	f8be 2000 	ldrh.w	r2, [lr]
 8007ab0:	0c24      	lsrs	r4, r4, #16
 8007ab2:	fb09 2404 	mla	r4, r9, r4, r2
 8007ab6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007aba:	458c      	cmp	ip, r1
 8007abc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007ac0:	d8e7      	bhi.n	8007a92 <__multiply+0xfe>
 8007ac2:	9a01      	ldr	r2, [sp, #4]
 8007ac4:	50b4      	str	r4, [r6, r2]
 8007ac6:	3604      	adds	r6, #4
 8007ac8:	e7a3      	b.n	8007a12 <__multiply+0x7e>
 8007aca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1a5      	bne.n	8007a1e <__multiply+0x8a>
 8007ad2:	3f01      	subs	r7, #1
 8007ad4:	e7a1      	b.n	8007a1a <__multiply+0x86>
 8007ad6:	bf00      	nop
 8007ad8:	0801bd2b 	.word	0x0801bd2b
 8007adc:	0801bd3c 	.word	0x0801bd3c

08007ae0 <__pow5mult>:
 8007ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ae4:	4615      	mov	r5, r2
 8007ae6:	f012 0203 	ands.w	r2, r2, #3
 8007aea:	4606      	mov	r6, r0
 8007aec:	460f      	mov	r7, r1
 8007aee:	d007      	beq.n	8007b00 <__pow5mult+0x20>
 8007af0:	4c25      	ldr	r4, [pc, #148]	; (8007b88 <__pow5mult+0xa8>)
 8007af2:	3a01      	subs	r2, #1
 8007af4:	2300      	movs	r3, #0
 8007af6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007afa:	f7ff fe9b 	bl	8007834 <__multadd>
 8007afe:	4607      	mov	r7, r0
 8007b00:	10ad      	asrs	r5, r5, #2
 8007b02:	d03d      	beq.n	8007b80 <__pow5mult+0xa0>
 8007b04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007b06:	b97c      	cbnz	r4, 8007b28 <__pow5mult+0x48>
 8007b08:	2010      	movs	r0, #16
 8007b0a:	f7ff fe29 	bl	8007760 <malloc>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	6270      	str	r0, [r6, #36]	; 0x24
 8007b12:	b928      	cbnz	r0, 8007b20 <__pow5mult+0x40>
 8007b14:	4b1d      	ldr	r3, [pc, #116]	; (8007b8c <__pow5mult+0xac>)
 8007b16:	481e      	ldr	r0, [pc, #120]	; (8007b90 <__pow5mult+0xb0>)
 8007b18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007b1c:	f000 fa70 	bl	8008000 <__assert_func>
 8007b20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b24:	6004      	str	r4, [r0, #0]
 8007b26:	60c4      	str	r4, [r0, #12]
 8007b28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b30:	b94c      	cbnz	r4, 8007b46 <__pow5mult+0x66>
 8007b32:	f240 2171 	movw	r1, #625	; 0x271
 8007b36:	4630      	mov	r0, r6
 8007b38:	f7ff ff16 	bl	8007968 <__i2b>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b42:	4604      	mov	r4, r0
 8007b44:	6003      	str	r3, [r0, #0]
 8007b46:	f04f 0900 	mov.w	r9, #0
 8007b4a:	07eb      	lsls	r3, r5, #31
 8007b4c:	d50a      	bpl.n	8007b64 <__pow5mult+0x84>
 8007b4e:	4639      	mov	r1, r7
 8007b50:	4622      	mov	r2, r4
 8007b52:	4630      	mov	r0, r6
 8007b54:	f7ff ff1e 	bl	8007994 <__multiply>
 8007b58:	4639      	mov	r1, r7
 8007b5a:	4680      	mov	r8, r0
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	f7ff fe47 	bl	80077f0 <_Bfree>
 8007b62:	4647      	mov	r7, r8
 8007b64:	106d      	asrs	r5, r5, #1
 8007b66:	d00b      	beq.n	8007b80 <__pow5mult+0xa0>
 8007b68:	6820      	ldr	r0, [r4, #0]
 8007b6a:	b938      	cbnz	r0, 8007b7c <__pow5mult+0x9c>
 8007b6c:	4622      	mov	r2, r4
 8007b6e:	4621      	mov	r1, r4
 8007b70:	4630      	mov	r0, r6
 8007b72:	f7ff ff0f 	bl	8007994 <__multiply>
 8007b76:	6020      	str	r0, [r4, #0]
 8007b78:	f8c0 9000 	str.w	r9, [r0]
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	e7e4      	b.n	8007b4a <__pow5mult+0x6a>
 8007b80:	4638      	mov	r0, r7
 8007b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b86:	bf00      	nop
 8007b88:	0801be90 	.word	0x0801be90
 8007b8c:	0801bcb5 	.word	0x0801bcb5
 8007b90:	0801bd3c 	.word	0x0801bd3c

08007b94 <__lshift>:
 8007b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b98:	460c      	mov	r4, r1
 8007b9a:	6849      	ldr	r1, [r1, #4]
 8007b9c:	6923      	ldr	r3, [r4, #16]
 8007b9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ba2:	68a3      	ldr	r3, [r4, #8]
 8007ba4:	4607      	mov	r7, r0
 8007ba6:	4691      	mov	r9, r2
 8007ba8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bac:	f108 0601 	add.w	r6, r8, #1
 8007bb0:	42b3      	cmp	r3, r6
 8007bb2:	db0b      	blt.n	8007bcc <__lshift+0x38>
 8007bb4:	4638      	mov	r0, r7
 8007bb6:	f7ff fddb 	bl	8007770 <_Balloc>
 8007bba:	4605      	mov	r5, r0
 8007bbc:	b948      	cbnz	r0, 8007bd2 <__lshift+0x3e>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	4b28      	ldr	r3, [pc, #160]	; (8007c64 <__lshift+0xd0>)
 8007bc2:	4829      	ldr	r0, [pc, #164]	; (8007c68 <__lshift+0xd4>)
 8007bc4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007bc8:	f000 fa1a 	bl	8008000 <__assert_func>
 8007bcc:	3101      	adds	r1, #1
 8007bce:	005b      	lsls	r3, r3, #1
 8007bd0:	e7ee      	b.n	8007bb0 <__lshift+0x1c>
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	f100 0114 	add.w	r1, r0, #20
 8007bd8:	f100 0210 	add.w	r2, r0, #16
 8007bdc:	4618      	mov	r0, r3
 8007bde:	4553      	cmp	r3, sl
 8007be0:	db33      	blt.n	8007c4a <__lshift+0xb6>
 8007be2:	6920      	ldr	r0, [r4, #16]
 8007be4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007be8:	f104 0314 	add.w	r3, r4, #20
 8007bec:	f019 091f 	ands.w	r9, r9, #31
 8007bf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bf4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007bf8:	d02b      	beq.n	8007c52 <__lshift+0xbe>
 8007bfa:	f1c9 0e20 	rsb	lr, r9, #32
 8007bfe:	468a      	mov	sl, r1
 8007c00:	2200      	movs	r2, #0
 8007c02:	6818      	ldr	r0, [r3, #0]
 8007c04:	fa00 f009 	lsl.w	r0, r0, r9
 8007c08:	4302      	orrs	r2, r0
 8007c0a:	f84a 2b04 	str.w	r2, [sl], #4
 8007c0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c12:	459c      	cmp	ip, r3
 8007c14:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c18:	d8f3      	bhi.n	8007c02 <__lshift+0x6e>
 8007c1a:	ebac 0304 	sub.w	r3, ip, r4
 8007c1e:	3b15      	subs	r3, #21
 8007c20:	f023 0303 	bic.w	r3, r3, #3
 8007c24:	3304      	adds	r3, #4
 8007c26:	f104 0015 	add.w	r0, r4, #21
 8007c2a:	4584      	cmp	ip, r0
 8007c2c:	bf38      	it	cc
 8007c2e:	2304      	movcc	r3, #4
 8007c30:	50ca      	str	r2, [r1, r3]
 8007c32:	b10a      	cbz	r2, 8007c38 <__lshift+0xa4>
 8007c34:	f108 0602 	add.w	r6, r8, #2
 8007c38:	3e01      	subs	r6, #1
 8007c3a:	4638      	mov	r0, r7
 8007c3c:	612e      	str	r6, [r5, #16]
 8007c3e:	4621      	mov	r1, r4
 8007c40:	f7ff fdd6 	bl	80077f0 <_Bfree>
 8007c44:	4628      	mov	r0, r5
 8007c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c4e:	3301      	adds	r3, #1
 8007c50:	e7c5      	b.n	8007bde <__lshift+0x4a>
 8007c52:	3904      	subs	r1, #4
 8007c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c58:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c5c:	459c      	cmp	ip, r3
 8007c5e:	d8f9      	bhi.n	8007c54 <__lshift+0xc0>
 8007c60:	e7ea      	b.n	8007c38 <__lshift+0xa4>
 8007c62:	bf00      	nop
 8007c64:	0801bd2b 	.word	0x0801bd2b
 8007c68:	0801bd3c 	.word	0x0801bd3c

08007c6c <__mcmp>:
 8007c6c:	b530      	push	{r4, r5, lr}
 8007c6e:	6902      	ldr	r2, [r0, #16]
 8007c70:	690c      	ldr	r4, [r1, #16]
 8007c72:	1b12      	subs	r2, r2, r4
 8007c74:	d10e      	bne.n	8007c94 <__mcmp+0x28>
 8007c76:	f100 0314 	add.w	r3, r0, #20
 8007c7a:	3114      	adds	r1, #20
 8007c7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007c80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007c84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007c88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007c8c:	42a5      	cmp	r5, r4
 8007c8e:	d003      	beq.n	8007c98 <__mcmp+0x2c>
 8007c90:	d305      	bcc.n	8007c9e <__mcmp+0x32>
 8007c92:	2201      	movs	r2, #1
 8007c94:	4610      	mov	r0, r2
 8007c96:	bd30      	pop	{r4, r5, pc}
 8007c98:	4283      	cmp	r3, r0
 8007c9a:	d3f3      	bcc.n	8007c84 <__mcmp+0x18>
 8007c9c:	e7fa      	b.n	8007c94 <__mcmp+0x28>
 8007c9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ca2:	e7f7      	b.n	8007c94 <__mcmp+0x28>

08007ca4 <__mdiff>:
 8007ca4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca8:	460c      	mov	r4, r1
 8007caa:	4606      	mov	r6, r0
 8007cac:	4611      	mov	r1, r2
 8007cae:	4620      	mov	r0, r4
 8007cb0:	4617      	mov	r7, r2
 8007cb2:	f7ff ffdb 	bl	8007c6c <__mcmp>
 8007cb6:	1e05      	subs	r5, r0, #0
 8007cb8:	d110      	bne.n	8007cdc <__mdiff+0x38>
 8007cba:	4629      	mov	r1, r5
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f7ff fd57 	bl	8007770 <_Balloc>
 8007cc2:	b930      	cbnz	r0, 8007cd2 <__mdiff+0x2e>
 8007cc4:	4b39      	ldr	r3, [pc, #228]	; (8007dac <__mdiff+0x108>)
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	f240 2132 	movw	r1, #562	; 0x232
 8007ccc:	4838      	ldr	r0, [pc, #224]	; (8007db0 <__mdiff+0x10c>)
 8007cce:	f000 f997 	bl	8008000 <__assert_func>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007cd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cdc:	bfa4      	itt	ge
 8007cde:	463b      	movge	r3, r7
 8007ce0:	4627      	movge	r7, r4
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	6879      	ldr	r1, [r7, #4]
 8007ce6:	bfa6      	itte	ge
 8007ce8:	461c      	movge	r4, r3
 8007cea:	2500      	movge	r5, #0
 8007cec:	2501      	movlt	r5, #1
 8007cee:	f7ff fd3f 	bl	8007770 <_Balloc>
 8007cf2:	b920      	cbnz	r0, 8007cfe <__mdiff+0x5a>
 8007cf4:	4b2d      	ldr	r3, [pc, #180]	; (8007dac <__mdiff+0x108>)
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007cfc:	e7e6      	b.n	8007ccc <__mdiff+0x28>
 8007cfe:	693e      	ldr	r6, [r7, #16]
 8007d00:	60c5      	str	r5, [r0, #12]
 8007d02:	6925      	ldr	r5, [r4, #16]
 8007d04:	f107 0114 	add.w	r1, r7, #20
 8007d08:	f104 0914 	add.w	r9, r4, #20
 8007d0c:	f100 0e14 	add.w	lr, r0, #20
 8007d10:	f107 0210 	add.w	r2, r7, #16
 8007d14:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007d18:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007d1c:	46f2      	mov	sl, lr
 8007d1e:	2700      	movs	r7, #0
 8007d20:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d28:	fa1f f883 	uxth.w	r8, r3
 8007d2c:	fa17 f78b 	uxtah	r7, r7, fp
 8007d30:	0c1b      	lsrs	r3, r3, #16
 8007d32:	eba7 0808 	sub.w	r8, r7, r8
 8007d36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d3e:	fa1f f888 	uxth.w	r8, r8
 8007d42:	141f      	asrs	r7, r3, #16
 8007d44:	454d      	cmp	r5, r9
 8007d46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d4a:	f84a 3b04 	str.w	r3, [sl], #4
 8007d4e:	d8e7      	bhi.n	8007d20 <__mdiff+0x7c>
 8007d50:	1b2b      	subs	r3, r5, r4
 8007d52:	3b15      	subs	r3, #21
 8007d54:	f023 0303 	bic.w	r3, r3, #3
 8007d58:	3304      	adds	r3, #4
 8007d5a:	3415      	adds	r4, #21
 8007d5c:	42a5      	cmp	r5, r4
 8007d5e:	bf38      	it	cc
 8007d60:	2304      	movcc	r3, #4
 8007d62:	4419      	add	r1, r3
 8007d64:	4473      	add	r3, lr
 8007d66:	469e      	mov	lr, r3
 8007d68:	460d      	mov	r5, r1
 8007d6a:	4565      	cmp	r5, ip
 8007d6c:	d30e      	bcc.n	8007d8c <__mdiff+0xe8>
 8007d6e:	f10c 0203 	add.w	r2, ip, #3
 8007d72:	1a52      	subs	r2, r2, r1
 8007d74:	f022 0203 	bic.w	r2, r2, #3
 8007d78:	3903      	subs	r1, #3
 8007d7a:	458c      	cmp	ip, r1
 8007d7c:	bf38      	it	cc
 8007d7e:	2200      	movcc	r2, #0
 8007d80:	441a      	add	r2, r3
 8007d82:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007d86:	b17b      	cbz	r3, 8007da8 <__mdiff+0x104>
 8007d88:	6106      	str	r6, [r0, #16]
 8007d8a:	e7a5      	b.n	8007cd8 <__mdiff+0x34>
 8007d8c:	f855 8b04 	ldr.w	r8, [r5], #4
 8007d90:	fa17 f488 	uxtah	r4, r7, r8
 8007d94:	1422      	asrs	r2, r4, #16
 8007d96:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007d9a:	b2a4      	uxth	r4, r4
 8007d9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007da0:	f84e 4b04 	str.w	r4, [lr], #4
 8007da4:	1417      	asrs	r7, r2, #16
 8007da6:	e7e0      	b.n	8007d6a <__mdiff+0xc6>
 8007da8:	3e01      	subs	r6, #1
 8007daa:	e7ea      	b.n	8007d82 <__mdiff+0xde>
 8007dac:	0801bd2b 	.word	0x0801bd2b
 8007db0:	0801bd3c 	.word	0x0801bd3c

08007db4 <__d2b>:
 8007db4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007db8:	4689      	mov	r9, r1
 8007dba:	2101      	movs	r1, #1
 8007dbc:	ec57 6b10 	vmov	r6, r7, d0
 8007dc0:	4690      	mov	r8, r2
 8007dc2:	f7ff fcd5 	bl	8007770 <_Balloc>
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	b930      	cbnz	r0, 8007dd8 <__d2b+0x24>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	4b25      	ldr	r3, [pc, #148]	; (8007e64 <__d2b+0xb0>)
 8007dce:	4826      	ldr	r0, [pc, #152]	; (8007e68 <__d2b+0xb4>)
 8007dd0:	f240 310a 	movw	r1, #778	; 0x30a
 8007dd4:	f000 f914 	bl	8008000 <__assert_func>
 8007dd8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007ddc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007de0:	bb35      	cbnz	r5, 8007e30 <__d2b+0x7c>
 8007de2:	2e00      	cmp	r6, #0
 8007de4:	9301      	str	r3, [sp, #4]
 8007de6:	d028      	beq.n	8007e3a <__d2b+0x86>
 8007de8:	4668      	mov	r0, sp
 8007dea:	9600      	str	r6, [sp, #0]
 8007dec:	f7ff fd8c 	bl	8007908 <__lo0bits>
 8007df0:	9900      	ldr	r1, [sp, #0]
 8007df2:	b300      	cbz	r0, 8007e36 <__d2b+0x82>
 8007df4:	9a01      	ldr	r2, [sp, #4]
 8007df6:	f1c0 0320 	rsb	r3, r0, #32
 8007dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfe:	430b      	orrs	r3, r1
 8007e00:	40c2      	lsrs	r2, r0
 8007e02:	6163      	str	r3, [r4, #20]
 8007e04:	9201      	str	r2, [sp, #4]
 8007e06:	9b01      	ldr	r3, [sp, #4]
 8007e08:	61a3      	str	r3, [r4, #24]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	bf14      	ite	ne
 8007e0e:	2202      	movne	r2, #2
 8007e10:	2201      	moveq	r2, #1
 8007e12:	6122      	str	r2, [r4, #16]
 8007e14:	b1d5      	cbz	r5, 8007e4c <__d2b+0x98>
 8007e16:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007e1a:	4405      	add	r5, r0
 8007e1c:	f8c9 5000 	str.w	r5, [r9]
 8007e20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e24:	f8c8 0000 	str.w	r0, [r8]
 8007e28:	4620      	mov	r0, r4
 8007e2a:	b003      	add	sp, #12
 8007e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e34:	e7d5      	b.n	8007de2 <__d2b+0x2e>
 8007e36:	6161      	str	r1, [r4, #20]
 8007e38:	e7e5      	b.n	8007e06 <__d2b+0x52>
 8007e3a:	a801      	add	r0, sp, #4
 8007e3c:	f7ff fd64 	bl	8007908 <__lo0bits>
 8007e40:	9b01      	ldr	r3, [sp, #4]
 8007e42:	6163      	str	r3, [r4, #20]
 8007e44:	2201      	movs	r2, #1
 8007e46:	6122      	str	r2, [r4, #16]
 8007e48:	3020      	adds	r0, #32
 8007e4a:	e7e3      	b.n	8007e14 <__d2b+0x60>
 8007e4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e54:	f8c9 0000 	str.w	r0, [r9]
 8007e58:	6918      	ldr	r0, [r3, #16]
 8007e5a:	f7ff fd35 	bl	80078c8 <__hi0bits>
 8007e5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e62:	e7df      	b.n	8007e24 <__d2b+0x70>
 8007e64:	0801bd2b 	.word	0x0801bd2b
 8007e68:	0801bd3c 	.word	0x0801bd3c

08007e6c <_calloc_r>:
 8007e6c:	b513      	push	{r0, r1, r4, lr}
 8007e6e:	434a      	muls	r2, r1
 8007e70:	4611      	mov	r1, r2
 8007e72:	9201      	str	r2, [sp, #4]
 8007e74:	f000 f85a 	bl	8007f2c <_malloc_r>
 8007e78:	4604      	mov	r4, r0
 8007e7a:	b118      	cbz	r0, 8007e84 <_calloc_r+0x18>
 8007e7c:	9a01      	ldr	r2, [sp, #4]
 8007e7e:	2100      	movs	r1, #0
 8007e80:	f7fe f980 	bl	8006184 <memset>
 8007e84:	4620      	mov	r0, r4
 8007e86:	b002      	add	sp, #8
 8007e88:	bd10      	pop	{r4, pc}
	...

08007e8c <_free_r>:
 8007e8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e8e:	2900      	cmp	r1, #0
 8007e90:	d048      	beq.n	8007f24 <_free_r+0x98>
 8007e92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e96:	9001      	str	r0, [sp, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f1a1 0404 	sub.w	r4, r1, #4
 8007e9e:	bfb8      	it	lt
 8007ea0:	18e4      	addlt	r4, r4, r3
 8007ea2:	f000 f8ef 	bl	8008084 <__malloc_lock>
 8007ea6:	4a20      	ldr	r2, [pc, #128]	; (8007f28 <_free_r+0x9c>)
 8007ea8:	9801      	ldr	r0, [sp, #4]
 8007eaa:	6813      	ldr	r3, [r2, #0]
 8007eac:	4615      	mov	r5, r2
 8007eae:	b933      	cbnz	r3, 8007ebe <_free_r+0x32>
 8007eb0:	6063      	str	r3, [r4, #4]
 8007eb2:	6014      	str	r4, [r2, #0]
 8007eb4:	b003      	add	sp, #12
 8007eb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007eba:	f000 b8e9 	b.w	8008090 <__malloc_unlock>
 8007ebe:	42a3      	cmp	r3, r4
 8007ec0:	d90b      	bls.n	8007eda <_free_r+0x4e>
 8007ec2:	6821      	ldr	r1, [r4, #0]
 8007ec4:	1862      	adds	r2, r4, r1
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	bf04      	itt	eq
 8007eca:	681a      	ldreq	r2, [r3, #0]
 8007ecc:	685b      	ldreq	r3, [r3, #4]
 8007ece:	6063      	str	r3, [r4, #4]
 8007ed0:	bf04      	itt	eq
 8007ed2:	1852      	addeq	r2, r2, r1
 8007ed4:	6022      	streq	r2, [r4, #0]
 8007ed6:	602c      	str	r4, [r5, #0]
 8007ed8:	e7ec      	b.n	8007eb4 <_free_r+0x28>
 8007eda:	461a      	mov	r2, r3
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	b10b      	cbz	r3, 8007ee4 <_free_r+0x58>
 8007ee0:	42a3      	cmp	r3, r4
 8007ee2:	d9fa      	bls.n	8007eda <_free_r+0x4e>
 8007ee4:	6811      	ldr	r1, [r2, #0]
 8007ee6:	1855      	adds	r5, r2, r1
 8007ee8:	42a5      	cmp	r5, r4
 8007eea:	d10b      	bne.n	8007f04 <_free_r+0x78>
 8007eec:	6824      	ldr	r4, [r4, #0]
 8007eee:	4421      	add	r1, r4
 8007ef0:	1854      	adds	r4, r2, r1
 8007ef2:	42a3      	cmp	r3, r4
 8007ef4:	6011      	str	r1, [r2, #0]
 8007ef6:	d1dd      	bne.n	8007eb4 <_free_r+0x28>
 8007ef8:	681c      	ldr	r4, [r3, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	6053      	str	r3, [r2, #4]
 8007efe:	4421      	add	r1, r4
 8007f00:	6011      	str	r1, [r2, #0]
 8007f02:	e7d7      	b.n	8007eb4 <_free_r+0x28>
 8007f04:	d902      	bls.n	8007f0c <_free_r+0x80>
 8007f06:	230c      	movs	r3, #12
 8007f08:	6003      	str	r3, [r0, #0]
 8007f0a:	e7d3      	b.n	8007eb4 <_free_r+0x28>
 8007f0c:	6825      	ldr	r5, [r4, #0]
 8007f0e:	1961      	adds	r1, r4, r5
 8007f10:	428b      	cmp	r3, r1
 8007f12:	bf04      	itt	eq
 8007f14:	6819      	ldreq	r1, [r3, #0]
 8007f16:	685b      	ldreq	r3, [r3, #4]
 8007f18:	6063      	str	r3, [r4, #4]
 8007f1a:	bf04      	itt	eq
 8007f1c:	1949      	addeq	r1, r1, r5
 8007f1e:	6021      	streq	r1, [r4, #0]
 8007f20:	6054      	str	r4, [r2, #4]
 8007f22:	e7c7      	b.n	8007eb4 <_free_r+0x28>
 8007f24:	b003      	add	sp, #12
 8007f26:	bd30      	pop	{r4, r5, pc}
 8007f28:	20001504 	.word	0x20001504

08007f2c <_malloc_r>:
 8007f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2e:	1ccd      	adds	r5, r1, #3
 8007f30:	f025 0503 	bic.w	r5, r5, #3
 8007f34:	3508      	adds	r5, #8
 8007f36:	2d0c      	cmp	r5, #12
 8007f38:	bf38      	it	cc
 8007f3a:	250c      	movcc	r5, #12
 8007f3c:	2d00      	cmp	r5, #0
 8007f3e:	4606      	mov	r6, r0
 8007f40:	db01      	blt.n	8007f46 <_malloc_r+0x1a>
 8007f42:	42a9      	cmp	r1, r5
 8007f44:	d903      	bls.n	8007f4e <_malloc_r+0x22>
 8007f46:	230c      	movs	r3, #12
 8007f48:	6033      	str	r3, [r6, #0]
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f4e:	f000 f899 	bl	8008084 <__malloc_lock>
 8007f52:	4921      	ldr	r1, [pc, #132]	; (8007fd8 <_malloc_r+0xac>)
 8007f54:	680a      	ldr	r2, [r1, #0]
 8007f56:	4614      	mov	r4, r2
 8007f58:	b99c      	cbnz	r4, 8007f82 <_malloc_r+0x56>
 8007f5a:	4f20      	ldr	r7, [pc, #128]	; (8007fdc <_malloc_r+0xb0>)
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	b923      	cbnz	r3, 8007f6a <_malloc_r+0x3e>
 8007f60:	4621      	mov	r1, r4
 8007f62:	4630      	mov	r0, r6
 8007f64:	f000 f83c 	bl	8007fe0 <_sbrk_r>
 8007f68:	6038      	str	r0, [r7, #0]
 8007f6a:	4629      	mov	r1, r5
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f000 f837 	bl	8007fe0 <_sbrk_r>
 8007f72:	1c43      	adds	r3, r0, #1
 8007f74:	d123      	bne.n	8007fbe <_malloc_r+0x92>
 8007f76:	230c      	movs	r3, #12
 8007f78:	6033      	str	r3, [r6, #0]
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	f000 f888 	bl	8008090 <__malloc_unlock>
 8007f80:	e7e3      	b.n	8007f4a <_malloc_r+0x1e>
 8007f82:	6823      	ldr	r3, [r4, #0]
 8007f84:	1b5b      	subs	r3, r3, r5
 8007f86:	d417      	bmi.n	8007fb8 <_malloc_r+0x8c>
 8007f88:	2b0b      	cmp	r3, #11
 8007f8a:	d903      	bls.n	8007f94 <_malloc_r+0x68>
 8007f8c:	6023      	str	r3, [r4, #0]
 8007f8e:	441c      	add	r4, r3
 8007f90:	6025      	str	r5, [r4, #0]
 8007f92:	e004      	b.n	8007f9e <_malloc_r+0x72>
 8007f94:	6863      	ldr	r3, [r4, #4]
 8007f96:	42a2      	cmp	r2, r4
 8007f98:	bf0c      	ite	eq
 8007f9a:	600b      	streq	r3, [r1, #0]
 8007f9c:	6053      	strne	r3, [r2, #4]
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	f000 f876 	bl	8008090 <__malloc_unlock>
 8007fa4:	f104 000b 	add.w	r0, r4, #11
 8007fa8:	1d23      	adds	r3, r4, #4
 8007faa:	f020 0007 	bic.w	r0, r0, #7
 8007fae:	1ac2      	subs	r2, r0, r3
 8007fb0:	d0cc      	beq.n	8007f4c <_malloc_r+0x20>
 8007fb2:	1a1b      	subs	r3, r3, r0
 8007fb4:	50a3      	str	r3, [r4, r2]
 8007fb6:	e7c9      	b.n	8007f4c <_malloc_r+0x20>
 8007fb8:	4622      	mov	r2, r4
 8007fba:	6864      	ldr	r4, [r4, #4]
 8007fbc:	e7cc      	b.n	8007f58 <_malloc_r+0x2c>
 8007fbe:	1cc4      	adds	r4, r0, #3
 8007fc0:	f024 0403 	bic.w	r4, r4, #3
 8007fc4:	42a0      	cmp	r0, r4
 8007fc6:	d0e3      	beq.n	8007f90 <_malloc_r+0x64>
 8007fc8:	1a21      	subs	r1, r4, r0
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f000 f808 	bl	8007fe0 <_sbrk_r>
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	d1dd      	bne.n	8007f90 <_malloc_r+0x64>
 8007fd4:	e7cf      	b.n	8007f76 <_malloc_r+0x4a>
 8007fd6:	bf00      	nop
 8007fd8:	20001504 	.word	0x20001504
 8007fdc:	20001508 	.word	0x20001508

08007fe0 <_sbrk_r>:
 8007fe0:	b538      	push	{r3, r4, r5, lr}
 8007fe2:	4d06      	ldr	r5, [pc, #24]	; (8007ffc <_sbrk_r+0x1c>)
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	4608      	mov	r0, r1
 8007fea:	602b      	str	r3, [r5, #0]
 8007fec:	f7f9 fd6a 	bl	8001ac4 <_sbrk>
 8007ff0:	1c43      	adds	r3, r0, #1
 8007ff2:	d102      	bne.n	8007ffa <_sbrk_r+0x1a>
 8007ff4:	682b      	ldr	r3, [r5, #0]
 8007ff6:	b103      	cbz	r3, 8007ffa <_sbrk_r+0x1a>
 8007ff8:	6023      	str	r3, [r4, #0]
 8007ffa:	bd38      	pop	{r3, r4, r5, pc}
 8007ffc:	20001bd0 	.word	0x20001bd0

08008000 <__assert_func>:
 8008000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008002:	4614      	mov	r4, r2
 8008004:	461a      	mov	r2, r3
 8008006:	4b09      	ldr	r3, [pc, #36]	; (800802c <__assert_func+0x2c>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4605      	mov	r5, r0
 800800c:	68d8      	ldr	r0, [r3, #12]
 800800e:	b14c      	cbz	r4, 8008024 <__assert_func+0x24>
 8008010:	4b07      	ldr	r3, [pc, #28]	; (8008030 <__assert_func+0x30>)
 8008012:	9100      	str	r1, [sp, #0]
 8008014:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008018:	4906      	ldr	r1, [pc, #24]	; (8008034 <__assert_func+0x34>)
 800801a:	462b      	mov	r3, r5
 800801c:	f000 f80e 	bl	800803c <fiprintf>
 8008020:	f000 fa64 	bl	80084ec <abort>
 8008024:	4b04      	ldr	r3, [pc, #16]	; (8008038 <__assert_func+0x38>)
 8008026:	461c      	mov	r4, r3
 8008028:	e7f3      	b.n	8008012 <__assert_func+0x12>
 800802a:	bf00      	nop
 800802c:	2000000c 	.word	0x2000000c
 8008030:	0801be9c 	.word	0x0801be9c
 8008034:	0801bea9 	.word	0x0801bea9
 8008038:	0801bed7 	.word	0x0801bed7

0800803c <fiprintf>:
 800803c:	b40e      	push	{r1, r2, r3}
 800803e:	b503      	push	{r0, r1, lr}
 8008040:	4601      	mov	r1, r0
 8008042:	ab03      	add	r3, sp, #12
 8008044:	4805      	ldr	r0, [pc, #20]	; (800805c <fiprintf+0x20>)
 8008046:	f853 2b04 	ldr.w	r2, [r3], #4
 800804a:	6800      	ldr	r0, [r0, #0]
 800804c:	9301      	str	r3, [sp, #4]
 800804e:	f000 f84f 	bl	80080f0 <_vfiprintf_r>
 8008052:	b002      	add	sp, #8
 8008054:	f85d eb04 	ldr.w	lr, [sp], #4
 8008058:	b003      	add	sp, #12
 800805a:	4770      	bx	lr
 800805c:	2000000c 	.word	0x2000000c

08008060 <__ascii_mbtowc>:
 8008060:	b082      	sub	sp, #8
 8008062:	b901      	cbnz	r1, 8008066 <__ascii_mbtowc+0x6>
 8008064:	a901      	add	r1, sp, #4
 8008066:	b142      	cbz	r2, 800807a <__ascii_mbtowc+0x1a>
 8008068:	b14b      	cbz	r3, 800807e <__ascii_mbtowc+0x1e>
 800806a:	7813      	ldrb	r3, [r2, #0]
 800806c:	600b      	str	r3, [r1, #0]
 800806e:	7812      	ldrb	r2, [r2, #0]
 8008070:	1e10      	subs	r0, r2, #0
 8008072:	bf18      	it	ne
 8008074:	2001      	movne	r0, #1
 8008076:	b002      	add	sp, #8
 8008078:	4770      	bx	lr
 800807a:	4610      	mov	r0, r2
 800807c:	e7fb      	b.n	8008076 <__ascii_mbtowc+0x16>
 800807e:	f06f 0001 	mvn.w	r0, #1
 8008082:	e7f8      	b.n	8008076 <__ascii_mbtowc+0x16>

08008084 <__malloc_lock>:
 8008084:	4801      	ldr	r0, [pc, #4]	; (800808c <__malloc_lock+0x8>)
 8008086:	f000 bbf1 	b.w	800886c <__retarget_lock_acquire_recursive>
 800808a:	bf00      	nop
 800808c:	20001bd8 	.word	0x20001bd8

08008090 <__malloc_unlock>:
 8008090:	4801      	ldr	r0, [pc, #4]	; (8008098 <__malloc_unlock+0x8>)
 8008092:	f000 bbec 	b.w	800886e <__retarget_lock_release_recursive>
 8008096:	bf00      	nop
 8008098:	20001bd8 	.word	0x20001bd8

0800809c <__sfputc_r>:
 800809c:	6893      	ldr	r3, [r2, #8]
 800809e:	3b01      	subs	r3, #1
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	b410      	push	{r4}
 80080a4:	6093      	str	r3, [r2, #8]
 80080a6:	da08      	bge.n	80080ba <__sfputc_r+0x1e>
 80080a8:	6994      	ldr	r4, [r2, #24]
 80080aa:	42a3      	cmp	r3, r4
 80080ac:	db01      	blt.n	80080b2 <__sfputc_r+0x16>
 80080ae:	290a      	cmp	r1, #10
 80080b0:	d103      	bne.n	80080ba <__sfputc_r+0x1e>
 80080b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080b6:	f000 b94b 	b.w	8008350 <__swbuf_r>
 80080ba:	6813      	ldr	r3, [r2, #0]
 80080bc:	1c58      	adds	r0, r3, #1
 80080be:	6010      	str	r0, [r2, #0]
 80080c0:	7019      	strb	r1, [r3, #0]
 80080c2:	4608      	mov	r0, r1
 80080c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <__sfputs_r>:
 80080ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080cc:	4606      	mov	r6, r0
 80080ce:	460f      	mov	r7, r1
 80080d0:	4614      	mov	r4, r2
 80080d2:	18d5      	adds	r5, r2, r3
 80080d4:	42ac      	cmp	r4, r5
 80080d6:	d101      	bne.n	80080dc <__sfputs_r+0x12>
 80080d8:	2000      	movs	r0, #0
 80080da:	e007      	b.n	80080ec <__sfputs_r+0x22>
 80080dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e0:	463a      	mov	r2, r7
 80080e2:	4630      	mov	r0, r6
 80080e4:	f7ff ffda 	bl	800809c <__sfputc_r>
 80080e8:	1c43      	adds	r3, r0, #1
 80080ea:	d1f3      	bne.n	80080d4 <__sfputs_r+0xa>
 80080ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080f0 <_vfiprintf_r>:
 80080f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f4:	460d      	mov	r5, r1
 80080f6:	b09d      	sub	sp, #116	; 0x74
 80080f8:	4614      	mov	r4, r2
 80080fa:	4698      	mov	r8, r3
 80080fc:	4606      	mov	r6, r0
 80080fe:	b118      	cbz	r0, 8008108 <_vfiprintf_r+0x18>
 8008100:	6983      	ldr	r3, [r0, #24]
 8008102:	b90b      	cbnz	r3, 8008108 <_vfiprintf_r+0x18>
 8008104:	f000 fb14 	bl	8008730 <__sinit>
 8008108:	4b89      	ldr	r3, [pc, #548]	; (8008330 <_vfiprintf_r+0x240>)
 800810a:	429d      	cmp	r5, r3
 800810c:	d11b      	bne.n	8008146 <_vfiprintf_r+0x56>
 800810e:	6875      	ldr	r5, [r6, #4]
 8008110:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008112:	07d9      	lsls	r1, r3, #31
 8008114:	d405      	bmi.n	8008122 <_vfiprintf_r+0x32>
 8008116:	89ab      	ldrh	r3, [r5, #12]
 8008118:	059a      	lsls	r2, r3, #22
 800811a:	d402      	bmi.n	8008122 <_vfiprintf_r+0x32>
 800811c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800811e:	f000 fba5 	bl	800886c <__retarget_lock_acquire_recursive>
 8008122:	89ab      	ldrh	r3, [r5, #12]
 8008124:	071b      	lsls	r3, r3, #28
 8008126:	d501      	bpl.n	800812c <_vfiprintf_r+0x3c>
 8008128:	692b      	ldr	r3, [r5, #16]
 800812a:	b9eb      	cbnz	r3, 8008168 <_vfiprintf_r+0x78>
 800812c:	4629      	mov	r1, r5
 800812e:	4630      	mov	r0, r6
 8008130:	f000 f96e 	bl	8008410 <__swsetup_r>
 8008134:	b1c0      	cbz	r0, 8008168 <_vfiprintf_r+0x78>
 8008136:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008138:	07dc      	lsls	r4, r3, #31
 800813a:	d50e      	bpl.n	800815a <_vfiprintf_r+0x6a>
 800813c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008140:	b01d      	add	sp, #116	; 0x74
 8008142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008146:	4b7b      	ldr	r3, [pc, #492]	; (8008334 <_vfiprintf_r+0x244>)
 8008148:	429d      	cmp	r5, r3
 800814a:	d101      	bne.n	8008150 <_vfiprintf_r+0x60>
 800814c:	68b5      	ldr	r5, [r6, #8]
 800814e:	e7df      	b.n	8008110 <_vfiprintf_r+0x20>
 8008150:	4b79      	ldr	r3, [pc, #484]	; (8008338 <_vfiprintf_r+0x248>)
 8008152:	429d      	cmp	r5, r3
 8008154:	bf08      	it	eq
 8008156:	68f5      	ldreq	r5, [r6, #12]
 8008158:	e7da      	b.n	8008110 <_vfiprintf_r+0x20>
 800815a:	89ab      	ldrh	r3, [r5, #12]
 800815c:	0598      	lsls	r0, r3, #22
 800815e:	d4ed      	bmi.n	800813c <_vfiprintf_r+0x4c>
 8008160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008162:	f000 fb84 	bl	800886e <__retarget_lock_release_recursive>
 8008166:	e7e9      	b.n	800813c <_vfiprintf_r+0x4c>
 8008168:	2300      	movs	r3, #0
 800816a:	9309      	str	r3, [sp, #36]	; 0x24
 800816c:	2320      	movs	r3, #32
 800816e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008172:	f8cd 800c 	str.w	r8, [sp, #12]
 8008176:	2330      	movs	r3, #48	; 0x30
 8008178:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800833c <_vfiprintf_r+0x24c>
 800817c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008180:	f04f 0901 	mov.w	r9, #1
 8008184:	4623      	mov	r3, r4
 8008186:	469a      	mov	sl, r3
 8008188:	f813 2b01 	ldrb.w	r2, [r3], #1
 800818c:	b10a      	cbz	r2, 8008192 <_vfiprintf_r+0xa2>
 800818e:	2a25      	cmp	r2, #37	; 0x25
 8008190:	d1f9      	bne.n	8008186 <_vfiprintf_r+0x96>
 8008192:	ebba 0b04 	subs.w	fp, sl, r4
 8008196:	d00b      	beq.n	80081b0 <_vfiprintf_r+0xc0>
 8008198:	465b      	mov	r3, fp
 800819a:	4622      	mov	r2, r4
 800819c:	4629      	mov	r1, r5
 800819e:	4630      	mov	r0, r6
 80081a0:	f7ff ff93 	bl	80080ca <__sfputs_r>
 80081a4:	3001      	adds	r0, #1
 80081a6:	f000 80aa 	beq.w	80082fe <_vfiprintf_r+0x20e>
 80081aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081ac:	445a      	add	r2, fp
 80081ae:	9209      	str	r2, [sp, #36]	; 0x24
 80081b0:	f89a 3000 	ldrb.w	r3, [sl]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 80a2 	beq.w	80082fe <_vfiprintf_r+0x20e>
 80081ba:	2300      	movs	r3, #0
 80081bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081c4:	f10a 0a01 	add.w	sl, sl, #1
 80081c8:	9304      	str	r3, [sp, #16]
 80081ca:	9307      	str	r3, [sp, #28]
 80081cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081d0:	931a      	str	r3, [sp, #104]	; 0x68
 80081d2:	4654      	mov	r4, sl
 80081d4:	2205      	movs	r2, #5
 80081d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081da:	4858      	ldr	r0, [pc, #352]	; (800833c <_vfiprintf_r+0x24c>)
 80081dc:	f7f8 f808 	bl	80001f0 <memchr>
 80081e0:	9a04      	ldr	r2, [sp, #16]
 80081e2:	b9d8      	cbnz	r0, 800821c <_vfiprintf_r+0x12c>
 80081e4:	06d1      	lsls	r1, r2, #27
 80081e6:	bf44      	itt	mi
 80081e8:	2320      	movmi	r3, #32
 80081ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081ee:	0713      	lsls	r3, r2, #28
 80081f0:	bf44      	itt	mi
 80081f2:	232b      	movmi	r3, #43	; 0x2b
 80081f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081f8:	f89a 3000 	ldrb.w	r3, [sl]
 80081fc:	2b2a      	cmp	r3, #42	; 0x2a
 80081fe:	d015      	beq.n	800822c <_vfiprintf_r+0x13c>
 8008200:	9a07      	ldr	r2, [sp, #28]
 8008202:	4654      	mov	r4, sl
 8008204:	2000      	movs	r0, #0
 8008206:	f04f 0c0a 	mov.w	ip, #10
 800820a:	4621      	mov	r1, r4
 800820c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008210:	3b30      	subs	r3, #48	; 0x30
 8008212:	2b09      	cmp	r3, #9
 8008214:	d94e      	bls.n	80082b4 <_vfiprintf_r+0x1c4>
 8008216:	b1b0      	cbz	r0, 8008246 <_vfiprintf_r+0x156>
 8008218:	9207      	str	r2, [sp, #28]
 800821a:	e014      	b.n	8008246 <_vfiprintf_r+0x156>
 800821c:	eba0 0308 	sub.w	r3, r0, r8
 8008220:	fa09 f303 	lsl.w	r3, r9, r3
 8008224:	4313      	orrs	r3, r2
 8008226:	9304      	str	r3, [sp, #16]
 8008228:	46a2      	mov	sl, r4
 800822a:	e7d2      	b.n	80081d2 <_vfiprintf_r+0xe2>
 800822c:	9b03      	ldr	r3, [sp, #12]
 800822e:	1d19      	adds	r1, r3, #4
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	9103      	str	r1, [sp, #12]
 8008234:	2b00      	cmp	r3, #0
 8008236:	bfbb      	ittet	lt
 8008238:	425b      	neglt	r3, r3
 800823a:	f042 0202 	orrlt.w	r2, r2, #2
 800823e:	9307      	strge	r3, [sp, #28]
 8008240:	9307      	strlt	r3, [sp, #28]
 8008242:	bfb8      	it	lt
 8008244:	9204      	strlt	r2, [sp, #16]
 8008246:	7823      	ldrb	r3, [r4, #0]
 8008248:	2b2e      	cmp	r3, #46	; 0x2e
 800824a:	d10c      	bne.n	8008266 <_vfiprintf_r+0x176>
 800824c:	7863      	ldrb	r3, [r4, #1]
 800824e:	2b2a      	cmp	r3, #42	; 0x2a
 8008250:	d135      	bne.n	80082be <_vfiprintf_r+0x1ce>
 8008252:	9b03      	ldr	r3, [sp, #12]
 8008254:	1d1a      	adds	r2, r3, #4
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	9203      	str	r2, [sp, #12]
 800825a:	2b00      	cmp	r3, #0
 800825c:	bfb8      	it	lt
 800825e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008262:	3402      	adds	r4, #2
 8008264:	9305      	str	r3, [sp, #20]
 8008266:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800834c <_vfiprintf_r+0x25c>
 800826a:	7821      	ldrb	r1, [r4, #0]
 800826c:	2203      	movs	r2, #3
 800826e:	4650      	mov	r0, sl
 8008270:	f7f7 ffbe 	bl	80001f0 <memchr>
 8008274:	b140      	cbz	r0, 8008288 <_vfiprintf_r+0x198>
 8008276:	2340      	movs	r3, #64	; 0x40
 8008278:	eba0 000a 	sub.w	r0, r0, sl
 800827c:	fa03 f000 	lsl.w	r0, r3, r0
 8008280:	9b04      	ldr	r3, [sp, #16]
 8008282:	4303      	orrs	r3, r0
 8008284:	3401      	adds	r4, #1
 8008286:	9304      	str	r3, [sp, #16]
 8008288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800828c:	482c      	ldr	r0, [pc, #176]	; (8008340 <_vfiprintf_r+0x250>)
 800828e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008292:	2206      	movs	r2, #6
 8008294:	f7f7 ffac 	bl	80001f0 <memchr>
 8008298:	2800      	cmp	r0, #0
 800829a:	d03f      	beq.n	800831c <_vfiprintf_r+0x22c>
 800829c:	4b29      	ldr	r3, [pc, #164]	; (8008344 <_vfiprintf_r+0x254>)
 800829e:	bb1b      	cbnz	r3, 80082e8 <_vfiprintf_r+0x1f8>
 80082a0:	9b03      	ldr	r3, [sp, #12]
 80082a2:	3307      	adds	r3, #7
 80082a4:	f023 0307 	bic.w	r3, r3, #7
 80082a8:	3308      	adds	r3, #8
 80082aa:	9303      	str	r3, [sp, #12]
 80082ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ae:	443b      	add	r3, r7
 80082b0:	9309      	str	r3, [sp, #36]	; 0x24
 80082b2:	e767      	b.n	8008184 <_vfiprintf_r+0x94>
 80082b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80082b8:	460c      	mov	r4, r1
 80082ba:	2001      	movs	r0, #1
 80082bc:	e7a5      	b.n	800820a <_vfiprintf_r+0x11a>
 80082be:	2300      	movs	r3, #0
 80082c0:	3401      	adds	r4, #1
 80082c2:	9305      	str	r3, [sp, #20]
 80082c4:	4619      	mov	r1, r3
 80082c6:	f04f 0c0a 	mov.w	ip, #10
 80082ca:	4620      	mov	r0, r4
 80082cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082d0:	3a30      	subs	r2, #48	; 0x30
 80082d2:	2a09      	cmp	r2, #9
 80082d4:	d903      	bls.n	80082de <_vfiprintf_r+0x1ee>
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d0c5      	beq.n	8008266 <_vfiprintf_r+0x176>
 80082da:	9105      	str	r1, [sp, #20]
 80082dc:	e7c3      	b.n	8008266 <_vfiprintf_r+0x176>
 80082de:	fb0c 2101 	mla	r1, ip, r1, r2
 80082e2:	4604      	mov	r4, r0
 80082e4:	2301      	movs	r3, #1
 80082e6:	e7f0      	b.n	80082ca <_vfiprintf_r+0x1da>
 80082e8:	ab03      	add	r3, sp, #12
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	462a      	mov	r2, r5
 80082ee:	4b16      	ldr	r3, [pc, #88]	; (8008348 <_vfiprintf_r+0x258>)
 80082f0:	a904      	add	r1, sp, #16
 80082f2:	4630      	mov	r0, r6
 80082f4:	f7fd ffee 	bl	80062d4 <_printf_float>
 80082f8:	4607      	mov	r7, r0
 80082fa:	1c78      	adds	r0, r7, #1
 80082fc:	d1d6      	bne.n	80082ac <_vfiprintf_r+0x1bc>
 80082fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008300:	07d9      	lsls	r1, r3, #31
 8008302:	d405      	bmi.n	8008310 <_vfiprintf_r+0x220>
 8008304:	89ab      	ldrh	r3, [r5, #12]
 8008306:	059a      	lsls	r2, r3, #22
 8008308:	d402      	bmi.n	8008310 <_vfiprintf_r+0x220>
 800830a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800830c:	f000 faaf 	bl	800886e <__retarget_lock_release_recursive>
 8008310:	89ab      	ldrh	r3, [r5, #12]
 8008312:	065b      	lsls	r3, r3, #25
 8008314:	f53f af12 	bmi.w	800813c <_vfiprintf_r+0x4c>
 8008318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800831a:	e711      	b.n	8008140 <_vfiprintf_r+0x50>
 800831c:	ab03      	add	r3, sp, #12
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	462a      	mov	r2, r5
 8008322:	4b09      	ldr	r3, [pc, #36]	; (8008348 <_vfiprintf_r+0x258>)
 8008324:	a904      	add	r1, sp, #16
 8008326:	4630      	mov	r0, r6
 8008328:	f7fe fa78 	bl	800681c <_printf_i>
 800832c:	e7e4      	b.n	80082f8 <_vfiprintf_r+0x208>
 800832e:	bf00      	nop
 8008330:	0801c014 	.word	0x0801c014
 8008334:	0801c034 	.word	0x0801c034
 8008338:	0801bff4 	.word	0x0801bff4
 800833c:	0801bee2 	.word	0x0801bee2
 8008340:	0801beec 	.word	0x0801beec
 8008344:	080062d5 	.word	0x080062d5
 8008348:	080080cb 	.word	0x080080cb
 800834c:	0801bee8 	.word	0x0801bee8

08008350 <__swbuf_r>:
 8008350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008352:	460e      	mov	r6, r1
 8008354:	4614      	mov	r4, r2
 8008356:	4605      	mov	r5, r0
 8008358:	b118      	cbz	r0, 8008362 <__swbuf_r+0x12>
 800835a:	6983      	ldr	r3, [r0, #24]
 800835c:	b90b      	cbnz	r3, 8008362 <__swbuf_r+0x12>
 800835e:	f000 f9e7 	bl	8008730 <__sinit>
 8008362:	4b21      	ldr	r3, [pc, #132]	; (80083e8 <__swbuf_r+0x98>)
 8008364:	429c      	cmp	r4, r3
 8008366:	d12b      	bne.n	80083c0 <__swbuf_r+0x70>
 8008368:	686c      	ldr	r4, [r5, #4]
 800836a:	69a3      	ldr	r3, [r4, #24]
 800836c:	60a3      	str	r3, [r4, #8]
 800836e:	89a3      	ldrh	r3, [r4, #12]
 8008370:	071a      	lsls	r2, r3, #28
 8008372:	d52f      	bpl.n	80083d4 <__swbuf_r+0x84>
 8008374:	6923      	ldr	r3, [r4, #16]
 8008376:	b36b      	cbz	r3, 80083d4 <__swbuf_r+0x84>
 8008378:	6923      	ldr	r3, [r4, #16]
 800837a:	6820      	ldr	r0, [r4, #0]
 800837c:	1ac0      	subs	r0, r0, r3
 800837e:	6963      	ldr	r3, [r4, #20]
 8008380:	b2f6      	uxtb	r6, r6
 8008382:	4283      	cmp	r3, r0
 8008384:	4637      	mov	r7, r6
 8008386:	dc04      	bgt.n	8008392 <__swbuf_r+0x42>
 8008388:	4621      	mov	r1, r4
 800838a:	4628      	mov	r0, r5
 800838c:	f000 f93c 	bl	8008608 <_fflush_r>
 8008390:	bb30      	cbnz	r0, 80083e0 <__swbuf_r+0x90>
 8008392:	68a3      	ldr	r3, [r4, #8]
 8008394:	3b01      	subs	r3, #1
 8008396:	60a3      	str	r3, [r4, #8]
 8008398:	6823      	ldr	r3, [r4, #0]
 800839a:	1c5a      	adds	r2, r3, #1
 800839c:	6022      	str	r2, [r4, #0]
 800839e:	701e      	strb	r6, [r3, #0]
 80083a0:	6963      	ldr	r3, [r4, #20]
 80083a2:	3001      	adds	r0, #1
 80083a4:	4283      	cmp	r3, r0
 80083a6:	d004      	beq.n	80083b2 <__swbuf_r+0x62>
 80083a8:	89a3      	ldrh	r3, [r4, #12]
 80083aa:	07db      	lsls	r3, r3, #31
 80083ac:	d506      	bpl.n	80083bc <__swbuf_r+0x6c>
 80083ae:	2e0a      	cmp	r6, #10
 80083b0:	d104      	bne.n	80083bc <__swbuf_r+0x6c>
 80083b2:	4621      	mov	r1, r4
 80083b4:	4628      	mov	r0, r5
 80083b6:	f000 f927 	bl	8008608 <_fflush_r>
 80083ba:	b988      	cbnz	r0, 80083e0 <__swbuf_r+0x90>
 80083bc:	4638      	mov	r0, r7
 80083be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083c0:	4b0a      	ldr	r3, [pc, #40]	; (80083ec <__swbuf_r+0x9c>)
 80083c2:	429c      	cmp	r4, r3
 80083c4:	d101      	bne.n	80083ca <__swbuf_r+0x7a>
 80083c6:	68ac      	ldr	r4, [r5, #8]
 80083c8:	e7cf      	b.n	800836a <__swbuf_r+0x1a>
 80083ca:	4b09      	ldr	r3, [pc, #36]	; (80083f0 <__swbuf_r+0xa0>)
 80083cc:	429c      	cmp	r4, r3
 80083ce:	bf08      	it	eq
 80083d0:	68ec      	ldreq	r4, [r5, #12]
 80083d2:	e7ca      	b.n	800836a <__swbuf_r+0x1a>
 80083d4:	4621      	mov	r1, r4
 80083d6:	4628      	mov	r0, r5
 80083d8:	f000 f81a 	bl	8008410 <__swsetup_r>
 80083dc:	2800      	cmp	r0, #0
 80083de:	d0cb      	beq.n	8008378 <__swbuf_r+0x28>
 80083e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80083e4:	e7ea      	b.n	80083bc <__swbuf_r+0x6c>
 80083e6:	bf00      	nop
 80083e8:	0801c014 	.word	0x0801c014
 80083ec:	0801c034 	.word	0x0801c034
 80083f0:	0801bff4 	.word	0x0801bff4

080083f4 <__ascii_wctomb>:
 80083f4:	b149      	cbz	r1, 800840a <__ascii_wctomb+0x16>
 80083f6:	2aff      	cmp	r2, #255	; 0xff
 80083f8:	bf85      	ittet	hi
 80083fa:	238a      	movhi	r3, #138	; 0x8a
 80083fc:	6003      	strhi	r3, [r0, #0]
 80083fe:	700a      	strbls	r2, [r1, #0]
 8008400:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008404:	bf98      	it	ls
 8008406:	2001      	movls	r0, #1
 8008408:	4770      	bx	lr
 800840a:	4608      	mov	r0, r1
 800840c:	4770      	bx	lr
	...

08008410 <__swsetup_r>:
 8008410:	4b32      	ldr	r3, [pc, #200]	; (80084dc <__swsetup_r+0xcc>)
 8008412:	b570      	push	{r4, r5, r6, lr}
 8008414:	681d      	ldr	r5, [r3, #0]
 8008416:	4606      	mov	r6, r0
 8008418:	460c      	mov	r4, r1
 800841a:	b125      	cbz	r5, 8008426 <__swsetup_r+0x16>
 800841c:	69ab      	ldr	r3, [r5, #24]
 800841e:	b913      	cbnz	r3, 8008426 <__swsetup_r+0x16>
 8008420:	4628      	mov	r0, r5
 8008422:	f000 f985 	bl	8008730 <__sinit>
 8008426:	4b2e      	ldr	r3, [pc, #184]	; (80084e0 <__swsetup_r+0xd0>)
 8008428:	429c      	cmp	r4, r3
 800842a:	d10f      	bne.n	800844c <__swsetup_r+0x3c>
 800842c:	686c      	ldr	r4, [r5, #4]
 800842e:	89a3      	ldrh	r3, [r4, #12]
 8008430:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008434:	0719      	lsls	r1, r3, #28
 8008436:	d42c      	bmi.n	8008492 <__swsetup_r+0x82>
 8008438:	06dd      	lsls	r5, r3, #27
 800843a:	d411      	bmi.n	8008460 <__swsetup_r+0x50>
 800843c:	2309      	movs	r3, #9
 800843e:	6033      	str	r3, [r6, #0]
 8008440:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008444:	81a3      	strh	r3, [r4, #12]
 8008446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800844a:	e03e      	b.n	80084ca <__swsetup_r+0xba>
 800844c:	4b25      	ldr	r3, [pc, #148]	; (80084e4 <__swsetup_r+0xd4>)
 800844e:	429c      	cmp	r4, r3
 8008450:	d101      	bne.n	8008456 <__swsetup_r+0x46>
 8008452:	68ac      	ldr	r4, [r5, #8]
 8008454:	e7eb      	b.n	800842e <__swsetup_r+0x1e>
 8008456:	4b24      	ldr	r3, [pc, #144]	; (80084e8 <__swsetup_r+0xd8>)
 8008458:	429c      	cmp	r4, r3
 800845a:	bf08      	it	eq
 800845c:	68ec      	ldreq	r4, [r5, #12]
 800845e:	e7e6      	b.n	800842e <__swsetup_r+0x1e>
 8008460:	0758      	lsls	r0, r3, #29
 8008462:	d512      	bpl.n	800848a <__swsetup_r+0x7a>
 8008464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008466:	b141      	cbz	r1, 800847a <__swsetup_r+0x6a>
 8008468:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800846c:	4299      	cmp	r1, r3
 800846e:	d002      	beq.n	8008476 <__swsetup_r+0x66>
 8008470:	4630      	mov	r0, r6
 8008472:	f7ff fd0b 	bl	8007e8c <_free_r>
 8008476:	2300      	movs	r3, #0
 8008478:	6363      	str	r3, [r4, #52]	; 0x34
 800847a:	89a3      	ldrh	r3, [r4, #12]
 800847c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008480:	81a3      	strh	r3, [r4, #12]
 8008482:	2300      	movs	r3, #0
 8008484:	6063      	str	r3, [r4, #4]
 8008486:	6923      	ldr	r3, [r4, #16]
 8008488:	6023      	str	r3, [r4, #0]
 800848a:	89a3      	ldrh	r3, [r4, #12]
 800848c:	f043 0308 	orr.w	r3, r3, #8
 8008490:	81a3      	strh	r3, [r4, #12]
 8008492:	6923      	ldr	r3, [r4, #16]
 8008494:	b94b      	cbnz	r3, 80084aa <__swsetup_r+0x9a>
 8008496:	89a3      	ldrh	r3, [r4, #12]
 8008498:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800849c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084a0:	d003      	beq.n	80084aa <__swsetup_r+0x9a>
 80084a2:	4621      	mov	r1, r4
 80084a4:	4630      	mov	r0, r6
 80084a6:	f000 fa07 	bl	80088b8 <__smakebuf_r>
 80084aa:	89a0      	ldrh	r0, [r4, #12]
 80084ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084b0:	f010 0301 	ands.w	r3, r0, #1
 80084b4:	d00a      	beq.n	80084cc <__swsetup_r+0xbc>
 80084b6:	2300      	movs	r3, #0
 80084b8:	60a3      	str	r3, [r4, #8]
 80084ba:	6963      	ldr	r3, [r4, #20]
 80084bc:	425b      	negs	r3, r3
 80084be:	61a3      	str	r3, [r4, #24]
 80084c0:	6923      	ldr	r3, [r4, #16]
 80084c2:	b943      	cbnz	r3, 80084d6 <__swsetup_r+0xc6>
 80084c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80084c8:	d1ba      	bne.n	8008440 <__swsetup_r+0x30>
 80084ca:	bd70      	pop	{r4, r5, r6, pc}
 80084cc:	0781      	lsls	r1, r0, #30
 80084ce:	bf58      	it	pl
 80084d0:	6963      	ldrpl	r3, [r4, #20]
 80084d2:	60a3      	str	r3, [r4, #8]
 80084d4:	e7f4      	b.n	80084c0 <__swsetup_r+0xb0>
 80084d6:	2000      	movs	r0, #0
 80084d8:	e7f7      	b.n	80084ca <__swsetup_r+0xba>
 80084da:	bf00      	nop
 80084dc:	2000000c 	.word	0x2000000c
 80084e0:	0801c014 	.word	0x0801c014
 80084e4:	0801c034 	.word	0x0801c034
 80084e8:	0801bff4 	.word	0x0801bff4

080084ec <abort>:
 80084ec:	b508      	push	{r3, lr}
 80084ee:	2006      	movs	r0, #6
 80084f0:	f000 fa4a 	bl	8008988 <raise>
 80084f4:	2001      	movs	r0, #1
 80084f6:	f7f9 fa6d 	bl	80019d4 <_exit>
	...

080084fc <__sflush_r>:
 80084fc:	898a      	ldrh	r2, [r1, #12]
 80084fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008502:	4605      	mov	r5, r0
 8008504:	0710      	lsls	r0, r2, #28
 8008506:	460c      	mov	r4, r1
 8008508:	d458      	bmi.n	80085bc <__sflush_r+0xc0>
 800850a:	684b      	ldr	r3, [r1, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	dc05      	bgt.n	800851c <__sflush_r+0x20>
 8008510:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008512:	2b00      	cmp	r3, #0
 8008514:	dc02      	bgt.n	800851c <__sflush_r+0x20>
 8008516:	2000      	movs	r0, #0
 8008518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800851c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800851e:	2e00      	cmp	r6, #0
 8008520:	d0f9      	beq.n	8008516 <__sflush_r+0x1a>
 8008522:	2300      	movs	r3, #0
 8008524:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008528:	682f      	ldr	r7, [r5, #0]
 800852a:	602b      	str	r3, [r5, #0]
 800852c:	d032      	beq.n	8008594 <__sflush_r+0x98>
 800852e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008530:	89a3      	ldrh	r3, [r4, #12]
 8008532:	075a      	lsls	r2, r3, #29
 8008534:	d505      	bpl.n	8008542 <__sflush_r+0x46>
 8008536:	6863      	ldr	r3, [r4, #4]
 8008538:	1ac0      	subs	r0, r0, r3
 800853a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800853c:	b10b      	cbz	r3, 8008542 <__sflush_r+0x46>
 800853e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008540:	1ac0      	subs	r0, r0, r3
 8008542:	2300      	movs	r3, #0
 8008544:	4602      	mov	r2, r0
 8008546:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008548:	6a21      	ldr	r1, [r4, #32]
 800854a:	4628      	mov	r0, r5
 800854c:	47b0      	blx	r6
 800854e:	1c43      	adds	r3, r0, #1
 8008550:	89a3      	ldrh	r3, [r4, #12]
 8008552:	d106      	bne.n	8008562 <__sflush_r+0x66>
 8008554:	6829      	ldr	r1, [r5, #0]
 8008556:	291d      	cmp	r1, #29
 8008558:	d82c      	bhi.n	80085b4 <__sflush_r+0xb8>
 800855a:	4a2a      	ldr	r2, [pc, #168]	; (8008604 <__sflush_r+0x108>)
 800855c:	40ca      	lsrs	r2, r1
 800855e:	07d6      	lsls	r6, r2, #31
 8008560:	d528      	bpl.n	80085b4 <__sflush_r+0xb8>
 8008562:	2200      	movs	r2, #0
 8008564:	6062      	str	r2, [r4, #4]
 8008566:	04d9      	lsls	r1, r3, #19
 8008568:	6922      	ldr	r2, [r4, #16]
 800856a:	6022      	str	r2, [r4, #0]
 800856c:	d504      	bpl.n	8008578 <__sflush_r+0x7c>
 800856e:	1c42      	adds	r2, r0, #1
 8008570:	d101      	bne.n	8008576 <__sflush_r+0x7a>
 8008572:	682b      	ldr	r3, [r5, #0]
 8008574:	b903      	cbnz	r3, 8008578 <__sflush_r+0x7c>
 8008576:	6560      	str	r0, [r4, #84]	; 0x54
 8008578:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800857a:	602f      	str	r7, [r5, #0]
 800857c:	2900      	cmp	r1, #0
 800857e:	d0ca      	beq.n	8008516 <__sflush_r+0x1a>
 8008580:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008584:	4299      	cmp	r1, r3
 8008586:	d002      	beq.n	800858e <__sflush_r+0x92>
 8008588:	4628      	mov	r0, r5
 800858a:	f7ff fc7f 	bl	8007e8c <_free_r>
 800858e:	2000      	movs	r0, #0
 8008590:	6360      	str	r0, [r4, #52]	; 0x34
 8008592:	e7c1      	b.n	8008518 <__sflush_r+0x1c>
 8008594:	6a21      	ldr	r1, [r4, #32]
 8008596:	2301      	movs	r3, #1
 8008598:	4628      	mov	r0, r5
 800859a:	47b0      	blx	r6
 800859c:	1c41      	adds	r1, r0, #1
 800859e:	d1c7      	bne.n	8008530 <__sflush_r+0x34>
 80085a0:	682b      	ldr	r3, [r5, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d0c4      	beq.n	8008530 <__sflush_r+0x34>
 80085a6:	2b1d      	cmp	r3, #29
 80085a8:	d001      	beq.n	80085ae <__sflush_r+0xb2>
 80085aa:	2b16      	cmp	r3, #22
 80085ac:	d101      	bne.n	80085b2 <__sflush_r+0xb6>
 80085ae:	602f      	str	r7, [r5, #0]
 80085b0:	e7b1      	b.n	8008516 <__sflush_r+0x1a>
 80085b2:	89a3      	ldrh	r3, [r4, #12]
 80085b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085b8:	81a3      	strh	r3, [r4, #12]
 80085ba:	e7ad      	b.n	8008518 <__sflush_r+0x1c>
 80085bc:	690f      	ldr	r7, [r1, #16]
 80085be:	2f00      	cmp	r7, #0
 80085c0:	d0a9      	beq.n	8008516 <__sflush_r+0x1a>
 80085c2:	0793      	lsls	r3, r2, #30
 80085c4:	680e      	ldr	r6, [r1, #0]
 80085c6:	bf08      	it	eq
 80085c8:	694b      	ldreq	r3, [r1, #20]
 80085ca:	600f      	str	r7, [r1, #0]
 80085cc:	bf18      	it	ne
 80085ce:	2300      	movne	r3, #0
 80085d0:	eba6 0807 	sub.w	r8, r6, r7
 80085d4:	608b      	str	r3, [r1, #8]
 80085d6:	f1b8 0f00 	cmp.w	r8, #0
 80085da:	dd9c      	ble.n	8008516 <__sflush_r+0x1a>
 80085dc:	6a21      	ldr	r1, [r4, #32]
 80085de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80085e0:	4643      	mov	r3, r8
 80085e2:	463a      	mov	r2, r7
 80085e4:	4628      	mov	r0, r5
 80085e6:	47b0      	blx	r6
 80085e8:	2800      	cmp	r0, #0
 80085ea:	dc06      	bgt.n	80085fa <__sflush_r+0xfe>
 80085ec:	89a3      	ldrh	r3, [r4, #12]
 80085ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085f2:	81a3      	strh	r3, [r4, #12]
 80085f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085f8:	e78e      	b.n	8008518 <__sflush_r+0x1c>
 80085fa:	4407      	add	r7, r0
 80085fc:	eba8 0800 	sub.w	r8, r8, r0
 8008600:	e7e9      	b.n	80085d6 <__sflush_r+0xda>
 8008602:	bf00      	nop
 8008604:	20400001 	.word	0x20400001

08008608 <_fflush_r>:
 8008608:	b538      	push	{r3, r4, r5, lr}
 800860a:	690b      	ldr	r3, [r1, #16]
 800860c:	4605      	mov	r5, r0
 800860e:	460c      	mov	r4, r1
 8008610:	b913      	cbnz	r3, 8008618 <_fflush_r+0x10>
 8008612:	2500      	movs	r5, #0
 8008614:	4628      	mov	r0, r5
 8008616:	bd38      	pop	{r3, r4, r5, pc}
 8008618:	b118      	cbz	r0, 8008622 <_fflush_r+0x1a>
 800861a:	6983      	ldr	r3, [r0, #24]
 800861c:	b90b      	cbnz	r3, 8008622 <_fflush_r+0x1a>
 800861e:	f000 f887 	bl	8008730 <__sinit>
 8008622:	4b14      	ldr	r3, [pc, #80]	; (8008674 <_fflush_r+0x6c>)
 8008624:	429c      	cmp	r4, r3
 8008626:	d11b      	bne.n	8008660 <_fflush_r+0x58>
 8008628:	686c      	ldr	r4, [r5, #4]
 800862a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d0ef      	beq.n	8008612 <_fflush_r+0xa>
 8008632:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008634:	07d0      	lsls	r0, r2, #31
 8008636:	d404      	bmi.n	8008642 <_fflush_r+0x3a>
 8008638:	0599      	lsls	r1, r3, #22
 800863a:	d402      	bmi.n	8008642 <_fflush_r+0x3a>
 800863c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800863e:	f000 f915 	bl	800886c <__retarget_lock_acquire_recursive>
 8008642:	4628      	mov	r0, r5
 8008644:	4621      	mov	r1, r4
 8008646:	f7ff ff59 	bl	80084fc <__sflush_r>
 800864a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800864c:	07da      	lsls	r2, r3, #31
 800864e:	4605      	mov	r5, r0
 8008650:	d4e0      	bmi.n	8008614 <_fflush_r+0xc>
 8008652:	89a3      	ldrh	r3, [r4, #12]
 8008654:	059b      	lsls	r3, r3, #22
 8008656:	d4dd      	bmi.n	8008614 <_fflush_r+0xc>
 8008658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800865a:	f000 f908 	bl	800886e <__retarget_lock_release_recursive>
 800865e:	e7d9      	b.n	8008614 <_fflush_r+0xc>
 8008660:	4b05      	ldr	r3, [pc, #20]	; (8008678 <_fflush_r+0x70>)
 8008662:	429c      	cmp	r4, r3
 8008664:	d101      	bne.n	800866a <_fflush_r+0x62>
 8008666:	68ac      	ldr	r4, [r5, #8]
 8008668:	e7df      	b.n	800862a <_fflush_r+0x22>
 800866a:	4b04      	ldr	r3, [pc, #16]	; (800867c <_fflush_r+0x74>)
 800866c:	429c      	cmp	r4, r3
 800866e:	bf08      	it	eq
 8008670:	68ec      	ldreq	r4, [r5, #12]
 8008672:	e7da      	b.n	800862a <_fflush_r+0x22>
 8008674:	0801c014 	.word	0x0801c014
 8008678:	0801c034 	.word	0x0801c034
 800867c:	0801bff4 	.word	0x0801bff4

08008680 <std>:
 8008680:	2300      	movs	r3, #0
 8008682:	b510      	push	{r4, lr}
 8008684:	4604      	mov	r4, r0
 8008686:	e9c0 3300 	strd	r3, r3, [r0]
 800868a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800868e:	6083      	str	r3, [r0, #8]
 8008690:	8181      	strh	r1, [r0, #12]
 8008692:	6643      	str	r3, [r0, #100]	; 0x64
 8008694:	81c2      	strh	r2, [r0, #14]
 8008696:	6183      	str	r3, [r0, #24]
 8008698:	4619      	mov	r1, r3
 800869a:	2208      	movs	r2, #8
 800869c:	305c      	adds	r0, #92	; 0x5c
 800869e:	f7fd fd71 	bl	8006184 <memset>
 80086a2:	4b05      	ldr	r3, [pc, #20]	; (80086b8 <std+0x38>)
 80086a4:	6263      	str	r3, [r4, #36]	; 0x24
 80086a6:	4b05      	ldr	r3, [pc, #20]	; (80086bc <std+0x3c>)
 80086a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80086aa:	4b05      	ldr	r3, [pc, #20]	; (80086c0 <std+0x40>)
 80086ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086ae:	4b05      	ldr	r3, [pc, #20]	; (80086c4 <std+0x44>)
 80086b0:	6224      	str	r4, [r4, #32]
 80086b2:	6323      	str	r3, [r4, #48]	; 0x30
 80086b4:	bd10      	pop	{r4, pc}
 80086b6:	bf00      	nop
 80086b8:	080089c1 	.word	0x080089c1
 80086bc:	080089e3 	.word	0x080089e3
 80086c0:	08008a1b 	.word	0x08008a1b
 80086c4:	08008a3f 	.word	0x08008a3f

080086c8 <_cleanup_r>:
 80086c8:	4901      	ldr	r1, [pc, #4]	; (80086d0 <_cleanup_r+0x8>)
 80086ca:	f000 b8af 	b.w	800882c <_fwalk_reent>
 80086ce:	bf00      	nop
 80086d0:	08008609 	.word	0x08008609

080086d4 <__sfmoreglue>:
 80086d4:	b570      	push	{r4, r5, r6, lr}
 80086d6:	1e4a      	subs	r2, r1, #1
 80086d8:	2568      	movs	r5, #104	; 0x68
 80086da:	4355      	muls	r5, r2
 80086dc:	460e      	mov	r6, r1
 80086de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80086e2:	f7ff fc23 	bl	8007f2c <_malloc_r>
 80086e6:	4604      	mov	r4, r0
 80086e8:	b140      	cbz	r0, 80086fc <__sfmoreglue+0x28>
 80086ea:	2100      	movs	r1, #0
 80086ec:	e9c0 1600 	strd	r1, r6, [r0]
 80086f0:	300c      	adds	r0, #12
 80086f2:	60a0      	str	r0, [r4, #8]
 80086f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80086f8:	f7fd fd44 	bl	8006184 <memset>
 80086fc:	4620      	mov	r0, r4
 80086fe:	bd70      	pop	{r4, r5, r6, pc}

08008700 <__sfp_lock_acquire>:
 8008700:	4801      	ldr	r0, [pc, #4]	; (8008708 <__sfp_lock_acquire+0x8>)
 8008702:	f000 b8b3 	b.w	800886c <__retarget_lock_acquire_recursive>
 8008706:	bf00      	nop
 8008708:	20001bdc 	.word	0x20001bdc

0800870c <__sfp_lock_release>:
 800870c:	4801      	ldr	r0, [pc, #4]	; (8008714 <__sfp_lock_release+0x8>)
 800870e:	f000 b8ae 	b.w	800886e <__retarget_lock_release_recursive>
 8008712:	bf00      	nop
 8008714:	20001bdc 	.word	0x20001bdc

08008718 <__sinit_lock_acquire>:
 8008718:	4801      	ldr	r0, [pc, #4]	; (8008720 <__sinit_lock_acquire+0x8>)
 800871a:	f000 b8a7 	b.w	800886c <__retarget_lock_acquire_recursive>
 800871e:	bf00      	nop
 8008720:	20001bd7 	.word	0x20001bd7

08008724 <__sinit_lock_release>:
 8008724:	4801      	ldr	r0, [pc, #4]	; (800872c <__sinit_lock_release+0x8>)
 8008726:	f000 b8a2 	b.w	800886e <__retarget_lock_release_recursive>
 800872a:	bf00      	nop
 800872c:	20001bd7 	.word	0x20001bd7

08008730 <__sinit>:
 8008730:	b510      	push	{r4, lr}
 8008732:	4604      	mov	r4, r0
 8008734:	f7ff fff0 	bl	8008718 <__sinit_lock_acquire>
 8008738:	69a3      	ldr	r3, [r4, #24]
 800873a:	b11b      	cbz	r3, 8008744 <__sinit+0x14>
 800873c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008740:	f7ff bff0 	b.w	8008724 <__sinit_lock_release>
 8008744:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008748:	6523      	str	r3, [r4, #80]	; 0x50
 800874a:	4b13      	ldr	r3, [pc, #76]	; (8008798 <__sinit+0x68>)
 800874c:	4a13      	ldr	r2, [pc, #76]	; (800879c <__sinit+0x6c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	62a2      	str	r2, [r4, #40]	; 0x28
 8008752:	42a3      	cmp	r3, r4
 8008754:	bf04      	itt	eq
 8008756:	2301      	moveq	r3, #1
 8008758:	61a3      	streq	r3, [r4, #24]
 800875a:	4620      	mov	r0, r4
 800875c:	f000 f820 	bl	80087a0 <__sfp>
 8008760:	6060      	str	r0, [r4, #4]
 8008762:	4620      	mov	r0, r4
 8008764:	f000 f81c 	bl	80087a0 <__sfp>
 8008768:	60a0      	str	r0, [r4, #8]
 800876a:	4620      	mov	r0, r4
 800876c:	f000 f818 	bl	80087a0 <__sfp>
 8008770:	2200      	movs	r2, #0
 8008772:	60e0      	str	r0, [r4, #12]
 8008774:	2104      	movs	r1, #4
 8008776:	6860      	ldr	r0, [r4, #4]
 8008778:	f7ff ff82 	bl	8008680 <std>
 800877c:	68a0      	ldr	r0, [r4, #8]
 800877e:	2201      	movs	r2, #1
 8008780:	2109      	movs	r1, #9
 8008782:	f7ff ff7d 	bl	8008680 <std>
 8008786:	68e0      	ldr	r0, [r4, #12]
 8008788:	2202      	movs	r2, #2
 800878a:	2112      	movs	r1, #18
 800878c:	f7ff ff78 	bl	8008680 <std>
 8008790:	2301      	movs	r3, #1
 8008792:	61a3      	str	r3, [r4, #24]
 8008794:	e7d2      	b.n	800873c <__sinit+0xc>
 8008796:	bf00      	nop
 8008798:	0801bc70 	.word	0x0801bc70
 800879c:	080086c9 	.word	0x080086c9

080087a0 <__sfp>:
 80087a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a2:	4607      	mov	r7, r0
 80087a4:	f7ff ffac 	bl	8008700 <__sfp_lock_acquire>
 80087a8:	4b1e      	ldr	r3, [pc, #120]	; (8008824 <__sfp+0x84>)
 80087aa:	681e      	ldr	r6, [r3, #0]
 80087ac:	69b3      	ldr	r3, [r6, #24]
 80087ae:	b913      	cbnz	r3, 80087b6 <__sfp+0x16>
 80087b0:	4630      	mov	r0, r6
 80087b2:	f7ff ffbd 	bl	8008730 <__sinit>
 80087b6:	3648      	adds	r6, #72	; 0x48
 80087b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80087bc:	3b01      	subs	r3, #1
 80087be:	d503      	bpl.n	80087c8 <__sfp+0x28>
 80087c0:	6833      	ldr	r3, [r6, #0]
 80087c2:	b30b      	cbz	r3, 8008808 <__sfp+0x68>
 80087c4:	6836      	ldr	r6, [r6, #0]
 80087c6:	e7f7      	b.n	80087b8 <__sfp+0x18>
 80087c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80087cc:	b9d5      	cbnz	r5, 8008804 <__sfp+0x64>
 80087ce:	4b16      	ldr	r3, [pc, #88]	; (8008828 <__sfp+0x88>)
 80087d0:	60e3      	str	r3, [r4, #12]
 80087d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80087d6:	6665      	str	r5, [r4, #100]	; 0x64
 80087d8:	f000 f847 	bl	800886a <__retarget_lock_init_recursive>
 80087dc:	f7ff ff96 	bl	800870c <__sfp_lock_release>
 80087e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80087e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80087e8:	6025      	str	r5, [r4, #0]
 80087ea:	61a5      	str	r5, [r4, #24]
 80087ec:	2208      	movs	r2, #8
 80087ee:	4629      	mov	r1, r5
 80087f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80087f4:	f7fd fcc6 	bl	8006184 <memset>
 80087f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80087fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008800:	4620      	mov	r0, r4
 8008802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008804:	3468      	adds	r4, #104	; 0x68
 8008806:	e7d9      	b.n	80087bc <__sfp+0x1c>
 8008808:	2104      	movs	r1, #4
 800880a:	4638      	mov	r0, r7
 800880c:	f7ff ff62 	bl	80086d4 <__sfmoreglue>
 8008810:	4604      	mov	r4, r0
 8008812:	6030      	str	r0, [r6, #0]
 8008814:	2800      	cmp	r0, #0
 8008816:	d1d5      	bne.n	80087c4 <__sfp+0x24>
 8008818:	f7ff ff78 	bl	800870c <__sfp_lock_release>
 800881c:	230c      	movs	r3, #12
 800881e:	603b      	str	r3, [r7, #0]
 8008820:	e7ee      	b.n	8008800 <__sfp+0x60>
 8008822:	bf00      	nop
 8008824:	0801bc70 	.word	0x0801bc70
 8008828:	ffff0001 	.word	0xffff0001

0800882c <_fwalk_reent>:
 800882c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008830:	4606      	mov	r6, r0
 8008832:	4688      	mov	r8, r1
 8008834:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008838:	2700      	movs	r7, #0
 800883a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800883e:	f1b9 0901 	subs.w	r9, r9, #1
 8008842:	d505      	bpl.n	8008850 <_fwalk_reent+0x24>
 8008844:	6824      	ldr	r4, [r4, #0]
 8008846:	2c00      	cmp	r4, #0
 8008848:	d1f7      	bne.n	800883a <_fwalk_reent+0xe>
 800884a:	4638      	mov	r0, r7
 800884c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008850:	89ab      	ldrh	r3, [r5, #12]
 8008852:	2b01      	cmp	r3, #1
 8008854:	d907      	bls.n	8008866 <_fwalk_reent+0x3a>
 8008856:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800885a:	3301      	adds	r3, #1
 800885c:	d003      	beq.n	8008866 <_fwalk_reent+0x3a>
 800885e:	4629      	mov	r1, r5
 8008860:	4630      	mov	r0, r6
 8008862:	47c0      	blx	r8
 8008864:	4307      	orrs	r7, r0
 8008866:	3568      	adds	r5, #104	; 0x68
 8008868:	e7e9      	b.n	800883e <_fwalk_reent+0x12>

0800886a <__retarget_lock_init_recursive>:
 800886a:	4770      	bx	lr

0800886c <__retarget_lock_acquire_recursive>:
 800886c:	4770      	bx	lr

0800886e <__retarget_lock_release_recursive>:
 800886e:	4770      	bx	lr

08008870 <__swhatbuf_r>:
 8008870:	b570      	push	{r4, r5, r6, lr}
 8008872:	460e      	mov	r6, r1
 8008874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008878:	2900      	cmp	r1, #0
 800887a:	b096      	sub	sp, #88	; 0x58
 800887c:	4614      	mov	r4, r2
 800887e:	461d      	mov	r5, r3
 8008880:	da07      	bge.n	8008892 <__swhatbuf_r+0x22>
 8008882:	2300      	movs	r3, #0
 8008884:	602b      	str	r3, [r5, #0]
 8008886:	89b3      	ldrh	r3, [r6, #12]
 8008888:	061a      	lsls	r2, r3, #24
 800888a:	d410      	bmi.n	80088ae <__swhatbuf_r+0x3e>
 800888c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008890:	e00e      	b.n	80088b0 <__swhatbuf_r+0x40>
 8008892:	466a      	mov	r2, sp
 8008894:	f000 f8fa 	bl	8008a8c <_fstat_r>
 8008898:	2800      	cmp	r0, #0
 800889a:	dbf2      	blt.n	8008882 <__swhatbuf_r+0x12>
 800889c:	9a01      	ldr	r2, [sp, #4]
 800889e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80088a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80088a6:	425a      	negs	r2, r3
 80088a8:	415a      	adcs	r2, r3
 80088aa:	602a      	str	r2, [r5, #0]
 80088ac:	e7ee      	b.n	800888c <__swhatbuf_r+0x1c>
 80088ae:	2340      	movs	r3, #64	; 0x40
 80088b0:	2000      	movs	r0, #0
 80088b2:	6023      	str	r3, [r4, #0]
 80088b4:	b016      	add	sp, #88	; 0x58
 80088b6:	bd70      	pop	{r4, r5, r6, pc}

080088b8 <__smakebuf_r>:
 80088b8:	898b      	ldrh	r3, [r1, #12]
 80088ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088bc:	079d      	lsls	r5, r3, #30
 80088be:	4606      	mov	r6, r0
 80088c0:	460c      	mov	r4, r1
 80088c2:	d507      	bpl.n	80088d4 <__smakebuf_r+0x1c>
 80088c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80088c8:	6023      	str	r3, [r4, #0]
 80088ca:	6123      	str	r3, [r4, #16]
 80088cc:	2301      	movs	r3, #1
 80088ce:	6163      	str	r3, [r4, #20]
 80088d0:	b002      	add	sp, #8
 80088d2:	bd70      	pop	{r4, r5, r6, pc}
 80088d4:	ab01      	add	r3, sp, #4
 80088d6:	466a      	mov	r2, sp
 80088d8:	f7ff ffca 	bl	8008870 <__swhatbuf_r>
 80088dc:	9900      	ldr	r1, [sp, #0]
 80088de:	4605      	mov	r5, r0
 80088e0:	4630      	mov	r0, r6
 80088e2:	f7ff fb23 	bl	8007f2c <_malloc_r>
 80088e6:	b948      	cbnz	r0, 80088fc <__smakebuf_r+0x44>
 80088e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ec:	059a      	lsls	r2, r3, #22
 80088ee:	d4ef      	bmi.n	80088d0 <__smakebuf_r+0x18>
 80088f0:	f023 0303 	bic.w	r3, r3, #3
 80088f4:	f043 0302 	orr.w	r3, r3, #2
 80088f8:	81a3      	strh	r3, [r4, #12]
 80088fa:	e7e3      	b.n	80088c4 <__smakebuf_r+0xc>
 80088fc:	4b0d      	ldr	r3, [pc, #52]	; (8008934 <__smakebuf_r+0x7c>)
 80088fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8008900:	89a3      	ldrh	r3, [r4, #12]
 8008902:	6020      	str	r0, [r4, #0]
 8008904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008908:	81a3      	strh	r3, [r4, #12]
 800890a:	9b00      	ldr	r3, [sp, #0]
 800890c:	6163      	str	r3, [r4, #20]
 800890e:	9b01      	ldr	r3, [sp, #4]
 8008910:	6120      	str	r0, [r4, #16]
 8008912:	b15b      	cbz	r3, 800892c <__smakebuf_r+0x74>
 8008914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008918:	4630      	mov	r0, r6
 800891a:	f000 f8c9 	bl	8008ab0 <_isatty_r>
 800891e:	b128      	cbz	r0, 800892c <__smakebuf_r+0x74>
 8008920:	89a3      	ldrh	r3, [r4, #12]
 8008922:	f023 0303 	bic.w	r3, r3, #3
 8008926:	f043 0301 	orr.w	r3, r3, #1
 800892a:	81a3      	strh	r3, [r4, #12]
 800892c:	89a0      	ldrh	r0, [r4, #12]
 800892e:	4305      	orrs	r5, r0
 8008930:	81a5      	strh	r5, [r4, #12]
 8008932:	e7cd      	b.n	80088d0 <__smakebuf_r+0x18>
 8008934:	080086c9 	.word	0x080086c9

08008938 <_raise_r>:
 8008938:	291f      	cmp	r1, #31
 800893a:	b538      	push	{r3, r4, r5, lr}
 800893c:	4604      	mov	r4, r0
 800893e:	460d      	mov	r5, r1
 8008940:	d904      	bls.n	800894c <_raise_r+0x14>
 8008942:	2316      	movs	r3, #22
 8008944:	6003      	str	r3, [r0, #0]
 8008946:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800894a:	bd38      	pop	{r3, r4, r5, pc}
 800894c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800894e:	b112      	cbz	r2, 8008956 <_raise_r+0x1e>
 8008950:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008954:	b94b      	cbnz	r3, 800896a <_raise_r+0x32>
 8008956:	4620      	mov	r0, r4
 8008958:	f000 f830 	bl	80089bc <_getpid_r>
 800895c:	462a      	mov	r2, r5
 800895e:	4601      	mov	r1, r0
 8008960:	4620      	mov	r0, r4
 8008962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008966:	f000 b817 	b.w	8008998 <_kill_r>
 800896a:	2b01      	cmp	r3, #1
 800896c:	d00a      	beq.n	8008984 <_raise_r+0x4c>
 800896e:	1c59      	adds	r1, r3, #1
 8008970:	d103      	bne.n	800897a <_raise_r+0x42>
 8008972:	2316      	movs	r3, #22
 8008974:	6003      	str	r3, [r0, #0]
 8008976:	2001      	movs	r0, #1
 8008978:	e7e7      	b.n	800894a <_raise_r+0x12>
 800897a:	2400      	movs	r4, #0
 800897c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008980:	4628      	mov	r0, r5
 8008982:	4798      	blx	r3
 8008984:	2000      	movs	r0, #0
 8008986:	e7e0      	b.n	800894a <_raise_r+0x12>

08008988 <raise>:
 8008988:	4b02      	ldr	r3, [pc, #8]	; (8008994 <raise+0xc>)
 800898a:	4601      	mov	r1, r0
 800898c:	6818      	ldr	r0, [r3, #0]
 800898e:	f7ff bfd3 	b.w	8008938 <_raise_r>
 8008992:	bf00      	nop
 8008994:	2000000c 	.word	0x2000000c

08008998 <_kill_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4d07      	ldr	r5, [pc, #28]	; (80089b8 <_kill_r+0x20>)
 800899c:	2300      	movs	r3, #0
 800899e:	4604      	mov	r4, r0
 80089a0:	4608      	mov	r0, r1
 80089a2:	4611      	mov	r1, r2
 80089a4:	602b      	str	r3, [r5, #0]
 80089a6:	f7f9 f805 	bl	80019b4 <_kill>
 80089aa:	1c43      	adds	r3, r0, #1
 80089ac:	d102      	bne.n	80089b4 <_kill_r+0x1c>
 80089ae:	682b      	ldr	r3, [r5, #0]
 80089b0:	b103      	cbz	r3, 80089b4 <_kill_r+0x1c>
 80089b2:	6023      	str	r3, [r4, #0]
 80089b4:	bd38      	pop	{r3, r4, r5, pc}
 80089b6:	bf00      	nop
 80089b8:	20001bd0 	.word	0x20001bd0

080089bc <_getpid_r>:
 80089bc:	f7f8 bff2 	b.w	80019a4 <_getpid>

080089c0 <__sread>:
 80089c0:	b510      	push	{r4, lr}
 80089c2:	460c      	mov	r4, r1
 80089c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089c8:	f000 f894 	bl	8008af4 <_read_r>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	bfab      	itete	ge
 80089d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089d2:	89a3      	ldrhlt	r3, [r4, #12]
 80089d4:	181b      	addge	r3, r3, r0
 80089d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089da:	bfac      	ite	ge
 80089dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80089de:	81a3      	strhlt	r3, [r4, #12]
 80089e0:	bd10      	pop	{r4, pc}

080089e2 <__swrite>:
 80089e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089e6:	461f      	mov	r7, r3
 80089e8:	898b      	ldrh	r3, [r1, #12]
 80089ea:	05db      	lsls	r3, r3, #23
 80089ec:	4605      	mov	r5, r0
 80089ee:	460c      	mov	r4, r1
 80089f0:	4616      	mov	r6, r2
 80089f2:	d505      	bpl.n	8008a00 <__swrite+0x1e>
 80089f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f8:	2302      	movs	r3, #2
 80089fa:	2200      	movs	r2, #0
 80089fc:	f000 f868 	bl	8008ad0 <_lseek_r>
 8008a00:	89a3      	ldrh	r3, [r4, #12]
 8008a02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a0a:	81a3      	strh	r3, [r4, #12]
 8008a0c:	4632      	mov	r2, r6
 8008a0e:	463b      	mov	r3, r7
 8008a10:	4628      	mov	r0, r5
 8008a12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a16:	f000 b817 	b.w	8008a48 <_write_r>

08008a1a <__sseek>:
 8008a1a:	b510      	push	{r4, lr}
 8008a1c:	460c      	mov	r4, r1
 8008a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a22:	f000 f855 	bl	8008ad0 <_lseek_r>
 8008a26:	1c43      	adds	r3, r0, #1
 8008a28:	89a3      	ldrh	r3, [r4, #12]
 8008a2a:	bf15      	itete	ne
 8008a2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a36:	81a3      	strheq	r3, [r4, #12]
 8008a38:	bf18      	it	ne
 8008a3a:	81a3      	strhne	r3, [r4, #12]
 8008a3c:	bd10      	pop	{r4, pc}

08008a3e <__sclose>:
 8008a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a42:	f000 b813 	b.w	8008a6c <_close_r>
	...

08008a48 <_write_r>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	4d07      	ldr	r5, [pc, #28]	; (8008a68 <_write_r+0x20>)
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	4608      	mov	r0, r1
 8008a50:	4611      	mov	r1, r2
 8008a52:	2200      	movs	r2, #0
 8008a54:	602a      	str	r2, [r5, #0]
 8008a56:	461a      	mov	r2, r3
 8008a58:	f7f8 ffe3 	bl	8001a22 <_write>
 8008a5c:	1c43      	adds	r3, r0, #1
 8008a5e:	d102      	bne.n	8008a66 <_write_r+0x1e>
 8008a60:	682b      	ldr	r3, [r5, #0]
 8008a62:	b103      	cbz	r3, 8008a66 <_write_r+0x1e>
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	bd38      	pop	{r3, r4, r5, pc}
 8008a68:	20001bd0 	.word	0x20001bd0

08008a6c <_close_r>:
 8008a6c:	b538      	push	{r3, r4, r5, lr}
 8008a6e:	4d06      	ldr	r5, [pc, #24]	; (8008a88 <_close_r+0x1c>)
 8008a70:	2300      	movs	r3, #0
 8008a72:	4604      	mov	r4, r0
 8008a74:	4608      	mov	r0, r1
 8008a76:	602b      	str	r3, [r5, #0]
 8008a78:	f7f8 ffef 	bl	8001a5a <_close>
 8008a7c:	1c43      	adds	r3, r0, #1
 8008a7e:	d102      	bne.n	8008a86 <_close_r+0x1a>
 8008a80:	682b      	ldr	r3, [r5, #0]
 8008a82:	b103      	cbz	r3, 8008a86 <_close_r+0x1a>
 8008a84:	6023      	str	r3, [r4, #0]
 8008a86:	bd38      	pop	{r3, r4, r5, pc}
 8008a88:	20001bd0 	.word	0x20001bd0

08008a8c <_fstat_r>:
 8008a8c:	b538      	push	{r3, r4, r5, lr}
 8008a8e:	4d07      	ldr	r5, [pc, #28]	; (8008aac <_fstat_r+0x20>)
 8008a90:	2300      	movs	r3, #0
 8008a92:	4604      	mov	r4, r0
 8008a94:	4608      	mov	r0, r1
 8008a96:	4611      	mov	r1, r2
 8008a98:	602b      	str	r3, [r5, #0]
 8008a9a:	f7f8 ffea 	bl	8001a72 <_fstat>
 8008a9e:	1c43      	adds	r3, r0, #1
 8008aa0:	d102      	bne.n	8008aa8 <_fstat_r+0x1c>
 8008aa2:	682b      	ldr	r3, [r5, #0]
 8008aa4:	b103      	cbz	r3, 8008aa8 <_fstat_r+0x1c>
 8008aa6:	6023      	str	r3, [r4, #0]
 8008aa8:	bd38      	pop	{r3, r4, r5, pc}
 8008aaa:	bf00      	nop
 8008aac:	20001bd0 	.word	0x20001bd0

08008ab0 <_isatty_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4d06      	ldr	r5, [pc, #24]	; (8008acc <_isatty_r+0x1c>)
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	4608      	mov	r0, r1
 8008aba:	602b      	str	r3, [r5, #0]
 8008abc:	f7f8 ffe9 	bl	8001a92 <_isatty>
 8008ac0:	1c43      	adds	r3, r0, #1
 8008ac2:	d102      	bne.n	8008aca <_isatty_r+0x1a>
 8008ac4:	682b      	ldr	r3, [r5, #0]
 8008ac6:	b103      	cbz	r3, 8008aca <_isatty_r+0x1a>
 8008ac8:	6023      	str	r3, [r4, #0]
 8008aca:	bd38      	pop	{r3, r4, r5, pc}
 8008acc:	20001bd0 	.word	0x20001bd0

08008ad0 <_lseek_r>:
 8008ad0:	b538      	push	{r3, r4, r5, lr}
 8008ad2:	4d07      	ldr	r5, [pc, #28]	; (8008af0 <_lseek_r+0x20>)
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	4608      	mov	r0, r1
 8008ad8:	4611      	mov	r1, r2
 8008ada:	2200      	movs	r2, #0
 8008adc:	602a      	str	r2, [r5, #0]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f7f8 ffe2 	bl	8001aa8 <_lseek>
 8008ae4:	1c43      	adds	r3, r0, #1
 8008ae6:	d102      	bne.n	8008aee <_lseek_r+0x1e>
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	b103      	cbz	r3, 8008aee <_lseek_r+0x1e>
 8008aec:	6023      	str	r3, [r4, #0]
 8008aee:	bd38      	pop	{r3, r4, r5, pc}
 8008af0:	20001bd0 	.word	0x20001bd0

08008af4 <_read_r>:
 8008af4:	b538      	push	{r3, r4, r5, lr}
 8008af6:	4d07      	ldr	r5, [pc, #28]	; (8008b14 <_read_r+0x20>)
 8008af8:	4604      	mov	r4, r0
 8008afa:	4608      	mov	r0, r1
 8008afc:	4611      	mov	r1, r2
 8008afe:	2200      	movs	r2, #0
 8008b00:	602a      	str	r2, [r5, #0]
 8008b02:	461a      	mov	r2, r3
 8008b04:	f7f8 ff70 	bl	80019e8 <_read>
 8008b08:	1c43      	adds	r3, r0, #1
 8008b0a:	d102      	bne.n	8008b12 <_read_r+0x1e>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	b103      	cbz	r3, 8008b12 <_read_r+0x1e>
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	bd38      	pop	{r3, r4, r5, pc}
 8008b14:	20001bd0 	.word	0x20001bd0

08008b18 <_init>:
 8008b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1a:	bf00      	nop
 8008b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b1e:	bc08      	pop	{r3}
 8008b20:	469e      	mov	lr, r3
 8008b22:	4770      	bx	lr

08008b24 <_fini>:
 8008b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b26:	bf00      	nop
 8008b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b2a:	bc08      	pop	{r3}
 8008b2c:	469e      	mov	lr, r3
 8008b2e:	4770      	bx	lr
