
magnetic_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b18  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013338  08006cb0  08006cb0  00016cb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019fe8  08019fe8  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08019fe8  08019fe8  00029fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019ff0  08019ff0  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019ff0  08019ff0  00029ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019ff4  08019ff4  00029ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08019ff8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019fc  200001dc  0801a1d4  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bd8  0801a1d4  00031bd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ca7  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c22  00000000  00000000  00043eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000948  00000000  00000000  00046ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e8  00000000  00000000  00047420  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016d34  00000000  00000000  00047d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad65  00000000  00000000  0005ea3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009272e  00000000  00000000  000697a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  000fbecf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c70  00000000  00000000  000fbfc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00004df4  00000000  00000000  000fec30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001dc 	.word	0x200001dc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006c98 	.word	0x08006c98

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001e0 	.word	0x200001e0
 80001d4:	08006c98 	.word	0x08006c98

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2iz>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d215      	bcs.n	8000af6 <__aeabi_d2iz+0x36>
 8000aca:	d511      	bpl.n	8000af0 <__aeabi_d2iz+0x30>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d912      	bls.n	8000afc <__aeabi_d2iz+0x3c>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	bf18      	it	ne
 8000aec:	4240      	negne	r0, r0
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d105      	bne.n	8000b08 <__aeabi_d2iz+0x48>
 8000afc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	bf08      	it	eq
 8000b02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2f>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b18:	bf24      	itt	cs
 8000b1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b22:	d90d      	bls.n	8000b40 <__aeabi_d2f+0x30>
 8000b24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b38:	bf08      	it	eq
 8000b3a:	f020 0001 	biceq.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b44:	d121      	bne.n	8000b8a <__aeabi_d2f+0x7a>
 8000b46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4a:	bfbc      	itt	lt
 8000b4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	4770      	bxlt	lr
 8000b52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5a:	f1c2 0218 	rsb	r2, r2, #24
 8000b5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b66:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6a:	bf18      	it	ne
 8000b6c:	f040 0001 	orrne.w	r0, r0, #1
 8000b70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b7c:	ea40 000c 	orr.w	r0, r0, ip
 8000b80:	fa23 f302 	lsr.w	r3, r3, r2
 8000b84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b88:	e7cc      	b.n	8000b24 <__aeabi_d2f+0x14>
 8000b8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8e:	d107      	bne.n	8000ba0 <__aeabi_d2f+0x90>
 8000b90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b94:	bf1e      	ittt	ne
 8000b96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9e:	4770      	bxne	lr
 8000ba0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f000 b972 	b.w	8000eac <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	9e08      	ldr	r6, [sp, #32]
 8000be6:	4604      	mov	r4, r0
 8000be8:	4688      	mov	r8, r1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d14b      	bne.n	8000c86 <__udivmoddi4+0xa6>
 8000bee:	428a      	cmp	r2, r1
 8000bf0:	4615      	mov	r5, r2
 8000bf2:	d967      	bls.n	8000cc4 <__udivmoddi4+0xe4>
 8000bf4:	fab2 f282 	clz	r2, r2
 8000bf8:	b14a      	cbz	r2, 8000c0e <__udivmoddi4+0x2e>
 8000bfa:	f1c2 0720 	rsb	r7, r2, #32
 8000bfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000c02:	fa20 f707 	lsr.w	r7, r0, r7
 8000c06:	4095      	lsls	r5, r2
 8000c08:	ea47 0803 	orr.w	r8, r7, r3
 8000c0c:	4094      	lsls	r4, r2
 8000c0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c12:	0c23      	lsrs	r3, r4, #16
 8000c14:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c18:	fa1f fc85 	uxth.w	ip, r5
 8000c1c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c20:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c24:	fb07 f10c 	mul.w	r1, r7, ip
 8000c28:	4299      	cmp	r1, r3
 8000c2a:	d909      	bls.n	8000c40 <__udivmoddi4+0x60>
 8000c2c:	18eb      	adds	r3, r5, r3
 8000c2e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c32:	f080 811b 	bcs.w	8000e6c <__udivmoddi4+0x28c>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 8118 	bls.w	8000e6c <__udivmoddi4+0x28c>
 8000c3c:	3f02      	subs	r7, #2
 8000c3e:	442b      	add	r3, r5
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c48:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c54:	45a4      	cmp	ip, r4
 8000c56:	d909      	bls.n	8000c6c <__udivmoddi4+0x8c>
 8000c58:	192c      	adds	r4, r5, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5e:	f080 8107 	bcs.w	8000e70 <__udivmoddi4+0x290>
 8000c62:	45a4      	cmp	ip, r4
 8000c64:	f240 8104 	bls.w	8000e70 <__udivmoddi4+0x290>
 8000c68:	3802      	subs	r0, #2
 8000c6a:	442c      	add	r4, r5
 8000c6c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c70:	eba4 040c 	sub.w	r4, r4, ip
 8000c74:	2700      	movs	r7, #0
 8000c76:	b11e      	cbz	r6, 8000c80 <__udivmoddi4+0xa0>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c80:	4639      	mov	r1, r7
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0xbe>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	f000 80eb 	beq.w	8000e66 <__udivmoddi4+0x286>
 8000c90:	2700      	movs	r7, #0
 8000c92:	e9c6 0100 	strd	r0, r1, [r6]
 8000c96:	4638      	mov	r0, r7
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f783 	clz	r7, r3
 8000ca2:	2f00      	cmp	r7, #0
 8000ca4:	d147      	bne.n	8000d36 <__udivmoddi4+0x156>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xd0>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80fa 	bhi.w	8000ea4 <__udivmoddi4+0x2c4>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4698      	mov	r8, r3
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	d0e0      	beq.n	8000c80 <__udivmoddi4+0xa0>
 8000cbe:	e9c6 4800 	strd	r4, r8, [r6]
 8000cc2:	e7dd      	b.n	8000c80 <__udivmoddi4+0xa0>
 8000cc4:	b902      	cbnz	r2, 8000cc8 <__udivmoddi4+0xe8>
 8000cc6:	deff      	udf	#255	; 0xff
 8000cc8:	fab2 f282 	clz	r2, r2
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	f040 808f 	bne.w	8000df0 <__udivmoddi4+0x210>
 8000cd2:	1b49      	subs	r1, r1, r5
 8000cd4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd8:	fa1f f885 	uxth.w	r8, r5
 8000cdc:	2701      	movs	r7, #1
 8000cde:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ce2:	0c23      	lsrs	r3, r4, #16
 8000ce4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x124>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x122>
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2bc>
 8000d02:	4684      	mov	ip, r0
 8000d04:	1a59      	subs	r1, r3, r1
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d0c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d10:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d14:	fb08 f800 	mul.w	r8, r8, r0
 8000d18:	45a0      	cmp	r8, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x14c>
 8000d1c:	192c      	adds	r4, r5, r4
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x14a>
 8000d24:	45a0      	cmp	r8, r4
 8000d26:	f200 80b6 	bhi.w	8000e96 <__udivmoddi4+0x2b6>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 0408 	sub.w	r4, r4, r8
 8000d30:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d34:	e79f      	b.n	8000c76 <__udivmoddi4+0x96>
 8000d36:	f1c7 0c20 	rsb	ip, r7, #32
 8000d3a:	40bb      	lsls	r3, r7
 8000d3c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d40:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d44:	fa01 f407 	lsl.w	r4, r1, r7
 8000d48:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d4c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d50:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d54:	4325      	orrs	r5, r4
 8000d56:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d5a:	0c2c      	lsrs	r4, r5, #16
 8000d5c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d60:	fa1f fa8e 	uxth.w	sl, lr
 8000d64:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d68:	fb09 f40a 	mul.w	r4, r9, sl
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d72:	fa00 f107 	lsl.w	r1, r0, r7
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b0>
 8000d78:	eb1e 0303 	adds.w	r3, lr, r3
 8000d7c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d80:	f080 8087 	bcs.w	8000e92 <__udivmoddi4+0x2b2>
 8000d84:	429c      	cmp	r4, r3
 8000d86:	f240 8084 	bls.w	8000e92 <__udivmoddi4+0x2b2>
 8000d8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8e:	4473      	add	r3, lr
 8000d90:	1b1b      	subs	r3, r3, r4
 8000d92:	b2ad      	uxth	r5, r5
 8000d94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d98:	fb08 3310 	mls	r3, r8, r0, r3
 8000d9c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000da4:	45a2      	cmp	sl, r4
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1da>
 8000da8:	eb1e 0404 	adds.w	r4, lr, r4
 8000dac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db0:	d26b      	bcs.n	8000e8a <__udivmoddi4+0x2aa>
 8000db2:	45a2      	cmp	sl, r4
 8000db4:	d969      	bls.n	8000e8a <__udivmoddi4+0x2aa>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4474      	add	r4, lr
 8000dba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbe:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc2:	eba4 040a 	sub.w	r4, r4, sl
 8000dc6:	454c      	cmp	r4, r9
 8000dc8:	46c2      	mov	sl, r8
 8000dca:	464b      	mov	r3, r9
 8000dcc:	d354      	bcc.n	8000e78 <__udivmoddi4+0x298>
 8000dce:	d051      	beq.n	8000e74 <__udivmoddi4+0x294>
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d069      	beq.n	8000ea8 <__udivmoddi4+0x2c8>
 8000dd4:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd8:	eb64 0403 	sbc.w	r4, r4, r3
 8000ddc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de0:	40fd      	lsrs	r5, r7
 8000de2:	40fc      	lsrs	r4, r7
 8000de4:	ea4c 0505 	orr.w	r5, ip, r5
 8000de8:	e9c6 5400 	strd	r5, r4, [r6]
 8000dec:	2700      	movs	r7, #0
 8000dee:	e747      	b.n	8000c80 <__udivmoddi4+0xa0>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f703 	lsr.w	r7, r0, r3
 8000df8:	4095      	lsls	r5, r2
 8000dfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfe:	fa21 f303 	lsr.w	r3, r1, r3
 8000e02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e06:	4338      	orrs	r0, r7
 8000e08:	0c01      	lsrs	r1, r0, #16
 8000e0a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e0e:	fa1f f885 	uxth.w	r8, r5
 8000e12:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e16:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1a:	fb07 f308 	mul.w	r3, r7, r8
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d907      	bls.n	8000e36 <__udivmoddi4+0x256>
 8000e26:	1869      	adds	r1, r5, r1
 8000e28:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e2c:	d22f      	bcs.n	8000e8e <__udivmoddi4+0x2ae>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d92d      	bls.n	8000e8e <__udivmoddi4+0x2ae>
 8000e32:	3f02      	subs	r7, #2
 8000e34:	4429      	add	r1, r5
 8000e36:	1acb      	subs	r3, r1, r3
 8000e38:	b281      	uxth	r1, r0
 8000e3a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e46:	fb00 f308 	mul.w	r3, r0, r8
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x27e>
 8000e4e:	1869      	adds	r1, r5, r1
 8000e50:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e54:	d217      	bcs.n	8000e86 <__udivmoddi4+0x2a6>
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d915      	bls.n	8000e86 <__udivmoddi4+0x2a6>
 8000e5a:	3802      	subs	r0, #2
 8000e5c:	4429      	add	r1, r5
 8000e5e:	1ac9      	subs	r1, r1, r3
 8000e60:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e64:	e73b      	b.n	8000cde <__udivmoddi4+0xfe>
 8000e66:	4637      	mov	r7, r6
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e709      	b.n	8000c80 <__udivmoddi4+0xa0>
 8000e6c:	4607      	mov	r7, r0
 8000e6e:	e6e7      	b.n	8000c40 <__udivmoddi4+0x60>
 8000e70:	4618      	mov	r0, r3
 8000e72:	e6fb      	b.n	8000c6c <__udivmoddi4+0x8c>
 8000e74:	4541      	cmp	r1, r8
 8000e76:	d2ab      	bcs.n	8000dd0 <__udivmoddi4+0x1f0>
 8000e78:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e7c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e80:	3801      	subs	r0, #1
 8000e82:	4613      	mov	r3, r2
 8000e84:	e7a4      	b.n	8000dd0 <__udivmoddi4+0x1f0>
 8000e86:	4660      	mov	r0, ip
 8000e88:	e7e9      	b.n	8000e5e <__udivmoddi4+0x27e>
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	e795      	b.n	8000dba <__udivmoddi4+0x1da>
 8000e8e:	4667      	mov	r7, ip
 8000e90:	e7d1      	b.n	8000e36 <__udivmoddi4+0x256>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e77c      	b.n	8000d90 <__udivmoddi4+0x1b0>
 8000e96:	3802      	subs	r0, #2
 8000e98:	442c      	add	r4, r5
 8000e9a:	e747      	b.n	8000d2c <__udivmoddi4+0x14c>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	442b      	add	r3, r5
 8000ea2:	e72f      	b.n	8000d04 <__udivmoddi4+0x124>
 8000ea4:	4638      	mov	r0, r7
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xda>
 8000ea8:	4637      	mov	r7, r6
 8000eaa:	e6e9      	b.n	8000c80 <__udivmoddi4+0xa0>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b08b      	sub	sp, #44	; 0x2c
 8000eb4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	size_t uartStringLen = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000eba:	f000 fd83 	bl	80019c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ebe:	f000 f9a9 	bl	8001214 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ec2:	f000 fa8f 	bl	80013e4 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000ec6:	f000 fa11 	bl	80012ec <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8000eca:	f000 fa61 	bl	8001390 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_IT(&hadc1);
 8000ece:	48b0      	ldr	r0, [pc, #704]	; (8001190 <main+0x2e0>)
 8000ed0:	f000 fe2e 	bl	8001b30 <HAL_ADC_Start_IT>
//  HAL_ADC_Start_DMA(hadc, pData, Length)
	while (ARM_MATH_SUCCESS != arm_rfft_fast_init_f32(&fftInstance, FFT_LENGTH))
 8000ed4:	bf00      	nop
 8000ed6:	2140      	movs	r1, #64	; 0x40
 8000ed8:	48ae      	ldr	r0, [pc, #696]	; (8001194 <main+0x2e4>)
 8000eda:	f002 fc6f 	bl	80037bc <arm_rfft_fast_init_f32>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1f8      	bne.n	8000ed6 <main+0x26>
		;
	while (ARM_MATH_SUCCESS
 8000ee4:	bf00      	nop
			!= arm_rfft_fast_init_f32(&chirpFftInstance, CHIRP_LENGTH))
 8000ee6:	2140      	movs	r1, #64	; 0x40
 8000ee8:	48ab      	ldr	r0, [pc, #684]	; (8001198 <main+0x2e8>)
 8000eea:	f002 fc67 	bl	80037bc <arm_rfft_fast_init_f32>
 8000eee:	4603      	mov	r3, r0
	while (ARM_MATH_SUCCESS
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1f8      	bne.n	8000ee6 <main+0x36>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
//	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//	  HAL_Delay(100);
		if (computeFFT != 0) {
 8000ef4:	4ba9      	ldr	r3, [pc, #676]	; (800119c <main+0x2ec>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0fa      	beq.n	8000ef4 <main+0x44>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8000efe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f02:	48a7      	ldr	r0, [pc, #668]	; (80011a0 <main+0x2f0>)
 8000f04:	f001 fd09 	bl	800291a <HAL_GPIO_TogglePin>

			//if we need to compute FFT with values at both ends of array...
			if (computeFFTLastIndex < FFT_LENGTH) {
 8000f08:	4ba6      	ldr	r3, [pc, #664]	; (80011a4 <main+0x2f4>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f10:	f200 80b0 	bhi.w	8001074 <main+0x1c4>
				for (int i = computeFFTLastIndex - FFT_LENGTH
						+ FFT_BUFFER_LENGTH, j = 0; i < FFT_BUFFER_LENGTH;
 8000f14:	4ba3      	ldr	r3, [pc, #652]	; (80011a4 <main+0x2f4>)
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	b29b      	uxth	r3, r3
				for (int i = computeFFTLastIndex - FFT_LENGTH
 8000f1a:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8000f1e:	623b      	str	r3, [r7, #32]
						+ FFT_BUFFER_LENGTH, j = 0; i < FFT_BUFFER_LENGTH;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
				for (int i = computeFFTLastIndex - FFT_LENGTH
 8000f24:	e048      	b.n	8000fb8 <main+0x108>
						i++, j++) {
					//ADC value mapping
					valueBuffer[i] *= (3300.0 / 4500.0);
 8000f26:	4aa0      	ldr	r2, [pc, #640]	; (80011a8 <main+0x2f8>)
 8000f28:	6a3b      	ldr	r3, [r7, #32]
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fabd 	bl	80004b0 <__aeabi_f2d>
 8000f36:	a394      	add	r3, pc, #592	; (adr r3, 8001188 <main+0x2d8>)
 8000f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3c:	f7ff fb10 	bl	8000560 <__aeabi_dmul>
 8000f40:	4603      	mov	r3, r0
 8000f42:	460c      	mov	r4, r1
 8000f44:	4618      	mov	r0, r3
 8000f46:	4621      	mov	r1, r4
 8000f48:	f7ff fde2 	bl	8000b10 <__aeabi_d2f>
 8000f4c:	4601      	mov	r1, r0
 8000f4e:	4a96      	ldr	r2, [pc, #600]	; (80011a8 <main+0x2f8>)
 8000f50:	6a3b      	ldr	r3, [r7, #32]
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	6019      	str	r1, [r3, #0]
					//sensor conversion
					valueBuffer[i] = valueBuffer[i] - 1680;
 8000f58:	4a93      	ldr	r2, [pc, #588]	; (80011a8 <main+0x2f8>)
 8000f5a:	6a3b      	ldr	r3, [r7, #32]
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	edd3 7a00 	vldr	s15, [r3]
 8000f64:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80011ac <main+0x2fc>
 8000f68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f6c:	4a8e      	ldr	r2, [pc, #568]	; (80011a8 <main+0x2f8>)
 8000f6e:	6a3b      	ldr	r3, [r7, #32]
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	edc3 7a00 	vstr	s15, [r3]
					valueBuffer[i] = valueBuffer[i] / (4 * 12.2 * 100);
 8000f78:	4a8b      	ldr	r2, [pc, #556]	; (80011a8 <main+0x2f8>)
 8000f7a:	6a3b      	ldr	r3, [r7, #32]
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	ed93 7a00 	vldr	s14, [r3]
 8000f84:	eddf 6a8a 	vldr	s13, [pc, #552]	; 80011b0 <main+0x300>
 8000f88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f8c:	4a86      	ldr	r2, [pc, #536]	; (80011a8 <main+0x2f8>)
 8000f8e:	6a3b      	ldr	r3, [r7, #32]
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	edc3 7a00 	vstr	s15, [r3]
					tempValueBuffer[j] = valueBuffer[i];
 8000f98:	4a83      	ldr	r2, [pc, #524]	; (80011a8 <main+0x2f8>)
 8000f9a:	6a3b      	ldr	r3, [r7, #32]
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4984      	ldr	r1, [pc, #528]	; (80011b4 <main+0x304>)
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	601a      	str	r2, [r3, #0]
						i++, j++) {
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	623b      	str	r3, [r7, #32]
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	61fb      	str	r3, [r7, #28]
				for (int i = computeFFTLastIndex - FFT_LENGTH
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fbe:	dbb2      	blt.n	8000f26 <main+0x76>
				}

				for (int i = 0, j = FFT_LENGTH - computeFFTLastIndex;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	4b77      	ldr	r3, [pc, #476]	; (80011a4 <main+0x2f4>)
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	e048      	b.n	8001064 <main+0x1b4>
						i < computeFFTLastIndex; i++, j++) {
					valueBuffer[i] *= (3300.0 / 4500.0);
 8000fd2:	4a75      	ldr	r2, [pc, #468]	; (80011a8 <main+0x2f8>)
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fa67 	bl	80004b0 <__aeabi_f2d>
 8000fe2:	a369      	add	r3, pc, #420	; (adr r3, 8001188 <main+0x2d8>)
 8000fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe8:	f7ff faba 	bl	8000560 <__aeabi_dmul>
 8000fec:	4603      	mov	r3, r0
 8000fee:	460c      	mov	r4, r1
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	4621      	mov	r1, r4
 8000ff4:	f7ff fd8c 	bl	8000b10 <__aeabi_d2f>
 8000ff8:	4601      	mov	r1, r0
 8000ffa:	4a6b      	ldr	r2, [pc, #428]	; (80011a8 <main+0x2f8>)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	6019      	str	r1, [r3, #0]
					//sensor conversion
					valueBuffer[i] = valueBuffer[i] - 1680;
 8001004:	4a68      	ldr	r2, [pc, #416]	; (80011a8 <main+0x2f8>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	edd3 7a00 	vldr	s15, [r3]
 8001010:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80011ac <main+0x2fc>
 8001014:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001018:	4a63      	ldr	r2, [pc, #396]	; (80011a8 <main+0x2f8>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	edc3 7a00 	vstr	s15, [r3]
					valueBuffer[i] = valueBuffer[i] / (4 * 12.2 * 100);
 8001024:	4a60      	ldr	r2, [pc, #384]	; (80011a8 <main+0x2f8>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	ed93 7a00 	vldr	s14, [r3]
 8001030:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80011b0 <main+0x300>
 8001034:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001038:	4a5b      	ldr	r2, [pc, #364]	; (80011a8 <main+0x2f8>)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	edc3 7a00 	vstr	s15, [r3]
					tempValueBuffer[j] = valueBuffer[i];
 8001044:	4a58      	ldr	r2, [pc, #352]	; (80011a8 <main+0x2f8>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4959      	ldr	r1, [pc, #356]	; (80011b4 <main+0x304>)
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	601a      	str	r2, [r3, #0]
						i < computeFFTLastIndex; i++, j++) {
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	3301      	adds	r3, #1
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	4b4f      	ldr	r3, [pc, #316]	; (80011a4 <main+0x2f4>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	b29b      	uxth	r3, r3
 800106a:	461a      	mov	r2, r3
				for (int i = 0, j = FFT_LENGTH - computeFFTLastIndex;
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	4293      	cmp	r3, r2
 8001070:	dbaf      	blt.n	8000fd2 <main+0x122>
 8001072:	e073      	b.n	800115c <main+0x2ac>

				}
			} else {
				for (int i = 0; i < FFT_LENGTH; i++) {
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	e06d      	b.n	8001156 <main+0x2a6>
					valueBuffer[i + computeFFTLastIndex - FFT_LENGTH] *= (3300.0
 800107a:	4b4a      	ldr	r3, [pc, #296]	; (80011a4 <main+0x2f4>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	b29c      	uxth	r4, r3
 8001080:	4622      	mov	r2, r4
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4413      	add	r3, r2
 8001086:	3b40      	subs	r3, #64	; 0x40
 8001088:	4a47      	ldr	r2, [pc, #284]	; (80011a8 <main+0x2f8>)
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fa0d 	bl	80004b0 <__aeabi_f2d>
 8001096:	a33c      	add	r3, pc, #240	; (adr r3, 8001188 <main+0x2d8>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff fa60 	bl	8000560 <__aeabi_dmul>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	4622      	mov	r2, r4
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4413      	add	r3, r2
 80010ae:	f1a3 0440 	sub.w	r4, r3, #64	; 0x40
 80010b2:	f7ff fd2d 	bl	8000b10 <__aeabi_d2f>
 80010b6:	4601      	mov	r1, r0
 80010b8:	4a3b      	ldr	r2, [pc, #236]	; (80011a8 <main+0x2f8>)
 80010ba:	00a3      	lsls	r3, r4, #2
 80010bc:	4413      	add	r3, r2
 80010be:	6019      	str	r1, [r3, #0]
							/ 4500.0);
					//sensor conversion
					valueBuffer[i + computeFFTLastIndex - FFT_LENGTH] =
							valueBuffer[i + computeFFTLastIndex - FFT_LENGTH]
 80010c0:	4b38      	ldr	r3, [pc, #224]	; (80011a4 <main+0x2f4>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	461a      	mov	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4413      	add	r3, r2
 80010cc:	3b40      	subs	r3, #64	; 0x40
 80010ce:	4a36      	ldr	r2, [pc, #216]	; (80011a8 <main+0x2f8>)
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	edd3 7a00 	vldr	s15, [r3]
					valueBuffer[i + computeFFTLastIndex - FFT_LENGTH] =
 80010d8:	4b32      	ldr	r3, [pc, #200]	; (80011a4 <main+0x2f4>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	461a      	mov	r2, r3
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4413      	add	r3, r2
 80010e4:	3b40      	subs	r3, #64	; 0x40
									- 1680;
 80010e6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80011ac <main+0x2fc>
 80010ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
					valueBuffer[i + computeFFTLastIndex - FFT_LENGTH] =
 80010ee:	4a2e      	ldr	r2, [pc, #184]	; (80011a8 <main+0x2f8>)
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	edc3 7a00 	vstr	s15, [r3]
					valueBuffer[i + computeFFTLastIndex - FFT_LENGTH] =
							valueBuffer[i + computeFFTLastIndex - FFT_LENGTH]
 80010f8:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <main+0x2f4>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	461a      	mov	r2, r3
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4413      	add	r3, r2
 8001104:	3b40      	subs	r3, #64	; 0x40
 8001106:	4a28      	ldr	r2, [pc, #160]	; (80011a8 <main+0x2f8>)
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	ed93 7a00 	vldr	s14, [r3]
					valueBuffer[i + computeFFTLastIndex - FFT_LENGTH] =
 8001110:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <main+0x2f4>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	b29b      	uxth	r3, r3
 8001116:	461a      	mov	r2, r3
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4413      	add	r3, r2
 800111c:	3b40      	subs	r3, #64	; 0x40
 800111e:	eddf 6a24 	vldr	s13, [pc, #144]	; 80011b0 <main+0x300>
 8001122:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001126:	4a20      	ldr	r2, [pc, #128]	; (80011a8 <main+0x2f8>)
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	edc3 7a00 	vstr	s15, [r3]
									/ (4 * 12.2 * 100);

					tempValueBuffer[i] = valueBuffer[i + computeFFTLastIndex
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <main+0x2f4>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	b29b      	uxth	r3, r3
 8001136:	461a      	mov	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4413      	add	r3, r2
							- FFT_LENGTH];
 800113c:	3b40      	subs	r3, #64	; 0x40
					tempValueBuffer[i] = valueBuffer[i + computeFFTLastIndex
 800113e:	4a1a      	ldr	r2, [pc, #104]	; (80011a8 <main+0x2f8>)
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	491b      	ldr	r1, [pc, #108]	; (80011b4 <main+0x304>)
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < FFT_LENGTH; i++) {
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	3301      	adds	r3, #1
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	2b3f      	cmp	r3, #63	; 0x3f
 800115a:	dd8e      	ble.n	800107a <main+0x1ca>
				}
			}
			arm_rfft_fast_f32(&fftInstance, tempValueBuffer, fftBuffer, 0);
 800115c:	2300      	movs	r3, #0
 800115e:	4a16      	ldr	r2, [pc, #88]	; (80011b8 <main+0x308>)
 8001160:	4914      	ldr	r1, [pc, #80]	; (80011b4 <main+0x304>)
 8001162:	480c      	ldr	r0, [pc, #48]	; (8001194 <main+0x2e4>)
 8001164:	f002 fc0e 	bl	8003984 <arm_rfft_fast_f32>
			arm_cmplx_mag_f32(fftBuffer, magnitudes, FFT_LENGTH / 2);
 8001168:	2220      	movs	r2, #32
 800116a:	4914      	ldr	r1, [pc, #80]	; (80011bc <main+0x30c>)
 800116c:	4812      	ldr	r0, [pc, #72]	; (80011b8 <main+0x308>)
 800116e:	f003 fa9d 	bl	80046ac <arm_cmplx_mag_f32>
			maxValue = magnitudes[0];
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <main+0x30c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
			maxValueIndex = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]

			for (int i = 1; i < FFT_LENGTH / 2 - 1; i++) {
 800117c:	2301      	movs	r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	e036      	b.n	80011f0 <main+0x340>
 8001182:	bf00      	nop
 8001184:	f3af 8000 	nop.w
 8001188:	77777777 	.word	0x77777777
 800118c:	3fe77777 	.word	0x3fe77777
 8001190:	20001910 	.word	0x20001910
 8001194:	20001ab8 	.word	0x20001ab8
 8001198:	20001958 	.word	0x20001958
 800119c:	200014fc 	.word	0x200014fc
 80011a0:	40020800 	.word	0x40020800
 80011a4:	200014fe 	.word	0x200014fe
 80011a8:	200001f8 	.word	0x200001f8
 80011ac:	44d20000 	.word	0x44d20000
 80011b0:	45988000 	.word	0x45988000
 80011b4:	2000180c 	.word	0x2000180c
 80011b8:	200011fc 	.word	0x200011fc
 80011bc:	20001a34 	.word	0x20001a34
				if (magnitudes[i] > maxValue) {
 80011c0:	4a11      	ldr	r2, [pc, #68]	; (8001208 <main+0x358>)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80011d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d8:	d507      	bpl.n	80011ea <main+0x33a>
					maxValue = magnitudes[i];
 80011da:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <main+0x358>)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
					maxValueIndex = i;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	607b      	str	r3, [r7, #4]
			for (int i = 1; i < FFT_LENGTH / 2 - 1; i++) {
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3301      	adds	r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2b1e      	cmp	r3, #30
 80011f4:	dde4      	ble.n	80011c0 <main+0x310>
//			sprintf(&uartBuffer[strlen(uartBuffer)], "%+011.*f\n",
//			FLOAT_PRECISION, magnitudes[FFT_LENGTH / 2 - 1]);
//			HAL_UART_Transmit(&huart1, (uint8_t*) uartBuffer,
//					strlen(uartBuffer), 1000);
//			uartBuffer[0] = 0;
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 80011f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011fa:	4804      	ldr	r0, [pc, #16]	; (800120c <main+0x35c>)
 80011fc:	f001 fb8d 	bl	800291a <HAL_GPIO_TogglePin>
			computeFFT = 0;
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <main+0x360>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
		if (computeFFT != 0) {
 8001206:	e675      	b.n	8000ef4 <main+0x44>
 8001208:	20001a34 	.word	0x20001a34
 800120c:	40020800 	.word	0x40020800
 8001210:	200014fc 	.word	0x200014fc

08001214 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b094      	sub	sp, #80	; 0x50
 8001218:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800121a:	f107 0320 	add.w	r3, r7, #32
 800121e:	2230      	movs	r2, #48	; 0x30
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f004 f815 	bl	8005252 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <SystemClock_Config+0xd0>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	4a28      	ldr	r2, [pc, #160]	; (80012e4 <SystemClock_Config+0xd0>)
 8001242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001246:	6413      	str	r3, [r2, #64]	; 0x40
 8001248:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <SystemClock_Config+0xd0>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <SystemClock_Config+0xd4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001260:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <SystemClock_Config+0xd4>)
 8001262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <SystemClock_Config+0xd4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001274:	2302      	movs	r3, #2
 8001276:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001278:	2301      	movs	r3, #1
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800127c:	2310      	movs	r3, #16
 800127e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001280:	2302      	movs	r3, #2
 8001282:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001284:	2300      	movs	r3, #0
 8001286:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 10;
 8001288:	230a      	movs	r3, #10
 800128a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 800128c:	2354      	movs	r3, #84	; 0x54
 800128e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001290:	2302      	movs	r3, #2
 8001292:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001294:	2304      	movs	r3, #4
 8001296:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001298:	f107 0320 	add.w	r3, r7, #32
 800129c:	4618      	mov	r0, r3
 800129e:	f001 fb57 	bl	8002950 <HAL_RCC_OscConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <SystemClock_Config+0x98>
		Error_Handler();
 80012a8:	f000 fa26 	bl	80016f8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012ac:	230f      	movs	r3, #15
 80012ae:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b0:	2302      	movs	r3, #2
 80012b2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012bc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80012be:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012c2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2102      	movs	r1, #2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f001 fdb8 	bl	8002e40 <HAL_RCC_ClockConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0xc6>
		Error_Handler();
 80012d6:	f000 fa0f 	bl	80016f8 <Error_Handler>
	}
}
 80012da:	bf00      	nop
 80012dc:	3750      	adds	r7, #80	; 0x50
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40007000 	.word	0x40007000

080012ec <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80012f2:	463b      	mov	r3, r7
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80012fe:	4b21      	ldr	r3, [pc, #132]	; (8001384 <MX_ADC1_Init+0x98>)
 8001300:	4a21      	ldr	r2, [pc, #132]	; (8001388 <MX_ADC1_Init+0x9c>)
 8001302:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001304:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <MX_ADC1_Init+0x98>)
 8001306:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800130a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <MX_ADC1_Init+0x98>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001312:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <MX_ADC1_Init+0x98>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <MX_ADC1_Init+0x98>)
 800131a:	2200      	movs	r2, #0
 800131c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <MX_ADC1_Init+0x98>)
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001326:	4b17      	ldr	r3, [pc, #92]	; (8001384 <MX_ADC1_Init+0x98>)
 8001328:	2200      	movs	r2, #0
 800132a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <MX_ADC1_Init+0x98>)
 800132e:	4a17      	ldr	r2, [pc, #92]	; (800138c <MX_ADC1_Init+0xa0>)
 8001330:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MX_ADC1_Init+0x98>)
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <MX_ADC1_Init+0x98>)
 800133a:	2201      	movs	r2, #1
 800133c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_ADC1_Init+0x98>)
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <MX_ADC1_Init+0x98>)
 8001348:	2201      	movs	r2, #1
 800134a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800134c:	480d      	ldr	r0, [pc, #52]	; (8001384 <MX_ADC1_Init+0x98>)
 800134e:	f000 fbab 	bl	8001aa8 <HAL_ADC_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_ADC1_Init+0x70>
		Error_Handler();
 8001358:	f000 f9ce 	bl	80016f8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800135c:	2301      	movs	r3, #1
 800135e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001360:	2301      	movs	r3, #1
 8001362:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001364:	2307      	movs	r3, #7
 8001366:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001368:	463b      	mov	r3, r7
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_ADC1_Init+0x98>)
 800136e:	f000 fdff 	bl	8001f70 <HAL_ADC_ConfigChannel>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_ADC1_Init+0x90>
		Error_Handler();
 8001378:	f000 f9be 	bl	80016f8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20001910 	.word	0x20001910
 8001388:	40012000 	.word	0x40012000
 800138c:	0f000001 	.word	0x0f000001

08001390 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <MX_USART1_UART_Init+0x50>)
 8001398:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 800139c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013c8:	f001 ff06 	bl	80031d8 <HAL_UART_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80013d2:	f000 f991 	bl	80016f8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20001970 	.word	0x20001970
 80013e0:	40011000 	.word	0x40011000

080013e4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80013ea:	f107 030c 	add.w	r3, r7, #12
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	4b23      	ldr	r3, [pc, #140]	; (800148c <MX_GPIO_Init+0xa8>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a22      	ldr	r2, [pc, #136]	; (800148c <MX_GPIO_Init+0xa8>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b20      	ldr	r3, [pc, #128]	; (800148c <MX_GPIO_Init+0xa8>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	4b1c      	ldr	r3, [pc, #112]	; (800148c <MX_GPIO_Init+0xa8>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a1b      	ldr	r2, [pc, #108]	; (800148c <MX_GPIO_Init+0xa8>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b19      	ldr	r3, [pc, #100]	; (800148c <MX_GPIO_Init+0xa8>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	2120      	movs	r1, #32
 8001436:	4816      	ldr	r0, [pc, #88]	; (8001490 <MX_GPIO_Init+0xac>)
 8001438:	f001 fa56 	bl	80028e8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001442:	4814      	ldr	r0, [pc, #80]	; (8001494 <MX_GPIO_Init+0xb0>)
 8001444:	f001 fa50 	bl	80028e8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001448:	2320      	movs	r3, #32
 800144a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144c:	2301      	movs	r3, #1
 800144e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	4619      	mov	r1, r3
 800145e:	480c      	ldr	r0, [pc, #48]	; (8001490 <MX_GPIO_Init+0xac>)
 8001460:	f001 f8c0 	bl	80025e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001468:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146a:	2301      	movs	r3, #1
 800146c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_GPIO_Init+0xb0>)
 800147e:	f001 f8b1 	bl	80025e4 <HAL_GPIO_Init>

}
 8001482:	bf00      	nop
 8001484:	3720      	adds	r7, #32
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40020000 	.word	0x40020000
 8001494:	40020800 	.word	0x40020800

08001498 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af02      	add	r7, sp, #8
 800149e:	6078      	str	r0, [r7, #4]
	//if receiving samples for data
	if (receivingData) {
 80014a0:	4b87      	ldr	r3, [pc, #540]	; (80016c0 <HAL_ADC_ConvCpltCallback+0x228>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d034      	beq.n	8001514 <HAL_ADC_ConvCpltCallback+0x7c>
		valueBuffer[valueBufferIndex] = HAL_ADC_GetValue(&hadc1);
 80014aa:	4886      	ldr	r0, [pc, #536]	; (80016c4 <HAL_ADC_ConvCpltCallback+0x22c>)
 80014ac:	f000 fd3f 	bl	8001f2e <HAL_ADC_GetValue>
 80014b0:	ee07 0a90 	vmov	s15, r0
 80014b4:	4b84      	ldr	r3, [pc, #528]	; (80016c8 <HAL_ADC_ConvCpltCallback+0x230>)
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014be:	4a83      	ldr	r2, [pc, #524]	; (80016cc <HAL_ADC_ConvCpltCallback+0x234>)
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	edc3 7a00 	vstr	s15, [r3]
		valueBufferIndex = (valueBufferIndex + 1) % FFT_BUFFER_LENGTH;
 80014c8:	4b7f      	ldr	r3, [pc, #508]	; (80016c8 <HAL_ADC_ConvCpltCallback+0x230>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	3301      	adds	r3, #1
 80014d0:	425a      	negs	r2, r3
 80014d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014d6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80014da:	bf58      	it	pl
 80014dc:	4253      	negpl	r3, r2
 80014de:	b29a      	uxth	r2, r3
 80014e0:	4b79      	ldr	r3, [pc, #484]	; (80016c8 <HAL_ADC_ConvCpltCallback+0x230>)
 80014e2:	801a      	strh	r2, [r3, #0]
		if (computeFFT == 0) {
 80014e4:	4b7a      	ldr	r3, [pc, #488]	; (80016d0 <HAL_ADC_ConvCpltCallback+0x238>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f040 80dc 	bne.w	80016a8 <HAL_ADC_ConvCpltCallback+0x210>
			if (valueBufferIndex % FFT_LENGTH == 0) {
 80014f0:	4b75      	ldr	r3, [pc, #468]	; (80016c8 <HAL_ADC_ConvCpltCallback+0x230>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f040 80d3 	bne.w	80016a8 <HAL_ADC_ConvCpltCallback+0x210>
				computeFFTLastIndex = valueBufferIndex;
 8001502:	4b71      	ldr	r3, [pc, #452]	; (80016c8 <HAL_ADC_ConvCpltCallback+0x230>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	b29a      	uxth	r2, r3
 8001508:	4b72      	ldr	r3, [pc, #456]	; (80016d4 <HAL_ADC_ConvCpltCallback+0x23c>)
 800150a:	801a      	strh	r2, [r3, #0]
				computeFFT = 1;
 800150c:	4b70      	ldr	r3, [pc, #448]	; (80016d0 <HAL_ADC_ConvCpltCallback+0x238>)
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	e0c9      	b.n	80016a8 <HAL_ADC_ConvCpltCallback+0x210>
			}
		}
	} else {
		//trying to receive chirp
		receivedChirpOffset = 0.0;
 8001514:	4b70      	ldr	r3, [pc, #448]	; (80016d8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
		//inserting new ADC value in last (chirp length) buffer position
		//after sliding previous values
		for (int i = 0; i < CHIRP_LENGTH - 1; i++) {
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	e01b      	b.n	800155a <HAL_ADC_ConvCpltCallback+0xc2>
			receivedChirpBuffer[i] = receivedChirpBuffer[i + 1];
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3301      	adds	r3, #1
 8001526:	4a6d      	ldr	r2, [pc, #436]	; (80016dc <HAL_ADC_ConvCpltCallback+0x244>)
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	496b      	ldr	r1, [pc, #428]	; (80016dc <HAL_ADC_ConvCpltCallback+0x244>)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	601a      	str	r2, [r3, #0]
			receivedChirpOffset += receivedChirpBuffer[i];
 8001538:	4a68      	ldr	r2, [pc, #416]	; (80016dc <HAL_ADC_ConvCpltCallback+0x244>)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	ed93 7a00 	vldr	s14, [r3]
 8001544:	4b64      	ldr	r3, [pc, #400]	; (80016d8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001546:	edd3 7a00 	vldr	s15, [r3]
 800154a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800154e:	4b62      	ldr	r3, [pc, #392]	; (80016d8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001550:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < CHIRP_LENGTH - 1; i++) {
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	3301      	adds	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	2b3e      	cmp	r3, #62	; 0x3e
 800155e:	dde0      	ble.n	8001522 <HAL_ADC_ConvCpltCallback+0x8a>
		}
		receivedChirpBuffer[CHIRP_LENGTH - 1] = HAL_ADC_GetValue(&hadc1);
 8001560:	4858      	ldr	r0, [pc, #352]	; (80016c4 <HAL_ADC_ConvCpltCallback+0x22c>)
 8001562:	f000 fce4 	bl	8001f2e <HAL_ADC_GetValue>
 8001566:	ee07 0a90 	vmov	s15, r0
 800156a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800156e:	4b5b      	ldr	r3, [pc, #364]	; (80016dc <HAL_ADC_ConvCpltCallback+0x244>)
 8001570:	edc3 7a3f 	vstr	s15, [r3, #252]	; 0xfc
		receivedChirpOffset += receivedChirpBuffer[CHIRP_LENGTH -1];
 8001574:	4b59      	ldr	r3, [pc, #356]	; (80016dc <HAL_ADC_ConvCpltCallback+0x244>)
 8001576:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 800157a:	4b57      	ldr	r3, [pc, #348]	; (80016d8 <HAL_ADC_ConvCpltCallback+0x240>)
 800157c:	edd3 7a00 	vldr	s15, [r3]
 8001580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001584:	4b54      	ldr	r3, [pc, #336]	; (80016d8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001586:	edc3 7a00 	vstr	s15, [r3]
		receivedChirpOffset = receivedChirpOffset/CHIRP_LENGTH;
 800158a:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <HAL_ADC_ConvCpltCallback+0x240>)
 800158c:	ed93 7a00 	vldr	s14, [r3]
 8001590:	eddf 6a53 	vldr	s13, [pc, #332]	; 80016e0 <HAL_ADC_ConvCpltCallback+0x248>
 8001594:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001598:	4b4f      	ldr	r3, [pc, #316]	; (80016d8 <HAL_ADC_ConvCpltCallback+0x240>)
 800159a:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < CHIRP_LENGTH; i++) {
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	e009      	b.n	80015b8 <HAL_ADC_ConvCpltCallback+0x120>
			chirpOffsetValue[i] = receivedChirpOffset;
 80015a4:	4b4c      	ldr	r3, [pc, #304]	; (80016d8 <HAL_ADC_ConvCpltCallback+0x240>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	494e      	ldr	r1, [pc, #312]	; (80016e4 <HAL_ADC_ConvCpltCallback+0x24c>)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < CHIRP_LENGTH; i++) {
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	3301      	adds	r3, #1
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	2b3f      	cmp	r3, #63	; 0x3f
 80015bc:	ddf2      	ble.n	80015a4 <HAL_ADC_ConvCpltCallback+0x10c>
		}
		memcpy(receivedTempChirpBuffer,receivedChirpBuffer,CHIRP_LENGTH);
 80015be:	2240      	movs	r2, #64	; 0x40
 80015c0:	4946      	ldr	r1, [pc, #280]	; (80016dc <HAL_ADC_ConvCpltCallback+0x244>)
 80015c2:	4849      	ldr	r0, [pc, #292]	; (80016e8 <HAL_ADC_ConvCpltCallback+0x250>)
 80015c4:	f003 fe3a 	bl	800523c <memcpy>
		//remove offset
		arm_sub_f32(receivedTempChirpBuffer, chirpOffsetValue,
 80015c8:	2340      	movs	r3, #64	; 0x40
 80015ca:	4a47      	ldr	r2, [pc, #284]	; (80016e8 <HAL_ADC_ConvCpltCallback+0x250>)
 80015cc:	4945      	ldr	r1, [pc, #276]	; (80016e4 <HAL_ADC_ConvCpltCallback+0x24c>)
 80015ce:	4846      	ldr	r0, [pc, #280]	; (80016e8 <HAL_ADC_ConvCpltCallback+0x250>)
 80015d0:	f003 f990 	bl	80048f4 <arm_sub_f32>
				receivedTempChirpBuffer, CHIRP_LENGTH);
		//normalize and correlate
		receivedChirpNorm = 0.0;
 80015d4:	4b45      	ldr	r3, [pc, #276]	; (80016ec <HAL_ADC_ConvCpltCallback+0x254>)
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < CHIRP_LENGTH; i++) {
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	e018      	b.n	8001614 <HAL_ADC_ConvCpltCallback+0x17c>
			receivedChirpNorm = receivedChirpNorm + receivedTempChirpBuffer[i]*receivedTempChirpBuffer[i];
 80015e2:	4a41      	ldr	r2, [pc, #260]	; (80016e8 <HAL_ADC_ConvCpltCallback+0x250>)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	ed93 7a00 	vldr	s14, [r3]
 80015ee:	4a3e      	ldr	r2, [pc, #248]	; (80016e8 <HAL_ADC_ConvCpltCallback+0x250>)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	edd3 7a00 	vldr	s15, [r3]
 80015fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015fe:	4b3b      	ldr	r3, [pc, #236]	; (80016ec <HAL_ADC_ConvCpltCallback+0x254>)
 8001600:	edd3 7a00 	vldr	s15, [r3]
 8001604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001608:	4b38      	ldr	r3, [pc, #224]	; (80016ec <HAL_ADC_ConvCpltCallback+0x254>)
 800160a:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < CHIRP_LENGTH; i++) {
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	3301      	adds	r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b3f      	cmp	r3, #63	; 0x3f
 8001618:	dde3      	ble.n	80015e2 <HAL_ADC_ConvCpltCallback+0x14a>
		}
		receivedChirpNorm = sqrt(receivedChirpNorm);
 800161a:	4b34      	ldr	r3, [pc, #208]	; (80016ec <HAL_ADC_ConvCpltCallback+0x254>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ff46 	bl	80004b0 <__aeabi_f2d>
 8001624:	4603      	mov	r3, r0
 8001626:	460c      	mov	r4, r1
 8001628:	ec44 3b10 	vmov	d0, r3, r4
 800162c:	f003 fc7c 	bl	8004f28 <sqrt>
 8001630:	ec54 3b10 	vmov	r3, r4, d0
 8001634:	4618      	mov	r0, r3
 8001636:	4621      	mov	r1, r4
 8001638:	f7ff fa6a 	bl	8000b10 <__aeabi_d2f>
 800163c:	4602      	mov	r2, r0
 800163e:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <HAL_ADC_ConvCpltCallback+0x254>)
 8001640:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < CHIRP_LENGTH; i++) {
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	e013      	b.n	8001670 <HAL_ADC_ConvCpltCallback+0x1d8>
			receivedTempChirpBuffer[i] = receivedTempChirpBuffer[i]/receivedChirpNorm;
 8001648:	4a27      	ldr	r2, [pc, #156]	; (80016e8 <HAL_ADC_ConvCpltCallback+0x250>)
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	edd3 6a00 	vldr	s13, [r3]
 8001654:	4b25      	ldr	r3, [pc, #148]	; (80016ec <HAL_ADC_ConvCpltCallback+0x254>)
 8001656:	ed93 7a00 	vldr	s14, [r3]
 800165a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800165e:	4a22      	ldr	r2, [pc, #136]	; (80016e8 <HAL_ADC_ConvCpltCallback+0x250>)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < CHIRP_LENGTH; i++) {
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	3301      	adds	r3, #1
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	2b3f      	cmp	r3, #63	; 0x3f
 8001674:	dde8      	ble.n	8001648 <HAL_ADC_ConvCpltCallback+0x1b0>
		}
		//detect chirp by correlation
		arm_correlate_f32(receivedTempChirpBuffer, CHIRP_LENGTH, chirpBuffer,
 8001676:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <HAL_ADC_ConvCpltCallback+0x258>)
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2340      	movs	r3, #64	; 0x40
 800167c:	4a1d      	ldr	r2, [pc, #116]	; (80016f4 <HAL_ADC_ConvCpltCallback+0x25c>)
 800167e:	2140      	movs	r1, #64	; 0x40
 8001680:	4819      	ldr	r0, [pc, #100]	; (80016e8 <HAL_ADC_ConvCpltCallback+0x250>)
 8001682:	f002 fd5d 	bl	8004140 <arm_correlate_f32>
		CHIRP_LENGTH, chirpCorrelation);
		//TODO: evaluate correlation threshold!
		if(chirpCorrelation[CHIRP_LENGTH - 1] > CORRELATION_THRESHOLD)
 8001686:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <HAL_ADC_ConvCpltCallback+0x258>)
 8001688:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff0f 	bl	80004b0 <__aeabi_f2d>
 8001692:	a309      	add	r3, pc, #36	; (adr r3, 80016b8 <HAL_ADC_ConvCpltCallback+0x220>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f7ff f9f2 	bl	8000a80 <__aeabi_dcmpgt>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d002      	beq.n	80016a8 <HAL_ADC_ConvCpltCallback+0x210>
			receivingData = 1;
 80016a2:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <HAL_ADC_ConvCpltCallback+0x228>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	701a      	strb	r2, [r3, #0]

	}
	/*If continuousconversion mode is DISABLED uncomment below*/
	HAL_ADC_Start_IT(&hadc1);
 80016a8:	4806      	ldr	r0, [pc, #24]	; (80016c4 <HAL_ADC_ConvCpltCallback+0x22c>)
 80016aa:	f000 fa41 	bl	8001b30 <HAL_ADC_Start_IT>
}
 80016ae:	bf00      	nop
 80016b0:	371c      	adds	r7, #28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd90      	pop	{r4, r7, pc}
 80016b6:	bf00      	nop
 80016b8:	cccccccd 	.word	0xcccccccd
 80016bc:	3feccccc 	.word	0x3feccccc
 80016c0:	200014fd 	.word	0x200014fd
 80016c4:	20001910 	.word	0x20001910
 80016c8:	200011f8 	.word	0x200011f8
 80016cc:	200001f8 	.word	0x200001f8
 80016d0:	200014fc 	.word	0x200014fc
 80016d4:	200014fe 	.word	0x200014fe
 80016d8:	20001708 	.word	0x20001708
 80016dc:	200012fc 	.word	0x200012fc
 80016e0:	42800000 	.word	0x42800000
 80016e4:	2000170c 	.word	0x2000170c
 80016e8:	200013fc 	.word	0x200013fc
 80016ec:	2000190c 	.word	0x2000190c
 80016f0:	2000150c 	.word	0x2000150c
 80016f4:	08006cb0 	.word	0x08006cb0

080016f8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016fe:	e7fe      	b.n	80016fe <Error_Handler+0x6>

08001700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_MspInit+0x4c>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	4a0f      	ldr	r2, [pc, #60]	; (800174c <HAL_MspInit+0x4c>)
 8001710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001714:	6453      	str	r3, [r2, #68]	; 0x44
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_MspInit+0x4c>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_MspInit+0x4c>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	4a08      	ldr	r2, [pc, #32]	; (800174c <HAL_MspInit+0x4c>)
 800172c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001730:	6413      	str	r3, [r2, #64]	; 0x40
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_MspInit+0x4c>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800

08001750 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a1b      	ldr	r2, [pc, #108]	; (80017dc <HAL_ADC_MspInit+0x8c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d12f      	bne.n	80017d2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <HAL_ADC_MspInit+0x90>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	4a19      	ldr	r2, [pc, #100]	; (80017e0 <HAL_ADC_MspInit+0x90>)
 800177c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001780:	6453      	str	r3, [r2, #68]	; 0x44
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <HAL_ADC_MspInit+0x90>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_ADC_MspInit+0x90>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <HAL_ADC_MspInit+0x90>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_ADC_MspInit+0x90>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017aa:	2302      	movs	r3, #2
 80017ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ae:	2303      	movs	r3, #3
 80017b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	4809      	ldr	r0, [pc, #36]	; (80017e4 <HAL_ADC_MspInit+0x94>)
 80017be:	f000 ff11 	bl	80025e4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2101      	movs	r1, #1
 80017c6:	2012      	movs	r0, #18
 80017c8:	f000 fed5 	bl	8002576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80017cc:	2012      	movs	r0, #18
 80017ce:	f000 feee 	bl	80025ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017d2:	bf00      	nop
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40012000 	.word	0x40012000
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020000 	.word	0x40020000

080017e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a19      	ldr	r2, [pc, #100]	; (800186c <HAL_UART_MspInit+0x84>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d12c      	bne.n	8001864 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	4b18      	ldr	r3, [pc, #96]	; (8001870 <HAL_UART_MspInit+0x88>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	4a17      	ldr	r2, [pc, #92]	; (8001870 <HAL_UART_MspInit+0x88>)
 8001814:	f043 0310 	orr.w	r3, r3, #16
 8001818:	6453      	str	r3, [r2, #68]	; 0x44
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_UART_MspInit+0x88>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_UART_MspInit+0x88>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a10      	ldr	r2, [pc, #64]	; (8001870 <HAL_UART_MspInit+0x88>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_UART_MspInit+0x88>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001842:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001854:	2307      	movs	r3, #7
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <HAL_UART_MspInit+0x8c>)
 8001860:	f000 fec0 	bl	80025e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001864:	bf00      	nop
 8001866:	3728      	adds	r7, #40	; 0x28
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40011000 	.word	0x40011000
 8001870:	40023800 	.word	0x40023800
 8001874:	40020000 	.word	0x40020000

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800187c:	e7fe      	b.n	800187c <NMI_Handler+0x4>

0800187e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <HardFault_Handler+0x4>

08001884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <MemManage_Handler+0x4>

0800188a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <BusFault_Handler+0x4>

08001890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <UsageFault_Handler+0x4>

08001896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c4:	f000 f8d0 	bl	8001a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}

080018cc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <ADC_IRQHandler+0x10>)
 80018d2:	f000 f9eb 	bl	8001cac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20001910 	.word	0x20001910

080018e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e8:	4a14      	ldr	r2, [pc, #80]	; (800193c <_sbrk+0x5c>)
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <_sbrk+0x60>)
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d102      	bne.n	8001902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <_sbrk+0x64>)
 80018fe:	4a12      	ldr	r2, [pc, #72]	; (8001948 <_sbrk+0x68>)
 8001900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	429a      	cmp	r2, r3
 800190e:	d207      	bcs.n	8001920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001910:	f003 fc6a 	bl	80051e8 <__errno>
 8001914:	4602      	mov	r2, r0
 8001916:	230c      	movs	r3, #12
 8001918:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800191e:	e009      	b.n	8001934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <_sbrk+0x64>)
 8001930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001932:	68fb      	ldr	r3, [r7, #12]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20018000 	.word	0x20018000
 8001940:	00000400 	.word	0x00000400
 8001944:	20001500 	.word	0x20001500
 8001948:	20001bd8 	.word	0x20001bd8

0800194c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <SystemInit+0x20>)
 8001952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <SystemInit+0x20>)
 8001958:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800195c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001974:	480d      	ldr	r0, [pc, #52]	; (80019ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001976:	490e      	ldr	r1, [pc, #56]	; (80019b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001978:	4a0e      	ldr	r2, [pc, #56]	; (80019b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800197a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800197c:	e002      	b.n	8001984 <LoopCopyDataInit>

0800197e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001982:	3304      	adds	r3, #4

08001984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001988:	d3f9      	bcc.n	800197e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198a:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800198c:	4c0b      	ldr	r4, [pc, #44]	; (80019bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001990:	e001      	b.n	8001996 <LoopFillZerobss>

08001992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001994:	3204      	adds	r2, #4

08001996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001998:	d3fb      	bcc.n	8001992 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800199a:	f7ff ffd7 	bl	800194c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800199e:	f003 fc29 	bl	80051f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019a2:	f7ff fa85 	bl	8000eb0 <main>
  bx  lr    
 80019a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80019b4:	08019ff8 	.word	0x08019ff8
  ldr r2, =_sbss
 80019b8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80019bc:	20001bd8 	.word	0x20001bd8

080019c0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c0:	e7fe      	b.n	80019c0 <DMA1_Stream0_IRQHandler>
	...

080019c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <HAL_Init+0x40>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0d      	ldr	r2, [pc, #52]	; (8001a04 <HAL_Init+0x40>)
 80019ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <HAL_Init+0x40>)
 80019da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <HAL_Init+0x40>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <HAL_Init+0x40>)
 80019e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ec:	2003      	movs	r0, #3
 80019ee:	f000 fdb7 	bl	8002560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019f2:	2000      	movs	r0, #0
 80019f4:	f000 f808 	bl	8001a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f8:	f7ff fe82 	bl	8001700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023c00 	.word	0x40023c00

08001a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_InitTick+0x54>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_InitTick+0x58>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 fdcf 	bl	80025ca <HAL_SYSTICK_Config>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00e      	b.n	8001a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b0f      	cmp	r3, #15
 8001a3a:	d80a      	bhi.n	8001a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a44:	f000 fd97 	bl	8002576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a48:	4a06      	ldr	r2, [pc, #24]	; (8001a64 <HAL_InitTick+0x5c>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e000      	b.n	8001a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	20000008 	.word	0x20000008
 8001a64:	20000004 	.word	0x20000004

08001a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_IncTick+0x20>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_IncTick+0x24>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <HAL_IncTick+0x24>)
 8001a7a:	6013      	str	r3, [r2, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	20001bd0 	.word	0x20001bd0

08001a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return uwTick;
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <HAL_GetTick+0x14>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20001bd0 	.word	0x20001bd0

08001aa8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e033      	b.n	8001b26 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d109      	bne.n	8001ada <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff fe42 	bl	8001750 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d118      	bne.n	8001b18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aee:	f023 0302 	bic.w	r3, r3, #2
 8001af2:	f043 0202 	orr.w	r2, r3, #2
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 fb5a 	bl	80021b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f023 0303 	bic.w	r3, r3, #3
 8001b0e:	f043 0201 	orr.w	r2, r3, #1
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40
 8001b16:	e001      	b.n	8001b1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <HAL_ADC_Start_IT+0x1a>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e0a1      	b.n	8001c8e <HAL_ADC_Start_IT+0x15e>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d018      	beq.n	8001b92 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0201 	orr.w	r2, r2, #1
 8001b6e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b70:	4b4a      	ldr	r3, [pc, #296]	; (8001c9c <HAL_ADC_Start_IT+0x16c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a4a      	ldr	r2, [pc, #296]	; (8001ca0 <HAL_ADC_Start_IT+0x170>)
 8001b76:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7a:	0c9a      	lsrs	r2, r3, #18
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b84:	e002      	b.n	8001b8c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f9      	bne.n	8001b86 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d169      	bne.n	8001c74 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bde:	d106      	bne.n	8001bee <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be4:	f023 0206 	bic.w	r2, r3, #6
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	645a      	str	r2, [r3, #68]	; 0x44
 8001bec:	e002      	b.n	8001bf4 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bfc:	4b29      	ldr	r3, [pc, #164]	; (8001ca4 <HAL_ADC_Start_IT+0x174>)
 8001bfe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c08:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c18:	f043 0320 	orr.w	r3, r3, #32
 8001c1c:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10f      	bne.n	8001c4a <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d129      	bne.n	8001c8c <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	e020      	b.n	8001c8c <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a16      	ldr	r2, [pc, #88]	; (8001ca8 <HAL_ADC_Start_IT+0x178>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d11b      	bne.n	8001c8c <HAL_ADC_Start_IT+0x15c>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d114      	bne.n	8001c8c <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	e00b      	b.n	8001c8c <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f043 0210 	orr.w	r2, r3, #16
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c84:	f043 0201 	orr.w	r2, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	431bde83 	.word	0x431bde83
 8001ca4:	40012300 	.word	0x40012300
 8001ca8:	40012000 	.word	0x40012000

08001cac <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	bf0c      	ite	eq
 8001cca:	2301      	moveq	r3, #1
 8001ccc:	2300      	movne	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0320 	and.w	r3, r3, #32
 8001cdc:	2b20      	cmp	r3, #32
 8001cde:	bf0c      	ite	eq
 8001ce0:	2301      	moveq	r3, #1
 8001ce2:	2300      	movne	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d049      	beq.n	8001d82 <HAL_ADC_IRQHandler+0xd6>
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d046      	beq.n	8001d82 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d105      	bne.n	8001d0c <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d12b      	bne.n	8001d72 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d127      	bne.n	8001d72 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d28:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d006      	beq.n	8001d3e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d119      	bne.n	8001d72 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0220 	bic.w	r2, r2, #32
 8001d4c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d105      	bne.n	8001d72 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f043 0201 	orr.w	r2, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff fb90 	bl	8001498 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0212 	mvn.w	r2, #18
 8001d80:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	bf0c      	ite	eq
 8001d90:	2301      	moveq	r3, #1
 8001d92:	2300      	movne	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da2:	2b80      	cmp	r3, #128	; 0x80
 8001da4:	bf0c      	ite	eq
 8001da6:	2301      	moveq	r3, #1
 8001da8:	2300      	movne	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d057      	beq.n	8001e64 <HAL_ADC_IRQHandler+0x1b8>
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d054      	beq.n	8001e64 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d105      	bne.n	8001dd2 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d139      	bne.n	8001e54 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d006      	beq.n	8001dfc <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d12b      	bne.n	8001e54 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d124      	bne.n	8001e54 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d11d      	bne.n	8001e54 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d119      	bne.n	8001e54 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e2e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d105      	bne.n	8001e54 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	f043 0201 	orr.w	r2, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 faa9 	bl	80023ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f06f 020c 	mvn.w	r2, #12
 8001e62:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	bf0c      	ite	eq
 8001e72:	2301      	moveq	r3, #1
 8001e74:	2300      	movne	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e84:	2b40      	cmp	r3, #64	; 0x40
 8001e86:	bf0c      	ite	eq
 8001e88:	2301      	moveq	r3, #1
 8001e8a:	2300      	movne	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d017      	beq.n	8001ec6 <HAL_ADC_IRQHandler+0x21a>
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d014      	beq.n	8001ec6 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d10d      	bne.n	8001ec6 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f846 	bl	8001f48 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0201 	mvn.w	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0320 	and.w	r3, r3, #32
 8001ed0:	2b20      	cmp	r3, #32
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ee6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001eea:	bf0c      	ite	eq
 8001eec:	2301      	moveq	r3, #1
 8001eee:	2300      	movne	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d015      	beq.n	8001f26 <HAL_ADC_IRQHandler+0x27a>
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d012      	beq.n	8001f26 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	f043 0202 	orr.w	r2, r3, #2
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0220 	mvn.w	r2, #32
 8001f14:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f820 	bl	8001f5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0220 	mvn.w	r2, #32
 8001f24:	601a      	str	r2, [r3, #0]
  }
}
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x1c>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e105      	b.n	8002198 <HAL_ADC_ConfigChannel+0x228>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b09      	cmp	r3, #9
 8001f9a:	d925      	bls.n	8001fe8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68d9      	ldr	r1, [r3, #12]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4613      	mov	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4413      	add	r3, r2
 8001fb0:	3b1e      	subs	r3, #30
 8001fb2:	2207      	movs	r2, #7
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43da      	mvns	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	400a      	ands	r2, r1
 8001fc0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68d9      	ldr	r1, [r3, #12]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4403      	add	r3, r0
 8001fda:	3b1e      	subs	r3, #30
 8001fdc:	409a      	lsls	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	e022      	b.n	800202e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6919      	ldr	r1, [r3, #16]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	2207      	movs	r2, #7
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43da      	mvns	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	400a      	ands	r2, r1
 800200a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6919      	ldr	r1, [r3, #16]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	b29b      	uxth	r3, r3
 800201c:	4618      	mov	r0, r3
 800201e:	4603      	mov	r3, r0
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4403      	add	r3, r0
 8002024:	409a      	lsls	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b06      	cmp	r3, #6
 8002034:	d824      	bhi.n	8002080 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	3b05      	subs	r3, #5
 8002048:	221f      	movs	r2, #31
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43da      	mvns	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	400a      	ands	r2, r1
 8002056:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	b29b      	uxth	r3, r3
 8002064:	4618      	mov	r0, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	3b05      	subs	r3, #5
 8002072:	fa00 f203 	lsl.w	r2, r0, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	635a      	str	r2, [r3, #52]	; 0x34
 800207e:	e04c      	b.n	800211a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b0c      	cmp	r3, #12
 8002086:	d824      	bhi.n	80020d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	3b23      	subs	r3, #35	; 0x23
 800209a:	221f      	movs	r2, #31
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43da      	mvns	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	400a      	ands	r2, r1
 80020a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	4618      	mov	r0, r3
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	3b23      	subs	r3, #35	; 0x23
 80020c4:	fa00 f203 	lsl.w	r2, r0, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	631a      	str	r2, [r3, #48]	; 0x30
 80020d0:	e023      	b.n	800211a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	3b41      	subs	r3, #65	; 0x41
 80020e4:	221f      	movs	r2, #31
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43da      	mvns	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	400a      	ands	r2, r1
 80020f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	4618      	mov	r0, r3
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	3b41      	subs	r3, #65	; 0x41
 800210e:	fa00 f203 	lsl.w	r2, r0, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800211a:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <HAL_ADC_ConfigChannel+0x234>)
 800211c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a21      	ldr	r2, [pc, #132]	; (80021a8 <HAL_ADC_ConfigChannel+0x238>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d109      	bne.n	800213c <HAL_ADC_ConfigChannel+0x1cc>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b12      	cmp	r3, #18
 800212e:	d105      	bne.n	800213c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a19      	ldr	r2, [pc, #100]	; (80021a8 <HAL_ADC_ConfigChannel+0x238>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d123      	bne.n	800218e <HAL_ADC_ConfigChannel+0x21e>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2b10      	cmp	r3, #16
 800214c:	d003      	beq.n	8002156 <HAL_ADC_ConfigChannel+0x1e6>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b11      	cmp	r3, #17
 8002154:	d11b      	bne.n	800218e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b10      	cmp	r3, #16
 8002168:	d111      	bne.n	800218e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <HAL_ADC_ConfigChannel+0x23c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a10      	ldr	r2, [pc, #64]	; (80021b0 <HAL_ADC_ConfigChannel+0x240>)
 8002170:	fba2 2303 	umull	r2, r3, r2, r3
 8002174:	0c9a      	lsrs	r2, r3, #18
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002180:	e002      	b.n	8002188 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	3b01      	subs	r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f9      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	40012300 	.word	0x40012300
 80021a8:	40012000 	.word	0x40012000
 80021ac:	20000000 	.word	0x20000000
 80021b0:	431bde83 	.word	0x431bde83

080021b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021bc:	4b79      	ldr	r3, [pc, #484]	; (80023a4 <ADC_Init+0x1f0>)
 80021be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	431a      	orrs	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	021a      	lsls	r2, r3, #8
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800220c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6859      	ldr	r1, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800222e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6899      	ldr	r1, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	4a58      	ldr	r2, [pc, #352]	; (80023a8 <ADC_Init+0x1f4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d022      	beq.n	8002292 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800225a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6899      	ldr	r1, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800227c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6899      	ldr	r1, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	e00f      	b.n	80022b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0202 	bic.w	r2, r2, #2
 80022c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6899      	ldr	r1, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7e1b      	ldrb	r3, [r3, #24]
 80022cc:	005a      	lsls	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01b      	beq.n	8002318 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6859      	ldr	r1, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	3b01      	subs	r3, #1
 800230c:	035a      	lsls	r2, r3, #13
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	e007      	b.n	8002328 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002326:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	3b01      	subs	r3, #1
 8002344:	051a      	lsls	r2, r3, #20
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800235c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6899      	ldr	r1, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800236a:	025a      	lsls	r2, r3, #9
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6899      	ldr	r1, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	029a      	lsls	r2, r3, #10
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	609a      	str	r2, [r3, #8]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40012300 	.word	0x40012300
 80023a8:	0f000001 	.word	0x0f000001

080023ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <__NVIC_SetPriorityGrouping+0x44>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023dc:	4013      	ands	r3, r2
 80023de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023f2:	4a04      	ldr	r2, [pc, #16]	; (8002404 <__NVIC_SetPriorityGrouping+0x44>)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	60d3      	str	r3, [r2, #12]
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <__NVIC_GetPriorityGrouping+0x18>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	0a1b      	lsrs	r3, r3, #8
 8002412:	f003 0307 	and.w	r3, r3, #7
}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	2b00      	cmp	r3, #0
 8002434:	db0b      	blt.n	800244e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	f003 021f 	and.w	r2, r3, #31
 800243c:	4907      	ldr	r1, [pc, #28]	; (800245c <__NVIC_EnableIRQ+0x38>)
 800243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002442:	095b      	lsrs	r3, r3, #5
 8002444:	2001      	movs	r0, #1
 8002446:	fa00 f202 	lsl.w	r2, r0, r2
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000e100 	.word	0xe000e100

08002460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	6039      	str	r1, [r7, #0]
 800246a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	2b00      	cmp	r3, #0
 8002472:	db0a      	blt.n	800248a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	490c      	ldr	r1, [pc, #48]	; (80024ac <__NVIC_SetPriority+0x4c>)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	0112      	lsls	r2, r2, #4
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	440b      	add	r3, r1
 8002484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002488:	e00a      	b.n	80024a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4908      	ldr	r1, [pc, #32]	; (80024b0 <__NVIC_SetPriority+0x50>)
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	3b04      	subs	r3, #4
 8002498:	0112      	lsls	r2, r2, #4
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	440b      	add	r3, r1
 800249e:	761a      	strb	r2, [r3, #24]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000e100 	.word	0xe000e100
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	; 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f1c3 0307 	rsb	r3, r3, #7
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	bf28      	it	cs
 80024d2:	2304      	movcs	r3, #4
 80024d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3304      	adds	r3, #4
 80024da:	2b06      	cmp	r3, #6
 80024dc:	d902      	bls.n	80024e4 <NVIC_EncodePriority+0x30>
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3b03      	subs	r3, #3
 80024e2:	e000      	b.n	80024e6 <NVIC_EncodePriority+0x32>
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43da      	mvns	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	401a      	ands	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	43d9      	mvns	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	4313      	orrs	r3, r2
         );
}
 800250e:	4618      	mov	r0, r3
 8002510:	3724      	adds	r7, #36	; 0x24
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3b01      	subs	r3, #1
 8002528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800252c:	d301      	bcc.n	8002532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800252e:	2301      	movs	r3, #1
 8002530:	e00f      	b.n	8002552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002532:	4a0a      	ldr	r2, [pc, #40]	; (800255c <SysTick_Config+0x40>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3b01      	subs	r3, #1
 8002538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800253a:	210f      	movs	r1, #15
 800253c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002540:	f7ff ff8e 	bl	8002460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <SysTick_Config+0x40>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254a:	4b04      	ldr	r3, [pc, #16]	; (800255c <SysTick_Config+0x40>)
 800254c:	2207      	movs	r2, #7
 800254e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	e000e010 	.word	0xe000e010

08002560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff ff29 	bl	80023c0 <__NVIC_SetPriorityGrouping>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002588:	f7ff ff3e 	bl	8002408 <__NVIC_GetPriorityGrouping>
 800258c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	6978      	ldr	r0, [r7, #20]
 8002594:	f7ff ff8e 	bl	80024b4 <NVIC_EncodePriority>
 8002598:	4602      	mov	r2, r0
 800259a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff5d 	bl	8002460 <__NVIC_SetPriority>
}
 80025a6:	bf00      	nop
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff31 	bl	8002424 <__NVIC_EnableIRQ>
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff ffa2 	bl	800251c <SysTick_Config>
 80025d8:	4603      	mov	r3, r0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	; 0x24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	e159      	b.n	80028b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002600:	2201      	movs	r2, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	429a      	cmp	r2, r3
 800261a:	f040 8148 	bne.w	80028ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d005      	beq.n	8002636 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002632:	2b02      	cmp	r3, #2
 8002634:	d130      	bne.n	8002698 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	2203      	movs	r2, #3
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800266c:	2201      	movs	r2, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 0201 	and.w	r2, r3, #1
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d017      	beq.n	80026d4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d123      	bne.n	8002728 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	08da      	lsrs	r2, r3, #3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3208      	adds	r2, #8
 80026e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	220f      	movs	r2, #15
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	08da      	lsrs	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3208      	adds	r2, #8
 8002722:	69b9      	ldr	r1, [r7, #24]
 8002724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	2203      	movs	r2, #3
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0203 	and.w	r2, r3, #3
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80a2 	beq.w	80028ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	4b56      	ldr	r3, [pc, #344]	; (80028c8 <HAL_GPIO_Init+0x2e4>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	4a55      	ldr	r2, [pc, #340]	; (80028c8 <HAL_GPIO_Init+0x2e4>)
 8002774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002778:	6453      	str	r3, [r2, #68]	; 0x44
 800277a:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <HAL_GPIO_Init+0x2e4>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002786:	4a51      	ldr	r2, [pc, #324]	; (80028cc <HAL_GPIO_Init+0x2e8>)
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	3302      	adds	r3, #2
 800278e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	220f      	movs	r2, #15
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a48      	ldr	r2, [pc, #288]	; (80028d0 <HAL_GPIO_Init+0x2ec>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d019      	beq.n	80027e6 <HAL_GPIO_Init+0x202>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a47      	ldr	r2, [pc, #284]	; (80028d4 <HAL_GPIO_Init+0x2f0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d013      	beq.n	80027e2 <HAL_GPIO_Init+0x1fe>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a46      	ldr	r2, [pc, #280]	; (80028d8 <HAL_GPIO_Init+0x2f4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00d      	beq.n	80027de <HAL_GPIO_Init+0x1fa>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a45      	ldr	r2, [pc, #276]	; (80028dc <HAL_GPIO_Init+0x2f8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d007      	beq.n	80027da <HAL_GPIO_Init+0x1f6>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a44      	ldr	r2, [pc, #272]	; (80028e0 <HAL_GPIO_Init+0x2fc>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d101      	bne.n	80027d6 <HAL_GPIO_Init+0x1f2>
 80027d2:	2304      	movs	r3, #4
 80027d4:	e008      	b.n	80027e8 <HAL_GPIO_Init+0x204>
 80027d6:	2307      	movs	r3, #7
 80027d8:	e006      	b.n	80027e8 <HAL_GPIO_Init+0x204>
 80027da:	2303      	movs	r3, #3
 80027dc:	e004      	b.n	80027e8 <HAL_GPIO_Init+0x204>
 80027de:	2302      	movs	r3, #2
 80027e0:	e002      	b.n	80027e8 <HAL_GPIO_Init+0x204>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <HAL_GPIO_Init+0x204>
 80027e6:	2300      	movs	r3, #0
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	f002 0203 	and.w	r2, r2, #3
 80027ee:	0092      	lsls	r2, r2, #2
 80027f0:	4093      	lsls	r3, r2
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f8:	4934      	ldr	r1, [pc, #208]	; (80028cc <HAL_GPIO_Init+0x2e8>)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	089b      	lsrs	r3, r3, #2
 80027fe:	3302      	adds	r3, #2
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002806:	4b37      	ldr	r3, [pc, #220]	; (80028e4 <HAL_GPIO_Init+0x300>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800282a:	4a2e      	ldr	r2, [pc, #184]	; (80028e4 <HAL_GPIO_Init+0x300>)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002830:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <HAL_GPIO_Init+0x300>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002854:	4a23      	ldr	r2, [pc, #140]	; (80028e4 <HAL_GPIO_Init+0x300>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800285a:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <HAL_GPIO_Init+0x300>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800287e:	4a19      	ldr	r2, [pc, #100]	; (80028e4 <HAL_GPIO_Init+0x300>)
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002884:	4b17      	ldr	r3, [pc, #92]	; (80028e4 <HAL_GPIO_Init+0x300>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028a8:	4a0e      	ldr	r2, [pc, #56]	; (80028e4 <HAL_GPIO_Init+0x300>)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3301      	adds	r3, #1
 80028b2:	61fb      	str	r3, [r7, #28]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b0f      	cmp	r3, #15
 80028b8:	f67f aea2 	bls.w	8002600 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028bc:	bf00      	nop
 80028be:	3724      	adds	r7, #36	; 0x24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40013800 	.word	0x40013800
 80028d0:	40020000 	.word	0x40020000
 80028d4:	40020400 	.word	0x40020400
 80028d8:	40020800 	.word	0x40020800
 80028dc:	40020c00 	.word	0x40020c00
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40013c00 	.word	0x40013c00

080028e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	807b      	strh	r3, [r7, #2]
 80028f4:	4613      	mov	r3, r2
 80028f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028f8:	787b      	ldrb	r3, [r7, #1]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028fe:	887a      	ldrh	r2, [r7, #2]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002904:	e003      	b.n	800290e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002906:	887b      	ldrh	r3, [r7, #2]
 8002908:	041a      	lsls	r2, r3, #16
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	619a      	str	r2, [r3, #24]
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800291a:	b480      	push	{r7}
 800291c:	b085      	sub	sp, #20
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	460b      	mov	r3, r1
 8002924:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800292c:	887a      	ldrh	r2, [r7, #2]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4013      	ands	r3, r2
 8002932:	041a      	lsls	r2, r3, #16
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	43d9      	mvns	r1, r3
 8002938:	887b      	ldrh	r3, [r7, #2]
 800293a:	400b      	ands	r3, r1
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	619a      	str	r2, [r3, #24]
}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e264      	b.n	8002e2c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d075      	beq.n	8002a5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800296e:	4ba3      	ldr	r3, [pc, #652]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b04      	cmp	r3, #4
 8002978:	d00c      	beq.n	8002994 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800297a:	4ba0      	ldr	r3, [pc, #640]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002982:	2b08      	cmp	r3, #8
 8002984:	d112      	bne.n	80029ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002986:	4b9d      	ldr	r3, [pc, #628]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800298e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002992:	d10b      	bne.n	80029ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002994:	4b99      	ldr	r3, [pc, #612]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d05b      	beq.n	8002a58 <HAL_RCC_OscConfig+0x108>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d157      	bne.n	8002a58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e23f      	b.n	8002e2c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b4:	d106      	bne.n	80029c4 <HAL_RCC_OscConfig+0x74>
 80029b6:	4b91      	ldr	r3, [pc, #580]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a90      	ldr	r2, [pc, #576]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 80029bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e01d      	b.n	8002a00 <HAL_RCC_OscConfig+0xb0>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x98>
 80029ce:	4b8b      	ldr	r3, [pc, #556]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a8a      	ldr	r2, [pc, #552]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 80029d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4b88      	ldr	r3, [pc, #544]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a87      	ldr	r2, [pc, #540]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e00b      	b.n	8002a00 <HAL_RCC_OscConfig+0xb0>
 80029e8:	4b84      	ldr	r3, [pc, #528]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a83      	ldr	r2, [pc, #524]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 80029ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	4b81      	ldr	r3, [pc, #516]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a80      	ldr	r2, [pc, #512]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 80029fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d013      	beq.n	8002a30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7ff f842 	bl	8001a90 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a10:	f7ff f83e 	bl	8001a90 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	; 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e204      	b.n	8002e2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	4b76      	ldr	r3, [pc, #472]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0xc0>
 8002a2e:	e014      	b.n	8002a5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7ff f82e 	bl	8001a90 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a38:	f7ff f82a 	bl	8001a90 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	; 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e1f0      	b.n	8002e2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4a:	4b6c      	ldr	r3, [pc, #432]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0xe8>
 8002a56:	e000      	b.n	8002a5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d063      	beq.n	8002b2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a66:	4b65      	ldr	r3, [pc, #404]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00b      	beq.n	8002a8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a72:	4b62      	ldr	r3, [pc, #392]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d11c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a7e:	4b5f      	ldr	r3, [pc, #380]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d116      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8a:	4b5c      	ldr	r3, [pc, #368]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x152>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d001      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e1c4      	b.n	8002e2c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa2:	4b56      	ldr	r3, [pc, #344]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4952      	ldr	r1, [pc, #328]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab6:	e03a      	b.n	8002b2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d020      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac0:	4b4f      	ldr	r3, [pc, #316]	; (8002c00 <HAL_RCC_OscConfig+0x2b0>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac6:	f7fe ffe3 	bl	8001a90 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ace:	f7fe ffdf 	bl	8001a90 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e1a5      	b.n	8002e2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae0:	4b46      	ldr	r3, [pc, #280]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aec:	4b43      	ldr	r3, [pc, #268]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4940      	ldr	r1, [pc, #256]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]
 8002b00:	e015      	b.n	8002b2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b02:	4b3f      	ldr	r3, [pc, #252]	; (8002c00 <HAL_RCC_OscConfig+0x2b0>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7fe ffc2 	bl	8001a90 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b10:	f7fe ffbe 	bl	8001a90 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e184      	b.n	8002e2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b22:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d030      	beq.n	8002b9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d016      	beq.n	8002b70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b42:	4b30      	ldr	r3, [pc, #192]	; (8002c04 <HAL_RCC_OscConfig+0x2b4>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b48:	f7fe ffa2 	bl	8001a90 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b50:	f7fe ff9e 	bl	8001a90 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e164      	b.n	8002e2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b62:	4b26      	ldr	r3, [pc, #152]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0x200>
 8002b6e:	e015      	b.n	8002b9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b70:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <HAL_RCC_OscConfig+0x2b4>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b76:	f7fe ff8b 	bl	8001a90 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b7e:	f7fe ff87 	bl	8001a90 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e14d      	b.n	8002e2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b90:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f0      	bne.n	8002b7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80a0 	beq.w	8002cea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002baa:	2300      	movs	r3, #0
 8002bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bae:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10f      	bne.n	8002bda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bca:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <HAL_RCC_OscConfig+0x2b8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d121      	bne.n	8002c2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <HAL_RCC_OscConfig+0x2b8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a07      	ldr	r2, [pc, #28]	; (8002c08 <HAL_RCC_OscConfig+0x2b8>)
 8002bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bf2:	f7fe ff4d 	bl	8001a90 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf8:	e011      	b.n	8002c1e <HAL_RCC_OscConfig+0x2ce>
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	42470000 	.word	0x42470000
 8002c04:	42470e80 	.word	0x42470e80
 8002c08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0c:	f7fe ff40 	bl	8001a90 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e106      	b.n	8002e2c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1e:	4b85      	ldr	r3, [pc, #532]	; (8002e34 <HAL_RCC_OscConfig+0x4e4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d106      	bne.n	8002c40 <HAL_RCC_OscConfig+0x2f0>
 8002c32:	4b81      	ldr	r3, [pc, #516]	; (8002e38 <HAL_RCC_OscConfig+0x4e8>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	4a80      	ldr	r2, [pc, #512]	; (8002e38 <HAL_RCC_OscConfig+0x4e8>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3e:	e01c      	b.n	8002c7a <HAL_RCC_OscConfig+0x32a>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b05      	cmp	r3, #5
 8002c46:	d10c      	bne.n	8002c62 <HAL_RCC_OscConfig+0x312>
 8002c48:	4b7b      	ldr	r3, [pc, #492]	; (8002e38 <HAL_RCC_OscConfig+0x4e8>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4c:	4a7a      	ldr	r2, [pc, #488]	; (8002e38 <HAL_RCC_OscConfig+0x4e8>)
 8002c4e:	f043 0304 	orr.w	r3, r3, #4
 8002c52:	6713      	str	r3, [r2, #112]	; 0x70
 8002c54:	4b78      	ldr	r3, [pc, #480]	; (8002e38 <HAL_RCC_OscConfig+0x4e8>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	4a77      	ldr	r2, [pc, #476]	; (8002e38 <HAL_RCC_OscConfig+0x4e8>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c60:	e00b      	b.n	8002c7a <HAL_RCC_OscConfig+0x32a>
 8002c62:	4b75      	ldr	r3, [pc, #468]	; (8002e38 <HAL_RCC_OscConfig+0x4e8>)
 8002c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c66:	4a74      	ldr	r2, [pc, #464]	; (8002e38 <HAL_RCC_OscConfig+0x4e8>)
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6e:	4b72      	ldr	r3, [pc, #456]	; (8002e38 <HAL_RCC_OscConfig+0x4e8>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c72:	4a71      	ldr	r2, [pc, #452]	; (8002e38 <HAL_RCC_OscConfig+0x4e8>)
 8002c74:	f023 0304 	bic.w	r3, r3, #4
 8002c78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d015      	beq.n	8002cae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c82:	f7fe ff05 	bl	8001a90 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c88:	e00a      	b.n	8002ca0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c8a:	f7fe ff01 	bl	8001a90 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e0c5      	b.n	8002e2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca0:	4b65      	ldr	r3, [pc, #404]	; (8002e38 <HAL_RCC_OscConfig+0x4e8>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0ee      	beq.n	8002c8a <HAL_RCC_OscConfig+0x33a>
 8002cac:	e014      	b.n	8002cd8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cae:	f7fe feef 	bl	8001a90 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cb6:	f7fe feeb 	bl	8001a90 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e0af      	b.n	8002e2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ccc:	4b5a      	ldr	r3, [pc, #360]	; (8002e38 <HAL_RCC_OscConfig+0x4e8>)
 8002cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1ee      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d105      	bne.n	8002cea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cde:	4b56      	ldr	r3, [pc, #344]	; (8002e38 <HAL_RCC_OscConfig+0x4e8>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	4a55      	ldr	r2, [pc, #340]	; (8002e38 <HAL_RCC_OscConfig+0x4e8>)
 8002ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 809b 	beq.w	8002e2a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cf4:	4b50      	ldr	r3, [pc, #320]	; (8002e38 <HAL_RCC_OscConfig+0x4e8>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d05c      	beq.n	8002dba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d141      	bne.n	8002d8c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d08:	4b4c      	ldr	r3, [pc, #304]	; (8002e3c <HAL_RCC_OscConfig+0x4ec>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0e:	f7fe febf 	bl	8001a90 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d16:	f7fe febb 	bl	8001a90 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e081      	b.n	8002e2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d28:	4b43      	ldr	r3, [pc, #268]	; (8002e38 <HAL_RCC_OscConfig+0x4e8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f0      	bne.n	8002d16 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69da      	ldr	r2, [r3, #28]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	019b      	lsls	r3, r3, #6
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	041b      	lsls	r3, r3, #16
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	061b      	lsls	r3, r3, #24
 8002d58:	4937      	ldr	r1, [pc, #220]	; (8002e38 <HAL_RCC_OscConfig+0x4e8>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d5e:	4b37      	ldr	r3, [pc, #220]	; (8002e3c <HAL_RCC_OscConfig+0x4ec>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fe fe94 	bl	8001a90 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6c:	f7fe fe90 	bl	8001a90 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e056      	b.n	8002e2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d7e:	4b2e      	ldr	r3, [pc, #184]	; (8002e38 <HAL_RCC_OscConfig+0x4e8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x41c>
 8002d8a:	e04e      	b.n	8002e2a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8c:	4b2b      	ldr	r3, [pc, #172]	; (8002e3c <HAL_RCC_OscConfig+0x4ec>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d92:	f7fe fe7d 	bl	8001a90 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d9a:	f7fe fe79 	bl	8001a90 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e03f      	b.n	8002e2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dac:	4b22      	ldr	r3, [pc, #136]	; (8002e38 <HAL_RCC_OscConfig+0x4e8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f0      	bne.n	8002d9a <HAL_RCC_OscConfig+0x44a>
 8002db8:	e037      	b.n	8002e2a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d101      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e032      	b.n	8002e2c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dc6:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <HAL_RCC_OscConfig+0x4e8>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d028      	beq.n	8002e26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d121      	bne.n	8002e26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d11a      	bne.n	8002e26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002df6:	4013      	ands	r3, r2
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dfc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d111      	bne.n	8002e26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0c:	085b      	lsrs	r3, r3, #1
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d107      	bne.n	8002e26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d001      	beq.n	8002e2a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40007000 	.word	0x40007000
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	42470060 	.word	0x42470060

08002e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0cc      	b.n	8002fee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e54:	4b68      	ldr	r3, [pc, #416]	; (8002ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d90c      	bls.n	8002e7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e62:	4b65      	ldr	r3, [pc, #404]	; (8002ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6a:	4b63      	ldr	r3, [pc, #396]	; (8002ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d001      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0b8      	b.n	8002fee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d020      	beq.n	8002eca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e94:	4b59      	ldr	r3, [pc, #356]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	4a58      	ldr	r2, [pc, #352]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eac:	4b53      	ldr	r3, [pc, #332]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4a52      	ldr	r2, [pc, #328]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb8:	4b50      	ldr	r3, [pc, #320]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	494d      	ldr	r1, [pc, #308]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d044      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d107      	bne.n	8002eee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ede:	4b47      	ldr	r3, [pc, #284]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d119      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e07f      	b.n	8002fee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d003      	beq.n	8002efe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d107      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efe:	4b3f      	ldr	r3, [pc, #252]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e06f      	b.n	8002fee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0e:	4b3b      	ldr	r3, [pc, #236]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e067      	b.n	8002fee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f1e:	4b37      	ldr	r3, [pc, #220]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f023 0203 	bic.w	r2, r3, #3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	4934      	ldr	r1, [pc, #208]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f30:	f7fe fdae 	bl	8001a90 <HAL_GetTick>
 8002f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f36:	e00a      	b.n	8002f4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f38:	f7fe fdaa 	bl	8001a90 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e04f      	b.n	8002fee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4e:	4b2b      	ldr	r3, [pc, #172]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 020c 	and.w	r2, r3, #12
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d1eb      	bne.n	8002f38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f60:	4b25      	ldr	r3, [pc, #148]	; (8002ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d20c      	bcs.n	8002f88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6e:	4b22      	ldr	r3, [pc, #136]	; (8002ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f76:	4b20      	ldr	r3, [pc, #128]	; (8002ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d001      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e032      	b.n	8002fee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f94:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4916      	ldr	r1, [pc, #88]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d009      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fb2:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	490e      	ldr	r1, [pc, #56]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fc6:	f000 f821 	bl	800300c <HAL_RCC_GetSysClockFreq>
 8002fca:	4601      	mov	r1, r0
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	091b      	lsrs	r3, r3, #4
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd8:	5cd3      	ldrb	r3, [r2, r3]
 8002fda:	fa21 f303 	lsr.w	r3, r1, r3
 8002fde:	4a09      	ldr	r2, [pc, #36]	; (8003004 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fe2:	4b09      	ldr	r3, [pc, #36]	; (8003008 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fe fd0e 	bl	8001a08 <HAL_InitTick>

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40023c00 	.word	0x40023c00
 8002ffc:	40023800 	.word	0x40023800
 8003000:	08006db0 	.word	0x08006db0
 8003004:	20000000 	.word	0x20000000
 8003008:	20000004 	.word	0x20000004

0800300c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800300c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	607b      	str	r3, [r7, #4]
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	2300      	movs	r3, #0
 800301c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003022:	4b50      	ldr	r3, [pc, #320]	; (8003164 <HAL_RCC_GetSysClockFreq+0x158>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 030c 	and.w	r3, r3, #12
 800302a:	2b04      	cmp	r3, #4
 800302c:	d007      	beq.n	800303e <HAL_RCC_GetSysClockFreq+0x32>
 800302e:	2b08      	cmp	r3, #8
 8003030:	d008      	beq.n	8003044 <HAL_RCC_GetSysClockFreq+0x38>
 8003032:	2b00      	cmp	r3, #0
 8003034:	f040 808d 	bne.w	8003152 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003038:	4b4b      	ldr	r3, [pc, #300]	; (8003168 <HAL_RCC_GetSysClockFreq+0x15c>)
 800303a:	60bb      	str	r3, [r7, #8]
       break;
 800303c:	e08c      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800303e:	4b4b      	ldr	r3, [pc, #300]	; (800316c <HAL_RCC_GetSysClockFreq+0x160>)
 8003040:	60bb      	str	r3, [r7, #8]
      break;
 8003042:	e089      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003044:	4b47      	ldr	r3, [pc, #284]	; (8003164 <HAL_RCC_GetSysClockFreq+0x158>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800304c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800304e:	4b45      	ldr	r3, [pc, #276]	; (8003164 <HAL_RCC_GetSysClockFreq+0x158>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d023      	beq.n	80030a2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800305a:	4b42      	ldr	r3, [pc, #264]	; (8003164 <HAL_RCC_GetSysClockFreq+0x158>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	099b      	lsrs	r3, r3, #6
 8003060:	f04f 0400 	mov.w	r4, #0
 8003064:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	ea03 0501 	and.w	r5, r3, r1
 8003070:	ea04 0602 	and.w	r6, r4, r2
 8003074:	4a3d      	ldr	r2, [pc, #244]	; (800316c <HAL_RCC_GetSysClockFreq+0x160>)
 8003076:	fb02 f106 	mul.w	r1, r2, r6
 800307a:	2200      	movs	r2, #0
 800307c:	fb02 f205 	mul.w	r2, r2, r5
 8003080:	440a      	add	r2, r1
 8003082:	493a      	ldr	r1, [pc, #232]	; (800316c <HAL_RCC_GetSysClockFreq+0x160>)
 8003084:	fba5 0101 	umull	r0, r1, r5, r1
 8003088:	1853      	adds	r3, r2, r1
 800308a:	4619      	mov	r1, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f04f 0400 	mov.w	r4, #0
 8003092:	461a      	mov	r2, r3
 8003094:	4623      	mov	r3, r4
 8003096:	f7fd fd8b 	bl	8000bb0 <__aeabi_uldivmod>
 800309a:	4603      	mov	r3, r0
 800309c:	460c      	mov	r4, r1
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e049      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a2:	4b30      	ldr	r3, [pc, #192]	; (8003164 <HAL_RCC_GetSysClockFreq+0x158>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	099b      	lsrs	r3, r3, #6
 80030a8:	f04f 0400 	mov.w	r4, #0
 80030ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	ea03 0501 	and.w	r5, r3, r1
 80030b8:	ea04 0602 	and.w	r6, r4, r2
 80030bc:	4629      	mov	r1, r5
 80030be:	4632      	mov	r2, r6
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	f04f 0400 	mov.w	r4, #0
 80030c8:	0154      	lsls	r4, r2, #5
 80030ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030ce:	014b      	lsls	r3, r1, #5
 80030d0:	4619      	mov	r1, r3
 80030d2:	4622      	mov	r2, r4
 80030d4:	1b49      	subs	r1, r1, r5
 80030d6:	eb62 0206 	sbc.w	r2, r2, r6
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	f04f 0400 	mov.w	r4, #0
 80030e2:	0194      	lsls	r4, r2, #6
 80030e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030e8:	018b      	lsls	r3, r1, #6
 80030ea:	1a5b      	subs	r3, r3, r1
 80030ec:	eb64 0402 	sbc.w	r4, r4, r2
 80030f0:	f04f 0100 	mov.w	r1, #0
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	00e2      	lsls	r2, r4, #3
 80030fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030fe:	00d9      	lsls	r1, r3, #3
 8003100:	460b      	mov	r3, r1
 8003102:	4614      	mov	r4, r2
 8003104:	195b      	adds	r3, r3, r5
 8003106:	eb44 0406 	adc.w	r4, r4, r6
 800310a:	f04f 0100 	mov.w	r1, #0
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	02a2      	lsls	r2, r4, #10
 8003114:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003118:	0299      	lsls	r1, r3, #10
 800311a:	460b      	mov	r3, r1
 800311c:	4614      	mov	r4, r2
 800311e:	4618      	mov	r0, r3
 8003120:	4621      	mov	r1, r4
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f04f 0400 	mov.w	r4, #0
 8003128:	461a      	mov	r2, r3
 800312a:	4623      	mov	r3, r4
 800312c:	f7fd fd40 	bl	8000bb0 <__aeabi_uldivmod>
 8003130:	4603      	mov	r3, r0
 8003132:	460c      	mov	r4, r1
 8003134:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003136:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_RCC_GetSysClockFreq+0x158>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	0c1b      	lsrs	r3, r3, #16
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	3301      	adds	r3, #1
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	fbb2 f3f3 	udiv	r3, r2, r3
 800314e:	60bb      	str	r3, [r7, #8]
      break;
 8003150:	e002      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003152:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003154:	60bb      	str	r3, [r7, #8]
      break;
 8003156:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003158:	68bb      	ldr	r3, [r7, #8]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003162:	bf00      	nop
 8003164:	40023800 	.word	0x40023800
 8003168:	00f42400 	.word	0x00f42400
 800316c:	017d7840 	.word	0x017d7840

08003170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003174:	4b03      	ldr	r3, [pc, #12]	; (8003184 <HAL_RCC_GetHCLKFreq+0x14>)
 8003176:	681b      	ldr	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20000000 	.word	0x20000000

08003188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800318c:	f7ff fff0 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 8003190:	4601      	mov	r1, r0
 8003192:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	0a9b      	lsrs	r3, r3, #10
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	4a03      	ldr	r2, [pc, #12]	; (80031ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800319e:	5cd3      	ldrb	r3, [r2, r3]
 80031a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40023800 	.word	0x40023800
 80031ac:	08006dc0 	.word	0x08006dc0

080031b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031b4:	f7ff ffdc 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 80031b8:	4601      	mov	r1, r0
 80031ba:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	0b5b      	lsrs	r3, r3, #13
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	4a03      	ldr	r2, [pc, #12]	; (80031d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031c6:	5cd3      	ldrb	r3, [r2, r3]
 80031c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40023800 	.word	0x40023800
 80031d4:	08006dc0 	.word	0x08006dc0

080031d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e03f      	b.n	800326a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fe faf2 	bl	80017e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2224      	movs	r2, #36	; 0x24
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800321a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f829 	bl	8003274 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695a      	ldr	r2, [r3, #20]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003278:	b085      	sub	sp, #20
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80032b6:	f023 030c 	bic.w	r3, r3, #12
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6812      	ldr	r2, [r2, #0]
 80032be:	68b9      	ldr	r1, [r7, #8]
 80032c0:	430b      	orrs	r3, r1
 80032c2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4ad0      	ldr	r2, [pc, #832]	; (8003620 <UART_SetConfig+0x3ac>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d004      	beq.n	80032ee <UART_SetConfig+0x7a>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4ace      	ldr	r2, [pc, #824]	; (8003624 <UART_SetConfig+0x3b0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d103      	bne.n	80032f6 <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032ee:	f7ff ff5f 	bl	80031b0 <HAL_RCC_GetPCLK2Freq>
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	e002      	b.n	80032fc <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032f6:	f7ff ff47 	bl	8003188 <HAL_RCC_GetPCLK1Freq>
 80032fa:	60f8      	str	r0, [r7, #12]
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003304:	f040 80ba 	bne.w	800347c <UART_SetConfig+0x208>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	461d      	mov	r5, r3
 800330c:	f04f 0600 	mov.w	r6, #0
 8003310:	46a8      	mov	r8, r5
 8003312:	46b1      	mov	r9, r6
 8003314:	eb18 0308 	adds.w	r3, r8, r8
 8003318:	eb49 0409 	adc.w	r4, r9, r9
 800331c:	4698      	mov	r8, r3
 800331e:	46a1      	mov	r9, r4
 8003320:	eb18 0805 	adds.w	r8, r8, r5
 8003324:	eb49 0906 	adc.w	r9, r9, r6
 8003328:	f04f 0100 	mov.w	r1, #0
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003334:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003338:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800333c:	4688      	mov	r8, r1
 800333e:	4691      	mov	r9, r2
 8003340:	eb18 0005 	adds.w	r0, r8, r5
 8003344:	eb49 0106 	adc.w	r1, r9, r6
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	461d      	mov	r5, r3
 800334e:	f04f 0600 	mov.w	r6, #0
 8003352:	196b      	adds	r3, r5, r5
 8003354:	eb46 0406 	adc.w	r4, r6, r6
 8003358:	461a      	mov	r2, r3
 800335a:	4623      	mov	r3, r4
 800335c:	f7fd fc28 	bl	8000bb0 <__aeabi_uldivmod>
 8003360:	4603      	mov	r3, r0
 8003362:	460c      	mov	r4, r1
 8003364:	461a      	mov	r2, r3
 8003366:	4bb0      	ldr	r3, [pc, #704]	; (8003628 <UART_SetConfig+0x3b4>)
 8003368:	fba3 2302 	umull	r2, r3, r3, r2
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	461d      	mov	r5, r3
 8003376:	f04f 0600 	mov.w	r6, #0
 800337a:	46a9      	mov	r9, r5
 800337c:	46b2      	mov	sl, r6
 800337e:	eb19 0309 	adds.w	r3, r9, r9
 8003382:	eb4a 040a 	adc.w	r4, sl, sl
 8003386:	4699      	mov	r9, r3
 8003388:	46a2      	mov	sl, r4
 800338a:	eb19 0905 	adds.w	r9, r9, r5
 800338e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003392:	f04f 0100 	mov.w	r1, #0
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800339e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033a6:	4689      	mov	r9, r1
 80033a8:	4692      	mov	sl, r2
 80033aa:	eb19 0005 	adds.w	r0, r9, r5
 80033ae:	eb4a 0106 	adc.w	r1, sl, r6
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	461d      	mov	r5, r3
 80033b8:	f04f 0600 	mov.w	r6, #0
 80033bc:	196b      	adds	r3, r5, r5
 80033be:	eb46 0406 	adc.w	r4, r6, r6
 80033c2:	461a      	mov	r2, r3
 80033c4:	4623      	mov	r3, r4
 80033c6:	f7fd fbf3 	bl	8000bb0 <__aeabi_uldivmod>
 80033ca:	4603      	mov	r3, r0
 80033cc:	460c      	mov	r4, r1
 80033ce:	461a      	mov	r2, r3
 80033d0:	4b95      	ldr	r3, [pc, #596]	; (8003628 <UART_SetConfig+0x3b4>)
 80033d2:	fba3 1302 	umull	r1, r3, r3, r2
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	2164      	movs	r1, #100	; 0x64
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	3332      	adds	r3, #50	; 0x32
 80033e4:	4a90      	ldr	r2, [pc, #576]	; (8003628 <UART_SetConfig+0x3b4>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033f2:	4498      	add	r8, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	461d      	mov	r5, r3
 80033f8:	f04f 0600 	mov.w	r6, #0
 80033fc:	46a9      	mov	r9, r5
 80033fe:	46b2      	mov	sl, r6
 8003400:	eb19 0309 	adds.w	r3, r9, r9
 8003404:	eb4a 040a 	adc.w	r4, sl, sl
 8003408:	4699      	mov	r9, r3
 800340a:	46a2      	mov	sl, r4
 800340c:	eb19 0905 	adds.w	r9, r9, r5
 8003410:	eb4a 0a06 	adc.w	sl, sl, r6
 8003414:	f04f 0100 	mov.w	r1, #0
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003420:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003424:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003428:	4689      	mov	r9, r1
 800342a:	4692      	mov	sl, r2
 800342c:	eb19 0005 	adds.w	r0, r9, r5
 8003430:	eb4a 0106 	adc.w	r1, sl, r6
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	461d      	mov	r5, r3
 800343a:	f04f 0600 	mov.w	r6, #0
 800343e:	196b      	adds	r3, r5, r5
 8003440:	eb46 0406 	adc.w	r4, r6, r6
 8003444:	461a      	mov	r2, r3
 8003446:	4623      	mov	r3, r4
 8003448:	f7fd fbb2 	bl	8000bb0 <__aeabi_uldivmod>
 800344c:	4603      	mov	r3, r0
 800344e:	460c      	mov	r4, r1
 8003450:	461a      	mov	r2, r3
 8003452:	4b75      	ldr	r3, [pc, #468]	; (8003628 <UART_SetConfig+0x3b4>)
 8003454:	fba3 1302 	umull	r1, r3, r3, r2
 8003458:	095b      	lsrs	r3, r3, #5
 800345a:	2164      	movs	r1, #100	; 0x64
 800345c:	fb01 f303 	mul.w	r3, r1, r3
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	3332      	adds	r3, #50	; 0x32
 8003466:	4a70      	ldr	r2, [pc, #448]	; (8003628 <UART_SetConfig+0x3b4>)
 8003468:	fba2 2303 	umull	r2, r3, r2, r3
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	f003 0207 	and.w	r2, r3, #7
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4442      	add	r2, r8
 8003478:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800347a:	e0cc      	b.n	8003616 <UART_SetConfig+0x3a2>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	469a      	mov	sl, r3
 8003480:	f04f 0b00 	mov.w	fp, #0
 8003484:	46d0      	mov	r8, sl
 8003486:	46d9      	mov	r9, fp
 8003488:	eb18 0308 	adds.w	r3, r8, r8
 800348c:	eb49 0409 	adc.w	r4, r9, r9
 8003490:	4698      	mov	r8, r3
 8003492:	46a1      	mov	r9, r4
 8003494:	eb18 080a 	adds.w	r8, r8, sl
 8003498:	eb49 090b 	adc.w	r9, r9, fp
 800349c:	f04f 0100 	mov.w	r1, #0
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034b0:	4688      	mov	r8, r1
 80034b2:	4691      	mov	r9, r2
 80034b4:	eb1a 0508 	adds.w	r5, sl, r8
 80034b8:	eb4b 0609 	adc.w	r6, fp, r9
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4619      	mov	r1, r3
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	f04f 0400 	mov.w	r4, #0
 80034ce:	0094      	lsls	r4, r2, #2
 80034d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034d4:	008b      	lsls	r3, r1, #2
 80034d6:	461a      	mov	r2, r3
 80034d8:	4623      	mov	r3, r4
 80034da:	4628      	mov	r0, r5
 80034dc:	4631      	mov	r1, r6
 80034de:	f7fd fb67 	bl	8000bb0 <__aeabi_uldivmod>
 80034e2:	4603      	mov	r3, r0
 80034e4:	460c      	mov	r4, r1
 80034e6:	461a      	mov	r2, r3
 80034e8:	4b4f      	ldr	r3, [pc, #316]	; (8003628 <UART_SetConfig+0x3b4>)
 80034ea:	fba3 2302 	umull	r2, r3, r3, r2
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	469b      	mov	fp, r3
 80034f8:	f04f 0c00 	mov.w	ip, #0
 80034fc:	46d9      	mov	r9, fp
 80034fe:	46e2      	mov	sl, ip
 8003500:	eb19 0309 	adds.w	r3, r9, r9
 8003504:	eb4a 040a 	adc.w	r4, sl, sl
 8003508:	4699      	mov	r9, r3
 800350a:	46a2      	mov	sl, r4
 800350c:	eb19 090b 	adds.w	r9, r9, fp
 8003510:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003514:	f04f 0100 	mov.w	r1, #0
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003520:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003524:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003528:	4689      	mov	r9, r1
 800352a:	4692      	mov	sl, r2
 800352c:	eb1b 0509 	adds.w	r5, fp, r9
 8003530:	eb4c 060a 	adc.w	r6, ip, sl
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	4619      	mov	r1, r3
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	f04f 0400 	mov.w	r4, #0
 8003546:	0094      	lsls	r4, r2, #2
 8003548:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800354c:	008b      	lsls	r3, r1, #2
 800354e:	461a      	mov	r2, r3
 8003550:	4623      	mov	r3, r4
 8003552:	4628      	mov	r0, r5
 8003554:	4631      	mov	r1, r6
 8003556:	f7fd fb2b 	bl	8000bb0 <__aeabi_uldivmod>
 800355a:	4603      	mov	r3, r0
 800355c:	460c      	mov	r4, r1
 800355e:	461a      	mov	r2, r3
 8003560:	4b31      	ldr	r3, [pc, #196]	; (8003628 <UART_SetConfig+0x3b4>)
 8003562:	fba3 1302 	umull	r1, r3, r3, r2
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	2164      	movs	r1, #100	; 0x64
 800356a:	fb01 f303 	mul.w	r3, r1, r3
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	3332      	adds	r3, #50	; 0x32
 8003574:	4a2c      	ldr	r2, [pc, #176]	; (8003628 <UART_SetConfig+0x3b4>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003580:	4498      	add	r8, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	469b      	mov	fp, r3
 8003586:	f04f 0c00 	mov.w	ip, #0
 800358a:	46d9      	mov	r9, fp
 800358c:	46e2      	mov	sl, ip
 800358e:	eb19 0309 	adds.w	r3, r9, r9
 8003592:	eb4a 040a 	adc.w	r4, sl, sl
 8003596:	4699      	mov	r9, r3
 8003598:	46a2      	mov	sl, r4
 800359a:	eb19 090b 	adds.w	r9, r9, fp
 800359e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80035a2:	f04f 0100 	mov.w	r1, #0
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035b6:	4689      	mov	r9, r1
 80035b8:	4692      	mov	sl, r2
 80035ba:	eb1b 0509 	adds.w	r5, fp, r9
 80035be:	eb4c 060a 	adc.w	r6, ip, sl
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4619      	mov	r1, r3
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	f04f 0400 	mov.w	r4, #0
 80035d4:	0094      	lsls	r4, r2, #2
 80035d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035da:	008b      	lsls	r3, r1, #2
 80035dc:	461a      	mov	r2, r3
 80035de:	4623      	mov	r3, r4
 80035e0:	4628      	mov	r0, r5
 80035e2:	4631      	mov	r1, r6
 80035e4:	f7fd fae4 	bl	8000bb0 <__aeabi_uldivmod>
 80035e8:	4603      	mov	r3, r0
 80035ea:	460c      	mov	r4, r1
 80035ec:	461a      	mov	r2, r3
 80035ee:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <UART_SetConfig+0x3b4>)
 80035f0:	fba3 1302 	umull	r1, r3, r3, r2
 80035f4:	095b      	lsrs	r3, r3, #5
 80035f6:	2164      	movs	r1, #100	; 0x64
 80035f8:	fb01 f303 	mul.w	r3, r1, r3
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	3332      	adds	r3, #50	; 0x32
 8003602:	4a09      	ldr	r2, [pc, #36]	; (8003628 <UART_SetConfig+0x3b4>)
 8003604:	fba2 2303 	umull	r2, r3, r2, r3
 8003608:	095b      	lsrs	r3, r3, #5
 800360a:	f003 020f 	and.w	r2, r3, #15
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4442      	add	r2, r8
 8003614:	609a      	str	r2, [r3, #8]
}
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003620:	40011000 	.word	0x40011000
 8003624:	40011400 	.word	0x40011400
 8003628:	51eb851f 	.word	0x51eb851f

0800362c <arm_rfft_32_fast_init_f32>:
 800362c:	b178      	cbz	r0, 800364e <arm_rfft_32_fast_init_f32+0x22>
 800362e:	b430      	push	{r4, r5}
 8003630:	4908      	ldr	r1, [pc, #32]	; (8003654 <arm_rfft_32_fast_init_f32+0x28>)
 8003632:	4a09      	ldr	r2, [pc, #36]	; (8003658 <arm_rfft_32_fast_init_f32+0x2c>)
 8003634:	2310      	movs	r3, #16
 8003636:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800363a:	8003      	strh	r3, [r0, #0]
 800363c:	2520      	movs	r5, #32
 800363e:	2414      	movs	r4, #20
 8003640:	4b06      	ldr	r3, [pc, #24]	; (800365c <arm_rfft_32_fast_init_f32+0x30>)
 8003642:	8205      	strh	r5, [r0, #16]
 8003644:	8184      	strh	r4, [r0, #12]
 8003646:	6143      	str	r3, [r0, #20]
 8003648:	bc30      	pop	{r4, r5}
 800364a:	2000      	movs	r0, #0
 800364c:	4770      	bx	lr
 800364e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003652:	4770      	bx	lr
 8003654:	08007d78 	.word	0x08007d78
 8003658:	0800c6b0 	.word	0x0800c6b0
 800365c:	08015430 	.word	0x08015430

08003660 <arm_rfft_64_fast_init_f32>:
 8003660:	b178      	cbz	r0, 8003682 <arm_rfft_64_fast_init_f32+0x22>
 8003662:	b430      	push	{r4, r5}
 8003664:	4908      	ldr	r1, [pc, #32]	; (8003688 <arm_rfft_64_fast_init_f32+0x28>)
 8003666:	4a09      	ldr	r2, [pc, #36]	; (800368c <arm_rfft_64_fast_init_f32+0x2c>)
 8003668:	2320      	movs	r3, #32
 800366a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800366e:	8003      	strh	r3, [r0, #0]
 8003670:	2540      	movs	r5, #64	; 0x40
 8003672:	2430      	movs	r4, #48	; 0x30
 8003674:	4b06      	ldr	r3, [pc, #24]	; (8003690 <arm_rfft_64_fast_init_f32+0x30>)
 8003676:	8205      	strh	r5, [r0, #16]
 8003678:	8184      	strh	r4, [r0, #12]
 800367a:	6143      	str	r3, [r0, #20]
 800367c:	bc30      	pop	{r4, r5}
 800367e:	2000      	movs	r0, #0
 8003680:	4770      	bx	lr
 8003682:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003686:	4770      	bx	lr
 8003688:	08009ed0 	.word	0x08009ed0
 800368c:	08010f30 	.word	0x08010f30
 8003690:	08019cb0 	.word	0x08019cb0

08003694 <arm_rfft_256_fast_init_f32>:
 8003694:	b180      	cbz	r0, 80036b8 <arm_rfft_256_fast_init_f32+0x24>
 8003696:	b430      	push	{r4, r5}
 8003698:	4909      	ldr	r1, [pc, #36]	; (80036c0 <arm_rfft_256_fast_init_f32+0x2c>)
 800369a:	4a0a      	ldr	r2, [pc, #40]	; (80036c4 <arm_rfft_256_fast_init_f32+0x30>)
 800369c:	2380      	movs	r3, #128	; 0x80
 800369e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80036a2:	8003      	strh	r3, [r0, #0]
 80036a4:	f44f 7580 	mov.w	r5, #256	; 0x100
 80036a8:	24d0      	movs	r4, #208	; 0xd0
 80036aa:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <arm_rfft_256_fast_init_f32+0x34>)
 80036ac:	8205      	strh	r5, [r0, #16]
 80036ae:	8184      	strh	r4, [r0, #12]
 80036b0:	6143      	str	r3, [r0, #20]
 80036b2:	bc30      	pop	{r4, r5}
 80036b4:	2000      	movs	r0, #0
 80036b6:	4770      	bx	lr
 80036b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	08007bd8 	.word	0x08007bd8
 80036c4:	0800c2b0 	.word	0x0800c2b0
 80036c8:	08015030 	.word	0x08015030

080036cc <arm_rfft_512_fast_init_f32>:
 80036cc:	b190      	cbz	r0, 80036f4 <arm_rfft_512_fast_init_f32+0x28>
 80036ce:	b430      	push	{r4, r5}
 80036d0:	490a      	ldr	r1, [pc, #40]	; (80036fc <arm_rfft_512_fast_init_f32+0x30>)
 80036d2:	4a0b      	ldr	r2, [pc, #44]	; (8003700 <arm_rfft_512_fast_init_f32+0x34>)
 80036d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036d8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80036dc:	8003      	strh	r3, [r0, #0]
 80036de:	f44f 7500 	mov.w	r5, #512	; 0x200
 80036e2:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80036e6:	4b07      	ldr	r3, [pc, #28]	; (8003704 <arm_rfft_512_fast_init_f32+0x38>)
 80036e8:	8205      	strh	r5, [r0, #16]
 80036ea:	8184      	strh	r4, [r0, #12]
 80036ec:	6143      	str	r3, [r0, #20]
 80036ee:	bc30      	pop	{r4, r5}
 80036f0:	2000      	movs	r0, #0
 80036f2:	4770      	bx	lr
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	08009b60 	.word	0x08009b60
 8003700:	08010730 	.word	0x08010730
 8003704:	080194b0 	.word	0x080194b0

08003708 <arm_rfft_1024_fast_init_f32>:
 8003708:	b190      	cbz	r0, 8003730 <arm_rfft_1024_fast_init_f32+0x28>
 800370a:	b430      	push	{r4, r5}
 800370c:	490a      	ldr	r1, [pc, #40]	; (8003738 <arm_rfft_1024_fast_init_f32+0x30>)
 800370e:	4a0b      	ldr	r2, [pc, #44]	; (800373c <arm_rfft_1024_fast_init_f32+0x34>)
 8003710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003714:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003718:	8003      	strh	r3, [r0, #0]
 800371a:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800371e:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8003722:	4b07      	ldr	r3, [pc, #28]	; (8003740 <arm_rfft_1024_fast_init_f32+0x38>)
 8003724:	8205      	strh	r5, [r0, #16]
 8003726:	8184      	strh	r4, [r0, #12]
 8003728:	6143      	str	r3, [r0, #20]
 800372a:	bc30      	pop	{r4, r5}
 800372c:	2000      	movs	r0, #0
 800372e:	4770      	bx	lr
 8003730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	08009f30 	.word	0x08009f30
 800373c:	08011030 	.word	0x08011030
 8003740:	08012030 	.word	0x08012030

08003744 <arm_rfft_2048_fast_init_f32>:
 8003744:	b190      	cbz	r0, 800376c <arm_rfft_2048_fast_init_f32+0x28>
 8003746:	b430      	push	{r4, r5}
 8003748:	490a      	ldr	r1, [pc, #40]	; (8003774 <arm_rfft_2048_fast_init_f32+0x30>)
 800374a:	4a0b      	ldr	r2, [pc, #44]	; (8003778 <arm_rfft_2048_fast_init_f32+0x34>)
 800374c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003750:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003754:	8003      	strh	r3, [r0, #0]
 8003756:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800375a:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800375e:	4b07      	ldr	r3, [pc, #28]	; (800377c <arm_rfft_2048_fast_init_f32+0x38>)
 8003760:	8205      	strh	r5, [r0, #16]
 8003762:	8184      	strh	r4, [r0, #12]
 8003764:	6143      	str	r3, [r0, #20]
 8003766:	bc30      	pop	{r4, r5}
 8003768:	2000      	movs	r0, #0
 800376a:	4770      	bx	lr
 800376c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	08006dc8 	.word	0x08006dc8
 8003778:	0800a2b0 	.word	0x0800a2b0
 800377c:	08013030 	.word	0x08013030

08003780 <arm_rfft_4096_fast_init_f32>:
 8003780:	b190      	cbz	r0, 80037a8 <arm_rfft_4096_fast_init_f32+0x28>
 8003782:	b430      	push	{r4, r5}
 8003784:	490a      	ldr	r1, [pc, #40]	; (80037b0 <arm_rfft_4096_fast_init_f32+0x30>)
 8003786:	4a0b      	ldr	r2, [pc, #44]	; (80037b4 <arm_rfft_4096_fast_init_f32+0x34>)
 8003788:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800378c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003790:	8003      	strh	r3, [r0, #0]
 8003792:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8003796:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800379a:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <arm_rfft_4096_fast_init_f32+0x38>)
 800379c:	8205      	strh	r5, [r0, #16]
 800379e:	8184      	strh	r4, [r0, #12]
 80037a0:	6143      	str	r3, [r0, #20]
 80037a2:	bc30      	pop	{r4, r5}
 80037a4:	2000      	movs	r0, #0
 80037a6:	4770      	bx	lr
 80037a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	08007da0 	.word	0x08007da0
 80037b4:	0800c730 	.word	0x0800c730
 80037b8:	080154b0 	.word	0x080154b0

080037bc <arm_rfft_fast_init_f32>:
 80037bc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80037c0:	d01f      	beq.n	8003802 <arm_rfft_fast_init_f32+0x46>
 80037c2:	d90b      	bls.n	80037dc <arm_rfft_fast_init_f32+0x20>
 80037c4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80037c8:	d019      	beq.n	80037fe <arm_rfft_fast_init_f32+0x42>
 80037ca:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80037ce:	d012      	beq.n	80037f6 <arm_rfft_fast_init_f32+0x3a>
 80037d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80037d4:	d00d      	beq.n	80037f2 <arm_rfft_fast_init_f32+0x36>
 80037d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037da:	4770      	bx	lr
 80037dc:	2940      	cmp	r1, #64	; 0x40
 80037de:	d00c      	beq.n	80037fa <arm_rfft_fast_init_f32+0x3e>
 80037e0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80037e4:	d003      	beq.n	80037ee <arm_rfft_fast_init_f32+0x32>
 80037e6:	2920      	cmp	r1, #32
 80037e8:	d1f5      	bne.n	80037d6 <arm_rfft_fast_init_f32+0x1a>
 80037ea:	4b07      	ldr	r3, [pc, #28]	; (8003808 <arm_rfft_fast_init_f32+0x4c>)
 80037ec:	4718      	bx	r3
 80037ee:	4b07      	ldr	r3, [pc, #28]	; (800380c <arm_rfft_fast_init_f32+0x50>)
 80037f0:	4718      	bx	r3
 80037f2:	4b07      	ldr	r3, [pc, #28]	; (8003810 <arm_rfft_fast_init_f32+0x54>)
 80037f4:	4718      	bx	r3
 80037f6:	4b07      	ldr	r3, [pc, #28]	; (8003814 <arm_rfft_fast_init_f32+0x58>)
 80037f8:	4718      	bx	r3
 80037fa:	4b07      	ldr	r3, [pc, #28]	; (8003818 <arm_rfft_fast_init_f32+0x5c>)
 80037fc:	e7f6      	b.n	80037ec <arm_rfft_fast_init_f32+0x30>
 80037fe:	4b07      	ldr	r3, [pc, #28]	; (800381c <arm_rfft_fast_init_f32+0x60>)
 8003800:	e7f4      	b.n	80037ec <arm_rfft_fast_init_f32+0x30>
 8003802:	4b07      	ldr	r3, [pc, #28]	; (8003820 <arm_rfft_fast_init_f32+0x64>)
 8003804:	e7f2      	b.n	80037ec <arm_rfft_fast_init_f32+0x30>
 8003806:	bf00      	nop
 8003808:	0800362d 	.word	0x0800362d
 800380c:	08003695 	.word	0x08003695
 8003810:	08003709 	.word	0x08003709
 8003814:	08003781 	.word	0x08003781
 8003818:	08003661 	.word	0x08003661
 800381c:	08003745 	.word	0x08003745
 8003820:	080036cd 	.word	0x080036cd

08003824 <stage_rfft_f32>:
 8003824:	b410      	push	{r4}
 8003826:	edd1 7a00 	vldr	s15, [r1]
 800382a:	ed91 7a01 	vldr	s14, [r1, #4]
 800382e:	8804      	ldrh	r4, [r0, #0]
 8003830:	6940      	ldr	r0, [r0, #20]
 8003832:	ee37 7a07 	vadd.f32	s14, s14, s14
 8003836:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800383a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800383e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003842:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003846:	3c01      	subs	r4, #1
 8003848:	ee26 7a84 	vmul.f32	s14, s13, s8
 800384c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8003850:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8003854:	ed82 7a00 	vstr	s14, [r2]
 8003858:	edc2 7a01 	vstr	s15, [r2, #4]
 800385c:	3010      	adds	r0, #16
 800385e:	3210      	adds	r2, #16
 8003860:	3b08      	subs	r3, #8
 8003862:	3110      	adds	r1, #16
 8003864:	ed11 5a02 	vldr	s10, [r1, #-8]
 8003868:	ed93 7a02 	vldr	s14, [r3, #8]
 800386c:	ed50 6a02 	vldr	s13, [r0, #-8]
 8003870:	edd3 4a03 	vldr	s9, [r3, #12]
 8003874:	ed51 7a01 	vldr	s15, [r1, #-4]
 8003878:	ed10 6a01 	vldr	s12, [r0, #-4]
 800387c:	ee77 5a45 	vsub.f32	s11, s14, s10
 8003880:	ee37 7a05 	vadd.f32	s14, s14, s10
 8003884:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8003888:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800388c:	ee66 5a25 	vmul.f32	s11, s12, s11
 8003890:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8003894:	ee37 7a23 	vadd.f32	s14, s14, s7
 8003898:	ee66 6a85 	vmul.f32	s13, s13, s10
 800389c:	ee26 6a05 	vmul.f32	s12, s12, s10
 80038a0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80038a4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80038a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80038ac:	ee27 7a04 	vmul.f32	s14, s14, s8
 80038b0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80038b4:	3c01      	subs	r4, #1
 80038b6:	ed02 7a02 	vstr	s14, [r2, #-8]
 80038ba:	ed42 7a01 	vstr	s15, [r2, #-4]
 80038be:	f1a3 0308 	sub.w	r3, r3, #8
 80038c2:	f101 0108 	add.w	r1, r1, #8
 80038c6:	f100 0008 	add.w	r0, r0, #8
 80038ca:	f102 0208 	add.w	r2, r2, #8
 80038ce:	d1c9      	bne.n	8003864 <stage_rfft_f32+0x40>
 80038d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop

080038d8 <merge_rfft_f32>:
 80038d8:	b410      	push	{r4}
 80038da:	edd1 7a00 	vldr	s15, [r1]
 80038de:	edd1 6a01 	vldr	s13, [r1, #4]
 80038e2:	8804      	ldrh	r4, [r0, #0]
 80038e4:	6940      	ldr	r0, [r0, #20]
 80038e6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80038ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80038ee:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 80038f2:	ee27 7a04 	vmul.f32	s14, s14, s8
 80038f6:	ee67 7a84 	vmul.f32	s15, s15, s8
 80038fa:	3c01      	subs	r4, #1
 80038fc:	ed82 7a00 	vstr	s14, [r2]
 8003900:	edc2 7a01 	vstr	s15, [r2, #4]
 8003904:	b3dc      	cbz	r4, 800397e <merge_rfft_f32+0xa6>
 8003906:	00e3      	lsls	r3, r4, #3
 8003908:	3b08      	subs	r3, #8
 800390a:	440b      	add	r3, r1
 800390c:	3010      	adds	r0, #16
 800390e:	3210      	adds	r2, #16
 8003910:	3110      	adds	r1, #16
 8003912:	ed11 5a02 	vldr	s10, [r1, #-8]
 8003916:	ed93 7a02 	vldr	s14, [r3, #8]
 800391a:	ed50 6a02 	vldr	s13, [r0, #-8]
 800391e:	edd3 4a03 	vldr	s9, [r3, #12]
 8003922:	ed51 7a01 	vldr	s15, [r1, #-4]
 8003926:	ed10 6a01 	vldr	s12, [r0, #-4]
 800392a:	ee75 5a47 	vsub.f32	s11, s10, s14
 800392e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8003932:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8003936:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800393a:	ee66 5a25 	vmul.f32	s11, s12, s11
 800393e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8003942:	ee37 7a63 	vsub.f32	s14, s14, s7
 8003946:	ee66 6a85 	vmul.f32	s13, s13, s10
 800394a:	ee26 6a05 	vmul.f32	s12, s12, s10
 800394e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8003952:	ee37 7a46 	vsub.f32	s14, s14, s12
 8003956:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800395a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800395e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8003962:	3c01      	subs	r4, #1
 8003964:	ed02 7a02 	vstr	s14, [r2, #-8]
 8003968:	ed42 7a01 	vstr	s15, [r2, #-4]
 800396c:	f1a3 0308 	sub.w	r3, r3, #8
 8003970:	f101 0108 	add.w	r1, r1, #8
 8003974:	f100 0008 	add.w	r0, r0, #8
 8003978:	f102 0208 	add.w	r2, r2, #8
 800397c:	d1c9      	bne.n	8003912 <merge_rfft_f32+0x3a>
 800397e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003982:	4770      	bx	lr

08003984 <arm_rfft_fast_f32>:
 8003984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003988:	8a05      	ldrh	r5, [r0, #16]
 800398a:	086d      	lsrs	r5, r5, #1
 800398c:	8005      	strh	r5, [r0, #0]
 800398e:	4604      	mov	r4, r0
 8003990:	4616      	mov	r6, r2
 8003992:	461d      	mov	r5, r3
 8003994:	b14b      	cbz	r3, 80039aa <arm_rfft_fast_f32+0x26>
 8003996:	f7ff ff9f 	bl	80038d8 <merge_rfft_f32>
 800399a:	462a      	mov	r2, r5
 800399c:	4631      	mov	r1, r6
 800399e:	4620      	mov	r0, r4
 80039a0:	2301      	movs	r3, #1
 80039a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039a6:	f000 bb33 	b.w	8004010 <arm_cfft_f32>
 80039aa:	460f      	mov	r7, r1
 80039ac:	461a      	mov	r2, r3
 80039ae:	2301      	movs	r3, #1
 80039b0:	f000 fb2e 	bl	8004010 <arm_cfft_f32>
 80039b4:	4632      	mov	r2, r6
 80039b6:	4639      	mov	r1, r7
 80039b8:	4620      	mov	r0, r4
 80039ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039be:	f7ff bf31 	b.w	8003824 <stage_rfft_f32>
 80039c2:	bf00      	nop

080039c4 <arm_cfft_radix8by2_f32>:
 80039c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c8:	ed2d 8b08 	vpush	{d8-d11}
 80039cc:	4607      	mov	r7, r0
 80039ce:	4608      	mov	r0, r1
 80039d0:	f8b7 c000 	ldrh.w	ip, [r7]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80039da:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80039de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80039e2:	f000 80b0 	beq.w	8003b46 <arm_cfft_radix8by2_f32+0x182>
 80039e6:	008c      	lsls	r4, r1, #2
 80039e8:	3410      	adds	r4, #16
 80039ea:	f100 0310 	add.w	r3, r0, #16
 80039ee:	1906      	adds	r6, r0, r4
 80039f0:	3210      	adds	r2, #16
 80039f2:	4444      	add	r4, r8
 80039f4:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 80039f8:	f108 0510 	add.w	r5, r8, #16
 80039fc:	ed15 2a04 	vldr	s4, [r5, #-16]
 8003a00:	ed55 2a03 	vldr	s5, [r5, #-12]
 8003a04:	ed54 4a04 	vldr	s9, [r4, #-16]
 8003a08:	ed14 4a03 	vldr	s8, [r4, #-12]
 8003a0c:	ed14 6a02 	vldr	s12, [r4, #-8]
 8003a10:	ed54 5a01 	vldr	s11, [r4, #-4]
 8003a14:	ed53 3a04 	vldr	s7, [r3, #-16]
 8003a18:	ed15 0a02 	vldr	s0, [r5, #-8]
 8003a1c:	ed55 0a01 	vldr	s1, [r5, #-4]
 8003a20:	ed56 6a04 	vldr	s13, [r6, #-16]
 8003a24:	ed16 3a03 	vldr	s6, [r6, #-12]
 8003a28:	ed13 7a03 	vldr	s14, [r3, #-12]
 8003a2c:	ed13 5a02 	vldr	s10, [r3, #-8]
 8003a30:	ed53 7a01 	vldr	s15, [r3, #-4]
 8003a34:	ed16 1a02 	vldr	s2, [r6, #-8]
 8003a38:	ed56 1a01 	vldr	s3, [r6, #-4]
 8003a3c:	ee73 ba82 	vadd.f32	s23, s7, s4
 8003a40:	ee37 ba22 	vadd.f32	s22, s14, s5
 8003a44:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8003a48:	ee33 9a04 	vadd.f32	s18, s6, s8
 8003a4c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8003a50:	ee75 aa00 	vadd.f32	s21, s10, s0
 8003a54:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8003a58:	ee71 8a06 	vadd.f32	s17, s2, s12
 8003a5c:	ed43 ba04 	vstr	s23, [r3, #-16]
 8003a60:	ed03 ba03 	vstr	s22, [r3, #-12]
 8003a64:	ed43 aa02 	vstr	s21, [r3, #-8]
 8003a68:	ed03 aa01 	vstr	s20, [r3, #-4]
 8003a6c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8003a70:	ed46 9a04 	vstr	s19, [r6, #-16]
 8003a74:	ed06 9a03 	vstr	s18, [r6, #-12]
 8003a78:	ed46 8a02 	vstr	s17, [r6, #-8]
 8003a7c:	ee37 7a62 	vsub.f32	s14, s14, s5
 8003a80:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8003a84:	ee34 4a43 	vsub.f32	s8, s8, s6
 8003a88:	ed52 6a03 	vldr	s13, [r2, #-12]
 8003a8c:	ed12 3a04 	vldr	s6, [r2, #-16]
 8003a90:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8003a94:	ee27 8a26 	vmul.f32	s16, s14, s13
 8003a98:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8003a9c:	ee23 2a83 	vmul.f32	s4, s7, s6
 8003aa0:	ee64 4a83 	vmul.f32	s9, s9, s6
 8003aa4:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8003aa8:	ee27 7a03 	vmul.f32	s14, s14, s6
 8003aac:	ee64 6a26 	vmul.f32	s13, s8, s13
 8003ab0:	ee24 4a03 	vmul.f32	s8, s8, s6
 8003ab4:	ee37 7a63 	vsub.f32	s14, s14, s7
 8003ab8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8003abc:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8003ac0:	ee32 3a08 	vadd.f32	s6, s4, s16
 8003ac4:	ed05 7a03 	vstr	s14, [r5, #-12]
 8003ac8:	ed05 3a04 	vstr	s6, [r5, #-16]
 8003acc:	ed04 4a04 	vstr	s8, [r4, #-16]
 8003ad0:	ed44 6a03 	vstr	s13, [r4, #-12]
 8003ad4:	ed12 7a01 	vldr	s14, [r2, #-4]
 8003ad8:	ee76 6a41 	vsub.f32	s13, s12, s2
 8003adc:	ee35 5a40 	vsub.f32	s10, s10, s0
 8003ae0:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8003ae4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8003ae8:	ed52 5a02 	vldr	s11, [r2, #-8]
 8003aec:	ee67 3a87 	vmul.f32	s7, s15, s14
 8003af0:	ee66 4a87 	vmul.f32	s9, s13, s14
 8003af4:	ee25 4a25 	vmul.f32	s8, s10, s11
 8003af8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003afc:	ee25 5a07 	vmul.f32	s10, s10, s14
 8003b00:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8003b04:	ee26 7a07 	vmul.f32	s14, s12, s14
 8003b08:	ee26 6a25 	vmul.f32	s12, s12, s11
 8003b0c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8003b10:	ee74 5a23 	vadd.f32	s11, s8, s7
 8003b14:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8003b18:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003b1c:	3310      	adds	r3, #16
 8003b1e:	4563      	cmp	r3, ip
 8003b20:	ed45 5a02 	vstr	s11, [r5, #-8]
 8003b24:	f106 0610 	add.w	r6, r6, #16
 8003b28:	ed45 7a01 	vstr	s15, [r5, #-4]
 8003b2c:	f102 0210 	add.w	r2, r2, #16
 8003b30:	ed04 6a02 	vstr	s12, [r4, #-8]
 8003b34:	ed04 7a01 	vstr	s14, [r4, #-4]
 8003b38:	f105 0510 	add.w	r5, r5, #16
 8003b3c:	f104 0410 	add.w	r4, r4, #16
 8003b40:	f47f af5c 	bne.w	80039fc <arm_cfft_radix8by2_f32+0x38>
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	b28c      	uxth	r4, r1
 8003b48:	4621      	mov	r1, r4
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	f000 ff2c 	bl	80049a8 <arm_radix8_butterfly_f32>
 8003b50:	ecbd 8b08 	vpop	{d8-d11}
 8003b54:	4621      	mov	r1, r4
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	4640      	mov	r0, r8
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b60:	f000 bf22 	b.w	80049a8 <arm_radix8_butterfly_f32>

08003b64 <arm_cfft_radix8by4_f32>:
 8003b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b68:	ed2d 8b0a 	vpush	{d8-d12}
 8003b6c:	b08d      	sub	sp, #52	; 0x34
 8003b6e:	460d      	mov	r5, r1
 8003b70:	910b      	str	r1, [sp, #44]	; 0x2c
 8003b72:	8801      	ldrh	r1, [r0, #0]
 8003b74:	6842      	ldr	r2, [r0, #4]
 8003b76:	900a      	str	r0, [sp, #40]	; 0x28
 8003b78:	0849      	lsrs	r1, r1, #1
 8003b7a:	008b      	lsls	r3, r1, #2
 8003b7c:	18ee      	adds	r6, r5, r3
 8003b7e:	18f0      	adds	r0, r6, r3
 8003b80:	edd0 5a00 	vldr	s11, [r0]
 8003b84:	edd5 7a00 	vldr	s15, [r5]
 8003b88:	ed96 7a00 	vldr	s14, [r6]
 8003b8c:	edd0 3a01 	vldr	s7, [r0, #4]
 8003b90:	ed96 4a01 	vldr	s8, [r6, #4]
 8003b94:	ed95 5a01 	vldr	s10, [r5, #4]
 8003b98:	9008      	str	r0, [sp, #32]
 8003b9a:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8003b9e:	18c7      	adds	r7, r0, r3
 8003ba0:	edd7 4a00 	vldr	s9, [r7]
 8003ba4:	ed97 3a01 	vldr	s6, [r7, #4]
 8003ba8:	9701      	str	r7, [sp, #4]
 8003baa:	ee77 6a06 	vadd.f32	s13, s14, s12
 8003bae:	462c      	mov	r4, r5
 8003bb0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8003bb4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8003bb8:	ee16 ca90 	vmov	ip, s13
 8003bbc:	f844 cb08 	str.w	ip, [r4], #8
 8003bc0:	ee75 6a23 	vadd.f32	s13, s10, s7
 8003bc4:	edd6 5a01 	vldr	s11, [r6, #4]
 8003bc8:	edd7 2a01 	vldr	s5, [r7, #4]
 8003bcc:	9404      	str	r4, [sp, #16]
 8003bce:	ee35 5a63 	vsub.f32	s10, s10, s7
 8003bd2:	ee74 3a27 	vadd.f32	s7, s8, s15
 8003bd6:	ee36 6a47 	vsub.f32	s12, s12, s14
 8003bda:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8003bde:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8003be2:	0849      	lsrs	r1, r1, #1
 8003be4:	f102 0e08 	add.w	lr, r2, #8
 8003be8:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8003bec:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8003bf0:	9109      	str	r1, [sp, #36]	; 0x24
 8003bf2:	ee35 4a47 	vsub.f32	s8, s10, s14
 8003bf6:	f1a1 0902 	sub.w	r9, r1, #2
 8003bfa:	f8cd e00c 	str.w	lr, [sp, #12]
 8003bfe:	4631      	mov	r1, r6
 8003c00:	ee13 ea90 	vmov	lr, s7
 8003c04:	ee36 6a64 	vsub.f32	s12, s12, s9
 8003c08:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8003c0c:	4604      	mov	r4, r0
 8003c0e:	edc5 5a01 	vstr	s11, [r5, #4]
 8003c12:	ee37 7a05 	vadd.f32	s14, s14, s10
 8003c16:	f841 eb08 	str.w	lr, [r1], #8
 8003c1a:	ee34 5a24 	vadd.f32	s10, s8, s9
 8003c1e:	ee16 ea10 	vmov	lr, s12
 8003c22:	ed86 5a01 	vstr	s10, [r6, #4]
 8003c26:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8003c2a:	f844 eb08 	str.w	lr, [r4], #8
 8003c2e:	ee77 7a83 	vadd.f32	s15, s15, s6
 8003c32:	edc0 6a01 	vstr	s13, [r0, #4]
 8003c36:	9405      	str	r4, [sp, #20]
 8003c38:	4604      	mov	r4, r0
 8003c3a:	ee17 0a90 	vmov	r0, s15
 8003c3e:	9106      	str	r1, [sp, #24]
 8003c40:	ee37 7a64 	vsub.f32	s14, s14, s9
 8003c44:	f102 0110 	add.w	r1, r2, #16
 8003c48:	46bc      	mov	ip, r7
 8003c4a:	9100      	str	r1, [sp, #0]
 8003c4c:	f847 0b08 	str.w	r0, [r7], #8
 8003c50:	f102 0118 	add.w	r1, r2, #24
 8003c54:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8003c58:	9102      	str	r1, [sp, #8]
 8003c5a:	ed8c 7a01 	vstr	s14, [ip, #4]
 8003c5e:	9007      	str	r0, [sp, #28]
 8003c60:	f000 8134 	beq.w	8003ecc <arm_cfft_radix8by4_f32+0x368>
 8003c64:	f102 0920 	add.w	r9, r2, #32
 8003c68:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8003c6c:	9a01      	ldr	r2, [sp, #4]
 8003c6e:	f8dd a000 	ldr.w	sl, [sp]
 8003c72:	3b0c      	subs	r3, #12
 8003c74:	4683      	mov	fp, r0
 8003c76:	4463      	add	r3, ip
 8003c78:	f105 0e10 	add.w	lr, r5, #16
 8003c7c:	f1a4 010c 	sub.w	r1, r4, #12
 8003c80:	f104 0510 	add.w	r5, r4, #16
 8003c84:	f1a6 0c0c 	sub.w	ip, r6, #12
 8003c88:	f1a2 040c 	sub.w	r4, r2, #12
 8003c8c:	f106 0010 	add.w	r0, r6, #16
 8003c90:	3210      	adds	r2, #16
 8003c92:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8003c96:	ed55 5a02 	vldr	s11, [r5, #-8]
 8003c9a:	ed50 7a02 	vldr	s15, [r0, #-8]
 8003c9e:	ed52 1a02 	vldr	s3, [r2, #-8]
 8003ca2:	ed55 6a01 	vldr	s13, [r5, #-4]
 8003ca6:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8003caa:	ed12 1a01 	vldr	s2, [r2, #-4]
 8003cae:	ed10 8a01 	vldr	s16, [r0, #-4]
 8003cb2:	ee35 4a25 	vadd.f32	s8, s10, s11
 8003cb6:	ee30 6a26 	vadd.f32	s12, s0, s13
 8003cba:	ee37 7a84 	vadd.f32	s14, s15, s8
 8003cbe:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003cc2:	ee37 7a21 	vadd.f32	s14, s14, s3
 8003cc6:	ee75 5a65 	vsub.f32	s11, s10, s11
 8003cca:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8003cce:	ed10 7a01 	vldr	s14, [r0, #-4]
 8003cd2:	ed52 6a01 	vldr	s13, [r2, #-4]
 8003cd6:	ee36 7a07 	vadd.f32	s14, s12, s14
 8003cda:	ee78 aa25 	vadd.f32	s21, s16, s11
 8003cde:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003ce2:	ee70 3a67 	vsub.f32	s7, s0, s15
 8003ce6:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8003cea:	ed94 7a02 	vldr	s14, [r4, #8]
 8003cee:	ed9c 2a02 	vldr	s4, [ip, #8]
 8003cf2:	ed91 ba02 	vldr	s22, [r1, #8]
 8003cf6:	edd3 9a02 	vldr	s19, [r3, #8]
 8003cfa:	edd4 2a01 	vldr	s5, [r4, #4]
 8003cfe:	ed9c 9a01 	vldr	s18, [ip, #4]
 8003d02:	ed93 5a01 	vldr	s10, [r3, #4]
 8003d06:	edd1 0a01 	vldr	s1, [r1, #4]
 8003d0a:	ee72 6a07 	vadd.f32	s13, s4, s14
 8003d0e:	ee32 2a47 	vsub.f32	s4, s4, s14
 8003d12:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8003d16:	ee79 4a22 	vadd.f32	s9, s18, s5
 8003d1a:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8003d1e:	ee79 2a62 	vsub.f32	s5, s18, s5
 8003d22:	ed8c 7a02 	vstr	s14, [ip, #8]
 8003d26:	ed91 7a01 	vldr	s14, [r1, #4]
 8003d2a:	edd3 8a01 	vldr	s17, [r3, #4]
 8003d2e:	ee34 7a87 	vadd.f32	s14, s9, s14
 8003d32:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8003d36:	ee37 7a28 	vadd.f32	s14, s14, s17
 8003d3a:	ee32 9a60 	vsub.f32	s18, s4, s1
 8003d3e:	ed8c 7a01 	vstr	s14, [ip, #4]
 8003d42:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8003d46:	ed1a aa02 	vldr	s20, [sl, #-8]
 8003d4a:	ee73 8a22 	vadd.f32	s17, s6, s5
 8003d4e:	ee39 9a05 	vadd.f32	s18, s18, s10
 8003d52:	ee7a aac1 	vsub.f32	s21, s21, s2
 8003d56:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8003d5a:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8003d5e:	ee69 ba07 	vmul.f32	s23, s18, s14
 8003d62:	ee6a aa87 	vmul.f32	s21, s21, s14
 8003d66:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8003d6a:	ee63 ca87 	vmul.f32	s25, s7, s14
 8003d6e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8003d72:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8003d76:	ee68 8a87 	vmul.f32	s17, s17, s14
 8003d7a:	ee73 3aea 	vsub.f32	s7, s7, s21
 8003d7e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8003d82:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8003d86:	ee3b aaca 	vsub.f32	s20, s23, s20
 8003d8a:	ee34 4a67 	vsub.f32	s8, s8, s15
 8003d8e:	ee76 6acb 	vsub.f32	s13, s13, s22
 8003d92:	ee36 6a48 	vsub.f32	s12, s12, s16
 8003d96:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8003d9a:	ed00 7a02 	vstr	s14, [r0, #-8]
 8003d9e:	ed40 3a01 	vstr	s7, [r0, #-4]
 8003da2:	edc1 8a01 	vstr	s17, [r1, #4]
 8003da6:	ed81 aa02 	vstr	s20, [r1, #8]
 8003daa:	ed59 3a04 	vldr	s7, [r9, #-16]
 8003dae:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8003db2:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8003db6:	ed59 6a03 	vldr	s13, [r9, #-12]
 8003dba:	ee34 4a61 	vsub.f32	s8, s8, s3
 8003dbe:	ee36 6a41 	vsub.f32	s12, s12, s2
 8003dc2:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8003dc6:	ee66 9a26 	vmul.f32	s19, s12, s13
 8003dca:	ee24 9a23 	vmul.f32	s18, s8, s7
 8003dce:	ee26 6a23 	vmul.f32	s12, s12, s7
 8003dd2:	ee24 4a26 	vmul.f32	s8, s8, s13
 8003dd6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003dda:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8003dde:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8003de2:	ee36 6a44 	vsub.f32	s12, s12, s8
 8003de6:	ee37 7a64 	vsub.f32	s14, s14, s9
 8003dea:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8003dee:	ee79 3a29 	vadd.f32	s7, s18, s19
 8003df2:	ee75 6a60 	vsub.f32	s13, s10, s1
 8003df6:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8003dfa:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003dfe:	ed45 3a02 	vstr	s7, [r5, #-8]
 8003e02:	ed05 6a01 	vstr	s12, [r5, #-4]
 8003e06:	ed84 7a01 	vstr	s14, [r4, #4]
 8003e0a:	ed84 4a02 	vstr	s8, [r4, #8]
 8003e0e:	ee35 6a81 	vadd.f32	s12, s11, s2
 8003e12:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8003e16:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 8003e1a:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 8003e1e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8003e22:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8003e26:	ee67 2a26 	vmul.f32	s5, s14, s13
 8003e2a:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8003e2e:	ee26 5a25 	vmul.f32	s10, s12, s11
 8003e32:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003e36:	ee26 6a26 	vmul.f32	s12, s12, s13
 8003e3a:	ee27 7a25 	vmul.f32	s14, s14, s11
 8003e3e:	ee63 6a26 	vmul.f32	s13, s6, s13
 8003e42:	ee23 3a25 	vmul.f32	s6, s6, s11
 8003e46:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8003e4a:	ee75 5a24 	vadd.f32	s11, s10, s9
 8003e4e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8003e52:	ee36 7a87 	vadd.f32	s14, s13, s14
 8003e56:	f1bb 0b01 	subs.w	fp, fp, #1
 8003e5a:	ed42 5a02 	vstr	s11, [r2, #-8]
 8003e5e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8003e62:	f10e 0e08 	add.w	lr, lr, #8
 8003e66:	ed83 3a02 	vstr	s6, [r3, #8]
 8003e6a:	ed83 7a01 	vstr	s14, [r3, #4]
 8003e6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8003e72:	f10a 0a08 	add.w	sl, sl, #8
 8003e76:	f100 0008 	add.w	r0, r0, #8
 8003e7a:	f1a1 0108 	sub.w	r1, r1, #8
 8003e7e:	f109 0910 	add.w	r9, r9, #16
 8003e82:	f105 0508 	add.w	r5, r5, #8
 8003e86:	f1a4 0408 	sub.w	r4, r4, #8
 8003e8a:	f108 0818 	add.w	r8, r8, #24
 8003e8e:	f102 0208 	add.w	r2, r2, #8
 8003e92:	f1a3 0308 	sub.w	r3, r3, #8
 8003e96:	f47f aefc 	bne.w	8003c92 <arm_cfft_radix8by4_f32+0x12e>
 8003e9a:	9907      	ldr	r1, [sp, #28]
 8003e9c:	9800      	ldr	r0, [sp, #0]
 8003e9e:	00cb      	lsls	r3, r1, #3
 8003ea0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8003ea4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003ea8:	9100      	str	r1, [sp, #0]
 8003eaa:	9904      	ldr	r1, [sp, #16]
 8003eac:	4419      	add	r1, r3
 8003eae:	9104      	str	r1, [sp, #16]
 8003eb0:	9903      	ldr	r1, [sp, #12]
 8003eb2:	4419      	add	r1, r3
 8003eb4:	9103      	str	r1, [sp, #12]
 8003eb6:	9906      	ldr	r1, [sp, #24]
 8003eb8:	4419      	add	r1, r3
 8003eba:	9106      	str	r1, [sp, #24]
 8003ebc:	9905      	ldr	r1, [sp, #20]
 8003ebe:	441f      	add	r7, r3
 8003ec0:	4419      	add	r1, r3
 8003ec2:	9b02      	ldr	r3, [sp, #8]
 8003ec4:	9105      	str	r1, [sp, #20]
 8003ec6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003eca:	9302      	str	r3, [sp, #8]
 8003ecc:	9904      	ldr	r1, [sp, #16]
 8003ece:	9805      	ldr	r0, [sp, #20]
 8003ed0:	ed91 4a00 	vldr	s8, [r1]
 8003ed4:	edd0 6a00 	vldr	s13, [r0]
 8003ed8:	9b06      	ldr	r3, [sp, #24]
 8003eda:	ed97 3a00 	vldr	s6, [r7]
 8003ede:	edd3 7a00 	vldr	s15, [r3]
 8003ee2:	edd0 4a01 	vldr	s9, [r0, #4]
 8003ee6:	edd1 3a01 	vldr	s7, [r1, #4]
 8003eea:	ed97 2a01 	vldr	s4, [r7, #4]
 8003eee:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ef2:	9a03      	ldr	r2, [sp, #12]
 8003ef4:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8003ef8:	ee34 6a26 	vadd.f32	s12, s8, s13
 8003efc:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8003f00:	ee37 5a86 	vadd.f32	s10, s15, s12
 8003f04:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8003f08:	ee35 5a03 	vadd.f32	s10, s10, s6
 8003f0c:	ee74 6a66 	vsub.f32	s13, s8, s13
 8003f10:	ed81 5a00 	vstr	s10, [r1]
 8003f14:	ed93 5a01 	vldr	s10, [r3, #4]
 8003f18:	edd7 4a01 	vldr	s9, [r7, #4]
 8003f1c:	ee35 5a85 	vadd.f32	s10, s11, s10
 8003f20:	ee37 4a26 	vadd.f32	s8, s14, s13
 8003f24:	ee35 5a24 	vadd.f32	s10, s10, s9
 8003f28:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8003f2c:	ed81 5a01 	vstr	s10, [r1, #4]
 8003f30:	edd2 1a00 	vldr	s3, [r2]
 8003f34:	edd2 2a01 	vldr	s5, [r2, #4]
 8003f38:	ee34 5a83 	vadd.f32	s10, s9, s6
 8003f3c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8003f40:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003f44:	ee64 4a21 	vmul.f32	s9, s8, s3
 8003f48:	ee24 4a22 	vmul.f32	s8, s8, s5
 8003f4c:	ee65 2a22 	vmul.f32	s5, s10, s5
 8003f50:	ee25 5a21 	vmul.f32	s10, s10, s3
 8003f54:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8003f58:	ee35 5a44 	vsub.f32	s10, s10, s8
 8003f5c:	edc3 2a00 	vstr	s5, [r3]
 8003f60:	ed83 5a01 	vstr	s10, [r3, #4]
 8003f64:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8003f68:	9b00      	ldr	r3, [sp, #0]
 8003f6a:	ee36 6a43 	vsub.f32	s12, s12, s6
 8003f6e:	ed93 4a01 	vldr	s8, [r3, #4]
 8003f72:	ed93 5a00 	vldr	s10, [r3]
 8003f76:	9b02      	ldr	r3, [sp, #8]
 8003f78:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8003f7c:	ee66 4a05 	vmul.f32	s9, s12, s10
 8003f80:	ee25 5a85 	vmul.f32	s10, s11, s10
 8003f84:	ee26 6a04 	vmul.f32	s12, s12, s8
 8003f88:	ee65 5a84 	vmul.f32	s11, s11, s8
 8003f8c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8003f90:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8003f94:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8003f98:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8003f9c:	ed80 6a01 	vstr	s12, [r0, #4]
 8003fa0:	edc0 5a00 	vstr	s11, [r0]
 8003fa4:	edd3 5a01 	vldr	s11, [r3, #4]
 8003fa8:	edd3 6a00 	vldr	s13, [r3]
 8003fac:	ee37 7a02 	vadd.f32	s14, s14, s4
 8003fb0:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8003fb4:	ee27 6a26 	vmul.f32	s12, s14, s13
 8003fb8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003fbc:	ee27 7a25 	vmul.f32	s14, s14, s11
 8003fc0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003fc4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8003fc8:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003fcc:	ed87 7a01 	vstr	s14, [r7, #4]
 8003fd0:	edc7 7a00 	vstr	s15, [r7]
 8003fd4:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 8003fd8:	4621      	mov	r1, r4
 8003fda:	686a      	ldr	r2, [r5, #4]
 8003fdc:	2304      	movs	r3, #4
 8003fde:	f000 fce3 	bl	80049a8 <arm_radix8_butterfly_f32>
 8003fe2:	4630      	mov	r0, r6
 8003fe4:	4621      	mov	r1, r4
 8003fe6:	686a      	ldr	r2, [r5, #4]
 8003fe8:	2304      	movs	r3, #4
 8003fea:	f000 fcdd 	bl	80049a8 <arm_radix8_butterfly_f32>
 8003fee:	9808      	ldr	r0, [sp, #32]
 8003ff0:	686a      	ldr	r2, [r5, #4]
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	2304      	movs	r3, #4
 8003ff6:	f000 fcd7 	bl	80049a8 <arm_radix8_butterfly_f32>
 8003ffa:	686a      	ldr	r2, [r5, #4]
 8003ffc:	9801      	ldr	r0, [sp, #4]
 8003ffe:	4621      	mov	r1, r4
 8004000:	2304      	movs	r3, #4
 8004002:	b00d      	add	sp, #52	; 0x34
 8004004:	ecbd 8b0a 	vpop	{d8-d12}
 8004008:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800400c:	f000 bccc 	b.w	80049a8 <arm_radix8_butterfly_f32>

08004010 <arm_cfft_f32>:
 8004010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004014:	2a01      	cmp	r2, #1
 8004016:	4606      	mov	r6, r0
 8004018:	4617      	mov	r7, r2
 800401a:	460c      	mov	r4, r1
 800401c:	4698      	mov	r8, r3
 800401e:	8805      	ldrh	r5, [r0, #0]
 8004020:	d056      	beq.n	80040d0 <arm_cfft_f32+0xc0>
 8004022:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8004026:	d063      	beq.n	80040f0 <arm_cfft_f32+0xe0>
 8004028:	d916      	bls.n	8004058 <arm_cfft_f32+0x48>
 800402a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800402e:	d01a      	beq.n	8004066 <arm_cfft_f32+0x56>
 8004030:	d947      	bls.n	80040c2 <arm_cfft_f32+0xb2>
 8004032:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8004036:	d05b      	beq.n	80040f0 <arm_cfft_f32+0xe0>
 8004038:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800403c:	d105      	bne.n	800404a <arm_cfft_f32+0x3a>
 800403e:	2301      	movs	r3, #1
 8004040:	6872      	ldr	r2, [r6, #4]
 8004042:	4629      	mov	r1, r5
 8004044:	4620      	mov	r0, r4
 8004046:	f000 fcaf 	bl	80049a8 <arm_radix8_butterfly_f32>
 800404a:	f1b8 0f00 	cmp.w	r8, #0
 800404e:	d111      	bne.n	8004074 <arm_cfft_f32+0x64>
 8004050:	2f01      	cmp	r7, #1
 8004052:	d016      	beq.n	8004082 <arm_cfft_f32+0x72>
 8004054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004058:	2d20      	cmp	r5, #32
 800405a:	d049      	beq.n	80040f0 <arm_cfft_f32+0xe0>
 800405c:	d935      	bls.n	80040ca <arm_cfft_f32+0xba>
 800405e:	2d40      	cmp	r5, #64	; 0x40
 8004060:	d0ed      	beq.n	800403e <arm_cfft_f32+0x2e>
 8004062:	2d80      	cmp	r5, #128	; 0x80
 8004064:	d1f1      	bne.n	800404a <arm_cfft_f32+0x3a>
 8004066:	4621      	mov	r1, r4
 8004068:	4630      	mov	r0, r6
 800406a:	f7ff fcab 	bl	80039c4 <arm_cfft_radix8by2_f32>
 800406e:	f1b8 0f00 	cmp.w	r8, #0
 8004072:	d0ed      	beq.n	8004050 <arm_cfft_f32+0x40>
 8004074:	68b2      	ldr	r2, [r6, #8]
 8004076:	89b1      	ldrh	r1, [r6, #12]
 8004078:	4620      	mov	r0, r4
 800407a:	f000 f841 	bl	8004100 <arm_bitreversal_32>
 800407e:	2f01      	cmp	r7, #1
 8004080:	d1e8      	bne.n	8004054 <arm_cfft_f32+0x44>
 8004082:	ee07 5a90 	vmov	s15, r5
 8004086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800408e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004092:	2d00      	cmp	r5, #0
 8004094:	d0de      	beq.n	8004054 <arm_cfft_f32+0x44>
 8004096:	f104 0108 	add.w	r1, r4, #8
 800409a:	2300      	movs	r3, #0
 800409c:	3301      	adds	r3, #1
 800409e:	429d      	cmp	r5, r3
 80040a0:	f101 0108 	add.w	r1, r1, #8
 80040a4:	ed11 7a04 	vldr	s14, [r1, #-16]
 80040a8:	ed51 7a03 	vldr	s15, [r1, #-12]
 80040ac:	ee27 7a26 	vmul.f32	s14, s14, s13
 80040b0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80040b4:	ed01 7a04 	vstr	s14, [r1, #-16]
 80040b8:	ed41 7a03 	vstr	s15, [r1, #-12]
 80040bc:	d1ee      	bne.n	800409c <arm_cfft_f32+0x8c>
 80040be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040c2:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80040c6:	d0ba      	beq.n	800403e <arm_cfft_f32+0x2e>
 80040c8:	e7bf      	b.n	800404a <arm_cfft_f32+0x3a>
 80040ca:	2d10      	cmp	r5, #16
 80040cc:	d0cb      	beq.n	8004066 <arm_cfft_f32+0x56>
 80040ce:	e7bc      	b.n	800404a <arm_cfft_f32+0x3a>
 80040d0:	b19d      	cbz	r5, 80040fa <arm_cfft_f32+0xea>
 80040d2:	f101 030c 	add.w	r3, r1, #12
 80040d6:	2200      	movs	r2, #0
 80040d8:	ed53 7a02 	vldr	s15, [r3, #-8]
 80040dc:	3201      	adds	r2, #1
 80040de:	eef1 7a67 	vneg.f32	s15, s15
 80040e2:	4295      	cmp	r5, r2
 80040e4:	ed43 7a02 	vstr	s15, [r3, #-8]
 80040e8:	f103 0308 	add.w	r3, r3, #8
 80040ec:	d1f4      	bne.n	80040d8 <arm_cfft_f32+0xc8>
 80040ee:	e798      	b.n	8004022 <arm_cfft_f32+0x12>
 80040f0:	4621      	mov	r1, r4
 80040f2:	4630      	mov	r0, r6
 80040f4:	f7ff fd36 	bl	8003b64 <arm_cfft_radix8by4_f32>
 80040f8:	e7a7      	b.n	800404a <arm_cfft_f32+0x3a>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0aa      	beq.n	8004054 <arm_cfft_f32+0x44>
 80040fe:	e7b9      	b.n	8004074 <arm_cfft_f32+0x64>

08004100 <arm_bitreversal_32>:
 8004100:	b1e9      	cbz	r1, 800413e <arm_bitreversal_32+0x3e>
 8004102:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004104:	2500      	movs	r5, #0
 8004106:	f102 0e02 	add.w	lr, r2, #2
 800410a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800410e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8004112:	08a4      	lsrs	r4, r4, #2
 8004114:	089b      	lsrs	r3, r3, #2
 8004116:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800411a:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800411e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8004122:	00a6      	lsls	r6, r4, #2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800412a:	3304      	adds	r3, #4
 800412c:	1d34      	adds	r4, r6, #4
 800412e:	3502      	adds	r5, #2
 8004130:	58c6      	ldr	r6, [r0, r3]
 8004132:	5907      	ldr	r7, [r0, r4]
 8004134:	50c7      	str	r7, [r0, r3]
 8004136:	428d      	cmp	r5, r1
 8004138:	5106      	str	r6, [r0, r4]
 800413a:	d3e6      	bcc.n	800410a <arm_bitreversal_32+0xa>
 800413c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800413e:	4770      	bx	lr

08004140 <arm_correlate_f32>:
 8004140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004144:	4299      	cmp	r1, r3
 8004146:	b08d      	sub	sp, #52	; 0x34
 8004148:	f0c0 824c 	bcc.w	80045e4 <arm_correlate_f32+0x4a4>
 800414c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800414e:	eba1 0c03 	sub.w	ip, r1, r3
 8004152:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 8004156:	f04f 0e04 	mov.w	lr, #4
 800415a:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 800415e:	3101      	adds	r1, #1
 8004160:	1ac9      	subs	r1, r1, r3
 8004162:	3c01      	subs	r4, #1
 8004164:	1e5e      	subs	r6, r3, #1
 8004166:	9102      	str	r1, [sp, #8]
 8004168:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800416c:	f000 8294 	beq.w	8004698 <arm_correlate_f32+0x558>
 8004170:	eddf 7a53 	vldr	s15, [pc, #332]	; 80042c0 <arm_correlate_f32+0x180>
 8004174:	f1a1 0804 	sub.w	r8, r1, #4
 8004178:	46e1      	mov	r9, ip
 800417a:	4605      	mov	r5, r0
 800417c:	2401      	movs	r4, #1
 800417e:	f014 0703 	ands.w	r7, r4, #3
 8004182:	d01b      	beq.n	80041bc <arm_correlate_f32+0x7c>
 8004184:	ed91 7a00 	vldr	s14, [r1]
 8004188:	edd5 6a00 	vldr	s13, [r5]
 800418c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004190:	3f01      	subs	r7, #1
 8004192:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004196:	d011      	beq.n	80041bc <arm_correlate_f32+0x7c>
 8004198:	ed91 7a01 	vldr	s14, [r1, #4]
 800419c:	edd5 6a01 	vldr	s13, [r5, #4]
 80041a0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80041a4:	2f01      	cmp	r7, #1
 80041a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041aa:	d007      	beq.n	80041bc <arm_correlate_f32+0x7c>
 80041ac:	ed95 7a02 	vldr	s14, [r5, #8]
 80041b0:	edd1 6a02 	vldr	s13, [r1, #8]
 80041b4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80041b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041bc:	1c67      	adds	r7, r4, #1
 80041be:	42bb      	cmp	r3, r7
 80041c0:	edc9 7a00 	vstr	s15, [r9]
 80041c4:	4641      	mov	r1, r8
 80041c6:	44f1      	add	r9, lr
 80041c8:	d03a      	beq.n	8004240 <arm_correlate_f32+0x100>
 80041ca:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 80041ce:	f000 8267 	beq.w	80046a0 <arm_correlate_f32+0x560>
 80041d2:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 80041d6:	f100 0110 	add.w	r1, r0, #16
 80041da:	eddf 7a39 	vldr	s15, [pc, #228]	; 80042c0 <arm_correlate_f32+0x180>
 80041de:	eb01 050a 	add.w	r5, r1, sl
 80041e2:	f108 0410 	add.w	r4, r8, #16
 80041e6:	ed11 7a04 	vldr	s14, [r1, #-16]
 80041ea:	ed54 3a04 	vldr	s7, [r4, #-16]
 80041ee:	ed11 6a03 	vldr	s12, [r1, #-12]
 80041f2:	ed14 4a03 	vldr	s8, [r4, #-12]
 80041f6:	ed51 6a02 	vldr	s13, [r1, #-8]
 80041fa:	ed54 4a02 	vldr	s9, [r4, #-8]
 80041fe:	ed51 5a01 	vldr	s11, [r1, #-4]
 8004202:	ed14 5a01 	vldr	s10, [r4, #-4]
 8004206:	ee27 7a23 	vmul.f32	s14, s14, s7
 800420a:	ee26 6a04 	vmul.f32	s12, s12, s8
 800420e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004212:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8004216:	ee76 7a27 	vadd.f32	s15, s12, s15
 800421a:	ee65 6a85 	vmul.f32	s13, s11, s10
 800421e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004222:	3110      	adds	r1, #16
 8004224:	428d      	cmp	r5, r1
 8004226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800422a:	f104 0410 	add.w	r4, r4, #16
 800422e:	d1da      	bne.n	80041e6 <arm_correlate_f32+0xa6>
 8004230:	eb00 050a 	add.w	r5, r0, sl
 8004234:	eb08 010a 	add.w	r1, r8, sl
 8004238:	f1a8 0804 	sub.w	r8, r8, #4
 800423c:	463c      	mov	r4, r7
 800423e:	e79e      	b.n	800417e <arm_correlate_f32+0x3e>
 8004240:	2b03      	cmp	r3, #3
 8004242:	fb0e cc04 	mla	ip, lr, r4, ip
 8004246:	f240 81dd 	bls.w	8004604 <arm_correlate_f32+0x4c4>
 800424a:	9b02      	ldr	r3, [sp, #8]
 800424c:	0899      	lsrs	r1, r3, #2
 800424e:	9103      	str	r1, [sp, #12]
 8004250:	f000 8220 	beq.w	8004694 <arm_correlate_f32+0x554>
 8004254:	08bb      	lsrs	r3, r7, #2
 8004256:	f007 0403 	and.w	r4, r7, #3
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	f103 0b0c 	add.w	fp, r3, #12
 8004262:	18d5      	adds	r5, r2, r3
 8004264:	1e63      	subs	r3, r4, #1
 8004266:	0109      	lsls	r1, r1, #4
 8004268:	9306      	str	r3, [sp, #24]
 800426a:	f100 080c 	add.w	r8, r0, #12
 800426e:	9401      	str	r4, [sp, #4]
 8004270:	9104      	str	r1, [sp, #16]
 8004272:	ea4f 048e 	mov.w	r4, lr, lsl #2
 8004276:	4441      	add	r1, r8
 8004278:	f102 0310 	add.w	r3, r2, #16
 800427c:	e9cd 6009 	strd	r6, r0, [sp, #36]	; 0x24
 8004280:	9e06      	ldr	r6, [sp, #24]
 8004282:	9405      	str	r4, [sp, #20]
 8004284:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 8004288:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 800428c:	46e1      	mov	r9, ip
 800428e:	4483      	add	fp, r0
 8004290:	460f      	mov	r7, r1
 8004292:	920b      	str	r2, [sp, #44]	; 0x2c
 8004294:	469c      	mov	ip, r3
 8004296:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 80042c0 <arm_correlate_f32+0x180>
 800429a:	ed58 1a03 	vldr	s3, [r8, #-12]
 800429e:	ed18 2a02 	vldr	s4, [r8, #-8]
 80042a2:	ed58 2a01 	vldr	s5, [r8, #-4]
 80042a6:	ed98 0a00 	vldr	s0, [r8]
 80042aa:	9900      	ldr	r1, [sp, #0]
 80042ac:	eef0 5a46 	vmov.f32	s11, s12
 80042b0:	eeb0 5a46 	vmov.f32	s10, s12
 80042b4:	eef0 4a46 	vmov.f32	s9, s12
 80042b8:	4663      	mov	r3, ip
 80042ba:	4642      	mov	r2, r8
 80042bc:	e005      	b.n	80042ca <arm_correlate_f32+0x18a>
 80042be:	bf00      	nop
 80042c0:	00000000 	.word	0x00000000
 80042c4:	ed90 0a04 	vldr	s0, [r0, #16]
 80042c8:	3210      	adds	r2, #16
 80042ca:	ed53 6a04 	vldr	s13, [r3, #-16]
 80042ce:	ed13 7a03 	vldr	s14, [r3, #-12]
 80042d2:	ed53 7a02 	vldr	s15, [r3, #-8]
 80042d6:	ed13 1a01 	vldr	s2, [r3, #-4]
 80042da:	ee62 3a26 	vmul.f32	s7, s4, s13
 80042de:	ee22 4aa6 	vmul.f32	s8, s5, s13
 80042e2:	ee61 0aa6 	vmul.f32	s1, s3, s13
 80042e6:	edd2 1a01 	vldr	s3, [r2, #4]
 80042ea:	ee66 6a80 	vmul.f32	s13, s13, s0
 80042ee:	ee22 3a07 	vmul.f32	s6, s4, s14
 80042f2:	ee33 5a85 	vadd.f32	s10, s7, s10
 80042f6:	ee74 5a25 	vadd.f32	s11, s8, s11
 80042fa:	ee62 3a87 	vmul.f32	s7, s5, s14
 80042fe:	ee20 4a07 	vmul.f32	s8, s0, s14
 8004302:	ee70 4aa4 	vadd.f32	s9, s1, s9
 8004306:	ee36 6a86 	vadd.f32	s12, s13, s12
 800430a:	ed92 2a02 	vldr	s4, [r2, #8]
 800430e:	ee27 7a21 	vmul.f32	s14, s14, s3
 8004312:	ee73 3a85 	vadd.f32	s7, s7, s10
 8004316:	ee37 7a06 	vadd.f32	s14, s14, s12
 800431a:	ee20 5a27 	vmul.f32	s10, s0, s15
 800431e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8004322:	ee34 4a25 	vadd.f32	s8, s8, s11
 8004326:	ee62 4aa7 	vmul.f32	s9, s5, s15
 800432a:	ee61 5aa7 	vmul.f32	s11, s3, s15
 800432e:	edd2 2a03 	vldr	s5, [r2, #12]
 8004332:	ee67 7a82 	vmul.f32	s15, s15, s4
 8004336:	ee35 5a23 	vadd.f32	s10, s10, s7
 800433a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800433e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8004342:	ee20 0a01 	vmul.f32	s0, s0, s2
 8004346:	ee61 3a81 	vmul.f32	s7, s3, s2
 800434a:	ee75 5a84 	vadd.f32	s11, s11, s8
 800434e:	ee22 7a01 	vmul.f32	s14, s4, s2
 8004352:	ee21 6a22 	vmul.f32	s12, s2, s5
 8004356:	3901      	subs	r1, #1
 8004358:	f103 0310 	add.w	r3, r3, #16
 800435c:	ee70 4a24 	vadd.f32	s9, s0, s9
 8004360:	ee33 5a85 	vadd.f32	s10, s7, s10
 8004364:	ee77 5a25 	vadd.f32	s11, s14, s11
 8004368:	ee36 6a27 	vadd.f32	s12, s12, s15
 800436c:	4610      	mov	r0, r2
 800436e:	d1a9      	bne.n	80042c4 <arm_correlate_f32+0x184>
 8004370:	9b01      	ldr	r3, [sp, #4]
 8004372:	b3f3      	cbz	r3, 80043f2 <arm_correlate_f32+0x2b2>
 8004374:	edd5 7a00 	vldr	s15, [r5]
 8004378:	ed9b 4a00 	vldr	s8, [fp]
 800437c:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8004380:	ee62 3a27 	vmul.f32	s7, s4, s15
 8004384:	ee22 7aa7 	vmul.f32	s14, s5, s15
 8004388:	ee64 7a27 	vmul.f32	s15, s8, s15
 800438c:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8004390:	ee35 5a23 	vadd.f32	s10, s10, s7
 8004394:	ee75 5a87 	vadd.f32	s11, s11, s14
 8004398:	ee36 6a27 	vadd.f32	s12, s12, s15
 800439c:	b34e      	cbz	r6, 80043f2 <arm_correlate_f32+0x2b2>
 800439e:	edd5 7a01 	vldr	s15, [r5, #4]
 80043a2:	eddb 6a01 	vldr	s13, [fp, #4]
 80043a6:	ee22 7a27 	vmul.f32	s14, s4, s15
 80043aa:	ee22 3aa7 	vmul.f32	s6, s5, s15
 80043ae:	ee67 3a84 	vmul.f32	s7, s15, s8
 80043b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043b6:	2e01      	cmp	r6, #1
 80043b8:	ee74 4a87 	vadd.f32	s9, s9, s14
 80043bc:	ee35 5a03 	vadd.f32	s10, s10, s6
 80043c0:	ee75 5aa3 	vadd.f32	s11, s11, s7
 80043c4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80043c8:	d013      	beq.n	80043f2 <arm_correlate_f32+0x2b2>
 80043ca:	ed95 7a02 	vldr	s14, [r5, #8]
 80043ce:	eddb 3a02 	vldr	s7, [fp, #8]
 80043d2:	ee62 7a87 	vmul.f32	s15, s5, s14
 80043d6:	ee27 4a04 	vmul.f32	s8, s14, s8
 80043da:	ee67 6a26 	vmul.f32	s13, s14, s13
 80043de:	ee27 7a23 	vmul.f32	s14, s14, s7
 80043e2:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80043e6:	ee35 5a04 	vadd.f32	s10, s10, s8
 80043ea:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80043ee:	ee36 6a07 	vadd.f32	s12, s12, s14
 80043f2:	f108 0810 	add.w	r8, r8, #16
 80043f6:	eb09 020e 	add.w	r2, r9, lr
 80043fa:	eb0a 030e 	add.w	r3, sl, lr
 80043fe:	4547      	cmp	r7, r8
 8004400:	edc9 4a00 	vstr	s9, [r9]
 8004404:	f10b 0b10 	add.w	fp, fp, #16
 8004408:	ed82 5a00 	vstr	s10, [r2]
 800440c:	44a1      	add	r9, r4
 800440e:	edca 5a00 	vstr	s11, [sl]
 8004412:	ed83 6a00 	vstr	s12, [r3]
 8004416:	44a2      	add	sl, r4
 8004418:	f47f af3d 	bne.w	8004296 <arm_correlate_f32+0x156>
 800441c:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 8004420:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	; 0x24
 8004424:	9b03      	ldr	r3, [sp, #12]
 8004426:	9c05      	ldr	r4, [sp, #20]
 8004428:	9904      	ldr	r1, [sp, #16]
 800442a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800442c:	fb04 cc03 	mla	ip, r4, r3, ip
 8004430:	4401      	add	r1, r0
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	460d      	mov	r5, r1
 8004436:	9303      	str	r3, [sp, #12]
 8004438:	9b02      	ldr	r3, [sp, #8]
 800443a:	f013 0303 	ands.w	r3, r3, #3
 800443e:	9301      	str	r3, [sp, #4]
 8004440:	d071      	beq.n	8004526 <arm_correlate_f32+0x3e6>
 8004442:	9903      	ldr	r1, [sp, #12]
 8004444:	9205      	str	r2, [sp, #20]
 8004446:	f007 0403 	and.w	r4, r7, #3
 800444a:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 800444e:	1c4f      	adds	r7, r1, #1
 8004450:	1859      	adds	r1, r3, r1
 8004452:	1d03      	adds	r3, r0, #4
 8004454:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004458:	9400      	str	r4, [sp, #0]
 800445a:	f102 0110 	add.w	r1, r2, #16
 800445e:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 8004462:	3c01      	subs	r4, #1
 8004464:	e9cd 6003 	strd	r6, r0, [sp, #12]
 8004468:	eb02 090a 	add.w	r9, r2, sl
 800446c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8004470:	46e0      	mov	r8, ip
 8004472:	4618      	mov	r0, r3
 8004474:	460e      	mov	r6, r1
 8004476:	4622      	mov	r2, r4
 8004478:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 80042c0 <arm_correlate_f32+0x180>
 800447c:	f105 0110 	add.w	r1, r5, #16
 8004480:	4633      	mov	r3, r6
 8004482:	465c      	mov	r4, fp
 8004484:	ed11 7a04 	vldr	s14, [r1, #-16]
 8004488:	ed53 3a04 	vldr	s7, [r3, #-16]
 800448c:	ed11 6a03 	vldr	s12, [r1, #-12]
 8004490:	ed13 4a03 	vldr	s8, [r3, #-12]
 8004494:	ed51 6a02 	vldr	s13, [r1, #-8]
 8004498:	ed53 4a02 	vldr	s9, [r3, #-8]
 800449c:	ed51 5a01 	vldr	s11, [r1, #-4]
 80044a0:	ed13 5a01 	vldr	s10, [r3, #-4]
 80044a4:	ee27 7a23 	vmul.f32	s14, s14, s7
 80044a8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80044ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044b0:	ee26 7aa4 	vmul.f32	s14, s13, s9
 80044b4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80044b8:	ee65 6a85 	vmul.f32	s13, s11, s10
 80044bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044c0:	3c01      	subs	r4, #1
 80044c2:	f101 0110 	add.w	r1, r1, #16
 80044c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ca:	f103 0310 	add.w	r3, r3, #16
 80044ce:	d1d9      	bne.n	8004484 <arm_correlate_f32+0x344>
 80044d0:	9b00      	ldr	r3, [sp, #0]
 80044d2:	4455      	add	r5, sl
 80044d4:	b1d3      	cbz	r3, 800450c <arm_correlate_f32+0x3cc>
 80044d6:	ed99 7a00 	vldr	s14, [r9]
 80044da:	edd5 6a00 	vldr	s13, [r5]
 80044de:	ee27 7a26 	vmul.f32	s14, s14, s13
 80044e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044e6:	b18a      	cbz	r2, 800450c <arm_correlate_f32+0x3cc>
 80044e8:	ed99 7a01 	vldr	s14, [r9, #4]
 80044ec:	edd5 6a01 	vldr	s13, [r5, #4]
 80044f0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80044f4:	2a01      	cmp	r2, #1
 80044f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044fa:	d007      	beq.n	800450c <arm_correlate_f32+0x3cc>
 80044fc:	ed95 7a02 	vldr	s14, [r5, #8]
 8004500:	edd9 6a02 	vldr	s13, [r9, #8]
 8004504:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004508:	ee77 7a87 	vadd.f32	s15, s15, s14
 800450c:	463d      	mov	r5, r7
 800450e:	3704      	adds	r7, #4
 8004510:	42b8      	cmp	r0, r7
 8004512:	edc8 7a00 	vstr	s15, [r8]
 8004516:	44f0      	add	r8, lr
 8004518:	d1ae      	bne.n	8004478 <arm_correlate_f32+0x338>
 800451a:	9b01      	ldr	r3, [sp, #4]
 800451c:	9a05      	ldr	r2, [sp, #20]
 800451e:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 8004522:	fb0e cc03 	mla	ip, lr, r3, ip
 8004526:	9b02      	ldr	r3, [sp, #8]
 8004528:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800452c:	08b5      	lsrs	r5, r6, #2
 800452e:	ed5f 5a9c 	vldr	s11, [pc, #-624]	; 80042c0 <arm_correlate_f32+0x180>
 8004532:	f000 80ac 	beq.w	800468e <arm_correlate_f32+0x54e>
 8004536:	f100 0110 	add.w	r1, r0, #16
 800453a:	f102 0310 	add.w	r3, r2, #16
 800453e:	462c      	mov	r4, r5
 8004540:	ed51 6a04 	vldr	s13, [r1, #-16]
 8004544:	ed53 3a04 	vldr	s7, [r3, #-16]
 8004548:	ed11 7a03 	vldr	s14, [r1, #-12]
 800454c:	ed13 4a03 	vldr	s8, [r3, #-12]
 8004550:	ed51 7a02 	vldr	s15, [r1, #-8]
 8004554:	ed53 4a02 	vldr	s9, [r3, #-8]
 8004558:	ed11 6a01 	vldr	s12, [r1, #-4]
 800455c:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004560:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8004564:	ee27 7a04 	vmul.f32	s14, s14, s8
 8004568:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800456c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8004570:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004574:	ee66 6a05 	vmul.f32	s13, s12, s10
 8004578:	ee77 7a87 	vadd.f32	s15, s15, s14
 800457c:	3c01      	subs	r4, #1
 800457e:	f101 0110 	add.w	r1, r1, #16
 8004582:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8004586:	f103 0310 	add.w	r3, r3, #16
 800458a:	d1d9      	bne.n	8004540 <arm_correlate_f32+0x400>
 800458c:	012d      	lsls	r5, r5, #4
 800458e:	1941      	adds	r1, r0, r5
 8004590:	4415      	add	r5, r2
 8004592:	f016 0303 	ands.w	r3, r6, #3
 8004596:	d01b      	beq.n	80045d0 <arm_correlate_f32+0x490>
 8004598:	edd5 7a00 	vldr	s15, [r5]
 800459c:	ed91 7a00 	vldr	s14, [r1]
 80045a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045a4:	3b01      	subs	r3, #1
 80045a6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80045aa:	d011      	beq.n	80045d0 <arm_correlate_f32+0x490>
 80045ac:	edd5 7a01 	vldr	s15, [r5, #4]
 80045b0:	ed91 7a01 	vldr	s14, [r1, #4]
 80045b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80045be:	d007      	beq.n	80045d0 <arm_correlate_f32+0x490>
 80045c0:	edd1 7a02 	vldr	s15, [r1, #8]
 80045c4:	ed95 7a02 	vldr	s14, [r5, #8]
 80045c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045cc:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80045d0:	3e01      	subs	r6, #1
 80045d2:	edcc 5a00 	vstr	s11, [ip]
 80045d6:	f100 0004 	add.w	r0, r0, #4
 80045da:	44f4      	add	ip, lr
 80045dc:	d1a6      	bne.n	800452c <arm_correlate_f32+0x3ec>
 80045de:	b00d      	add	sp, #52	; 0x34
 80045e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045e4:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 80045e8:	4606      	mov	r6, r0
 80045ea:	3c02      	subs	r4, #2
 80045ec:	4610      	mov	r0, r2
 80045ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80045f0:	440c      	add	r4, r1
 80045f2:	460d      	mov	r5, r1
 80045f4:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 80045f8:	4619      	mov	r1, r3
 80045fa:	4632      	mov	r2, r6
 80045fc:	f06f 0e03 	mvn.w	lr, #3
 8004600:	462b      	mov	r3, r5
 8004602:	e5aa      	b.n	800415a <arm_correlate_f32+0x1a>
 8004604:	9902      	ldr	r1, [sp, #8]
 8004606:	2900      	cmp	r1, #0
 8004608:	d090      	beq.n	800452c <arm_correlate_f32+0x3ec>
 800460a:	9902      	ldr	r1, [sp, #8]
 800460c:	ed1f 6ad4 	vldr	s12, [pc, #-848]	; 80042c0 <arm_correlate_f32+0x180>
 8004610:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8004614:	eb00 0708 	add.w	r7, r0, r8
 8004618:	4601      	mov	r1, r0
 800461a:	4665      	mov	r5, ip
 800461c:	e020      	b.n	8004660 <arm_correlate_f32+0x520>
 800461e:	edd2 7a00 	vldr	s15, [r2]
 8004622:	ecb4 7a01 	vldmia	r4!, {s14}
 8004626:	ee67 7a87 	vmul.f32	s15, s15, s14
 800462a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800462e:	b18e      	cbz	r6, 8004654 <arm_correlate_f32+0x514>
 8004630:	ed92 7a01 	vldr	s14, [r2, #4]
 8004634:	edd1 6a01 	vldr	s13, [r1, #4]
 8004638:	ee27 7a26 	vmul.f32	s14, s14, s13
 800463c:	2b02      	cmp	r3, #2
 800463e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004642:	d007      	beq.n	8004654 <arm_correlate_f32+0x514>
 8004644:	ed91 7a02 	vldr	s14, [r1, #8]
 8004648:	edd2 6a02 	vldr	s13, [r2, #8]
 800464c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004650:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004654:	42bc      	cmp	r4, r7
 8004656:	edc5 7a00 	vstr	s15, [r5]
 800465a:	4621      	mov	r1, r4
 800465c:	4475      	add	r5, lr
 800465e:	d00b      	beq.n	8004678 <arm_correlate_f32+0x538>
 8004660:	460c      	mov	r4, r1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1db      	bne.n	800461e <arm_correlate_f32+0x4de>
 8004666:	1d0c      	adds	r4, r1, #4
 8004668:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80046a8 <arm_correlate_f32+0x568>
 800466c:	42bc      	cmp	r4, r7
 800466e:	edc5 7a00 	vstr	s15, [r5]
 8004672:	4621      	mov	r1, r4
 8004674:	4475      	add	r5, lr
 8004676:	d1f3      	bne.n	8004660 <arm_correlate_f32+0x520>
 8004678:	9b02      	ldr	r3, [sp, #8]
 800467a:	4440      	add	r0, r8
 800467c:	fb0e cc03 	mla	ip, lr, r3, ip
 8004680:	2e00      	cmp	r6, #0
 8004682:	d0ac      	beq.n	80045de <arm_correlate_f32+0x49e>
 8004684:	08b5      	lsrs	r5, r6, #2
 8004686:	eddf 5a08 	vldr	s11, [pc, #32]	; 80046a8 <arm_correlate_f32+0x568>
 800468a:	f47f af54 	bne.w	8004536 <arm_correlate_f32+0x3f6>
 800468e:	4615      	mov	r5, r2
 8004690:	4601      	mov	r1, r0
 8004692:	e77e      	b.n	8004592 <arm_correlate_f32+0x452>
 8004694:	4605      	mov	r5, r0
 8004696:	e6cf      	b.n	8004438 <arm_correlate_f32+0x2f8>
 8004698:	9902      	ldr	r1, [sp, #8]
 800469a:	2900      	cmp	r1, #0
 800469c:	d1b5      	bne.n	800460a <arm_correlate_f32+0x4ca>
 800469e:	e79e      	b.n	80045de <arm_correlate_f32+0x49e>
 80046a0:	eddf 7a01 	vldr	s15, [pc, #4]	; 80046a8 <arm_correlate_f32+0x568>
 80046a4:	4605      	mov	r5, r0
 80046a6:	e5c7      	b.n	8004238 <arm_correlate_f32+0xf8>
 80046a8:	00000000 	.word	0x00000000

080046ac <arm_cmplx_mag_f32>:
 80046ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046b0:	ed2d 8b02 	vpush	{d8}
 80046b4:	0897      	lsrs	r7, r2, #2
 80046b6:	b084      	sub	sp, #16
 80046b8:	d077      	beq.n	80047aa <arm_cmplx_mag_f32+0xfe>
 80046ba:	f04f 0800 	mov.w	r8, #0
 80046be:	f100 0420 	add.w	r4, r0, #32
 80046c2:	f101 0510 	add.w	r5, r1, #16
 80046c6:	463e      	mov	r6, r7
 80046c8:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 80046cc:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 80046d0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80046d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80046d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80046dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80046e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e4:	f2c0 80c5 	blt.w	8004872 <arm_cmplx_mag_f32+0x1c6>
 80046e8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80046ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80046f4:	f100 80cb 	bmi.w	800488e <arm_cmplx_mag_f32+0x1e2>
 80046f8:	ed05 8a04 	vstr	s16, [r5, #-16]
 80046fc:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 8004700:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8004704:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004708:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800470c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004710:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004718:	f2c0 80a8 	blt.w	800486c <arm_cmplx_mag_f32+0x1c0>
 800471c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004724:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004728:	f100 80a8 	bmi.w	800487c <arm_cmplx_mag_f32+0x1d0>
 800472c:	ed05 8a03 	vstr	s16, [r5, #-12]
 8004730:	ed14 0a04 	vldr	s0, [r4, #-16]
 8004734:	ed54 7a03 	vldr	s15, [r4, #-12]
 8004738:	ee20 0a00 	vmul.f32	s0, s0, s0
 800473c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004740:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004744:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474c:	f2c0 808b 	blt.w	8004866 <arm_cmplx_mag_f32+0x1ba>
 8004750:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004758:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800475c:	f100 80a9 	bmi.w	80048b2 <arm_cmplx_mag_f32+0x206>
 8004760:	ed05 8a02 	vstr	s16, [r5, #-8]
 8004764:	ed14 0a02 	vldr	s0, [r4, #-8]
 8004768:	ed54 7a01 	vldr	s15, [r4, #-4]
 800476c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004770:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004774:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004778:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800477c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004780:	db6e      	blt.n	8004860 <arm_cmplx_mag_f32+0x1b4>
 8004782:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800478e:	f100 8087 	bmi.w	80048a0 <arm_cmplx_mag_f32+0x1f4>
 8004792:	ed05 8a01 	vstr	s16, [r5, #-4]
 8004796:	3e01      	subs	r6, #1
 8004798:	f104 0420 	add.w	r4, r4, #32
 800479c:	f105 0510 	add.w	r5, r5, #16
 80047a0:	d192      	bne.n	80046c8 <arm_cmplx_mag_f32+0x1c>
 80047a2:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 80047a6:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 80047aa:	f012 0203 	ands.w	r2, r2, #3
 80047ae:	d052      	beq.n	8004856 <arm_cmplx_mag_f32+0x1aa>
 80047b0:	ed90 0a00 	vldr	s0, [r0]
 80047b4:	edd0 7a01 	vldr	s15, [r0, #4]
 80047b8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80047bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80047c0:	2300      	movs	r3, #0
 80047c2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80047c6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80047ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ce:	bfb8      	it	lt
 80047d0:	600b      	strlt	r3, [r1, #0]
 80047d2:	db08      	blt.n	80047e6 <arm_cmplx_mag_f32+0x13a>
 80047d4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80047d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047dc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80047e0:	d479      	bmi.n	80048d6 <arm_cmplx_mag_f32+0x22a>
 80047e2:	ed81 8a00 	vstr	s16, [r1]
 80047e6:	3a01      	subs	r2, #1
 80047e8:	d035      	beq.n	8004856 <arm_cmplx_mag_f32+0x1aa>
 80047ea:	ed90 0a02 	vldr	s0, [r0, #8]
 80047ee:	edd0 7a03 	vldr	s15, [r0, #12]
 80047f2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80047f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80047fa:	2300      	movs	r3, #0
 80047fc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004800:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004808:	bfb8      	it	lt
 800480a:	604b      	strlt	r3, [r1, #4]
 800480c:	db08      	blt.n	8004820 <arm_cmplx_mag_f32+0x174>
 800480e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004816:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800481a:	d453      	bmi.n	80048c4 <arm_cmplx_mag_f32+0x218>
 800481c:	ed81 8a01 	vstr	s16, [r1, #4]
 8004820:	2a01      	cmp	r2, #1
 8004822:	d018      	beq.n	8004856 <arm_cmplx_mag_f32+0x1aa>
 8004824:	ed90 0a04 	vldr	s0, [r0, #16]
 8004828:	edd0 7a05 	vldr	s15, [r0, #20]
 800482c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004830:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004834:	2300      	movs	r3, #0
 8004836:	ee30 0a27 	vadd.f32	s0, s0, s15
 800483a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800483e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004842:	db19      	blt.n	8004878 <arm_cmplx_mag_f32+0x1cc>
 8004844:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004850:	d44a      	bmi.n	80048e8 <arm_cmplx_mag_f32+0x23c>
 8004852:	ed81 8a02 	vstr	s16, [r1, #8]
 8004856:	b004      	add	sp, #16
 8004858:	ecbd 8b02 	vpop	{d8}
 800485c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004860:	f845 8c04 	str.w	r8, [r5, #-4]
 8004864:	e797      	b.n	8004796 <arm_cmplx_mag_f32+0xea>
 8004866:	f845 8c08 	str.w	r8, [r5, #-8]
 800486a:	e77b      	b.n	8004764 <arm_cmplx_mag_f32+0xb8>
 800486c:	f845 8c0c 	str.w	r8, [r5, #-12]
 8004870:	e75e      	b.n	8004730 <arm_cmplx_mag_f32+0x84>
 8004872:	f845 8c10 	str.w	r8, [r5, #-16]
 8004876:	e741      	b.n	80046fc <arm_cmplx_mag_f32+0x50>
 8004878:	608b      	str	r3, [r1, #8]
 800487a:	e7ec      	b.n	8004856 <arm_cmplx_mag_f32+0x1aa>
 800487c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004880:	9001      	str	r0, [sp, #4]
 8004882:	f000 fbab 	bl	8004fdc <sqrtf>
 8004886:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800488a:	9801      	ldr	r0, [sp, #4]
 800488c:	e74e      	b.n	800472c <arm_cmplx_mag_f32+0x80>
 800488e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004892:	9001      	str	r0, [sp, #4]
 8004894:	f000 fba2 	bl	8004fdc <sqrtf>
 8004898:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800489c:	9801      	ldr	r0, [sp, #4]
 800489e:	e72b      	b.n	80046f8 <arm_cmplx_mag_f32+0x4c>
 80048a0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80048a4:	9001      	str	r0, [sp, #4]
 80048a6:	f000 fb99 	bl	8004fdc <sqrtf>
 80048aa:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80048ae:	9801      	ldr	r0, [sp, #4]
 80048b0:	e76f      	b.n	8004792 <arm_cmplx_mag_f32+0xe6>
 80048b2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80048b6:	9001      	str	r0, [sp, #4]
 80048b8:	f000 fb90 	bl	8004fdc <sqrtf>
 80048bc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80048c0:	9801      	ldr	r0, [sp, #4]
 80048c2:	e74d      	b.n	8004760 <arm_cmplx_mag_f32+0xb4>
 80048c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048c8:	9201      	str	r2, [sp, #4]
 80048ca:	f000 fb87 	bl	8004fdc <sqrtf>
 80048ce:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80048d2:	9903      	ldr	r1, [sp, #12]
 80048d4:	e7a2      	b.n	800481c <arm_cmplx_mag_f32+0x170>
 80048d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048da:	9201      	str	r2, [sp, #4]
 80048dc:	f000 fb7e 	bl	8004fdc <sqrtf>
 80048e0:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 80048e4:	9903      	ldr	r1, [sp, #12]
 80048e6:	e77c      	b.n	80047e2 <arm_cmplx_mag_f32+0x136>
 80048e8:	9101      	str	r1, [sp, #4]
 80048ea:	f000 fb77 	bl	8004fdc <sqrtf>
 80048ee:	9901      	ldr	r1, [sp, #4]
 80048f0:	e7af      	b.n	8004852 <arm_cmplx_mag_f32+0x1a6>
 80048f2:	bf00      	nop

080048f4 <arm_sub_f32>:
 80048f4:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80048f8:	b4f0      	push	{r4, r5, r6, r7}
 80048fa:	d033      	beq.n	8004964 <arm_sub_f32+0x70>
 80048fc:	f100 0610 	add.w	r6, r0, #16
 8004900:	f101 0510 	add.w	r5, r1, #16
 8004904:	f102 0410 	add.w	r4, r2, #16
 8004908:	4667      	mov	r7, ip
 800490a:	ed15 7a04 	vldr	s14, [r5, #-16]
 800490e:	ed56 7a04 	vldr	s15, [r6, #-16]
 8004912:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004916:	3f01      	subs	r7, #1
 8004918:	ed44 7a04 	vstr	s15, [r4, #-16]
 800491c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8004920:	ed56 7a03 	vldr	s15, [r6, #-12]
 8004924:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004928:	f106 0610 	add.w	r6, r6, #16
 800492c:	ed44 7a03 	vstr	s15, [r4, #-12]
 8004930:	ed15 7a02 	vldr	s14, [r5, #-8]
 8004934:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8004938:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800493c:	f105 0510 	add.w	r5, r5, #16
 8004940:	ed44 7a02 	vstr	s15, [r4, #-8]
 8004944:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8004948:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 800494c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004950:	f104 0410 	add.w	r4, r4, #16
 8004954:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8004958:	d1d7      	bne.n	800490a <arm_sub_f32+0x16>
 800495a:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800495e:	4420      	add	r0, r4
 8004960:	4421      	add	r1, r4
 8004962:	4422      	add	r2, r4
 8004964:	f013 0303 	ands.w	r3, r3, #3
 8004968:	d01b      	beq.n	80049a2 <arm_sub_f32+0xae>
 800496a:	edd0 7a00 	vldr	s15, [r0]
 800496e:	ed91 7a00 	vldr	s14, [r1]
 8004972:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004976:	3b01      	subs	r3, #1
 8004978:	edc2 7a00 	vstr	s15, [r2]
 800497c:	d011      	beq.n	80049a2 <arm_sub_f32+0xae>
 800497e:	edd0 7a01 	vldr	s15, [r0, #4]
 8004982:	ed91 7a01 	vldr	s14, [r1, #4]
 8004986:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800498a:	2b01      	cmp	r3, #1
 800498c:	edc2 7a01 	vstr	s15, [r2, #4]
 8004990:	d007      	beq.n	80049a2 <arm_sub_f32+0xae>
 8004992:	edd0 7a02 	vldr	s15, [r0, #8]
 8004996:	ed91 7a02 	vldr	s14, [r1, #8]
 800499a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800499e:	edc2 7a02 	vstr	s15, [r2, #8]
 80049a2:	bcf0      	pop	{r4, r5, r6, r7}
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop

080049a8 <arm_radix8_butterfly_f32>:
 80049a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ac:	ed2d 8b10 	vpush	{d8-d15}
 80049b0:	b095      	sub	sp, #84	; 0x54
 80049b2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80049b6:	4603      	mov	r3, r0
 80049b8:	3304      	adds	r3, #4
 80049ba:	ed9f bab9 	vldr	s22, [pc, #740]	; 8004ca0 <arm_radix8_butterfly_f32+0x2f8>
 80049be:	9012      	str	r0, [sp, #72]	; 0x48
 80049c0:	468b      	mov	fp, r1
 80049c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80049c4:	4689      	mov	r9, r1
 80049c6:	ea4f 06db 	mov.w	r6, fp, lsr #3
 80049ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80049cc:	960f      	str	r6, [sp, #60]	; 0x3c
 80049ce:	ea4f 1846 	mov.w	r8, r6, lsl #5
 80049d2:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 80049d6:	eb03 0508 	add.w	r5, r3, r8
 80049da:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 80049de:	eb05 040e 	add.w	r4, r5, lr
 80049e2:	0137      	lsls	r7, r6, #4
 80049e4:	eba6 030a 	sub.w	r3, r6, sl
 80049e8:	eb04 000e 	add.w	r0, r4, lr
 80049ec:	44b2      	add	sl, r6
 80049ee:	1d3a      	adds	r2, r7, #4
 80049f0:	9702      	str	r7, [sp, #8]
 80049f2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80049f6:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 80049fa:	ebae 0c06 	sub.w	ip, lr, r6
 80049fe:	9703      	str	r7, [sp, #12]
 8004a00:	eb03 0708 	add.w	r7, r3, r8
 8004a04:	9701      	str	r7, [sp, #4]
 8004a06:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8004a0a:	9706      	str	r7, [sp, #24]
 8004a0c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8004a0e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8004a12:	f10e 0104 	add.w	r1, lr, #4
 8004a16:	4439      	add	r1, r7
 8004a18:	443a      	add	r2, r7
 8004a1a:	0137      	lsls	r7, r6, #4
 8004a1c:	00f6      	lsls	r6, r6, #3
 8004a1e:	9704      	str	r7, [sp, #16]
 8004a20:	9605      	str	r6, [sp, #20]
 8004a22:	9f01      	ldr	r7, [sp, #4]
 8004a24:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8004a26:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8004a2a:	f04f 0c00 	mov.w	ip, #0
 8004a2e:	edd4 6a00 	vldr	s13, [r4]
 8004a32:	edd7 1a00 	vldr	s3, [r7]
 8004a36:	ed16 aa01 	vldr	s20, [r6, #-4]
 8004a3a:	edd5 5a00 	vldr	s11, [r5]
 8004a3e:	ed52 9a01 	vldr	s19, [r2, #-4]
 8004a42:	ed90 6a00 	vldr	s12, [r0]
 8004a46:	ed51 7a01 	vldr	s15, [r1, #-4]
 8004a4a:	ed93 3a00 	vldr	s6, [r3]
 8004a4e:	ee39 0a86 	vadd.f32	s0, s19, s12
 8004a52:	ee33 2a21 	vadd.f32	s4, s6, s3
 8004a56:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8004a5a:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8004a5e:	ee35 7a02 	vadd.f32	s14, s10, s4
 8004a62:	ee34 4a80 	vadd.f32	s8, s9, s0
 8004a66:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004a6a:	ee74 6a07 	vadd.f32	s13, s8, s14
 8004a6e:	ee34 4a47 	vsub.f32	s8, s8, s14
 8004a72:	ed46 6a01 	vstr	s13, [r6, #-4]
 8004a76:	ed85 4a00 	vstr	s8, [r5]
 8004a7a:	edd1 6a00 	vldr	s13, [r1]
 8004a7e:	ed94 9a01 	vldr	s18, [r4, #4]
 8004a82:	edd3 2a01 	vldr	s5, [r3, #4]
 8004a86:	edd7 8a01 	vldr	s17, [r7, #4]
 8004a8a:	edd6 0a00 	vldr	s1, [r6]
 8004a8e:	edd5 3a01 	vldr	s7, [r5, #4]
 8004a92:	ed90 8a01 	vldr	s16, [r0, #4]
 8004a96:	ed92 7a00 	vldr	s14, [r2]
 8004a9a:	ee33 3a61 	vsub.f32	s6, s6, s3
 8004a9e:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8004aa2:	ee72 aae8 	vsub.f32	s21, s5, s17
 8004aa6:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8004aaa:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8004aae:	ee77 7a83 	vadd.f32	s15, s15, s6
 8004ab2:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8004ab6:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8004aba:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8004abe:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8004ac2:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8004ac6:	ee77 0a08 	vadd.f32	s1, s14, s16
 8004aca:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8004ace:	ee37 7a48 	vsub.f32	s14, s14, s16
 8004ad2:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8004ad6:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8004ada:	ee76 6a89 	vadd.f32	s13, s13, s18
 8004ade:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8004ae2:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004ae6:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8004aea:	ee35 5a42 	vsub.f32	s10, s10, s4
 8004aee:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8004af2:	ee33 2a20 	vadd.f32	s4, s6, s1
 8004af6:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8004afa:	ee33 3a60 	vsub.f32	s6, s6, s1
 8004afe:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8004b02:	ee77 0a01 	vadd.f32	s1, s14, s2
 8004b06:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8004b0a:	ee37 7a41 	vsub.f32	s14, s14, s2
 8004b0e:	ee73 1a84 	vadd.f32	s3, s7, s8
 8004b12:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8004b16:	ee76 3a27 	vadd.f32	s7, s12, s15
 8004b1a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004b1e:	ee32 8a00 	vadd.f32	s16, s4, s0
 8004b22:	ee33 1a45 	vsub.f32	s2, s6, s10
 8004b26:	ee32 2a40 	vsub.f32	s4, s4, s0
 8004b2a:	ee35 5a03 	vadd.f32	s10, s10, s6
 8004b2e:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8004b32:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8004b36:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8004b3a:	ee34 6a67 	vsub.f32	s12, s8, s15
 8004b3e:	ee75 4a87 	vadd.f32	s9, s11, s14
 8004b42:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8004b46:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8004b4a:	ee77 7a84 	vadd.f32	s15, s15, s8
 8004b4e:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8004b52:	44dc      	add	ip, fp
 8004b54:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8004b58:	45e1      	cmp	r9, ip
 8004b5a:	ed86 8a00 	vstr	s16, [r6]
 8004b5e:	ed85 2a01 	vstr	s4, [r5, #4]
 8004b62:	4456      	add	r6, sl
 8004b64:	ed02 0a01 	vstr	s0, [r2, #-4]
 8004b68:	4455      	add	r5, sl
 8004b6a:	edc0 6a00 	vstr	s13, [r0]
 8004b6e:	ed82 1a00 	vstr	s2, [r2]
 8004b72:	ed80 5a01 	vstr	s10, [r0, #4]
 8004b76:	4452      	add	r2, sl
 8004b78:	ed01 3a01 	vstr	s6, [r1, #-4]
 8004b7c:	4450      	add	r0, sl
 8004b7e:	edc7 2a00 	vstr	s5, [r7]
 8004b82:	edc4 4a00 	vstr	s9, [r4]
 8004b86:	ed83 7a00 	vstr	s14, [r3]
 8004b8a:	edc1 5a00 	vstr	s11, [r1]
 8004b8e:	edc7 3a01 	vstr	s7, [r7, #4]
 8004b92:	4451      	add	r1, sl
 8004b94:	ed84 6a01 	vstr	s12, [r4, #4]
 8004b98:	4457      	add	r7, sl
 8004b9a:	edc3 7a01 	vstr	s15, [r3, #4]
 8004b9e:	4454      	add	r4, sl
 8004ba0:	4453      	add	r3, sl
 8004ba2:	f63f af44 	bhi.w	8004a2e <arm_radix8_butterfly_f32+0x86>
 8004ba6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ba8:	2b07      	cmp	r3, #7
 8004baa:	f240 81b7 	bls.w	8004f1c <arm_radix8_butterfly_f32+0x574>
 8004bae:	9b06      	ldr	r3, [sp, #24]
 8004bb0:	9903      	ldr	r1, [sp, #12]
 8004bb2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004bb4:	9e05      	ldr	r6, [sp, #20]
 8004bb6:	9a04      	ldr	r2, [sp, #16]
 8004bb8:	f103 0c08 	add.w	ip, r3, #8
 8004bbc:	9b02      	ldr	r3, [sp, #8]
 8004bbe:	3108      	adds	r1, #8
 8004bc0:	f108 0808 	add.w	r8, r8, #8
 8004bc4:	1841      	adds	r1, r0, r1
 8004bc6:	3608      	adds	r6, #8
 8004bc8:	330c      	adds	r3, #12
 8004bca:	4604      	mov	r4, r0
 8004bcc:	4444      	add	r4, r8
 8004bce:	18c3      	adds	r3, r0, r3
 8004bd0:	9109      	str	r1, [sp, #36]	; 0x24
 8004bd2:	1981      	adds	r1, r0, r6
 8004bd4:	f10e 0e08 	add.w	lr, lr, #8
 8004bd8:	3208      	adds	r2, #8
 8004bda:	940b      	str	r4, [sp, #44]	; 0x2c
 8004bdc:	9107      	str	r1, [sp, #28]
 8004bde:	4604      	mov	r4, r0
 8004be0:	4601      	mov	r1, r0
 8004be2:	9304      	str	r3, [sp, #16]
 8004be4:	f100 030c 	add.w	r3, r0, #12
 8004be8:	4474      	add	r4, lr
 8004bea:	f04f 0801 	mov.w	r8, #1
 8004bee:	1882      	adds	r2, r0, r2
 8004bf0:	4461      	add	r1, ip
 8004bf2:	9305      	str	r3, [sp, #20]
 8004bf4:	464b      	mov	r3, r9
 8004bf6:	940a      	str	r4, [sp, #40]	; 0x28
 8004bf8:	46c1      	mov	r9, r8
 8004bfa:	9208      	str	r2, [sp, #32]
 8004bfc:	46d8      	mov	r8, fp
 8004bfe:	9106      	str	r1, [sp, #24]
 8004c00:	f04f 0e00 	mov.w	lr, #0
 8004c04:	469b      	mov	fp, r3
 8004c06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004c0a:	449e      	add	lr, r3
 8004c0c:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8004c10:	441a      	add	r2, r3
 8004c12:	920e      	str	r2, [sp, #56]	; 0x38
 8004c14:	441a      	add	r2, r3
 8004c16:	18d4      	adds	r4, r2, r3
 8004c18:	18e5      	adds	r5, r4, r3
 8004c1a:	18ee      	adds	r6, r5, r3
 8004c1c:	18f7      	adds	r7, r6, r3
 8004c1e:	eb07 0c03 	add.w	ip, r7, r3
 8004c22:	920d      	str	r2, [sp, #52]	; 0x34
 8004c24:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8004c28:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8004c2c:	910c      	str	r1, [sp, #48]	; 0x30
 8004c2e:	4419      	add	r1, r3
 8004c30:	9103      	str	r1, [sp, #12]
 8004c32:	4419      	add	r1, r3
 8004c34:	18ca      	adds	r2, r1, r3
 8004c36:	9202      	str	r2, [sp, #8]
 8004c38:	441a      	add	r2, r3
 8004c3a:	18d0      	adds	r0, r2, r3
 8004c3c:	ed92 ea01 	vldr	s28, [r2, #4]
 8004c40:	9a02      	ldr	r2, [sp, #8]
 8004c42:	edd4 7a00 	vldr	s15, [r4]
 8004c46:	edd2 da01 	vldr	s27, [r2, #4]
 8004c4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c4c:	ed91 da01 	vldr	s26, [r1, #4]
 8004c50:	ed92 ca01 	vldr	s24, [r2, #4]
 8004c54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004c56:	9903      	ldr	r1, [sp, #12]
 8004c58:	edcd 7a03 	vstr	s15, [sp, #12]
 8004c5c:	edd2 7a00 	vldr	s15, [r2]
 8004c60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c62:	edcd 7a02 	vstr	s15, [sp, #8]
 8004c66:	edd2 7a00 	vldr	s15, [r2]
 8004c6a:	edd0 ea01 	vldr	s29, [r0, #4]
 8004c6e:	edd1 ca01 	vldr	s25, [r1, #4]
 8004c72:	eddc ba00 	vldr	s23, [ip]
 8004c76:	edd7 aa00 	vldr	s21, [r7]
 8004c7a:	ed96 aa00 	vldr	s20, [r6]
 8004c7e:	edd5 9a00 	vldr	s19, [r5]
 8004c82:	edcd 7a01 	vstr	s15, [sp, #4]
 8004c86:	4403      	add	r3, r0
 8004c88:	ed93 fa01 	vldr	s30, [r3, #4]
 8004c8c:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8004c90:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8004c94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004c98:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004c9c:	46cc      	mov	ip, r9
 8004c9e:	e001      	b.n	8004ca4 <arm_radix8_butterfly_f32+0x2fc>
 8004ca0:	3f3504f3 	.word	0x3f3504f3
 8004ca4:	ed91 6a00 	vldr	s12, [r1]
 8004ca8:	ed93 5a00 	vldr	s10, [r3]
 8004cac:	edd0 fa00 	vldr	s31, [r0]
 8004cb0:	edd4 7a00 	vldr	s15, [r4]
 8004cb4:	ed95 7a00 	vldr	s14, [r5]
 8004cb8:	ed56 3a01 	vldr	s7, [r6, #-4]
 8004cbc:	ed17 3a01 	vldr	s6, [r7, #-4]
 8004cc0:	ed92 2a00 	vldr	s4, [r2]
 8004cc4:	ed96 0a00 	vldr	s0, [r6]
 8004cc8:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004ccc:	ee32 1a06 	vadd.f32	s2, s4, s12
 8004cd0:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8004cd4:	ee77 4a87 	vadd.f32	s9, s15, s14
 8004cd8:	ee78 1a04 	vadd.f32	s3, s16, s8
 8004cdc:	ee71 6a24 	vadd.f32	s13, s2, s9
 8004ce0:	ee32 2a46 	vsub.f32	s4, s4, s12
 8004ce4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8004ce8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004cec:	ed06 6a01 	vstr	s12, [r6, #-4]
 8004cf0:	edd4 8a01 	vldr	s17, [r4, #4]
 8004cf4:	ed92 9a01 	vldr	s18, [r2, #4]
 8004cf8:	edd7 0a00 	vldr	s1, [r7]
 8004cfc:	edd1 2a01 	vldr	s5, [r1, #4]
 8004d00:	ed95 7a01 	vldr	s14, [r5, #4]
 8004d04:	ed93 6a01 	vldr	s12, [r3, #4]
 8004d08:	edd0 5a01 	vldr	s11, [r0, #4]
 8004d0c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8004d10:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8004d14:	ee39 5a62 	vsub.f32	s10, s18, s5
 8004d18:	ee78 fac7 	vsub.f32	s31, s17, s14
 8004d1c:	ee38 4a44 	vsub.f32	s8, s16, s8
 8004d20:	ee38 7a87 	vadd.f32	s14, s17, s14
 8004d24:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8004d28:	ee79 2a22 	vadd.f32	s5, s18, s5
 8004d2c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8004d30:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004d34:	ee30 2a06 	vadd.f32	s4, s0, s12
 8004d38:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8004d3c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8004d40:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8004d44:	ee32 1a08 	vadd.f32	s2, s4, s16
 8004d48:	ee72 fa87 	vadd.f32	s31, s5, s14
 8004d4c:	ee32 2a48 	vsub.f32	s4, s4, s16
 8004d50:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8004d54:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8004d58:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8004d5c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8004d60:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8004d64:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8004d68:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8004d6c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004d70:	ee30 6a46 	vsub.f32	s12, s0, s12
 8004d74:	ee74 0a22 	vadd.f32	s1, s8, s5
 8004d78:	ee36 0a28 	vadd.f32	s0, s12, s17
 8004d7c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8004d80:	ee36 6a68 	vsub.f32	s12, s12, s17
 8004d84:	ee32 4a64 	vsub.f32	s8, s4, s9
 8004d88:	ee73 8a09 	vadd.f32	s17, s6, s18
 8004d8c:	ee74 4a82 	vadd.f32	s9, s9, s4
 8004d90:	ee33 9a49 	vsub.f32	s18, s6, s18
 8004d94:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8004d98:	ee35 3a85 	vadd.f32	s6, s11, s10
 8004d9c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8004da0:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8004da4:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8004da8:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8004dac:	ee30 7a68 	vsub.f32	s14, s0, s17
 8004db0:	ee35 8a03 	vadd.f32	s16, s10, s6
 8004db4:	ee38 0a80 	vadd.f32	s0, s17, s0
 8004db8:	ee73 3a82 	vadd.f32	s7, s7, s4
 8004dbc:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8004dc0:	ed9d 2a01 	vldr	s4, [sp, #4]
 8004dc4:	eddd 1a02 	vldr	s3, [sp, #8]
 8004dc8:	ee35 5a43 	vsub.f32	s10, s10, s6
 8004dcc:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8004dd0:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8004dd4:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8004dd8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8004ddc:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8004de0:	ee76 5a49 	vsub.f32	s11, s12, s18
 8004de4:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8004de8:	ee39 6a06 	vadd.f32	s12, s18, s12
 8004dec:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8004df0:	ee21 4a84 	vmul.f32	s8, s3, s8
 8004df4:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8004df8:	ee22 7a07 	vmul.f32	s14, s4, s14
 8004dfc:	ee22 2a08 	vmul.f32	s4, s4, s16
 8004e00:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8004e04:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8004e08:	ee31 1a09 	vadd.f32	s2, s2, s18
 8004e0c:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8004e10:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8004e14:	ee74 0a60 	vsub.f32	s1, s8, s1
 8004e18:	ee37 7a48 	vsub.f32	s14, s14, s16
 8004e1c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8004e20:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8004e24:	ee72 1a21 	vadd.f32	s3, s4, s3
 8004e28:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8004e2c:	ee38 2a89 	vadd.f32	s4, s17, s18
 8004e30:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8004e34:	ee38 8a04 	vadd.f32	s16, s16, s8
 8004e38:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8004e3c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8004e40:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8004e44:	eddd 5a03 	vldr	s11, [sp, #12]
 8004e48:	edc6 fa00 	vstr	s31, [r6]
 8004e4c:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8004e50:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8004e54:	ee30 0a45 	vsub.f32	s0, s0, s10
 8004e58:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8004e5c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8004e60:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8004e64:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8004e68:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8004e6c:	ee25 6a86 	vmul.f32	s12, s11, s12
 8004e70:	ee74 4a89 	vadd.f32	s9, s9, s18
 8004e74:	ee34 3a43 	vsub.f32	s6, s8, s6
 8004e78:	ee78 8a85 	vadd.f32	s17, s17, s10
 8004e7c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004e80:	44c4      	add	ip, r8
 8004e82:	45e3      	cmp	fp, ip
 8004e84:	edc3 3a00 	vstr	s7, [r3]
 8004e88:	edc3 6a01 	vstr	s13, [r3, #4]
 8004e8c:	4456      	add	r6, sl
 8004e8e:	ed07 1a01 	vstr	s2, [r7, #-4]
 8004e92:	edc7 0a00 	vstr	s1, [r7]
 8004e96:	4453      	add	r3, sl
 8004e98:	ed80 2a00 	vstr	s4, [r0]
 8004e9c:	edc0 2a01 	vstr	s5, [r0, #4]
 8004ea0:	4457      	add	r7, sl
 8004ea2:	edc2 1a00 	vstr	s3, [r2]
 8004ea6:	ed82 7a01 	vstr	s14, [r2, #4]
 8004eaa:	4450      	add	r0, sl
 8004eac:	ed85 8a00 	vstr	s16, [r5]
 8004eb0:	ed85 0a01 	vstr	s0, [r5, #4]
 8004eb4:	4452      	add	r2, sl
 8004eb6:	edc1 4a00 	vstr	s9, [r1]
 8004eba:	4455      	add	r5, sl
 8004ebc:	ed81 3a01 	vstr	s6, [r1, #4]
 8004ec0:	edc4 8a00 	vstr	s17, [r4]
 8004ec4:	ed84 6a01 	vstr	s12, [r4, #4]
 8004ec8:	4451      	add	r1, sl
 8004eca:	4454      	add	r4, sl
 8004ecc:	f63f aeea 	bhi.w	8004ca4 <arm_radix8_butterfly_f32+0x2fc>
 8004ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ed2:	3308      	adds	r3, #8
 8004ed4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ed8:	3308      	adds	r3, #8
 8004eda:	930a      	str	r3, [sp, #40]	; 0x28
 8004edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ede:	3308      	adds	r3, #8
 8004ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee2:	9b08      	ldr	r3, [sp, #32]
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	9308      	str	r3, [sp, #32]
 8004ee8:	9b07      	ldr	r3, [sp, #28]
 8004eea:	3308      	adds	r3, #8
 8004eec:	9307      	str	r3, [sp, #28]
 8004eee:	9b06      	ldr	r3, [sp, #24]
 8004ef0:	3308      	adds	r3, #8
 8004ef2:	9306      	str	r3, [sp, #24]
 8004ef4:	9b05      	ldr	r3, [sp, #20]
 8004ef6:	3308      	adds	r3, #8
 8004ef8:	9305      	str	r3, [sp, #20]
 8004efa:	9b04      	ldr	r3, [sp, #16]
 8004efc:	3308      	adds	r3, #8
 8004efe:	9304      	str	r3, [sp, #16]
 8004f00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f02:	f109 0901 	add.w	r9, r9, #1
 8004f06:	454b      	cmp	r3, r9
 8004f08:	f47f ae7d 	bne.w	8004c06 <arm_radix8_butterfly_f32+0x25e>
 8004f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	46d9      	mov	r9, fp
 8004f14:	9310      	str	r3, [sp, #64]	; 0x40
 8004f16:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8004f1a:	e554      	b.n	80049c6 <arm_radix8_butterfly_f32+0x1e>
 8004f1c:	b015      	add	sp, #84	; 0x54
 8004f1e:	ecbd 8b10 	vpop	{d8-d15}
 8004f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f26:	bf00      	nop

08004f28 <sqrt>:
 8004f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f2c:	ed2d 8b02 	vpush	{d8}
 8004f30:	b08b      	sub	sp, #44	; 0x2c
 8004f32:	ec55 4b10 	vmov	r4, r5, d0
 8004f36:	f000 f8a1 	bl	800507c <__ieee754_sqrt>
 8004f3a:	4b26      	ldr	r3, [pc, #152]	; (8004fd4 <sqrt+0xac>)
 8004f3c:	eeb0 8a40 	vmov.f32	s16, s0
 8004f40:	eef0 8a60 	vmov.f32	s17, s1
 8004f44:	f993 6000 	ldrsb.w	r6, [r3]
 8004f48:	1c73      	adds	r3, r6, #1
 8004f4a:	d02a      	beq.n	8004fa2 <sqrt+0x7a>
 8004f4c:	4622      	mov	r2, r4
 8004f4e:	462b      	mov	r3, r5
 8004f50:	4620      	mov	r0, r4
 8004f52:	4629      	mov	r1, r5
 8004f54:	f7fb fd9e 	bl	8000a94 <__aeabi_dcmpun>
 8004f58:	4607      	mov	r7, r0
 8004f5a:	bb10      	cbnz	r0, 8004fa2 <sqrt+0x7a>
 8004f5c:	f04f 0800 	mov.w	r8, #0
 8004f60:	f04f 0900 	mov.w	r9, #0
 8004f64:	4642      	mov	r2, r8
 8004f66:	464b      	mov	r3, r9
 8004f68:	4620      	mov	r0, r4
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	f7fb fd6a 	bl	8000a44 <__aeabi_dcmplt>
 8004f70:	b1b8      	cbz	r0, 8004fa2 <sqrt+0x7a>
 8004f72:	2301      	movs	r3, #1
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	4b18      	ldr	r3, [pc, #96]	; (8004fd8 <sqrt+0xb0>)
 8004f78:	9301      	str	r3, [sp, #4]
 8004f7a:	9708      	str	r7, [sp, #32]
 8004f7c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004f80:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004f84:	b9b6      	cbnz	r6, 8004fb4 <sqrt+0x8c>
 8004f86:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004f8a:	4668      	mov	r0, sp
 8004f8c:	f000 f929 	bl	80051e2 <matherr>
 8004f90:	b1d0      	cbz	r0, 8004fc8 <sqrt+0xa0>
 8004f92:	9b08      	ldr	r3, [sp, #32]
 8004f94:	b11b      	cbz	r3, 8004f9e <sqrt+0x76>
 8004f96:	f000 f927 	bl	80051e8 <__errno>
 8004f9a:	9b08      	ldr	r3, [sp, #32]
 8004f9c:	6003      	str	r3, [r0, #0]
 8004f9e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8004fa2:	eeb0 0a48 	vmov.f32	s0, s16
 8004fa6:	eef0 0a68 	vmov.f32	s1, s17
 8004faa:	b00b      	add	sp, #44	; 0x2c
 8004fac:	ecbd 8b02 	vpop	{d8}
 8004fb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fb4:	4642      	mov	r2, r8
 8004fb6:	464b      	mov	r3, r9
 8004fb8:	4640      	mov	r0, r8
 8004fba:	4649      	mov	r1, r9
 8004fbc:	f7fb fbfa 	bl	80007b4 <__aeabi_ddiv>
 8004fc0:	2e02      	cmp	r6, #2
 8004fc2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004fc6:	d1e0      	bne.n	8004f8a <sqrt+0x62>
 8004fc8:	f000 f90e 	bl	80051e8 <__errno>
 8004fcc:	2321      	movs	r3, #33	; 0x21
 8004fce:	6003      	str	r3, [r0, #0]
 8004fd0:	e7df      	b.n	8004f92 <sqrt+0x6a>
 8004fd2:	bf00      	nop
 8004fd4:	20000009 	.word	0x20000009
 8004fd8:	08019db0 	.word	0x08019db0

08004fdc <sqrtf>:
 8004fdc:	b510      	push	{r4, lr}
 8004fde:	ed2d 8b02 	vpush	{d8}
 8004fe2:	b08a      	sub	sp, #40	; 0x28
 8004fe4:	eeb0 8a40 	vmov.f32	s16, s0
 8004fe8:	f000 f8f8 	bl	80051dc <__ieee754_sqrtf>
 8004fec:	4b21      	ldr	r3, [pc, #132]	; (8005074 <sqrtf+0x98>)
 8004fee:	f993 4000 	ldrsb.w	r4, [r3]
 8004ff2:	1c63      	adds	r3, r4, #1
 8004ff4:	d02c      	beq.n	8005050 <sqrtf+0x74>
 8004ff6:	eeb4 8a48 	vcmp.f32	s16, s16
 8004ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ffe:	d627      	bvs.n	8005050 <sqrtf+0x74>
 8005000:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005008:	d522      	bpl.n	8005050 <sqrtf+0x74>
 800500a:	2301      	movs	r3, #1
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	4b1a      	ldr	r3, [pc, #104]	; (8005078 <sqrtf+0x9c>)
 8005010:	9301      	str	r3, [sp, #4]
 8005012:	ee18 0a10 	vmov	r0, s16
 8005016:	2300      	movs	r3, #0
 8005018:	9308      	str	r3, [sp, #32]
 800501a:	f7fb fa49 	bl	80004b0 <__aeabi_f2d>
 800501e:	2200      	movs	r2, #0
 8005020:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005024:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005028:	2300      	movs	r3, #0
 800502a:	b9ac      	cbnz	r4, 8005058 <sqrtf+0x7c>
 800502c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005030:	4668      	mov	r0, sp
 8005032:	f000 f8d6 	bl	80051e2 <matherr>
 8005036:	b1b8      	cbz	r0, 8005068 <sqrtf+0x8c>
 8005038:	9b08      	ldr	r3, [sp, #32]
 800503a:	b11b      	cbz	r3, 8005044 <sqrtf+0x68>
 800503c:	f000 f8d4 	bl	80051e8 <__errno>
 8005040:	9b08      	ldr	r3, [sp, #32]
 8005042:	6003      	str	r3, [r0, #0]
 8005044:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005048:	f7fb fd62 	bl	8000b10 <__aeabi_d2f>
 800504c:	ee00 0a10 	vmov	s0, r0
 8005050:	b00a      	add	sp, #40	; 0x28
 8005052:	ecbd 8b02 	vpop	{d8}
 8005056:	bd10      	pop	{r4, pc}
 8005058:	4610      	mov	r0, r2
 800505a:	4619      	mov	r1, r3
 800505c:	f7fb fbaa 	bl	80007b4 <__aeabi_ddiv>
 8005060:	2c02      	cmp	r4, #2
 8005062:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005066:	d1e3      	bne.n	8005030 <sqrtf+0x54>
 8005068:	f000 f8be 	bl	80051e8 <__errno>
 800506c:	2321      	movs	r3, #33	; 0x21
 800506e:	6003      	str	r3, [r0, #0]
 8005070:	e7e2      	b.n	8005038 <sqrtf+0x5c>
 8005072:	bf00      	nop
 8005074:	20000009 	.word	0x20000009
 8005078:	08019db5 	.word	0x08019db5

0800507c <__ieee754_sqrt>:
 800507c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005080:	4955      	ldr	r1, [pc, #340]	; (80051d8 <__ieee754_sqrt+0x15c>)
 8005082:	ec55 4b10 	vmov	r4, r5, d0
 8005086:	43a9      	bics	r1, r5
 8005088:	462b      	mov	r3, r5
 800508a:	462a      	mov	r2, r5
 800508c:	d112      	bne.n	80050b4 <__ieee754_sqrt+0x38>
 800508e:	ee10 2a10 	vmov	r2, s0
 8005092:	ee10 0a10 	vmov	r0, s0
 8005096:	4629      	mov	r1, r5
 8005098:	f7fb fa62 	bl	8000560 <__aeabi_dmul>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4620      	mov	r0, r4
 80050a2:	4629      	mov	r1, r5
 80050a4:	f7fb f8a6 	bl	80001f4 <__adddf3>
 80050a8:	4604      	mov	r4, r0
 80050aa:	460d      	mov	r5, r1
 80050ac:	ec45 4b10 	vmov	d0, r4, r5
 80050b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050b4:	2d00      	cmp	r5, #0
 80050b6:	ee10 0a10 	vmov	r0, s0
 80050ba:	4621      	mov	r1, r4
 80050bc:	dc0f      	bgt.n	80050de <__ieee754_sqrt+0x62>
 80050be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80050c2:	4330      	orrs	r0, r6
 80050c4:	d0f2      	beq.n	80050ac <__ieee754_sqrt+0x30>
 80050c6:	b155      	cbz	r5, 80050de <__ieee754_sqrt+0x62>
 80050c8:	ee10 2a10 	vmov	r2, s0
 80050cc:	4620      	mov	r0, r4
 80050ce:	4629      	mov	r1, r5
 80050d0:	f7fb f88e 	bl	80001f0 <__aeabi_dsub>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	f7fb fb6c 	bl	80007b4 <__aeabi_ddiv>
 80050dc:	e7e4      	b.n	80050a8 <__ieee754_sqrt+0x2c>
 80050de:	151b      	asrs	r3, r3, #20
 80050e0:	d073      	beq.n	80051ca <__ieee754_sqrt+0x14e>
 80050e2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80050e6:	07dd      	lsls	r5, r3, #31
 80050e8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80050ec:	bf48      	it	mi
 80050ee:	0fc8      	lsrmi	r0, r1, #31
 80050f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80050f4:	bf44      	itt	mi
 80050f6:	0049      	lslmi	r1, r1, #1
 80050f8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80050fc:	2500      	movs	r5, #0
 80050fe:	1058      	asrs	r0, r3, #1
 8005100:	0fcb      	lsrs	r3, r1, #31
 8005102:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8005106:	0049      	lsls	r1, r1, #1
 8005108:	2316      	movs	r3, #22
 800510a:	462c      	mov	r4, r5
 800510c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005110:	19a7      	adds	r7, r4, r6
 8005112:	4297      	cmp	r7, r2
 8005114:	bfde      	ittt	le
 8005116:	19bc      	addle	r4, r7, r6
 8005118:	1bd2      	suble	r2, r2, r7
 800511a:	19ad      	addle	r5, r5, r6
 800511c:	0fcf      	lsrs	r7, r1, #31
 800511e:	3b01      	subs	r3, #1
 8005120:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8005124:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005128:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800512c:	d1f0      	bne.n	8005110 <__ieee754_sqrt+0x94>
 800512e:	f04f 0c20 	mov.w	ip, #32
 8005132:	469e      	mov	lr, r3
 8005134:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005138:	42a2      	cmp	r2, r4
 800513a:	eb06 070e 	add.w	r7, r6, lr
 800513e:	dc02      	bgt.n	8005146 <__ieee754_sqrt+0xca>
 8005140:	d112      	bne.n	8005168 <__ieee754_sqrt+0xec>
 8005142:	428f      	cmp	r7, r1
 8005144:	d810      	bhi.n	8005168 <__ieee754_sqrt+0xec>
 8005146:	2f00      	cmp	r7, #0
 8005148:	eb07 0e06 	add.w	lr, r7, r6
 800514c:	da42      	bge.n	80051d4 <__ieee754_sqrt+0x158>
 800514e:	f1be 0f00 	cmp.w	lr, #0
 8005152:	db3f      	blt.n	80051d4 <__ieee754_sqrt+0x158>
 8005154:	f104 0801 	add.w	r8, r4, #1
 8005158:	1b12      	subs	r2, r2, r4
 800515a:	428f      	cmp	r7, r1
 800515c:	bf88      	it	hi
 800515e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8005162:	1bc9      	subs	r1, r1, r7
 8005164:	4433      	add	r3, r6
 8005166:	4644      	mov	r4, r8
 8005168:	0052      	lsls	r2, r2, #1
 800516a:	f1bc 0c01 	subs.w	ip, ip, #1
 800516e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8005172:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005176:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800517a:	d1dd      	bne.n	8005138 <__ieee754_sqrt+0xbc>
 800517c:	430a      	orrs	r2, r1
 800517e:	d006      	beq.n	800518e <__ieee754_sqrt+0x112>
 8005180:	1c5c      	adds	r4, r3, #1
 8005182:	bf13      	iteet	ne
 8005184:	3301      	addne	r3, #1
 8005186:	3501      	addeq	r5, #1
 8005188:	4663      	moveq	r3, ip
 800518a:	f023 0301 	bicne.w	r3, r3, #1
 800518e:	106a      	asrs	r2, r5, #1
 8005190:	085b      	lsrs	r3, r3, #1
 8005192:	07e9      	lsls	r1, r5, #31
 8005194:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005198:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800519c:	bf48      	it	mi
 800519e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80051a2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80051a6:	461c      	mov	r4, r3
 80051a8:	e780      	b.n	80050ac <__ieee754_sqrt+0x30>
 80051aa:	0aca      	lsrs	r2, r1, #11
 80051ac:	3815      	subs	r0, #21
 80051ae:	0549      	lsls	r1, r1, #21
 80051b0:	2a00      	cmp	r2, #0
 80051b2:	d0fa      	beq.n	80051aa <__ieee754_sqrt+0x12e>
 80051b4:	02d6      	lsls	r6, r2, #11
 80051b6:	d50a      	bpl.n	80051ce <__ieee754_sqrt+0x152>
 80051b8:	f1c3 0420 	rsb	r4, r3, #32
 80051bc:	fa21 f404 	lsr.w	r4, r1, r4
 80051c0:	1e5d      	subs	r5, r3, #1
 80051c2:	4099      	lsls	r1, r3
 80051c4:	4322      	orrs	r2, r4
 80051c6:	1b43      	subs	r3, r0, r5
 80051c8:	e78b      	b.n	80050e2 <__ieee754_sqrt+0x66>
 80051ca:	4618      	mov	r0, r3
 80051cc:	e7f0      	b.n	80051b0 <__ieee754_sqrt+0x134>
 80051ce:	0052      	lsls	r2, r2, #1
 80051d0:	3301      	adds	r3, #1
 80051d2:	e7ef      	b.n	80051b4 <__ieee754_sqrt+0x138>
 80051d4:	46a0      	mov	r8, r4
 80051d6:	e7bf      	b.n	8005158 <__ieee754_sqrt+0xdc>
 80051d8:	7ff00000 	.word	0x7ff00000

080051dc <__ieee754_sqrtf>:
 80051dc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80051e0:	4770      	bx	lr

080051e2 <matherr>:
 80051e2:	2000      	movs	r0, #0
 80051e4:	4770      	bx	lr
	...

080051e8 <__errno>:
 80051e8:	4b01      	ldr	r3, [pc, #4]	; (80051f0 <__errno+0x8>)
 80051ea:	6818      	ldr	r0, [r3, #0]
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	2000000c 	.word	0x2000000c

080051f4 <__libc_init_array>:
 80051f4:	b570      	push	{r4, r5, r6, lr}
 80051f6:	4e0d      	ldr	r6, [pc, #52]	; (800522c <__libc_init_array+0x38>)
 80051f8:	4c0d      	ldr	r4, [pc, #52]	; (8005230 <__libc_init_array+0x3c>)
 80051fa:	1ba4      	subs	r4, r4, r6
 80051fc:	10a4      	asrs	r4, r4, #2
 80051fe:	2500      	movs	r5, #0
 8005200:	42a5      	cmp	r5, r4
 8005202:	d109      	bne.n	8005218 <__libc_init_array+0x24>
 8005204:	4e0b      	ldr	r6, [pc, #44]	; (8005234 <__libc_init_array+0x40>)
 8005206:	4c0c      	ldr	r4, [pc, #48]	; (8005238 <__libc_init_array+0x44>)
 8005208:	f001 fd46 	bl	8006c98 <_init>
 800520c:	1ba4      	subs	r4, r4, r6
 800520e:	10a4      	asrs	r4, r4, #2
 8005210:	2500      	movs	r5, #0
 8005212:	42a5      	cmp	r5, r4
 8005214:	d105      	bne.n	8005222 <__libc_init_array+0x2e>
 8005216:	bd70      	pop	{r4, r5, r6, pc}
 8005218:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800521c:	4798      	blx	r3
 800521e:	3501      	adds	r5, #1
 8005220:	e7ee      	b.n	8005200 <__libc_init_array+0xc>
 8005222:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005226:	4798      	blx	r3
 8005228:	3501      	adds	r5, #1
 800522a:	e7f2      	b.n	8005212 <__libc_init_array+0x1e>
 800522c:	08019ff0 	.word	0x08019ff0
 8005230:	08019ff0 	.word	0x08019ff0
 8005234:	08019ff0 	.word	0x08019ff0
 8005238:	08019ff4 	.word	0x08019ff4

0800523c <memcpy>:
 800523c:	b510      	push	{r4, lr}
 800523e:	1e43      	subs	r3, r0, #1
 8005240:	440a      	add	r2, r1
 8005242:	4291      	cmp	r1, r2
 8005244:	d100      	bne.n	8005248 <memcpy+0xc>
 8005246:	bd10      	pop	{r4, pc}
 8005248:	f811 4b01 	ldrb.w	r4, [r1], #1
 800524c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005250:	e7f7      	b.n	8005242 <memcpy+0x6>

08005252 <memset>:
 8005252:	4402      	add	r2, r0
 8005254:	4603      	mov	r3, r0
 8005256:	4293      	cmp	r3, r2
 8005258:	d100      	bne.n	800525c <memset+0xa>
 800525a:	4770      	bx	lr
 800525c:	f803 1b01 	strb.w	r1, [r3], #1
 8005260:	e7f9      	b.n	8005256 <memset+0x4>

08005262 <__cvt>:
 8005262:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005266:	ec55 4b10 	vmov	r4, r5, d0
 800526a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800526c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005270:	2d00      	cmp	r5, #0
 8005272:	460e      	mov	r6, r1
 8005274:	4691      	mov	r9, r2
 8005276:	4619      	mov	r1, r3
 8005278:	bfb8      	it	lt
 800527a:	4622      	movlt	r2, r4
 800527c:	462b      	mov	r3, r5
 800527e:	f027 0720 	bic.w	r7, r7, #32
 8005282:	bfbb      	ittet	lt
 8005284:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005288:	461d      	movlt	r5, r3
 800528a:	2300      	movge	r3, #0
 800528c:	232d      	movlt	r3, #45	; 0x2d
 800528e:	bfb8      	it	lt
 8005290:	4614      	movlt	r4, r2
 8005292:	2f46      	cmp	r7, #70	; 0x46
 8005294:	700b      	strb	r3, [r1, #0]
 8005296:	d004      	beq.n	80052a2 <__cvt+0x40>
 8005298:	2f45      	cmp	r7, #69	; 0x45
 800529a:	d100      	bne.n	800529e <__cvt+0x3c>
 800529c:	3601      	adds	r6, #1
 800529e:	2102      	movs	r1, #2
 80052a0:	e000      	b.n	80052a4 <__cvt+0x42>
 80052a2:	2103      	movs	r1, #3
 80052a4:	ab03      	add	r3, sp, #12
 80052a6:	9301      	str	r3, [sp, #4]
 80052a8:	ab02      	add	r3, sp, #8
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	4632      	mov	r2, r6
 80052ae:	4653      	mov	r3, sl
 80052b0:	ec45 4b10 	vmov	d0, r4, r5
 80052b4:	f000 fbac 	bl	8005a10 <_dtoa_r>
 80052b8:	2f47      	cmp	r7, #71	; 0x47
 80052ba:	4680      	mov	r8, r0
 80052bc:	d102      	bne.n	80052c4 <__cvt+0x62>
 80052be:	f019 0f01 	tst.w	r9, #1
 80052c2:	d026      	beq.n	8005312 <__cvt+0xb0>
 80052c4:	2f46      	cmp	r7, #70	; 0x46
 80052c6:	eb08 0906 	add.w	r9, r8, r6
 80052ca:	d111      	bne.n	80052f0 <__cvt+0x8e>
 80052cc:	f898 3000 	ldrb.w	r3, [r8]
 80052d0:	2b30      	cmp	r3, #48	; 0x30
 80052d2:	d10a      	bne.n	80052ea <__cvt+0x88>
 80052d4:	2200      	movs	r2, #0
 80052d6:	2300      	movs	r3, #0
 80052d8:	4620      	mov	r0, r4
 80052da:	4629      	mov	r1, r5
 80052dc:	f7fb fba8 	bl	8000a30 <__aeabi_dcmpeq>
 80052e0:	b918      	cbnz	r0, 80052ea <__cvt+0x88>
 80052e2:	f1c6 0601 	rsb	r6, r6, #1
 80052e6:	f8ca 6000 	str.w	r6, [sl]
 80052ea:	f8da 3000 	ldr.w	r3, [sl]
 80052ee:	4499      	add	r9, r3
 80052f0:	2200      	movs	r2, #0
 80052f2:	2300      	movs	r3, #0
 80052f4:	4620      	mov	r0, r4
 80052f6:	4629      	mov	r1, r5
 80052f8:	f7fb fb9a 	bl	8000a30 <__aeabi_dcmpeq>
 80052fc:	b938      	cbnz	r0, 800530e <__cvt+0xac>
 80052fe:	2230      	movs	r2, #48	; 0x30
 8005300:	9b03      	ldr	r3, [sp, #12]
 8005302:	454b      	cmp	r3, r9
 8005304:	d205      	bcs.n	8005312 <__cvt+0xb0>
 8005306:	1c59      	adds	r1, r3, #1
 8005308:	9103      	str	r1, [sp, #12]
 800530a:	701a      	strb	r2, [r3, #0]
 800530c:	e7f8      	b.n	8005300 <__cvt+0x9e>
 800530e:	f8cd 900c 	str.w	r9, [sp, #12]
 8005312:	9b03      	ldr	r3, [sp, #12]
 8005314:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005316:	eba3 0308 	sub.w	r3, r3, r8
 800531a:	4640      	mov	r0, r8
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	b004      	add	sp, #16
 8005320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005324 <__exponent>:
 8005324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005326:	2900      	cmp	r1, #0
 8005328:	4604      	mov	r4, r0
 800532a:	bfba      	itte	lt
 800532c:	4249      	neglt	r1, r1
 800532e:	232d      	movlt	r3, #45	; 0x2d
 8005330:	232b      	movge	r3, #43	; 0x2b
 8005332:	2909      	cmp	r1, #9
 8005334:	f804 2b02 	strb.w	r2, [r4], #2
 8005338:	7043      	strb	r3, [r0, #1]
 800533a:	dd20      	ble.n	800537e <__exponent+0x5a>
 800533c:	f10d 0307 	add.w	r3, sp, #7
 8005340:	461f      	mov	r7, r3
 8005342:	260a      	movs	r6, #10
 8005344:	fb91 f5f6 	sdiv	r5, r1, r6
 8005348:	fb06 1115 	mls	r1, r6, r5, r1
 800534c:	3130      	adds	r1, #48	; 0x30
 800534e:	2d09      	cmp	r5, #9
 8005350:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005354:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8005358:	4629      	mov	r1, r5
 800535a:	dc09      	bgt.n	8005370 <__exponent+0x4c>
 800535c:	3130      	adds	r1, #48	; 0x30
 800535e:	3b02      	subs	r3, #2
 8005360:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005364:	42bb      	cmp	r3, r7
 8005366:	4622      	mov	r2, r4
 8005368:	d304      	bcc.n	8005374 <__exponent+0x50>
 800536a:	1a10      	subs	r0, r2, r0
 800536c:	b003      	add	sp, #12
 800536e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005370:	4613      	mov	r3, r2
 8005372:	e7e7      	b.n	8005344 <__exponent+0x20>
 8005374:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005378:	f804 2b01 	strb.w	r2, [r4], #1
 800537c:	e7f2      	b.n	8005364 <__exponent+0x40>
 800537e:	2330      	movs	r3, #48	; 0x30
 8005380:	4419      	add	r1, r3
 8005382:	7083      	strb	r3, [r0, #2]
 8005384:	1d02      	adds	r2, r0, #4
 8005386:	70c1      	strb	r1, [r0, #3]
 8005388:	e7ef      	b.n	800536a <__exponent+0x46>
	...

0800538c <_printf_float>:
 800538c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005390:	b08d      	sub	sp, #52	; 0x34
 8005392:	460c      	mov	r4, r1
 8005394:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005398:	4616      	mov	r6, r2
 800539a:	461f      	mov	r7, r3
 800539c:	4605      	mov	r5, r0
 800539e:	f001 f8ef 	bl	8006580 <_localeconv_r>
 80053a2:	6803      	ldr	r3, [r0, #0]
 80053a4:	9304      	str	r3, [sp, #16]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7fa ff16 	bl	80001d8 <strlen>
 80053ac:	2300      	movs	r3, #0
 80053ae:	930a      	str	r3, [sp, #40]	; 0x28
 80053b0:	f8d8 3000 	ldr.w	r3, [r8]
 80053b4:	9005      	str	r0, [sp, #20]
 80053b6:	3307      	adds	r3, #7
 80053b8:	f023 0307 	bic.w	r3, r3, #7
 80053bc:	f103 0208 	add.w	r2, r3, #8
 80053c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80053c4:	f8d4 b000 	ldr.w	fp, [r4]
 80053c8:	f8c8 2000 	str.w	r2, [r8]
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80053d4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80053d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80053dc:	9307      	str	r3, [sp, #28]
 80053de:	f8cd 8018 	str.w	r8, [sp, #24]
 80053e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053e6:	4ba7      	ldr	r3, [pc, #668]	; (8005684 <_printf_float+0x2f8>)
 80053e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053ec:	f7fb fb52 	bl	8000a94 <__aeabi_dcmpun>
 80053f0:	bb70      	cbnz	r0, 8005450 <_printf_float+0xc4>
 80053f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053f6:	4ba3      	ldr	r3, [pc, #652]	; (8005684 <_printf_float+0x2f8>)
 80053f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053fc:	f7fb fb2c 	bl	8000a58 <__aeabi_dcmple>
 8005400:	bb30      	cbnz	r0, 8005450 <_printf_float+0xc4>
 8005402:	2200      	movs	r2, #0
 8005404:	2300      	movs	r3, #0
 8005406:	4640      	mov	r0, r8
 8005408:	4649      	mov	r1, r9
 800540a:	f7fb fb1b 	bl	8000a44 <__aeabi_dcmplt>
 800540e:	b110      	cbz	r0, 8005416 <_printf_float+0x8a>
 8005410:	232d      	movs	r3, #45	; 0x2d
 8005412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005416:	4a9c      	ldr	r2, [pc, #624]	; (8005688 <_printf_float+0x2fc>)
 8005418:	4b9c      	ldr	r3, [pc, #624]	; (800568c <_printf_float+0x300>)
 800541a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800541e:	bf8c      	ite	hi
 8005420:	4690      	movhi	r8, r2
 8005422:	4698      	movls	r8, r3
 8005424:	2303      	movs	r3, #3
 8005426:	f02b 0204 	bic.w	r2, fp, #4
 800542a:	6123      	str	r3, [r4, #16]
 800542c:	6022      	str	r2, [r4, #0]
 800542e:	f04f 0900 	mov.w	r9, #0
 8005432:	9700      	str	r7, [sp, #0]
 8005434:	4633      	mov	r3, r6
 8005436:	aa0b      	add	r2, sp, #44	; 0x2c
 8005438:	4621      	mov	r1, r4
 800543a:	4628      	mov	r0, r5
 800543c:	f000 f9e6 	bl	800580c <_printf_common>
 8005440:	3001      	adds	r0, #1
 8005442:	f040 808d 	bne.w	8005560 <_printf_float+0x1d4>
 8005446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800544a:	b00d      	add	sp, #52	; 0x34
 800544c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005450:	4642      	mov	r2, r8
 8005452:	464b      	mov	r3, r9
 8005454:	4640      	mov	r0, r8
 8005456:	4649      	mov	r1, r9
 8005458:	f7fb fb1c 	bl	8000a94 <__aeabi_dcmpun>
 800545c:	b110      	cbz	r0, 8005464 <_printf_float+0xd8>
 800545e:	4a8c      	ldr	r2, [pc, #560]	; (8005690 <_printf_float+0x304>)
 8005460:	4b8c      	ldr	r3, [pc, #560]	; (8005694 <_printf_float+0x308>)
 8005462:	e7da      	b.n	800541a <_printf_float+0x8e>
 8005464:	6861      	ldr	r1, [r4, #4]
 8005466:	1c4b      	adds	r3, r1, #1
 8005468:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800546c:	a80a      	add	r0, sp, #40	; 0x28
 800546e:	d13e      	bne.n	80054ee <_printf_float+0x162>
 8005470:	2306      	movs	r3, #6
 8005472:	6063      	str	r3, [r4, #4]
 8005474:	2300      	movs	r3, #0
 8005476:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800547a:	ab09      	add	r3, sp, #36	; 0x24
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	ec49 8b10 	vmov	d0, r8, r9
 8005482:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005486:	6022      	str	r2, [r4, #0]
 8005488:	f8cd a004 	str.w	sl, [sp, #4]
 800548c:	6861      	ldr	r1, [r4, #4]
 800548e:	4628      	mov	r0, r5
 8005490:	f7ff fee7 	bl	8005262 <__cvt>
 8005494:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005498:	2b47      	cmp	r3, #71	; 0x47
 800549a:	4680      	mov	r8, r0
 800549c:	d109      	bne.n	80054b2 <_printf_float+0x126>
 800549e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054a0:	1cd8      	adds	r0, r3, #3
 80054a2:	db02      	blt.n	80054aa <_printf_float+0x11e>
 80054a4:	6862      	ldr	r2, [r4, #4]
 80054a6:	4293      	cmp	r3, r2
 80054a8:	dd47      	ble.n	800553a <_printf_float+0x1ae>
 80054aa:	f1aa 0a02 	sub.w	sl, sl, #2
 80054ae:	fa5f fa8a 	uxtb.w	sl, sl
 80054b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80054b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054b8:	d824      	bhi.n	8005504 <_printf_float+0x178>
 80054ba:	3901      	subs	r1, #1
 80054bc:	4652      	mov	r2, sl
 80054be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054c2:	9109      	str	r1, [sp, #36]	; 0x24
 80054c4:	f7ff ff2e 	bl	8005324 <__exponent>
 80054c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054ca:	1813      	adds	r3, r2, r0
 80054cc:	2a01      	cmp	r2, #1
 80054ce:	4681      	mov	r9, r0
 80054d0:	6123      	str	r3, [r4, #16]
 80054d2:	dc02      	bgt.n	80054da <_printf_float+0x14e>
 80054d4:	6822      	ldr	r2, [r4, #0]
 80054d6:	07d1      	lsls	r1, r2, #31
 80054d8:	d501      	bpl.n	80054de <_printf_float+0x152>
 80054da:	3301      	adds	r3, #1
 80054dc:	6123      	str	r3, [r4, #16]
 80054de:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0a5      	beq.n	8005432 <_printf_float+0xa6>
 80054e6:	232d      	movs	r3, #45	; 0x2d
 80054e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ec:	e7a1      	b.n	8005432 <_printf_float+0xa6>
 80054ee:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80054f2:	f000 8177 	beq.w	80057e4 <_printf_float+0x458>
 80054f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80054fa:	d1bb      	bne.n	8005474 <_printf_float+0xe8>
 80054fc:	2900      	cmp	r1, #0
 80054fe:	d1b9      	bne.n	8005474 <_printf_float+0xe8>
 8005500:	2301      	movs	r3, #1
 8005502:	e7b6      	b.n	8005472 <_printf_float+0xe6>
 8005504:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005508:	d119      	bne.n	800553e <_printf_float+0x1b2>
 800550a:	2900      	cmp	r1, #0
 800550c:	6863      	ldr	r3, [r4, #4]
 800550e:	dd0c      	ble.n	800552a <_printf_float+0x19e>
 8005510:	6121      	str	r1, [r4, #16]
 8005512:	b913      	cbnz	r3, 800551a <_printf_float+0x18e>
 8005514:	6822      	ldr	r2, [r4, #0]
 8005516:	07d2      	lsls	r2, r2, #31
 8005518:	d502      	bpl.n	8005520 <_printf_float+0x194>
 800551a:	3301      	adds	r3, #1
 800551c:	440b      	add	r3, r1
 800551e:	6123      	str	r3, [r4, #16]
 8005520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005522:	65a3      	str	r3, [r4, #88]	; 0x58
 8005524:	f04f 0900 	mov.w	r9, #0
 8005528:	e7d9      	b.n	80054de <_printf_float+0x152>
 800552a:	b913      	cbnz	r3, 8005532 <_printf_float+0x1a6>
 800552c:	6822      	ldr	r2, [r4, #0]
 800552e:	07d0      	lsls	r0, r2, #31
 8005530:	d501      	bpl.n	8005536 <_printf_float+0x1aa>
 8005532:	3302      	adds	r3, #2
 8005534:	e7f3      	b.n	800551e <_printf_float+0x192>
 8005536:	2301      	movs	r3, #1
 8005538:	e7f1      	b.n	800551e <_printf_float+0x192>
 800553a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800553e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005542:	4293      	cmp	r3, r2
 8005544:	db05      	blt.n	8005552 <_printf_float+0x1c6>
 8005546:	6822      	ldr	r2, [r4, #0]
 8005548:	6123      	str	r3, [r4, #16]
 800554a:	07d1      	lsls	r1, r2, #31
 800554c:	d5e8      	bpl.n	8005520 <_printf_float+0x194>
 800554e:	3301      	adds	r3, #1
 8005550:	e7e5      	b.n	800551e <_printf_float+0x192>
 8005552:	2b00      	cmp	r3, #0
 8005554:	bfd4      	ite	le
 8005556:	f1c3 0302 	rsble	r3, r3, #2
 800555a:	2301      	movgt	r3, #1
 800555c:	4413      	add	r3, r2
 800555e:	e7de      	b.n	800551e <_printf_float+0x192>
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	055a      	lsls	r2, r3, #21
 8005564:	d407      	bmi.n	8005576 <_printf_float+0x1ea>
 8005566:	6923      	ldr	r3, [r4, #16]
 8005568:	4642      	mov	r2, r8
 800556a:	4631      	mov	r1, r6
 800556c:	4628      	mov	r0, r5
 800556e:	47b8      	blx	r7
 8005570:	3001      	adds	r0, #1
 8005572:	d12b      	bne.n	80055cc <_printf_float+0x240>
 8005574:	e767      	b.n	8005446 <_printf_float+0xba>
 8005576:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800557a:	f240 80dc 	bls.w	8005736 <_printf_float+0x3aa>
 800557e:	2200      	movs	r2, #0
 8005580:	2300      	movs	r3, #0
 8005582:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005586:	f7fb fa53 	bl	8000a30 <__aeabi_dcmpeq>
 800558a:	2800      	cmp	r0, #0
 800558c:	d033      	beq.n	80055f6 <_printf_float+0x26a>
 800558e:	2301      	movs	r3, #1
 8005590:	4a41      	ldr	r2, [pc, #260]	; (8005698 <_printf_float+0x30c>)
 8005592:	4631      	mov	r1, r6
 8005594:	4628      	mov	r0, r5
 8005596:	47b8      	blx	r7
 8005598:	3001      	adds	r0, #1
 800559a:	f43f af54 	beq.w	8005446 <_printf_float+0xba>
 800559e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055a2:	429a      	cmp	r2, r3
 80055a4:	db02      	blt.n	80055ac <_printf_float+0x220>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	07d8      	lsls	r0, r3, #31
 80055aa:	d50f      	bpl.n	80055cc <_printf_float+0x240>
 80055ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055b0:	4631      	mov	r1, r6
 80055b2:	4628      	mov	r0, r5
 80055b4:	47b8      	blx	r7
 80055b6:	3001      	adds	r0, #1
 80055b8:	f43f af45 	beq.w	8005446 <_printf_float+0xba>
 80055bc:	f04f 0800 	mov.w	r8, #0
 80055c0:	f104 091a 	add.w	r9, r4, #26
 80055c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055c6:	3b01      	subs	r3, #1
 80055c8:	4543      	cmp	r3, r8
 80055ca:	dc09      	bgt.n	80055e0 <_printf_float+0x254>
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	079b      	lsls	r3, r3, #30
 80055d0:	f100 8103 	bmi.w	80057da <_printf_float+0x44e>
 80055d4:	68e0      	ldr	r0, [r4, #12]
 80055d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055d8:	4298      	cmp	r0, r3
 80055da:	bfb8      	it	lt
 80055dc:	4618      	movlt	r0, r3
 80055de:	e734      	b.n	800544a <_printf_float+0xbe>
 80055e0:	2301      	movs	r3, #1
 80055e2:	464a      	mov	r2, r9
 80055e4:	4631      	mov	r1, r6
 80055e6:	4628      	mov	r0, r5
 80055e8:	47b8      	blx	r7
 80055ea:	3001      	adds	r0, #1
 80055ec:	f43f af2b 	beq.w	8005446 <_printf_float+0xba>
 80055f0:	f108 0801 	add.w	r8, r8, #1
 80055f4:	e7e6      	b.n	80055c4 <_printf_float+0x238>
 80055f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	dc2b      	bgt.n	8005654 <_printf_float+0x2c8>
 80055fc:	2301      	movs	r3, #1
 80055fe:	4a26      	ldr	r2, [pc, #152]	; (8005698 <_printf_float+0x30c>)
 8005600:	4631      	mov	r1, r6
 8005602:	4628      	mov	r0, r5
 8005604:	47b8      	blx	r7
 8005606:	3001      	adds	r0, #1
 8005608:	f43f af1d 	beq.w	8005446 <_printf_float+0xba>
 800560c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800560e:	b923      	cbnz	r3, 800561a <_printf_float+0x28e>
 8005610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005612:	b913      	cbnz	r3, 800561a <_printf_float+0x28e>
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	07d9      	lsls	r1, r3, #31
 8005618:	d5d8      	bpl.n	80055cc <_printf_float+0x240>
 800561a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800561e:	4631      	mov	r1, r6
 8005620:	4628      	mov	r0, r5
 8005622:	47b8      	blx	r7
 8005624:	3001      	adds	r0, #1
 8005626:	f43f af0e 	beq.w	8005446 <_printf_float+0xba>
 800562a:	f04f 0900 	mov.w	r9, #0
 800562e:	f104 0a1a 	add.w	sl, r4, #26
 8005632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005634:	425b      	negs	r3, r3
 8005636:	454b      	cmp	r3, r9
 8005638:	dc01      	bgt.n	800563e <_printf_float+0x2b2>
 800563a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800563c:	e794      	b.n	8005568 <_printf_float+0x1dc>
 800563e:	2301      	movs	r3, #1
 8005640:	4652      	mov	r2, sl
 8005642:	4631      	mov	r1, r6
 8005644:	4628      	mov	r0, r5
 8005646:	47b8      	blx	r7
 8005648:	3001      	adds	r0, #1
 800564a:	f43f aefc 	beq.w	8005446 <_printf_float+0xba>
 800564e:	f109 0901 	add.w	r9, r9, #1
 8005652:	e7ee      	b.n	8005632 <_printf_float+0x2a6>
 8005654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005658:	429a      	cmp	r2, r3
 800565a:	bfa8      	it	ge
 800565c:	461a      	movge	r2, r3
 800565e:	2a00      	cmp	r2, #0
 8005660:	4691      	mov	r9, r2
 8005662:	dd07      	ble.n	8005674 <_printf_float+0x2e8>
 8005664:	4613      	mov	r3, r2
 8005666:	4631      	mov	r1, r6
 8005668:	4642      	mov	r2, r8
 800566a:	4628      	mov	r0, r5
 800566c:	47b8      	blx	r7
 800566e:	3001      	adds	r0, #1
 8005670:	f43f aee9 	beq.w	8005446 <_printf_float+0xba>
 8005674:	f104 031a 	add.w	r3, r4, #26
 8005678:	f04f 0b00 	mov.w	fp, #0
 800567c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005680:	9306      	str	r3, [sp, #24]
 8005682:	e015      	b.n	80056b0 <_printf_float+0x324>
 8005684:	7fefffff 	.word	0x7fefffff
 8005688:	08019dbf 	.word	0x08019dbf
 800568c:	08019dbb 	.word	0x08019dbb
 8005690:	08019dc7 	.word	0x08019dc7
 8005694:	08019dc3 	.word	0x08019dc3
 8005698:	08019dcb 	.word	0x08019dcb
 800569c:	2301      	movs	r3, #1
 800569e:	9a06      	ldr	r2, [sp, #24]
 80056a0:	4631      	mov	r1, r6
 80056a2:	4628      	mov	r0, r5
 80056a4:	47b8      	blx	r7
 80056a6:	3001      	adds	r0, #1
 80056a8:	f43f aecd 	beq.w	8005446 <_printf_float+0xba>
 80056ac:	f10b 0b01 	add.w	fp, fp, #1
 80056b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80056b4:	ebaa 0309 	sub.w	r3, sl, r9
 80056b8:	455b      	cmp	r3, fp
 80056ba:	dcef      	bgt.n	800569c <_printf_float+0x310>
 80056bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056c0:	429a      	cmp	r2, r3
 80056c2:	44d0      	add	r8, sl
 80056c4:	db15      	blt.n	80056f2 <_printf_float+0x366>
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	07da      	lsls	r2, r3, #31
 80056ca:	d412      	bmi.n	80056f2 <_printf_float+0x366>
 80056cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056d0:	eba3 020a 	sub.w	r2, r3, sl
 80056d4:	eba3 0a01 	sub.w	sl, r3, r1
 80056d8:	4592      	cmp	sl, r2
 80056da:	bfa8      	it	ge
 80056dc:	4692      	movge	sl, r2
 80056de:	f1ba 0f00 	cmp.w	sl, #0
 80056e2:	dc0e      	bgt.n	8005702 <_printf_float+0x376>
 80056e4:	f04f 0800 	mov.w	r8, #0
 80056e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80056ec:	f104 091a 	add.w	r9, r4, #26
 80056f0:	e019      	b.n	8005726 <_printf_float+0x39a>
 80056f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056f6:	4631      	mov	r1, r6
 80056f8:	4628      	mov	r0, r5
 80056fa:	47b8      	blx	r7
 80056fc:	3001      	adds	r0, #1
 80056fe:	d1e5      	bne.n	80056cc <_printf_float+0x340>
 8005700:	e6a1      	b.n	8005446 <_printf_float+0xba>
 8005702:	4653      	mov	r3, sl
 8005704:	4642      	mov	r2, r8
 8005706:	4631      	mov	r1, r6
 8005708:	4628      	mov	r0, r5
 800570a:	47b8      	blx	r7
 800570c:	3001      	adds	r0, #1
 800570e:	d1e9      	bne.n	80056e4 <_printf_float+0x358>
 8005710:	e699      	b.n	8005446 <_printf_float+0xba>
 8005712:	2301      	movs	r3, #1
 8005714:	464a      	mov	r2, r9
 8005716:	4631      	mov	r1, r6
 8005718:	4628      	mov	r0, r5
 800571a:	47b8      	blx	r7
 800571c:	3001      	adds	r0, #1
 800571e:	f43f ae92 	beq.w	8005446 <_printf_float+0xba>
 8005722:	f108 0801 	add.w	r8, r8, #1
 8005726:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800572a:	1a9b      	subs	r3, r3, r2
 800572c:	eba3 030a 	sub.w	r3, r3, sl
 8005730:	4543      	cmp	r3, r8
 8005732:	dcee      	bgt.n	8005712 <_printf_float+0x386>
 8005734:	e74a      	b.n	80055cc <_printf_float+0x240>
 8005736:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005738:	2a01      	cmp	r2, #1
 800573a:	dc01      	bgt.n	8005740 <_printf_float+0x3b4>
 800573c:	07db      	lsls	r3, r3, #31
 800573e:	d53a      	bpl.n	80057b6 <_printf_float+0x42a>
 8005740:	2301      	movs	r3, #1
 8005742:	4642      	mov	r2, r8
 8005744:	4631      	mov	r1, r6
 8005746:	4628      	mov	r0, r5
 8005748:	47b8      	blx	r7
 800574a:	3001      	adds	r0, #1
 800574c:	f43f ae7b 	beq.w	8005446 <_printf_float+0xba>
 8005750:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005754:	4631      	mov	r1, r6
 8005756:	4628      	mov	r0, r5
 8005758:	47b8      	blx	r7
 800575a:	3001      	adds	r0, #1
 800575c:	f108 0801 	add.w	r8, r8, #1
 8005760:	f43f ae71 	beq.w	8005446 <_printf_float+0xba>
 8005764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005766:	2200      	movs	r2, #0
 8005768:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800576c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005770:	2300      	movs	r3, #0
 8005772:	f7fb f95d 	bl	8000a30 <__aeabi_dcmpeq>
 8005776:	b9c8      	cbnz	r0, 80057ac <_printf_float+0x420>
 8005778:	4653      	mov	r3, sl
 800577a:	4642      	mov	r2, r8
 800577c:	4631      	mov	r1, r6
 800577e:	4628      	mov	r0, r5
 8005780:	47b8      	blx	r7
 8005782:	3001      	adds	r0, #1
 8005784:	d10e      	bne.n	80057a4 <_printf_float+0x418>
 8005786:	e65e      	b.n	8005446 <_printf_float+0xba>
 8005788:	2301      	movs	r3, #1
 800578a:	4652      	mov	r2, sl
 800578c:	4631      	mov	r1, r6
 800578e:	4628      	mov	r0, r5
 8005790:	47b8      	blx	r7
 8005792:	3001      	adds	r0, #1
 8005794:	f43f ae57 	beq.w	8005446 <_printf_float+0xba>
 8005798:	f108 0801 	add.w	r8, r8, #1
 800579c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800579e:	3b01      	subs	r3, #1
 80057a0:	4543      	cmp	r3, r8
 80057a2:	dcf1      	bgt.n	8005788 <_printf_float+0x3fc>
 80057a4:	464b      	mov	r3, r9
 80057a6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057aa:	e6de      	b.n	800556a <_printf_float+0x1de>
 80057ac:	f04f 0800 	mov.w	r8, #0
 80057b0:	f104 0a1a 	add.w	sl, r4, #26
 80057b4:	e7f2      	b.n	800579c <_printf_float+0x410>
 80057b6:	2301      	movs	r3, #1
 80057b8:	e7df      	b.n	800577a <_printf_float+0x3ee>
 80057ba:	2301      	movs	r3, #1
 80057bc:	464a      	mov	r2, r9
 80057be:	4631      	mov	r1, r6
 80057c0:	4628      	mov	r0, r5
 80057c2:	47b8      	blx	r7
 80057c4:	3001      	adds	r0, #1
 80057c6:	f43f ae3e 	beq.w	8005446 <_printf_float+0xba>
 80057ca:	f108 0801 	add.w	r8, r8, #1
 80057ce:	68e3      	ldr	r3, [r4, #12]
 80057d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057d2:	1a9b      	subs	r3, r3, r2
 80057d4:	4543      	cmp	r3, r8
 80057d6:	dcf0      	bgt.n	80057ba <_printf_float+0x42e>
 80057d8:	e6fc      	b.n	80055d4 <_printf_float+0x248>
 80057da:	f04f 0800 	mov.w	r8, #0
 80057de:	f104 0919 	add.w	r9, r4, #25
 80057e2:	e7f4      	b.n	80057ce <_printf_float+0x442>
 80057e4:	2900      	cmp	r1, #0
 80057e6:	f43f ae8b 	beq.w	8005500 <_printf_float+0x174>
 80057ea:	2300      	movs	r3, #0
 80057ec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80057f0:	ab09      	add	r3, sp, #36	; 0x24
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	ec49 8b10 	vmov	d0, r8, r9
 80057f8:	6022      	str	r2, [r4, #0]
 80057fa:	f8cd a004 	str.w	sl, [sp, #4]
 80057fe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005802:	4628      	mov	r0, r5
 8005804:	f7ff fd2d 	bl	8005262 <__cvt>
 8005808:	4680      	mov	r8, r0
 800580a:	e648      	b.n	800549e <_printf_float+0x112>

0800580c <_printf_common>:
 800580c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005810:	4691      	mov	r9, r2
 8005812:	461f      	mov	r7, r3
 8005814:	688a      	ldr	r2, [r1, #8]
 8005816:	690b      	ldr	r3, [r1, #16]
 8005818:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800581c:	4293      	cmp	r3, r2
 800581e:	bfb8      	it	lt
 8005820:	4613      	movlt	r3, r2
 8005822:	f8c9 3000 	str.w	r3, [r9]
 8005826:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800582a:	4606      	mov	r6, r0
 800582c:	460c      	mov	r4, r1
 800582e:	b112      	cbz	r2, 8005836 <_printf_common+0x2a>
 8005830:	3301      	adds	r3, #1
 8005832:	f8c9 3000 	str.w	r3, [r9]
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	0699      	lsls	r1, r3, #26
 800583a:	bf42      	ittt	mi
 800583c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005840:	3302      	addmi	r3, #2
 8005842:	f8c9 3000 	strmi.w	r3, [r9]
 8005846:	6825      	ldr	r5, [r4, #0]
 8005848:	f015 0506 	ands.w	r5, r5, #6
 800584c:	d107      	bne.n	800585e <_printf_common+0x52>
 800584e:	f104 0a19 	add.w	sl, r4, #25
 8005852:	68e3      	ldr	r3, [r4, #12]
 8005854:	f8d9 2000 	ldr.w	r2, [r9]
 8005858:	1a9b      	subs	r3, r3, r2
 800585a:	42ab      	cmp	r3, r5
 800585c:	dc28      	bgt.n	80058b0 <_printf_common+0xa4>
 800585e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005862:	6822      	ldr	r2, [r4, #0]
 8005864:	3300      	adds	r3, #0
 8005866:	bf18      	it	ne
 8005868:	2301      	movne	r3, #1
 800586a:	0692      	lsls	r2, r2, #26
 800586c:	d42d      	bmi.n	80058ca <_printf_common+0xbe>
 800586e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005872:	4639      	mov	r1, r7
 8005874:	4630      	mov	r0, r6
 8005876:	47c0      	blx	r8
 8005878:	3001      	adds	r0, #1
 800587a:	d020      	beq.n	80058be <_printf_common+0xb2>
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	68e5      	ldr	r5, [r4, #12]
 8005880:	f8d9 2000 	ldr.w	r2, [r9]
 8005884:	f003 0306 	and.w	r3, r3, #6
 8005888:	2b04      	cmp	r3, #4
 800588a:	bf08      	it	eq
 800588c:	1aad      	subeq	r5, r5, r2
 800588e:	68a3      	ldr	r3, [r4, #8]
 8005890:	6922      	ldr	r2, [r4, #16]
 8005892:	bf0c      	ite	eq
 8005894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005898:	2500      	movne	r5, #0
 800589a:	4293      	cmp	r3, r2
 800589c:	bfc4      	itt	gt
 800589e:	1a9b      	subgt	r3, r3, r2
 80058a0:	18ed      	addgt	r5, r5, r3
 80058a2:	f04f 0900 	mov.w	r9, #0
 80058a6:	341a      	adds	r4, #26
 80058a8:	454d      	cmp	r5, r9
 80058aa:	d11a      	bne.n	80058e2 <_printf_common+0xd6>
 80058ac:	2000      	movs	r0, #0
 80058ae:	e008      	b.n	80058c2 <_printf_common+0xb6>
 80058b0:	2301      	movs	r3, #1
 80058b2:	4652      	mov	r2, sl
 80058b4:	4639      	mov	r1, r7
 80058b6:	4630      	mov	r0, r6
 80058b8:	47c0      	blx	r8
 80058ba:	3001      	adds	r0, #1
 80058bc:	d103      	bne.n	80058c6 <_printf_common+0xba>
 80058be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c6:	3501      	adds	r5, #1
 80058c8:	e7c3      	b.n	8005852 <_printf_common+0x46>
 80058ca:	18e1      	adds	r1, r4, r3
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	2030      	movs	r0, #48	; 0x30
 80058d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058d4:	4422      	add	r2, r4
 80058d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058de:	3302      	adds	r3, #2
 80058e0:	e7c5      	b.n	800586e <_printf_common+0x62>
 80058e2:	2301      	movs	r3, #1
 80058e4:	4622      	mov	r2, r4
 80058e6:	4639      	mov	r1, r7
 80058e8:	4630      	mov	r0, r6
 80058ea:	47c0      	blx	r8
 80058ec:	3001      	adds	r0, #1
 80058ee:	d0e6      	beq.n	80058be <_printf_common+0xb2>
 80058f0:	f109 0901 	add.w	r9, r9, #1
 80058f4:	e7d8      	b.n	80058a8 <_printf_common+0x9c>

080058f6 <quorem>:
 80058f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058fa:	6903      	ldr	r3, [r0, #16]
 80058fc:	690c      	ldr	r4, [r1, #16]
 80058fe:	42a3      	cmp	r3, r4
 8005900:	4680      	mov	r8, r0
 8005902:	f2c0 8082 	blt.w	8005a0a <quorem+0x114>
 8005906:	3c01      	subs	r4, #1
 8005908:	f101 0714 	add.w	r7, r1, #20
 800590c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005910:	f100 0614 	add.w	r6, r0, #20
 8005914:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005918:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800591c:	eb06 030c 	add.w	r3, r6, ip
 8005920:	3501      	adds	r5, #1
 8005922:	eb07 090c 	add.w	r9, r7, ip
 8005926:	9301      	str	r3, [sp, #4]
 8005928:	fbb0 f5f5 	udiv	r5, r0, r5
 800592c:	b395      	cbz	r5, 8005994 <quorem+0x9e>
 800592e:	f04f 0a00 	mov.w	sl, #0
 8005932:	4638      	mov	r0, r7
 8005934:	46b6      	mov	lr, r6
 8005936:	46d3      	mov	fp, sl
 8005938:	f850 2b04 	ldr.w	r2, [r0], #4
 800593c:	b293      	uxth	r3, r2
 800593e:	fb05 a303 	mla	r3, r5, r3, sl
 8005942:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005946:	b29b      	uxth	r3, r3
 8005948:	ebab 0303 	sub.w	r3, fp, r3
 800594c:	0c12      	lsrs	r2, r2, #16
 800594e:	f8de b000 	ldr.w	fp, [lr]
 8005952:	fb05 a202 	mla	r2, r5, r2, sl
 8005956:	fa13 f38b 	uxtah	r3, r3, fp
 800595a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800595e:	fa1f fb82 	uxth.w	fp, r2
 8005962:	f8de 2000 	ldr.w	r2, [lr]
 8005966:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800596a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800596e:	b29b      	uxth	r3, r3
 8005970:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005974:	4581      	cmp	r9, r0
 8005976:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800597a:	f84e 3b04 	str.w	r3, [lr], #4
 800597e:	d2db      	bcs.n	8005938 <quorem+0x42>
 8005980:	f856 300c 	ldr.w	r3, [r6, ip]
 8005984:	b933      	cbnz	r3, 8005994 <quorem+0x9e>
 8005986:	9b01      	ldr	r3, [sp, #4]
 8005988:	3b04      	subs	r3, #4
 800598a:	429e      	cmp	r6, r3
 800598c:	461a      	mov	r2, r3
 800598e:	d330      	bcc.n	80059f2 <quorem+0xfc>
 8005990:	f8c8 4010 	str.w	r4, [r8, #16]
 8005994:	4640      	mov	r0, r8
 8005996:	f001 f81f 	bl	80069d8 <__mcmp>
 800599a:	2800      	cmp	r0, #0
 800599c:	db25      	blt.n	80059ea <quorem+0xf4>
 800599e:	3501      	adds	r5, #1
 80059a0:	4630      	mov	r0, r6
 80059a2:	f04f 0c00 	mov.w	ip, #0
 80059a6:	f857 2b04 	ldr.w	r2, [r7], #4
 80059aa:	f8d0 e000 	ldr.w	lr, [r0]
 80059ae:	b293      	uxth	r3, r2
 80059b0:	ebac 0303 	sub.w	r3, ip, r3
 80059b4:	0c12      	lsrs	r2, r2, #16
 80059b6:	fa13 f38e 	uxtah	r3, r3, lr
 80059ba:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80059be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059c8:	45b9      	cmp	r9, r7
 80059ca:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80059ce:	f840 3b04 	str.w	r3, [r0], #4
 80059d2:	d2e8      	bcs.n	80059a6 <quorem+0xb0>
 80059d4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80059d8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80059dc:	b92a      	cbnz	r2, 80059ea <quorem+0xf4>
 80059de:	3b04      	subs	r3, #4
 80059e0:	429e      	cmp	r6, r3
 80059e2:	461a      	mov	r2, r3
 80059e4:	d30b      	bcc.n	80059fe <quorem+0x108>
 80059e6:	f8c8 4010 	str.w	r4, [r8, #16]
 80059ea:	4628      	mov	r0, r5
 80059ec:	b003      	add	sp, #12
 80059ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f2:	6812      	ldr	r2, [r2, #0]
 80059f4:	3b04      	subs	r3, #4
 80059f6:	2a00      	cmp	r2, #0
 80059f8:	d1ca      	bne.n	8005990 <quorem+0x9a>
 80059fa:	3c01      	subs	r4, #1
 80059fc:	e7c5      	b.n	800598a <quorem+0x94>
 80059fe:	6812      	ldr	r2, [r2, #0]
 8005a00:	3b04      	subs	r3, #4
 8005a02:	2a00      	cmp	r2, #0
 8005a04:	d1ef      	bne.n	80059e6 <quorem+0xf0>
 8005a06:	3c01      	subs	r4, #1
 8005a08:	e7ea      	b.n	80059e0 <quorem+0xea>
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	e7ee      	b.n	80059ec <quorem+0xf6>
	...

08005a10 <_dtoa_r>:
 8005a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a14:	ec57 6b10 	vmov	r6, r7, d0
 8005a18:	b097      	sub	sp, #92	; 0x5c
 8005a1a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a1c:	9106      	str	r1, [sp, #24]
 8005a1e:	4604      	mov	r4, r0
 8005a20:	920b      	str	r2, [sp, #44]	; 0x2c
 8005a22:	9312      	str	r3, [sp, #72]	; 0x48
 8005a24:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005a28:	e9cd 6700 	strd	r6, r7, [sp]
 8005a2c:	b93d      	cbnz	r5, 8005a3e <_dtoa_r+0x2e>
 8005a2e:	2010      	movs	r0, #16
 8005a30:	f000 fdb4 	bl	800659c <malloc>
 8005a34:	6260      	str	r0, [r4, #36]	; 0x24
 8005a36:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a3a:	6005      	str	r5, [r0, #0]
 8005a3c:	60c5      	str	r5, [r0, #12]
 8005a3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a40:	6819      	ldr	r1, [r3, #0]
 8005a42:	b151      	cbz	r1, 8005a5a <_dtoa_r+0x4a>
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	604a      	str	r2, [r1, #4]
 8005a48:	2301      	movs	r3, #1
 8005a4a:	4093      	lsls	r3, r2
 8005a4c:	608b      	str	r3, [r1, #8]
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f000 fde0 	bl	8006614 <_Bfree>
 8005a54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	1e3b      	subs	r3, r7, #0
 8005a5c:	bfbb      	ittet	lt
 8005a5e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a62:	9301      	strlt	r3, [sp, #4]
 8005a64:	2300      	movge	r3, #0
 8005a66:	2201      	movlt	r2, #1
 8005a68:	bfac      	ite	ge
 8005a6a:	f8c8 3000 	strge.w	r3, [r8]
 8005a6e:	f8c8 2000 	strlt.w	r2, [r8]
 8005a72:	4baf      	ldr	r3, [pc, #700]	; (8005d30 <_dtoa_r+0x320>)
 8005a74:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005a78:	ea33 0308 	bics.w	r3, r3, r8
 8005a7c:	d114      	bne.n	8005aa8 <_dtoa_r+0x98>
 8005a7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a80:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	9b00      	ldr	r3, [sp, #0]
 8005a88:	b923      	cbnz	r3, 8005a94 <_dtoa_r+0x84>
 8005a8a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	f000 8542 	beq.w	8006518 <_dtoa_r+0xb08>
 8005a94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a96:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005d44 <_dtoa_r+0x334>
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 8544 	beq.w	8006528 <_dtoa_r+0xb18>
 8005aa0:	f10b 0303 	add.w	r3, fp, #3
 8005aa4:	f000 bd3e 	b.w	8006524 <_dtoa_r+0xb14>
 8005aa8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005aac:	2200      	movs	r2, #0
 8005aae:	2300      	movs	r3, #0
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	4639      	mov	r1, r7
 8005ab4:	f7fa ffbc 	bl	8000a30 <__aeabi_dcmpeq>
 8005ab8:	4681      	mov	r9, r0
 8005aba:	b168      	cbz	r0, 8005ad8 <_dtoa_r+0xc8>
 8005abc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005abe:	2301      	movs	r3, #1
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 8524 	beq.w	8006512 <_dtoa_r+0xb02>
 8005aca:	4b9a      	ldr	r3, [pc, #616]	; (8005d34 <_dtoa_r+0x324>)
 8005acc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ace:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8005ad2:	6013      	str	r3, [r2, #0]
 8005ad4:	f000 bd28 	b.w	8006528 <_dtoa_r+0xb18>
 8005ad8:	aa14      	add	r2, sp, #80	; 0x50
 8005ada:	a915      	add	r1, sp, #84	; 0x54
 8005adc:	ec47 6b10 	vmov	d0, r6, r7
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	f000 fff0 	bl	8006ac6 <__d2b>
 8005ae6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005aea:	9004      	str	r0, [sp, #16]
 8005aec:	2d00      	cmp	r5, #0
 8005aee:	d07c      	beq.n	8005bea <_dtoa_r+0x1da>
 8005af0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005af4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005af8:	46b2      	mov	sl, r6
 8005afa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005afe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005b02:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005b06:	2200      	movs	r2, #0
 8005b08:	4b8b      	ldr	r3, [pc, #556]	; (8005d38 <_dtoa_r+0x328>)
 8005b0a:	4650      	mov	r0, sl
 8005b0c:	4659      	mov	r1, fp
 8005b0e:	f7fa fb6f 	bl	80001f0 <__aeabi_dsub>
 8005b12:	a381      	add	r3, pc, #516	; (adr r3, 8005d18 <_dtoa_r+0x308>)
 8005b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b18:	f7fa fd22 	bl	8000560 <__aeabi_dmul>
 8005b1c:	a380      	add	r3, pc, #512	; (adr r3, 8005d20 <_dtoa_r+0x310>)
 8005b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b22:	f7fa fb67 	bl	80001f4 <__adddf3>
 8005b26:	4606      	mov	r6, r0
 8005b28:	4628      	mov	r0, r5
 8005b2a:	460f      	mov	r7, r1
 8005b2c:	f7fa fcae 	bl	800048c <__aeabi_i2d>
 8005b30:	a37d      	add	r3, pc, #500	; (adr r3, 8005d28 <_dtoa_r+0x318>)
 8005b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b36:	f7fa fd13 	bl	8000560 <__aeabi_dmul>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	4630      	mov	r0, r6
 8005b40:	4639      	mov	r1, r7
 8005b42:	f7fa fb57 	bl	80001f4 <__adddf3>
 8005b46:	4606      	mov	r6, r0
 8005b48:	460f      	mov	r7, r1
 8005b4a:	f7fa ffb9 	bl	8000ac0 <__aeabi_d2iz>
 8005b4e:	2200      	movs	r2, #0
 8005b50:	4682      	mov	sl, r0
 8005b52:	2300      	movs	r3, #0
 8005b54:	4630      	mov	r0, r6
 8005b56:	4639      	mov	r1, r7
 8005b58:	f7fa ff74 	bl	8000a44 <__aeabi_dcmplt>
 8005b5c:	b148      	cbz	r0, 8005b72 <_dtoa_r+0x162>
 8005b5e:	4650      	mov	r0, sl
 8005b60:	f7fa fc94 	bl	800048c <__aeabi_i2d>
 8005b64:	4632      	mov	r2, r6
 8005b66:	463b      	mov	r3, r7
 8005b68:	f7fa ff62 	bl	8000a30 <__aeabi_dcmpeq>
 8005b6c:	b908      	cbnz	r0, 8005b72 <_dtoa_r+0x162>
 8005b6e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005b72:	f1ba 0f16 	cmp.w	sl, #22
 8005b76:	d859      	bhi.n	8005c2c <_dtoa_r+0x21c>
 8005b78:	4970      	ldr	r1, [pc, #448]	; (8005d3c <_dtoa_r+0x32c>)
 8005b7a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005b7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b86:	f7fa ff7b 	bl	8000a80 <__aeabi_dcmpgt>
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	d050      	beq.n	8005c30 <_dtoa_r+0x220>
 8005b8e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005b92:	2300      	movs	r3, #0
 8005b94:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b98:	1b5d      	subs	r5, r3, r5
 8005b9a:	f1b5 0801 	subs.w	r8, r5, #1
 8005b9e:	bf49      	itett	mi
 8005ba0:	f1c5 0301 	rsbmi	r3, r5, #1
 8005ba4:	2300      	movpl	r3, #0
 8005ba6:	9305      	strmi	r3, [sp, #20]
 8005ba8:	f04f 0800 	movmi.w	r8, #0
 8005bac:	bf58      	it	pl
 8005bae:	9305      	strpl	r3, [sp, #20]
 8005bb0:	f1ba 0f00 	cmp.w	sl, #0
 8005bb4:	db3e      	blt.n	8005c34 <_dtoa_r+0x224>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	44d0      	add	r8, sl
 8005bba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005bbe:	9307      	str	r3, [sp, #28]
 8005bc0:	9b06      	ldr	r3, [sp, #24]
 8005bc2:	2b09      	cmp	r3, #9
 8005bc4:	f200 8090 	bhi.w	8005ce8 <_dtoa_r+0x2d8>
 8005bc8:	2b05      	cmp	r3, #5
 8005bca:	bfc4      	itt	gt
 8005bcc:	3b04      	subgt	r3, #4
 8005bce:	9306      	strgt	r3, [sp, #24]
 8005bd0:	9b06      	ldr	r3, [sp, #24]
 8005bd2:	f1a3 0302 	sub.w	r3, r3, #2
 8005bd6:	bfcc      	ite	gt
 8005bd8:	2500      	movgt	r5, #0
 8005bda:	2501      	movle	r5, #1
 8005bdc:	2b03      	cmp	r3, #3
 8005bde:	f200 808f 	bhi.w	8005d00 <_dtoa_r+0x2f0>
 8005be2:	e8df f003 	tbb	[pc, r3]
 8005be6:	7f7d      	.short	0x7f7d
 8005be8:	7131      	.short	0x7131
 8005bea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005bee:	441d      	add	r5, r3
 8005bf0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005bf4:	2820      	cmp	r0, #32
 8005bf6:	dd13      	ble.n	8005c20 <_dtoa_r+0x210>
 8005bf8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005bfc:	9b00      	ldr	r3, [sp, #0]
 8005bfe:	fa08 f800 	lsl.w	r8, r8, r0
 8005c02:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005c06:	fa23 f000 	lsr.w	r0, r3, r0
 8005c0a:	ea48 0000 	orr.w	r0, r8, r0
 8005c0e:	f7fa fc2d 	bl	800046c <__aeabi_ui2d>
 8005c12:	2301      	movs	r3, #1
 8005c14:	4682      	mov	sl, r0
 8005c16:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005c1a:	3d01      	subs	r5, #1
 8005c1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005c1e:	e772      	b.n	8005b06 <_dtoa_r+0xf6>
 8005c20:	9b00      	ldr	r3, [sp, #0]
 8005c22:	f1c0 0020 	rsb	r0, r0, #32
 8005c26:	fa03 f000 	lsl.w	r0, r3, r0
 8005c2a:	e7f0      	b.n	8005c0e <_dtoa_r+0x1fe>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e7b1      	b.n	8005b94 <_dtoa_r+0x184>
 8005c30:	900f      	str	r0, [sp, #60]	; 0x3c
 8005c32:	e7b0      	b.n	8005b96 <_dtoa_r+0x186>
 8005c34:	9b05      	ldr	r3, [sp, #20]
 8005c36:	eba3 030a 	sub.w	r3, r3, sl
 8005c3a:	9305      	str	r3, [sp, #20]
 8005c3c:	f1ca 0300 	rsb	r3, sl, #0
 8005c40:	9307      	str	r3, [sp, #28]
 8005c42:	2300      	movs	r3, #0
 8005c44:	930e      	str	r3, [sp, #56]	; 0x38
 8005c46:	e7bb      	b.n	8005bc0 <_dtoa_r+0x1b0>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	930a      	str	r3, [sp, #40]	; 0x28
 8005c4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	dd59      	ble.n	8005d06 <_dtoa_r+0x2f6>
 8005c52:	9302      	str	r3, [sp, #8]
 8005c54:	4699      	mov	r9, r3
 8005c56:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c58:	2200      	movs	r2, #0
 8005c5a:	6072      	str	r2, [r6, #4]
 8005c5c:	2204      	movs	r2, #4
 8005c5e:	f102 0014 	add.w	r0, r2, #20
 8005c62:	4298      	cmp	r0, r3
 8005c64:	6871      	ldr	r1, [r6, #4]
 8005c66:	d953      	bls.n	8005d10 <_dtoa_r+0x300>
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f000 fc9f 	bl	80065ac <_Balloc>
 8005c6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c70:	6030      	str	r0, [r6, #0]
 8005c72:	f1b9 0f0e 	cmp.w	r9, #14
 8005c76:	f8d3 b000 	ldr.w	fp, [r3]
 8005c7a:	f200 80e6 	bhi.w	8005e4a <_dtoa_r+0x43a>
 8005c7e:	2d00      	cmp	r5, #0
 8005c80:	f000 80e3 	beq.w	8005e4a <_dtoa_r+0x43a>
 8005c84:	ed9d 7b00 	vldr	d7, [sp]
 8005c88:	f1ba 0f00 	cmp.w	sl, #0
 8005c8c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005c90:	dd74      	ble.n	8005d7c <_dtoa_r+0x36c>
 8005c92:	4a2a      	ldr	r2, [pc, #168]	; (8005d3c <_dtoa_r+0x32c>)
 8005c94:	f00a 030f 	and.w	r3, sl, #15
 8005c98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c9c:	ed93 7b00 	vldr	d7, [r3]
 8005ca0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005ca4:	06f0      	lsls	r0, r6, #27
 8005ca6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005caa:	d565      	bpl.n	8005d78 <_dtoa_r+0x368>
 8005cac:	4b24      	ldr	r3, [pc, #144]	; (8005d40 <_dtoa_r+0x330>)
 8005cae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005cb2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005cb6:	f7fa fd7d 	bl	80007b4 <__aeabi_ddiv>
 8005cba:	e9cd 0100 	strd	r0, r1, [sp]
 8005cbe:	f006 060f 	and.w	r6, r6, #15
 8005cc2:	2503      	movs	r5, #3
 8005cc4:	4f1e      	ldr	r7, [pc, #120]	; (8005d40 <_dtoa_r+0x330>)
 8005cc6:	e04c      	b.n	8005d62 <_dtoa_r+0x352>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	930a      	str	r3, [sp, #40]	; 0x28
 8005ccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cce:	4453      	add	r3, sl
 8005cd0:	f103 0901 	add.w	r9, r3, #1
 8005cd4:	9302      	str	r3, [sp, #8]
 8005cd6:	464b      	mov	r3, r9
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	bfb8      	it	lt
 8005cdc:	2301      	movlt	r3, #1
 8005cde:	e7ba      	b.n	8005c56 <_dtoa_r+0x246>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	e7b2      	b.n	8005c4a <_dtoa_r+0x23a>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	e7f0      	b.n	8005cca <_dtoa_r+0x2ba>
 8005ce8:	2501      	movs	r5, #1
 8005cea:	2300      	movs	r3, #0
 8005cec:	9306      	str	r3, [sp, #24]
 8005cee:	950a      	str	r5, [sp, #40]	; 0x28
 8005cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cf4:	9302      	str	r3, [sp, #8]
 8005cf6:	4699      	mov	r9, r3
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	2312      	movs	r3, #18
 8005cfc:	920b      	str	r2, [sp, #44]	; 0x2c
 8005cfe:	e7aa      	b.n	8005c56 <_dtoa_r+0x246>
 8005d00:	2301      	movs	r3, #1
 8005d02:	930a      	str	r3, [sp, #40]	; 0x28
 8005d04:	e7f4      	b.n	8005cf0 <_dtoa_r+0x2e0>
 8005d06:	2301      	movs	r3, #1
 8005d08:	9302      	str	r3, [sp, #8]
 8005d0a:	4699      	mov	r9, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	e7f5      	b.n	8005cfc <_dtoa_r+0x2ec>
 8005d10:	3101      	adds	r1, #1
 8005d12:	6071      	str	r1, [r6, #4]
 8005d14:	0052      	lsls	r2, r2, #1
 8005d16:	e7a2      	b.n	8005c5e <_dtoa_r+0x24e>
 8005d18:	636f4361 	.word	0x636f4361
 8005d1c:	3fd287a7 	.word	0x3fd287a7
 8005d20:	8b60c8b3 	.word	0x8b60c8b3
 8005d24:	3fc68a28 	.word	0x3fc68a28
 8005d28:	509f79fb 	.word	0x509f79fb
 8005d2c:	3fd34413 	.word	0x3fd34413
 8005d30:	7ff00000 	.word	0x7ff00000
 8005d34:	08019dcc 	.word	0x08019dcc
 8005d38:	3ff80000 	.word	0x3ff80000
 8005d3c:	08019e08 	.word	0x08019e08
 8005d40:	08019de0 	.word	0x08019de0
 8005d44:	08019dd6 	.word	0x08019dd6
 8005d48:	07f1      	lsls	r1, r6, #31
 8005d4a:	d508      	bpl.n	8005d5e <_dtoa_r+0x34e>
 8005d4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005d50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d54:	f7fa fc04 	bl	8000560 <__aeabi_dmul>
 8005d58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005d5c:	3501      	adds	r5, #1
 8005d5e:	1076      	asrs	r6, r6, #1
 8005d60:	3708      	adds	r7, #8
 8005d62:	2e00      	cmp	r6, #0
 8005d64:	d1f0      	bne.n	8005d48 <_dtoa_r+0x338>
 8005d66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d6e:	f7fa fd21 	bl	80007b4 <__aeabi_ddiv>
 8005d72:	e9cd 0100 	strd	r0, r1, [sp]
 8005d76:	e01a      	b.n	8005dae <_dtoa_r+0x39e>
 8005d78:	2502      	movs	r5, #2
 8005d7a:	e7a3      	b.n	8005cc4 <_dtoa_r+0x2b4>
 8005d7c:	f000 80a0 	beq.w	8005ec0 <_dtoa_r+0x4b0>
 8005d80:	f1ca 0600 	rsb	r6, sl, #0
 8005d84:	4b9f      	ldr	r3, [pc, #636]	; (8006004 <_dtoa_r+0x5f4>)
 8005d86:	4fa0      	ldr	r7, [pc, #640]	; (8006008 <_dtoa_r+0x5f8>)
 8005d88:	f006 020f 	and.w	r2, r6, #15
 8005d8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d98:	f7fa fbe2 	bl	8000560 <__aeabi_dmul>
 8005d9c:	e9cd 0100 	strd	r0, r1, [sp]
 8005da0:	1136      	asrs	r6, r6, #4
 8005da2:	2300      	movs	r3, #0
 8005da4:	2502      	movs	r5, #2
 8005da6:	2e00      	cmp	r6, #0
 8005da8:	d17f      	bne.n	8005eaa <_dtoa_r+0x49a>
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1e1      	bne.n	8005d72 <_dtoa_r+0x362>
 8005dae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 8087 	beq.w	8005ec4 <_dtoa_r+0x4b4>
 8005db6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	4b93      	ldr	r3, [pc, #588]	; (800600c <_dtoa_r+0x5fc>)
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	4639      	mov	r1, r7
 8005dc2:	f7fa fe3f 	bl	8000a44 <__aeabi_dcmplt>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	d07c      	beq.n	8005ec4 <_dtoa_r+0x4b4>
 8005dca:	f1b9 0f00 	cmp.w	r9, #0
 8005dce:	d079      	beq.n	8005ec4 <_dtoa_r+0x4b4>
 8005dd0:	9b02      	ldr	r3, [sp, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	dd35      	ble.n	8005e42 <_dtoa_r+0x432>
 8005dd6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005dda:	9308      	str	r3, [sp, #32]
 8005ddc:	4639      	mov	r1, r7
 8005dde:	2200      	movs	r2, #0
 8005de0:	4b8b      	ldr	r3, [pc, #556]	; (8006010 <_dtoa_r+0x600>)
 8005de2:	4630      	mov	r0, r6
 8005de4:	f7fa fbbc 	bl	8000560 <__aeabi_dmul>
 8005de8:	e9cd 0100 	strd	r0, r1, [sp]
 8005dec:	9f02      	ldr	r7, [sp, #8]
 8005dee:	3501      	adds	r5, #1
 8005df0:	4628      	mov	r0, r5
 8005df2:	f7fa fb4b 	bl	800048c <__aeabi_i2d>
 8005df6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dfa:	f7fa fbb1 	bl	8000560 <__aeabi_dmul>
 8005dfe:	2200      	movs	r2, #0
 8005e00:	4b84      	ldr	r3, [pc, #528]	; (8006014 <_dtoa_r+0x604>)
 8005e02:	f7fa f9f7 	bl	80001f4 <__adddf3>
 8005e06:	4605      	mov	r5, r0
 8005e08:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005e0c:	2f00      	cmp	r7, #0
 8005e0e:	d15d      	bne.n	8005ecc <_dtoa_r+0x4bc>
 8005e10:	2200      	movs	r2, #0
 8005e12:	4b81      	ldr	r3, [pc, #516]	; (8006018 <_dtoa_r+0x608>)
 8005e14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e18:	f7fa f9ea 	bl	80001f0 <__aeabi_dsub>
 8005e1c:	462a      	mov	r2, r5
 8005e1e:	4633      	mov	r3, r6
 8005e20:	e9cd 0100 	strd	r0, r1, [sp]
 8005e24:	f7fa fe2c 	bl	8000a80 <__aeabi_dcmpgt>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	f040 8288 	bne.w	800633e <_dtoa_r+0x92e>
 8005e2e:	462a      	mov	r2, r5
 8005e30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005e34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e38:	f7fa fe04 	bl	8000a44 <__aeabi_dcmplt>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	f040 827c 	bne.w	800633a <_dtoa_r+0x92a>
 8005e42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e46:	e9cd 2300 	strd	r2, r3, [sp]
 8005e4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f2c0 8150 	blt.w	80060f2 <_dtoa_r+0x6e2>
 8005e52:	f1ba 0f0e 	cmp.w	sl, #14
 8005e56:	f300 814c 	bgt.w	80060f2 <_dtoa_r+0x6e2>
 8005e5a:	4b6a      	ldr	r3, [pc, #424]	; (8006004 <_dtoa_r+0x5f4>)
 8005e5c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e60:	ed93 7b00 	vldr	d7, [r3]
 8005e64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005e6c:	f280 80d8 	bge.w	8006020 <_dtoa_r+0x610>
 8005e70:	f1b9 0f00 	cmp.w	r9, #0
 8005e74:	f300 80d4 	bgt.w	8006020 <_dtoa_r+0x610>
 8005e78:	f040 825e 	bne.w	8006338 <_dtoa_r+0x928>
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	4b66      	ldr	r3, [pc, #408]	; (8006018 <_dtoa_r+0x608>)
 8005e80:	ec51 0b17 	vmov	r0, r1, d7
 8005e84:	f7fa fb6c 	bl	8000560 <__aeabi_dmul>
 8005e88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e8c:	f7fa fdee 	bl	8000a6c <__aeabi_dcmpge>
 8005e90:	464f      	mov	r7, r9
 8005e92:	464e      	mov	r6, r9
 8005e94:	2800      	cmp	r0, #0
 8005e96:	f040 8234 	bne.w	8006302 <_dtoa_r+0x8f2>
 8005e9a:	2331      	movs	r3, #49	; 0x31
 8005e9c:	f10b 0501 	add.w	r5, fp, #1
 8005ea0:	f88b 3000 	strb.w	r3, [fp]
 8005ea4:	f10a 0a01 	add.w	sl, sl, #1
 8005ea8:	e22f      	b.n	800630a <_dtoa_r+0x8fa>
 8005eaa:	07f2      	lsls	r2, r6, #31
 8005eac:	d505      	bpl.n	8005eba <_dtoa_r+0x4aa>
 8005eae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eb2:	f7fa fb55 	bl	8000560 <__aeabi_dmul>
 8005eb6:	3501      	adds	r5, #1
 8005eb8:	2301      	movs	r3, #1
 8005eba:	1076      	asrs	r6, r6, #1
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	e772      	b.n	8005da6 <_dtoa_r+0x396>
 8005ec0:	2502      	movs	r5, #2
 8005ec2:	e774      	b.n	8005dae <_dtoa_r+0x39e>
 8005ec4:	f8cd a020 	str.w	sl, [sp, #32]
 8005ec8:	464f      	mov	r7, r9
 8005eca:	e791      	b.n	8005df0 <_dtoa_r+0x3e0>
 8005ecc:	4b4d      	ldr	r3, [pc, #308]	; (8006004 <_dtoa_r+0x5f4>)
 8005ece:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ed2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d047      	beq.n	8005f6c <_dtoa_r+0x55c>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	494e      	ldr	r1, [pc, #312]	; (800601c <_dtoa_r+0x60c>)
 8005ee4:	f7fa fc66 	bl	80007b4 <__aeabi_ddiv>
 8005ee8:	462a      	mov	r2, r5
 8005eea:	4633      	mov	r3, r6
 8005eec:	f7fa f980 	bl	80001f0 <__aeabi_dsub>
 8005ef0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005ef4:	465d      	mov	r5, fp
 8005ef6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005efa:	f7fa fde1 	bl	8000ac0 <__aeabi_d2iz>
 8005efe:	4606      	mov	r6, r0
 8005f00:	f7fa fac4 	bl	800048c <__aeabi_i2d>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f0c:	f7fa f970 	bl	80001f0 <__aeabi_dsub>
 8005f10:	3630      	adds	r6, #48	; 0x30
 8005f12:	f805 6b01 	strb.w	r6, [r5], #1
 8005f16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005f1a:	e9cd 0100 	strd	r0, r1, [sp]
 8005f1e:	f7fa fd91 	bl	8000a44 <__aeabi_dcmplt>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	d163      	bne.n	8005fee <_dtoa_r+0x5de>
 8005f26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	4937      	ldr	r1, [pc, #220]	; (800600c <_dtoa_r+0x5fc>)
 8005f2e:	f7fa f95f 	bl	80001f0 <__aeabi_dsub>
 8005f32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005f36:	f7fa fd85 	bl	8000a44 <__aeabi_dcmplt>
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	f040 80b7 	bne.w	80060ae <_dtoa_r+0x69e>
 8005f40:	eba5 030b 	sub.w	r3, r5, fp
 8005f44:	429f      	cmp	r7, r3
 8005f46:	f77f af7c 	ble.w	8005e42 <_dtoa_r+0x432>
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	4b30      	ldr	r3, [pc, #192]	; (8006010 <_dtoa_r+0x600>)
 8005f4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f52:	f7fa fb05 	bl	8000560 <__aeabi_dmul>
 8005f56:	2200      	movs	r2, #0
 8005f58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005f5c:	4b2c      	ldr	r3, [pc, #176]	; (8006010 <_dtoa_r+0x600>)
 8005f5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f62:	f7fa fafd 	bl	8000560 <__aeabi_dmul>
 8005f66:	e9cd 0100 	strd	r0, r1, [sp]
 8005f6a:	e7c4      	b.n	8005ef6 <_dtoa_r+0x4e6>
 8005f6c:	462a      	mov	r2, r5
 8005f6e:	4633      	mov	r3, r6
 8005f70:	f7fa faf6 	bl	8000560 <__aeabi_dmul>
 8005f74:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005f78:	eb0b 0507 	add.w	r5, fp, r7
 8005f7c:	465e      	mov	r6, fp
 8005f7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f82:	f7fa fd9d 	bl	8000ac0 <__aeabi_d2iz>
 8005f86:	4607      	mov	r7, r0
 8005f88:	f7fa fa80 	bl	800048c <__aeabi_i2d>
 8005f8c:	3730      	adds	r7, #48	; 0x30
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f96:	f7fa f92b 	bl	80001f0 <__aeabi_dsub>
 8005f9a:	f806 7b01 	strb.w	r7, [r6], #1
 8005f9e:	42ae      	cmp	r6, r5
 8005fa0:	e9cd 0100 	strd	r0, r1, [sp]
 8005fa4:	f04f 0200 	mov.w	r2, #0
 8005fa8:	d126      	bne.n	8005ff8 <_dtoa_r+0x5e8>
 8005faa:	4b1c      	ldr	r3, [pc, #112]	; (800601c <_dtoa_r+0x60c>)
 8005fac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005fb0:	f7fa f920 	bl	80001f4 <__adddf3>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fbc:	f7fa fd60 	bl	8000a80 <__aeabi_dcmpgt>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d174      	bne.n	80060ae <_dtoa_r+0x69e>
 8005fc4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005fc8:	2000      	movs	r0, #0
 8005fca:	4914      	ldr	r1, [pc, #80]	; (800601c <_dtoa_r+0x60c>)
 8005fcc:	f7fa f910 	bl	80001f0 <__aeabi_dsub>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fd8:	f7fa fd34 	bl	8000a44 <__aeabi_dcmplt>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	f43f af30 	beq.w	8005e42 <_dtoa_r+0x432>
 8005fe2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005fe6:	2b30      	cmp	r3, #48	; 0x30
 8005fe8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005fec:	d002      	beq.n	8005ff4 <_dtoa_r+0x5e4>
 8005fee:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005ff2:	e04a      	b.n	800608a <_dtoa_r+0x67a>
 8005ff4:	4615      	mov	r5, r2
 8005ff6:	e7f4      	b.n	8005fe2 <_dtoa_r+0x5d2>
 8005ff8:	4b05      	ldr	r3, [pc, #20]	; (8006010 <_dtoa_r+0x600>)
 8005ffa:	f7fa fab1 	bl	8000560 <__aeabi_dmul>
 8005ffe:	e9cd 0100 	strd	r0, r1, [sp]
 8006002:	e7bc      	b.n	8005f7e <_dtoa_r+0x56e>
 8006004:	08019e08 	.word	0x08019e08
 8006008:	08019de0 	.word	0x08019de0
 800600c:	3ff00000 	.word	0x3ff00000
 8006010:	40240000 	.word	0x40240000
 8006014:	401c0000 	.word	0x401c0000
 8006018:	40140000 	.word	0x40140000
 800601c:	3fe00000 	.word	0x3fe00000
 8006020:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006024:	465d      	mov	r5, fp
 8006026:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800602a:	4630      	mov	r0, r6
 800602c:	4639      	mov	r1, r7
 800602e:	f7fa fbc1 	bl	80007b4 <__aeabi_ddiv>
 8006032:	f7fa fd45 	bl	8000ac0 <__aeabi_d2iz>
 8006036:	4680      	mov	r8, r0
 8006038:	f7fa fa28 	bl	800048c <__aeabi_i2d>
 800603c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006040:	f7fa fa8e 	bl	8000560 <__aeabi_dmul>
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4630      	mov	r0, r6
 800604a:	4639      	mov	r1, r7
 800604c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006050:	f7fa f8ce 	bl	80001f0 <__aeabi_dsub>
 8006054:	f805 6b01 	strb.w	r6, [r5], #1
 8006058:	eba5 060b 	sub.w	r6, r5, fp
 800605c:	45b1      	cmp	r9, r6
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	d139      	bne.n	80060d8 <_dtoa_r+0x6c8>
 8006064:	f7fa f8c6 	bl	80001f4 <__adddf3>
 8006068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800606c:	4606      	mov	r6, r0
 800606e:	460f      	mov	r7, r1
 8006070:	f7fa fd06 	bl	8000a80 <__aeabi_dcmpgt>
 8006074:	b9c8      	cbnz	r0, 80060aa <_dtoa_r+0x69a>
 8006076:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800607a:	4630      	mov	r0, r6
 800607c:	4639      	mov	r1, r7
 800607e:	f7fa fcd7 	bl	8000a30 <__aeabi_dcmpeq>
 8006082:	b110      	cbz	r0, 800608a <_dtoa_r+0x67a>
 8006084:	f018 0f01 	tst.w	r8, #1
 8006088:	d10f      	bne.n	80060aa <_dtoa_r+0x69a>
 800608a:	9904      	ldr	r1, [sp, #16]
 800608c:	4620      	mov	r0, r4
 800608e:	f000 fac1 	bl	8006614 <_Bfree>
 8006092:	2300      	movs	r3, #0
 8006094:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006096:	702b      	strb	r3, [r5, #0]
 8006098:	f10a 0301 	add.w	r3, sl, #1
 800609c:	6013      	str	r3, [r2, #0]
 800609e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 8241 	beq.w	8006528 <_dtoa_r+0xb18>
 80060a6:	601d      	str	r5, [r3, #0]
 80060a8:	e23e      	b.n	8006528 <_dtoa_r+0xb18>
 80060aa:	f8cd a020 	str.w	sl, [sp, #32]
 80060ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80060b2:	2a39      	cmp	r2, #57	; 0x39
 80060b4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80060b8:	d108      	bne.n	80060cc <_dtoa_r+0x6bc>
 80060ba:	459b      	cmp	fp, r3
 80060bc:	d10a      	bne.n	80060d4 <_dtoa_r+0x6c4>
 80060be:	9b08      	ldr	r3, [sp, #32]
 80060c0:	3301      	adds	r3, #1
 80060c2:	9308      	str	r3, [sp, #32]
 80060c4:	2330      	movs	r3, #48	; 0x30
 80060c6:	f88b 3000 	strb.w	r3, [fp]
 80060ca:	465b      	mov	r3, fp
 80060cc:	781a      	ldrb	r2, [r3, #0]
 80060ce:	3201      	adds	r2, #1
 80060d0:	701a      	strb	r2, [r3, #0]
 80060d2:	e78c      	b.n	8005fee <_dtoa_r+0x5de>
 80060d4:	461d      	mov	r5, r3
 80060d6:	e7ea      	b.n	80060ae <_dtoa_r+0x69e>
 80060d8:	2200      	movs	r2, #0
 80060da:	4b9b      	ldr	r3, [pc, #620]	; (8006348 <_dtoa_r+0x938>)
 80060dc:	f7fa fa40 	bl	8000560 <__aeabi_dmul>
 80060e0:	2200      	movs	r2, #0
 80060e2:	2300      	movs	r3, #0
 80060e4:	4606      	mov	r6, r0
 80060e6:	460f      	mov	r7, r1
 80060e8:	f7fa fca2 	bl	8000a30 <__aeabi_dcmpeq>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	d09a      	beq.n	8006026 <_dtoa_r+0x616>
 80060f0:	e7cb      	b.n	800608a <_dtoa_r+0x67a>
 80060f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060f4:	2a00      	cmp	r2, #0
 80060f6:	f000 808b 	beq.w	8006210 <_dtoa_r+0x800>
 80060fa:	9a06      	ldr	r2, [sp, #24]
 80060fc:	2a01      	cmp	r2, #1
 80060fe:	dc6e      	bgt.n	80061de <_dtoa_r+0x7ce>
 8006100:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006102:	2a00      	cmp	r2, #0
 8006104:	d067      	beq.n	80061d6 <_dtoa_r+0x7c6>
 8006106:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800610a:	9f07      	ldr	r7, [sp, #28]
 800610c:	9d05      	ldr	r5, [sp, #20]
 800610e:	9a05      	ldr	r2, [sp, #20]
 8006110:	2101      	movs	r1, #1
 8006112:	441a      	add	r2, r3
 8006114:	4620      	mov	r0, r4
 8006116:	9205      	str	r2, [sp, #20]
 8006118:	4498      	add	r8, r3
 800611a:	f000 fb1b 	bl	8006754 <__i2b>
 800611e:	4606      	mov	r6, r0
 8006120:	2d00      	cmp	r5, #0
 8006122:	dd0c      	ble.n	800613e <_dtoa_r+0x72e>
 8006124:	f1b8 0f00 	cmp.w	r8, #0
 8006128:	dd09      	ble.n	800613e <_dtoa_r+0x72e>
 800612a:	4545      	cmp	r5, r8
 800612c:	9a05      	ldr	r2, [sp, #20]
 800612e:	462b      	mov	r3, r5
 8006130:	bfa8      	it	ge
 8006132:	4643      	movge	r3, r8
 8006134:	1ad2      	subs	r2, r2, r3
 8006136:	9205      	str	r2, [sp, #20]
 8006138:	1aed      	subs	r5, r5, r3
 800613a:	eba8 0803 	sub.w	r8, r8, r3
 800613e:	9b07      	ldr	r3, [sp, #28]
 8006140:	b1eb      	cbz	r3, 800617e <_dtoa_r+0x76e>
 8006142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006144:	2b00      	cmp	r3, #0
 8006146:	d067      	beq.n	8006218 <_dtoa_r+0x808>
 8006148:	b18f      	cbz	r7, 800616e <_dtoa_r+0x75e>
 800614a:	4631      	mov	r1, r6
 800614c:	463a      	mov	r2, r7
 800614e:	4620      	mov	r0, r4
 8006150:	f000 fba0 	bl	8006894 <__pow5mult>
 8006154:	9a04      	ldr	r2, [sp, #16]
 8006156:	4601      	mov	r1, r0
 8006158:	4606      	mov	r6, r0
 800615a:	4620      	mov	r0, r4
 800615c:	f000 fb03 	bl	8006766 <__multiply>
 8006160:	9904      	ldr	r1, [sp, #16]
 8006162:	9008      	str	r0, [sp, #32]
 8006164:	4620      	mov	r0, r4
 8006166:	f000 fa55 	bl	8006614 <_Bfree>
 800616a:	9b08      	ldr	r3, [sp, #32]
 800616c:	9304      	str	r3, [sp, #16]
 800616e:	9b07      	ldr	r3, [sp, #28]
 8006170:	1bda      	subs	r2, r3, r7
 8006172:	d004      	beq.n	800617e <_dtoa_r+0x76e>
 8006174:	9904      	ldr	r1, [sp, #16]
 8006176:	4620      	mov	r0, r4
 8006178:	f000 fb8c 	bl	8006894 <__pow5mult>
 800617c:	9004      	str	r0, [sp, #16]
 800617e:	2101      	movs	r1, #1
 8006180:	4620      	mov	r0, r4
 8006182:	f000 fae7 	bl	8006754 <__i2b>
 8006186:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006188:	4607      	mov	r7, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 81d0 	beq.w	8006530 <_dtoa_r+0xb20>
 8006190:	461a      	mov	r2, r3
 8006192:	4601      	mov	r1, r0
 8006194:	4620      	mov	r0, r4
 8006196:	f000 fb7d 	bl	8006894 <__pow5mult>
 800619a:	9b06      	ldr	r3, [sp, #24]
 800619c:	2b01      	cmp	r3, #1
 800619e:	4607      	mov	r7, r0
 80061a0:	dc40      	bgt.n	8006224 <_dtoa_r+0x814>
 80061a2:	9b00      	ldr	r3, [sp, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d139      	bne.n	800621c <_dtoa_r+0x80c>
 80061a8:	9b01      	ldr	r3, [sp, #4]
 80061aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d136      	bne.n	8006220 <_dtoa_r+0x810>
 80061b2:	9b01      	ldr	r3, [sp, #4]
 80061b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061b8:	0d1b      	lsrs	r3, r3, #20
 80061ba:	051b      	lsls	r3, r3, #20
 80061bc:	b12b      	cbz	r3, 80061ca <_dtoa_r+0x7ba>
 80061be:	9b05      	ldr	r3, [sp, #20]
 80061c0:	3301      	adds	r3, #1
 80061c2:	9305      	str	r3, [sp, #20]
 80061c4:	f108 0801 	add.w	r8, r8, #1
 80061c8:	2301      	movs	r3, #1
 80061ca:	9307      	str	r3, [sp, #28]
 80061cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d12a      	bne.n	8006228 <_dtoa_r+0x818>
 80061d2:	2001      	movs	r0, #1
 80061d4:	e030      	b.n	8006238 <_dtoa_r+0x828>
 80061d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061d8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80061dc:	e795      	b.n	800610a <_dtoa_r+0x6fa>
 80061de:	9b07      	ldr	r3, [sp, #28]
 80061e0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80061e4:	42bb      	cmp	r3, r7
 80061e6:	bfbf      	itttt	lt
 80061e8:	9b07      	ldrlt	r3, [sp, #28]
 80061ea:	9707      	strlt	r7, [sp, #28]
 80061ec:	1afa      	sublt	r2, r7, r3
 80061ee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80061f0:	bfbb      	ittet	lt
 80061f2:	189b      	addlt	r3, r3, r2
 80061f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80061f6:	1bdf      	subge	r7, r3, r7
 80061f8:	2700      	movlt	r7, #0
 80061fa:	f1b9 0f00 	cmp.w	r9, #0
 80061fe:	bfb5      	itete	lt
 8006200:	9b05      	ldrlt	r3, [sp, #20]
 8006202:	9d05      	ldrge	r5, [sp, #20]
 8006204:	eba3 0509 	sublt.w	r5, r3, r9
 8006208:	464b      	movge	r3, r9
 800620a:	bfb8      	it	lt
 800620c:	2300      	movlt	r3, #0
 800620e:	e77e      	b.n	800610e <_dtoa_r+0x6fe>
 8006210:	9f07      	ldr	r7, [sp, #28]
 8006212:	9d05      	ldr	r5, [sp, #20]
 8006214:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006216:	e783      	b.n	8006120 <_dtoa_r+0x710>
 8006218:	9a07      	ldr	r2, [sp, #28]
 800621a:	e7ab      	b.n	8006174 <_dtoa_r+0x764>
 800621c:	2300      	movs	r3, #0
 800621e:	e7d4      	b.n	80061ca <_dtoa_r+0x7ba>
 8006220:	9b00      	ldr	r3, [sp, #0]
 8006222:	e7d2      	b.n	80061ca <_dtoa_r+0x7ba>
 8006224:	2300      	movs	r3, #0
 8006226:	9307      	str	r3, [sp, #28]
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800622e:	6918      	ldr	r0, [r3, #16]
 8006230:	f000 fa42 	bl	80066b8 <__hi0bits>
 8006234:	f1c0 0020 	rsb	r0, r0, #32
 8006238:	4440      	add	r0, r8
 800623a:	f010 001f 	ands.w	r0, r0, #31
 800623e:	d047      	beq.n	80062d0 <_dtoa_r+0x8c0>
 8006240:	f1c0 0320 	rsb	r3, r0, #32
 8006244:	2b04      	cmp	r3, #4
 8006246:	dd3b      	ble.n	80062c0 <_dtoa_r+0x8b0>
 8006248:	9b05      	ldr	r3, [sp, #20]
 800624a:	f1c0 001c 	rsb	r0, r0, #28
 800624e:	4403      	add	r3, r0
 8006250:	9305      	str	r3, [sp, #20]
 8006252:	4405      	add	r5, r0
 8006254:	4480      	add	r8, r0
 8006256:	9b05      	ldr	r3, [sp, #20]
 8006258:	2b00      	cmp	r3, #0
 800625a:	dd05      	ble.n	8006268 <_dtoa_r+0x858>
 800625c:	461a      	mov	r2, r3
 800625e:	9904      	ldr	r1, [sp, #16]
 8006260:	4620      	mov	r0, r4
 8006262:	f000 fb65 	bl	8006930 <__lshift>
 8006266:	9004      	str	r0, [sp, #16]
 8006268:	f1b8 0f00 	cmp.w	r8, #0
 800626c:	dd05      	ble.n	800627a <_dtoa_r+0x86a>
 800626e:	4639      	mov	r1, r7
 8006270:	4642      	mov	r2, r8
 8006272:	4620      	mov	r0, r4
 8006274:	f000 fb5c 	bl	8006930 <__lshift>
 8006278:	4607      	mov	r7, r0
 800627a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800627c:	b353      	cbz	r3, 80062d4 <_dtoa_r+0x8c4>
 800627e:	4639      	mov	r1, r7
 8006280:	9804      	ldr	r0, [sp, #16]
 8006282:	f000 fba9 	bl	80069d8 <__mcmp>
 8006286:	2800      	cmp	r0, #0
 8006288:	da24      	bge.n	80062d4 <_dtoa_r+0x8c4>
 800628a:	2300      	movs	r3, #0
 800628c:	220a      	movs	r2, #10
 800628e:	9904      	ldr	r1, [sp, #16]
 8006290:	4620      	mov	r0, r4
 8006292:	f000 f9d6 	bl	8006642 <__multadd>
 8006296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006298:	9004      	str	r0, [sp, #16]
 800629a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 814d 	beq.w	800653e <_dtoa_r+0xb2e>
 80062a4:	2300      	movs	r3, #0
 80062a6:	4631      	mov	r1, r6
 80062a8:	220a      	movs	r2, #10
 80062aa:	4620      	mov	r0, r4
 80062ac:	f000 f9c9 	bl	8006642 <__multadd>
 80062b0:	9b02      	ldr	r3, [sp, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	4606      	mov	r6, r0
 80062b6:	dc4f      	bgt.n	8006358 <_dtoa_r+0x948>
 80062b8:	9b06      	ldr	r3, [sp, #24]
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	dd4c      	ble.n	8006358 <_dtoa_r+0x948>
 80062be:	e011      	b.n	80062e4 <_dtoa_r+0x8d4>
 80062c0:	d0c9      	beq.n	8006256 <_dtoa_r+0x846>
 80062c2:	9a05      	ldr	r2, [sp, #20]
 80062c4:	331c      	adds	r3, #28
 80062c6:	441a      	add	r2, r3
 80062c8:	9205      	str	r2, [sp, #20]
 80062ca:	441d      	add	r5, r3
 80062cc:	4498      	add	r8, r3
 80062ce:	e7c2      	b.n	8006256 <_dtoa_r+0x846>
 80062d0:	4603      	mov	r3, r0
 80062d2:	e7f6      	b.n	80062c2 <_dtoa_r+0x8b2>
 80062d4:	f1b9 0f00 	cmp.w	r9, #0
 80062d8:	dc38      	bgt.n	800634c <_dtoa_r+0x93c>
 80062da:	9b06      	ldr	r3, [sp, #24]
 80062dc:	2b02      	cmp	r3, #2
 80062de:	dd35      	ble.n	800634c <_dtoa_r+0x93c>
 80062e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80062e4:	9b02      	ldr	r3, [sp, #8]
 80062e6:	b963      	cbnz	r3, 8006302 <_dtoa_r+0x8f2>
 80062e8:	4639      	mov	r1, r7
 80062ea:	2205      	movs	r2, #5
 80062ec:	4620      	mov	r0, r4
 80062ee:	f000 f9a8 	bl	8006642 <__multadd>
 80062f2:	4601      	mov	r1, r0
 80062f4:	4607      	mov	r7, r0
 80062f6:	9804      	ldr	r0, [sp, #16]
 80062f8:	f000 fb6e 	bl	80069d8 <__mcmp>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	f73f adcc 	bgt.w	8005e9a <_dtoa_r+0x48a>
 8006302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006304:	465d      	mov	r5, fp
 8006306:	ea6f 0a03 	mvn.w	sl, r3
 800630a:	f04f 0900 	mov.w	r9, #0
 800630e:	4639      	mov	r1, r7
 8006310:	4620      	mov	r0, r4
 8006312:	f000 f97f 	bl	8006614 <_Bfree>
 8006316:	2e00      	cmp	r6, #0
 8006318:	f43f aeb7 	beq.w	800608a <_dtoa_r+0x67a>
 800631c:	f1b9 0f00 	cmp.w	r9, #0
 8006320:	d005      	beq.n	800632e <_dtoa_r+0x91e>
 8006322:	45b1      	cmp	r9, r6
 8006324:	d003      	beq.n	800632e <_dtoa_r+0x91e>
 8006326:	4649      	mov	r1, r9
 8006328:	4620      	mov	r0, r4
 800632a:	f000 f973 	bl	8006614 <_Bfree>
 800632e:	4631      	mov	r1, r6
 8006330:	4620      	mov	r0, r4
 8006332:	f000 f96f 	bl	8006614 <_Bfree>
 8006336:	e6a8      	b.n	800608a <_dtoa_r+0x67a>
 8006338:	2700      	movs	r7, #0
 800633a:	463e      	mov	r6, r7
 800633c:	e7e1      	b.n	8006302 <_dtoa_r+0x8f2>
 800633e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006342:	463e      	mov	r6, r7
 8006344:	e5a9      	b.n	8005e9a <_dtoa_r+0x48a>
 8006346:	bf00      	nop
 8006348:	40240000 	.word	0x40240000
 800634c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800634e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 80fa 	beq.w	800654c <_dtoa_r+0xb3c>
 8006358:	2d00      	cmp	r5, #0
 800635a:	dd05      	ble.n	8006368 <_dtoa_r+0x958>
 800635c:	4631      	mov	r1, r6
 800635e:	462a      	mov	r2, r5
 8006360:	4620      	mov	r0, r4
 8006362:	f000 fae5 	bl	8006930 <__lshift>
 8006366:	4606      	mov	r6, r0
 8006368:	9b07      	ldr	r3, [sp, #28]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d04c      	beq.n	8006408 <_dtoa_r+0x9f8>
 800636e:	6871      	ldr	r1, [r6, #4]
 8006370:	4620      	mov	r0, r4
 8006372:	f000 f91b 	bl	80065ac <_Balloc>
 8006376:	6932      	ldr	r2, [r6, #16]
 8006378:	3202      	adds	r2, #2
 800637a:	4605      	mov	r5, r0
 800637c:	0092      	lsls	r2, r2, #2
 800637e:	f106 010c 	add.w	r1, r6, #12
 8006382:	300c      	adds	r0, #12
 8006384:	f7fe ff5a 	bl	800523c <memcpy>
 8006388:	2201      	movs	r2, #1
 800638a:	4629      	mov	r1, r5
 800638c:	4620      	mov	r0, r4
 800638e:	f000 facf 	bl	8006930 <__lshift>
 8006392:	9b00      	ldr	r3, [sp, #0]
 8006394:	f8cd b014 	str.w	fp, [sp, #20]
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	46b1      	mov	r9, r6
 800639e:	9307      	str	r3, [sp, #28]
 80063a0:	4606      	mov	r6, r0
 80063a2:	4639      	mov	r1, r7
 80063a4:	9804      	ldr	r0, [sp, #16]
 80063a6:	f7ff faa6 	bl	80058f6 <quorem>
 80063aa:	4649      	mov	r1, r9
 80063ac:	4605      	mov	r5, r0
 80063ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80063b2:	9804      	ldr	r0, [sp, #16]
 80063b4:	f000 fb10 	bl	80069d8 <__mcmp>
 80063b8:	4632      	mov	r2, r6
 80063ba:	9000      	str	r0, [sp, #0]
 80063bc:	4639      	mov	r1, r7
 80063be:	4620      	mov	r0, r4
 80063c0:	f000 fb24 	bl	8006a0c <__mdiff>
 80063c4:	68c3      	ldr	r3, [r0, #12]
 80063c6:	4602      	mov	r2, r0
 80063c8:	bb03      	cbnz	r3, 800640c <_dtoa_r+0x9fc>
 80063ca:	4601      	mov	r1, r0
 80063cc:	9008      	str	r0, [sp, #32]
 80063ce:	9804      	ldr	r0, [sp, #16]
 80063d0:	f000 fb02 	bl	80069d8 <__mcmp>
 80063d4:	9a08      	ldr	r2, [sp, #32]
 80063d6:	4603      	mov	r3, r0
 80063d8:	4611      	mov	r1, r2
 80063da:	4620      	mov	r0, r4
 80063dc:	9308      	str	r3, [sp, #32]
 80063de:	f000 f919 	bl	8006614 <_Bfree>
 80063e2:	9b08      	ldr	r3, [sp, #32]
 80063e4:	b9a3      	cbnz	r3, 8006410 <_dtoa_r+0xa00>
 80063e6:	9a06      	ldr	r2, [sp, #24]
 80063e8:	b992      	cbnz	r2, 8006410 <_dtoa_r+0xa00>
 80063ea:	9a07      	ldr	r2, [sp, #28]
 80063ec:	b982      	cbnz	r2, 8006410 <_dtoa_r+0xa00>
 80063ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80063f2:	d029      	beq.n	8006448 <_dtoa_r+0xa38>
 80063f4:	9b00      	ldr	r3, [sp, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	dd01      	ble.n	80063fe <_dtoa_r+0x9ee>
 80063fa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80063fe:	9b05      	ldr	r3, [sp, #20]
 8006400:	1c5d      	adds	r5, r3, #1
 8006402:	f883 8000 	strb.w	r8, [r3]
 8006406:	e782      	b.n	800630e <_dtoa_r+0x8fe>
 8006408:	4630      	mov	r0, r6
 800640a:	e7c2      	b.n	8006392 <_dtoa_r+0x982>
 800640c:	2301      	movs	r3, #1
 800640e:	e7e3      	b.n	80063d8 <_dtoa_r+0x9c8>
 8006410:	9a00      	ldr	r2, [sp, #0]
 8006412:	2a00      	cmp	r2, #0
 8006414:	db04      	blt.n	8006420 <_dtoa_r+0xa10>
 8006416:	d125      	bne.n	8006464 <_dtoa_r+0xa54>
 8006418:	9a06      	ldr	r2, [sp, #24]
 800641a:	bb1a      	cbnz	r2, 8006464 <_dtoa_r+0xa54>
 800641c:	9a07      	ldr	r2, [sp, #28]
 800641e:	bb0a      	cbnz	r2, 8006464 <_dtoa_r+0xa54>
 8006420:	2b00      	cmp	r3, #0
 8006422:	ddec      	ble.n	80063fe <_dtoa_r+0x9ee>
 8006424:	2201      	movs	r2, #1
 8006426:	9904      	ldr	r1, [sp, #16]
 8006428:	4620      	mov	r0, r4
 800642a:	f000 fa81 	bl	8006930 <__lshift>
 800642e:	4639      	mov	r1, r7
 8006430:	9004      	str	r0, [sp, #16]
 8006432:	f000 fad1 	bl	80069d8 <__mcmp>
 8006436:	2800      	cmp	r0, #0
 8006438:	dc03      	bgt.n	8006442 <_dtoa_r+0xa32>
 800643a:	d1e0      	bne.n	80063fe <_dtoa_r+0x9ee>
 800643c:	f018 0f01 	tst.w	r8, #1
 8006440:	d0dd      	beq.n	80063fe <_dtoa_r+0x9ee>
 8006442:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006446:	d1d8      	bne.n	80063fa <_dtoa_r+0x9ea>
 8006448:	9b05      	ldr	r3, [sp, #20]
 800644a:	9a05      	ldr	r2, [sp, #20]
 800644c:	1c5d      	adds	r5, r3, #1
 800644e:	2339      	movs	r3, #57	; 0x39
 8006450:	7013      	strb	r3, [r2, #0]
 8006452:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006456:	2b39      	cmp	r3, #57	; 0x39
 8006458:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800645c:	d04f      	beq.n	80064fe <_dtoa_r+0xaee>
 800645e:	3301      	adds	r3, #1
 8006460:	7013      	strb	r3, [r2, #0]
 8006462:	e754      	b.n	800630e <_dtoa_r+0x8fe>
 8006464:	9a05      	ldr	r2, [sp, #20]
 8006466:	2b00      	cmp	r3, #0
 8006468:	f102 0501 	add.w	r5, r2, #1
 800646c:	dd06      	ble.n	800647c <_dtoa_r+0xa6c>
 800646e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006472:	d0e9      	beq.n	8006448 <_dtoa_r+0xa38>
 8006474:	f108 0801 	add.w	r8, r8, #1
 8006478:	9b05      	ldr	r3, [sp, #20]
 800647a:	e7c2      	b.n	8006402 <_dtoa_r+0x9f2>
 800647c:	9a02      	ldr	r2, [sp, #8]
 800647e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006482:	eba5 030b 	sub.w	r3, r5, fp
 8006486:	4293      	cmp	r3, r2
 8006488:	d021      	beq.n	80064ce <_dtoa_r+0xabe>
 800648a:	2300      	movs	r3, #0
 800648c:	220a      	movs	r2, #10
 800648e:	9904      	ldr	r1, [sp, #16]
 8006490:	4620      	mov	r0, r4
 8006492:	f000 f8d6 	bl	8006642 <__multadd>
 8006496:	45b1      	cmp	r9, r6
 8006498:	9004      	str	r0, [sp, #16]
 800649a:	f04f 0300 	mov.w	r3, #0
 800649e:	f04f 020a 	mov.w	r2, #10
 80064a2:	4649      	mov	r1, r9
 80064a4:	4620      	mov	r0, r4
 80064a6:	d105      	bne.n	80064b4 <_dtoa_r+0xaa4>
 80064a8:	f000 f8cb 	bl	8006642 <__multadd>
 80064ac:	4681      	mov	r9, r0
 80064ae:	4606      	mov	r6, r0
 80064b0:	9505      	str	r5, [sp, #20]
 80064b2:	e776      	b.n	80063a2 <_dtoa_r+0x992>
 80064b4:	f000 f8c5 	bl	8006642 <__multadd>
 80064b8:	4631      	mov	r1, r6
 80064ba:	4681      	mov	r9, r0
 80064bc:	2300      	movs	r3, #0
 80064be:	220a      	movs	r2, #10
 80064c0:	4620      	mov	r0, r4
 80064c2:	f000 f8be 	bl	8006642 <__multadd>
 80064c6:	4606      	mov	r6, r0
 80064c8:	e7f2      	b.n	80064b0 <_dtoa_r+0xaa0>
 80064ca:	f04f 0900 	mov.w	r9, #0
 80064ce:	2201      	movs	r2, #1
 80064d0:	9904      	ldr	r1, [sp, #16]
 80064d2:	4620      	mov	r0, r4
 80064d4:	f000 fa2c 	bl	8006930 <__lshift>
 80064d8:	4639      	mov	r1, r7
 80064da:	9004      	str	r0, [sp, #16]
 80064dc:	f000 fa7c 	bl	80069d8 <__mcmp>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	dcb6      	bgt.n	8006452 <_dtoa_r+0xa42>
 80064e4:	d102      	bne.n	80064ec <_dtoa_r+0xadc>
 80064e6:	f018 0f01 	tst.w	r8, #1
 80064ea:	d1b2      	bne.n	8006452 <_dtoa_r+0xa42>
 80064ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80064f0:	2b30      	cmp	r3, #48	; 0x30
 80064f2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80064f6:	f47f af0a 	bne.w	800630e <_dtoa_r+0x8fe>
 80064fa:	4615      	mov	r5, r2
 80064fc:	e7f6      	b.n	80064ec <_dtoa_r+0xadc>
 80064fe:	4593      	cmp	fp, r2
 8006500:	d105      	bne.n	800650e <_dtoa_r+0xafe>
 8006502:	2331      	movs	r3, #49	; 0x31
 8006504:	f10a 0a01 	add.w	sl, sl, #1
 8006508:	f88b 3000 	strb.w	r3, [fp]
 800650c:	e6ff      	b.n	800630e <_dtoa_r+0x8fe>
 800650e:	4615      	mov	r5, r2
 8006510:	e79f      	b.n	8006452 <_dtoa_r+0xa42>
 8006512:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006578 <_dtoa_r+0xb68>
 8006516:	e007      	b.n	8006528 <_dtoa_r+0xb18>
 8006518:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800651a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800657c <_dtoa_r+0xb6c>
 800651e:	b11b      	cbz	r3, 8006528 <_dtoa_r+0xb18>
 8006520:	f10b 0308 	add.w	r3, fp, #8
 8006524:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	4658      	mov	r0, fp
 800652a:	b017      	add	sp, #92	; 0x5c
 800652c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006530:	9b06      	ldr	r3, [sp, #24]
 8006532:	2b01      	cmp	r3, #1
 8006534:	f77f ae35 	ble.w	80061a2 <_dtoa_r+0x792>
 8006538:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800653a:	9307      	str	r3, [sp, #28]
 800653c:	e649      	b.n	80061d2 <_dtoa_r+0x7c2>
 800653e:	9b02      	ldr	r3, [sp, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	dc03      	bgt.n	800654c <_dtoa_r+0xb3c>
 8006544:	9b06      	ldr	r3, [sp, #24]
 8006546:	2b02      	cmp	r3, #2
 8006548:	f73f aecc 	bgt.w	80062e4 <_dtoa_r+0x8d4>
 800654c:	465d      	mov	r5, fp
 800654e:	4639      	mov	r1, r7
 8006550:	9804      	ldr	r0, [sp, #16]
 8006552:	f7ff f9d0 	bl	80058f6 <quorem>
 8006556:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800655a:	f805 8b01 	strb.w	r8, [r5], #1
 800655e:	9a02      	ldr	r2, [sp, #8]
 8006560:	eba5 030b 	sub.w	r3, r5, fp
 8006564:	429a      	cmp	r2, r3
 8006566:	ddb0      	ble.n	80064ca <_dtoa_r+0xaba>
 8006568:	2300      	movs	r3, #0
 800656a:	220a      	movs	r2, #10
 800656c:	9904      	ldr	r1, [sp, #16]
 800656e:	4620      	mov	r0, r4
 8006570:	f000 f867 	bl	8006642 <__multadd>
 8006574:	9004      	str	r0, [sp, #16]
 8006576:	e7ea      	b.n	800654e <_dtoa_r+0xb3e>
 8006578:	08019dcb 	.word	0x08019dcb
 800657c:	08019dcd 	.word	0x08019dcd

08006580 <_localeconv_r>:
 8006580:	4b04      	ldr	r3, [pc, #16]	; (8006594 <_localeconv_r+0x14>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6a18      	ldr	r0, [r3, #32]
 8006586:	4b04      	ldr	r3, [pc, #16]	; (8006598 <_localeconv_r+0x18>)
 8006588:	2800      	cmp	r0, #0
 800658a:	bf08      	it	eq
 800658c:	4618      	moveq	r0, r3
 800658e:	30f0      	adds	r0, #240	; 0xf0
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	2000000c 	.word	0x2000000c
 8006598:	20000070 	.word	0x20000070

0800659c <malloc>:
 800659c:	4b02      	ldr	r3, [pc, #8]	; (80065a8 <malloc+0xc>)
 800659e:	4601      	mov	r1, r0
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	f000 baed 	b.w	8006b80 <_malloc_r>
 80065a6:	bf00      	nop
 80065a8:	2000000c 	.word	0x2000000c

080065ac <_Balloc>:
 80065ac:	b570      	push	{r4, r5, r6, lr}
 80065ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80065b0:	4604      	mov	r4, r0
 80065b2:	460e      	mov	r6, r1
 80065b4:	b93d      	cbnz	r5, 80065c6 <_Balloc+0x1a>
 80065b6:	2010      	movs	r0, #16
 80065b8:	f7ff fff0 	bl	800659c <malloc>
 80065bc:	6260      	str	r0, [r4, #36]	; 0x24
 80065be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80065c2:	6005      	str	r5, [r0, #0]
 80065c4:	60c5      	str	r5, [r0, #12]
 80065c6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80065c8:	68eb      	ldr	r3, [r5, #12]
 80065ca:	b183      	cbz	r3, 80065ee <_Balloc+0x42>
 80065cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80065d4:	b9b8      	cbnz	r0, 8006606 <_Balloc+0x5a>
 80065d6:	2101      	movs	r1, #1
 80065d8:	fa01 f506 	lsl.w	r5, r1, r6
 80065dc:	1d6a      	adds	r2, r5, #5
 80065de:	0092      	lsls	r2, r2, #2
 80065e0:	4620      	mov	r0, r4
 80065e2:	f000 fabf 	bl	8006b64 <_calloc_r>
 80065e6:	b160      	cbz	r0, 8006602 <_Balloc+0x56>
 80065e8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80065ec:	e00e      	b.n	800660c <_Balloc+0x60>
 80065ee:	2221      	movs	r2, #33	; 0x21
 80065f0:	2104      	movs	r1, #4
 80065f2:	4620      	mov	r0, r4
 80065f4:	f000 fab6 	bl	8006b64 <_calloc_r>
 80065f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065fa:	60e8      	str	r0, [r5, #12]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1e4      	bne.n	80065cc <_Balloc+0x20>
 8006602:	2000      	movs	r0, #0
 8006604:	bd70      	pop	{r4, r5, r6, pc}
 8006606:	6802      	ldr	r2, [r0, #0]
 8006608:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800660c:	2300      	movs	r3, #0
 800660e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006612:	e7f7      	b.n	8006604 <_Balloc+0x58>

08006614 <_Bfree>:
 8006614:	b570      	push	{r4, r5, r6, lr}
 8006616:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006618:	4606      	mov	r6, r0
 800661a:	460d      	mov	r5, r1
 800661c:	b93c      	cbnz	r4, 800662e <_Bfree+0x1a>
 800661e:	2010      	movs	r0, #16
 8006620:	f7ff ffbc 	bl	800659c <malloc>
 8006624:	6270      	str	r0, [r6, #36]	; 0x24
 8006626:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800662a:	6004      	str	r4, [r0, #0]
 800662c:	60c4      	str	r4, [r0, #12]
 800662e:	b13d      	cbz	r5, 8006640 <_Bfree+0x2c>
 8006630:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006632:	686a      	ldr	r2, [r5, #4]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800663a:	6029      	str	r1, [r5, #0]
 800663c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006640:	bd70      	pop	{r4, r5, r6, pc}

08006642 <__multadd>:
 8006642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006646:	690d      	ldr	r5, [r1, #16]
 8006648:	461f      	mov	r7, r3
 800664a:	4606      	mov	r6, r0
 800664c:	460c      	mov	r4, r1
 800664e:	f101 0c14 	add.w	ip, r1, #20
 8006652:	2300      	movs	r3, #0
 8006654:	f8dc 0000 	ldr.w	r0, [ip]
 8006658:	b281      	uxth	r1, r0
 800665a:	fb02 7101 	mla	r1, r2, r1, r7
 800665e:	0c0f      	lsrs	r7, r1, #16
 8006660:	0c00      	lsrs	r0, r0, #16
 8006662:	fb02 7000 	mla	r0, r2, r0, r7
 8006666:	b289      	uxth	r1, r1
 8006668:	3301      	adds	r3, #1
 800666a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800666e:	429d      	cmp	r5, r3
 8006670:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006674:	f84c 1b04 	str.w	r1, [ip], #4
 8006678:	dcec      	bgt.n	8006654 <__multadd+0x12>
 800667a:	b1d7      	cbz	r7, 80066b2 <__multadd+0x70>
 800667c:	68a3      	ldr	r3, [r4, #8]
 800667e:	42ab      	cmp	r3, r5
 8006680:	dc12      	bgt.n	80066a8 <__multadd+0x66>
 8006682:	6861      	ldr	r1, [r4, #4]
 8006684:	4630      	mov	r0, r6
 8006686:	3101      	adds	r1, #1
 8006688:	f7ff ff90 	bl	80065ac <_Balloc>
 800668c:	6922      	ldr	r2, [r4, #16]
 800668e:	3202      	adds	r2, #2
 8006690:	f104 010c 	add.w	r1, r4, #12
 8006694:	4680      	mov	r8, r0
 8006696:	0092      	lsls	r2, r2, #2
 8006698:	300c      	adds	r0, #12
 800669a:	f7fe fdcf 	bl	800523c <memcpy>
 800669e:	4621      	mov	r1, r4
 80066a0:	4630      	mov	r0, r6
 80066a2:	f7ff ffb7 	bl	8006614 <_Bfree>
 80066a6:	4644      	mov	r4, r8
 80066a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066ac:	3501      	adds	r5, #1
 80066ae:	615f      	str	r7, [r3, #20]
 80066b0:	6125      	str	r5, [r4, #16]
 80066b2:	4620      	mov	r0, r4
 80066b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080066b8 <__hi0bits>:
 80066b8:	0c02      	lsrs	r2, r0, #16
 80066ba:	0412      	lsls	r2, r2, #16
 80066bc:	4603      	mov	r3, r0
 80066be:	b9b2      	cbnz	r2, 80066ee <__hi0bits+0x36>
 80066c0:	0403      	lsls	r3, r0, #16
 80066c2:	2010      	movs	r0, #16
 80066c4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80066c8:	bf04      	itt	eq
 80066ca:	021b      	lsleq	r3, r3, #8
 80066cc:	3008      	addeq	r0, #8
 80066ce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80066d2:	bf04      	itt	eq
 80066d4:	011b      	lsleq	r3, r3, #4
 80066d6:	3004      	addeq	r0, #4
 80066d8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80066dc:	bf04      	itt	eq
 80066de:	009b      	lsleq	r3, r3, #2
 80066e0:	3002      	addeq	r0, #2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	db06      	blt.n	80066f4 <__hi0bits+0x3c>
 80066e6:	005b      	lsls	r3, r3, #1
 80066e8:	d503      	bpl.n	80066f2 <__hi0bits+0x3a>
 80066ea:	3001      	adds	r0, #1
 80066ec:	4770      	bx	lr
 80066ee:	2000      	movs	r0, #0
 80066f0:	e7e8      	b.n	80066c4 <__hi0bits+0xc>
 80066f2:	2020      	movs	r0, #32
 80066f4:	4770      	bx	lr

080066f6 <__lo0bits>:
 80066f6:	6803      	ldr	r3, [r0, #0]
 80066f8:	f013 0207 	ands.w	r2, r3, #7
 80066fc:	4601      	mov	r1, r0
 80066fe:	d00b      	beq.n	8006718 <__lo0bits+0x22>
 8006700:	07da      	lsls	r2, r3, #31
 8006702:	d423      	bmi.n	800674c <__lo0bits+0x56>
 8006704:	0798      	lsls	r0, r3, #30
 8006706:	bf49      	itett	mi
 8006708:	085b      	lsrmi	r3, r3, #1
 800670a:	089b      	lsrpl	r3, r3, #2
 800670c:	2001      	movmi	r0, #1
 800670e:	600b      	strmi	r3, [r1, #0]
 8006710:	bf5c      	itt	pl
 8006712:	600b      	strpl	r3, [r1, #0]
 8006714:	2002      	movpl	r0, #2
 8006716:	4770      	bx	lr
 8006718:	b298      	uxth	r0, r3
 800671a:	b9a8      	cbnz	r0, 8006748 <__lo0bits+0x52>
 800671c:	0c1b      	lsrs	r3, r3, #16
 800671e:	2010      	movs	r0, #16
 8006720:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006724:	bf04      	itt	eq
 8006726:	0a1b      	lsreq	r3, r3, #8
 8006728:	3008      	addeq	r0, #8
 800672a:	071a      	lsls	r2, r3, #28
 800672c:	bf04      	itt	eq
 800672e:	091b      	lsreq	r3, r3, #4
 8006730:	3004      	addeq	r0, #4
 8006732:	079a      	lsls	r2, r3, #30
 8006734:	bf04      	itt	eq
 8006736:	089b      	lsreq	r3, r3, #2
 8006738:	3002      	addeq	r0, #2
 800673a:	07da      	lsls	r2, r3, #31
 800673c:	d402      	bmi.n	8006744 <__lo0bits+0x4e>
 800673e:	085b      	lsrs	r3, r3, #1
 8006740:	d006      	beq.n	8006750 <__lo0bits+0x5a>
 8006742:	3001      	adds	r0, #1
 8006744:	600b      	str	r3, [r1, #0]
 8006746:	4770      	bx	lr
 8006748:	4610      	mov	r0, r2
 800674a:	e7e9      	b.n	8006720 <__lo0bits+0x2a>
 800674c:	2000      	movs	r0, #0
 800674e:	4770      	bx	lr
 8006750:	2020      	movs	r0, #32
 8006752:	4770      	bx	lr

08006754 <__i2b>:
 8006754:	b510      	push	{r4, lr}
 8006756:	460c      	mov	r4, r1
 8006758:	2101      	movs	r1, #1
 800675a:	f7ff ff27 	bl	80065ac <_Balloc>
 800675e:	2201      	movs	r2, #1
 8006760:	6144      	str	r4, [r0, #20]
 8006762:	6102      	str	r2, [r0, #16]
 8006764:	bd10      	pop	{r4, pc}

08006766 <__multiply>:
 8006766:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800676a:	4614      	mov	r4, r2
 800676c:	690a      	ldr	r2, [r1, #16]
 800676e:	6923      	ldr	r3, [r4, #16]
 8006770:	429a      	cmp	r2, r3
 8006772:	bfb8      	it	lt
 8006774:	460b      	movlt	r3, r1
 8006776:	4688      	mov	r8, r1
 8006778:	bfbc      	itt	lt
 800677a:	46a0      	movlt	r8, r4
 800677c:	461c      	movlt	r4, r3
 800677e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006782:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006786:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800678a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800678e:	eb07 0609 	add.w	r6, r7, r9
 8006792:	42b3      	cmp	r3, r6
 8006794:	bfb8      	it	lt
 8006796:	3101      	addlt	r1, #1
 8006798:	f7ff ff08 	bl	80065ac <_Balloc>
 800679c:	f100 0514 	add.w	r5, r0, #20
 80067a0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80067a4:	462b      	mov	r3, r5
 80067a6:	2200      	movs	r2, #0
 80067a8:	4573      	cmp	r3, lr
 80067aa:	d316      	bcc.n	80067da <__multiply+0x74>
 80067ac:	f104 0214 	add.w	r2, r4, #20
 80067b0:	f108 0114 	add.w	r1, r8, #20
 80067b4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80067b8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	9b00      	ldr	r3, [sp, #0]
 80067c0:	9201      	str	r2, [sp, #4]
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d80c      	bhi.n	80067e0 <__multiply+0x7a>
 80067c6:	2e00      	cmp	r6, #0
 80067c8:	dd03      	ble.n	80067d2 <__multiply+0x6c>
 80067ca:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d05d      	beq.n	800688e <__multiply+0x128>
 80067d2:	6106      	str	r6, [r0, #16]
 80067d4:	b003      	add	sp, #12
 80067d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067da:	f843 2b04 	str.w	r2, [r3], #4
 80067de:	e7e3      	b.n	80067a8 <__multiply+0x42>
 80067e0:	f8b2 b000 	ldrh.w	fp, [r2]
 80067e4:	f1bb 0f00 	cmp.w	fp, #0
 80067e8:	d023      	beq.n	8006832 <__multiply+0xcc>
 80067ea:	4689      	mov	r9, r1
 80067ec:	46ac      	mov	ip, r5
 80067ee:	f04f 0800 	mov.w	r8, #0
 80067f2:	f859 4b04 	ldr.w	r4, [r9], #4
 80067f6:	f8dc a000 	ldr.w	sl, [ip]
 80067fa:	b2a3      	uxth	r3, r4
 80067fc:	fa1f fa8a 	uxth.w	sl, sl
 8006800:	fb0b a303 	mla	r3, fp, r3, sl
 8006804:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006808:	f8dc 4000 	ldr.w	r4, [ip]
 800680c:	4443      	add	r3, r8
 800680e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006812:	fb0b 840a 	mla	r4, fp, sl, r8
 8006816:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800681a:	46e2      	mov	sl, ip
 800681c:	b29b      	uxth	r3, r3
 800681e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006822:	454f      	cmp	r7, r9
 8006824:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006828:	f84a 3b04 	str.w	r3, [sl], #4
 800682c:	d82b      	bhi.n	8006886 <__multiply+0x120>
 800682e:	f8cc 8004 	str.w	r8, [ip, #4]
 8006832:	9b01      	ldr	r3, [sp, #4]
 8006834:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006838:	3204      	adds	r2, #4
 800683a:	f1ba 0f00 	cmp.w	sl, #0
 800683e:	d020      	beq.n	8006882 <__multiply+0x11c>
 8006840:	682b      	ldr	r3, [r5, #0]
 8006842:	4689      	mov	r9, r1
 8006844:	46a8      	mov	r8, r5
 8006846:	f04f 0b00 	mov.w	fp, #0
 800684a:	f8b9 c000 	ldrh.w	ip, [r9]
 800684e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006852:	fb0a 440c 	mla	r4, sl, ip, r4
 8006856:	445c      	add	r4, fp
 8006858:	46c4      	mov	ip, r8
 800685a:	b29b      	uxth	r3, r3
 800685c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006860:	f84c 3b04 	str.w	r3, [ip], #4
 8006864:	f859 3b04 	ldr.w	r3, [r9], #4
 8006868:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800686c:	0c1b      	lsrs	r3, r3, #16
 800686e:	fb0a b303 	mla	r3, sl, r3, fp
 8006872:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006876:	454f      	cmp	r7, r9
 8006878:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800687c:	d805      	bhi.n	800688a <__multiply+0x124>
 800687e:	f8c8 3004 	str.w	r3, [r8, #4]
 8006882:	3504      	adds	r5, #4
 8006884:	e79b      	b.n	80067be <__multiply+0x58>
 8006886:	46d4      	mov	ip, sl
 8006888:	e7b3      	b.n	80067f2 <__multiply+0x8c>
 800688a:	46e0      	mov	r8, ip
 800688c:	e7dd      	b.n	800684a <__multiply+0xe4>
 800688e:	3e01      	subs	r6, #1
 8006890:	e799      	b.n	80067c6 <__multiply+0x60>
	...

08006894 <__pow5mult>:
 8006894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006898:	4615      	mov	r5, r2
 800689a:	f012 0203 	ands.w	r2, r2, #3
 800689e:	4606      	mov	r6, r0
 80068a0:	460f      	mov	r7, r1
 80068a2:	d007      	beq.n	80068b4 <__pow5mult+0x20>
 80068a4:	3a01      	subs	r2, #1
 80068a6:	4c21      	ldr	r4, [pc, #132]	; (800692c <__pow5mult+0x98>)
 80068a8:	2300      	movs	r3, #0
 80068aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068ae:	f7ff fec8 	bl	8006642 <__multadd>
 80068b2:	4607      	mov	r7, r0
 80068b4:	10ad      	asrs	r5, r5, #2
 80068b6:	d035      	beq.n	8006924 <__pow5mult+0x90>
 80068b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80068ba:	b93c      	cbnz	r4, 80068cc <__pow5mult+0x38>
 80068bc:	2010      	movs	r0, #16
 80068be:	f7ff fe6d 	bl	800659c <malloc>
 80068c2:	6270      	str	r0, [r6, #36]	; 0x24
 80068c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068c8:	6004      	str	r4, [r0, #0]
 80068ca:	60c4      	str	r4, [r0, #12]
 80068cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80068d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068d4:	b94c      	cbnz	r4, 80068ea <__pow5mult+0x56>
 80068d6:	f240 2171 	movw	r1, #625	; 0x271
 80068da:	4630      	mov	r0, r6
 80068dc:	f7ff ff3a 	bl	8006754 <__i2b>
 80068e0:	2300      	movs	r3, #0
 80068e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80068e6:	4604      	mov	r4, r0
 80068e8:	6003      	str	r3, [r0, #0]
 80068ea:	f04f 0800 	mov.w	r8, #0
 80068ee:	07eb      	lsls	r3, r5, #31
 80068f0:	d50a      	bpl.n	8006908 <__pow5mult+0x74>
 80068f2:	4639      	mov	r1, r7
 80068f4:	4622      	mov	r2, r4
 80068f6:	4630      	mov	r0, r6
 80068f8:	f7ff ff35 	bl	8006766 <__multiply>
 80068fc:	4639      	mov	r1, r7
 80068fe:	4681      	mov	r9, r0
 8006900:	4630      	mov	r0, r6
 8006902:	f7ff fe87 	bl	8006614 <_Bfree>
 8006906:	464f      	mov	r7, r9
 8006908:	106d      	asrs	r5, r5, #1
 800690a:	d00b      	beq.n	8006924 <__pow5mult+0x90>
 800690c:	6820      	ldr	r0, [r4, #0]
 800690e:	b938      	cbnz	r0, 8006920 <__pow5mult+0x8c>
 8006910:	4622      	mov	r2, r4
 8006912:	4621      	mov	r1, r4
 8006914:	4630      	mov	r0, r6
 8006916:	f7ff ff26 	bl	8006766 <__multiply>
 800691a:	6020      	str	r0, [r4, #0]
 800691c:	f8c0 8000 	str.w	r8, [r0]
 8006920:	4604      	mov	r4, r0
 8006922:	e7e4      	b.n	80068ee <__pow5mult+0x5a>
 8006924:	4638      	mov	r0, r7
 8006926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800692a:	bf00      	nop
 800692c:	08019ed0 	.word	0x08019ed0

08006930 <__lshift>:
 8006930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006934:	460c      	mov	r4, r1
 8006936:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800693a:	6923      	ldr	r3, [r4, #16]
 800693c:	6849      	ldr	r1, [r1, #4]
 800693e:	eb0a 0903 	add.w	r9, sl, r3
 8006942:	68a3      	ldr	r3, [r4, #8]
 8006944:	4607      	mov	r7, r0
 8006946:	4616      	mov	r6, r2
 8006948:	f109 0501 	add.w	r5, r9, #1
 800694c:	42ab      	cmp	r3, r5
 800694e:	db32      	blt.n	80069b6 <__lshift+0x86>
 8006950:	4638      	mov	r0, r7
 8006952:	f7ff fe2b 	bl	80065ac <_Balloc>
 8006956:	2300      	movs	r3, #0
 8006958:	4680      	mov	r8, r0
 800695a:	f100 0114 	add.w	r1, r0, #20
 800695e:	461a      	mov	r2, r3
 8006960:	4553      	cmp	r3, sl
 8006962:	db2b      	blt.n	80069bc <__lshift+0x8c>
 8006964:	6920      	ldr	r0, [r4, #16]
 8006966:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800696a:	f104 0314 	add.w	r3, r4, #20
 800696e:	f016 021f 	ands.w	r2, r6, #31
 8006972:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006976:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800697a:	d025      	beq.n	80069c8 <__lshift+0x98>
 800697c:	f1c2 0e20 	rsb	lr, r2, #32
 8006980:	2000      	movs	r0, #0
 8006982:	681e      	ldr	r6, [r3, #0]
 8006984:	468a      	mov	sl, r1
 8006986:	4096      	lsls	r6, r2
 8006988:	4330      	orrs	r0, r6
 800698a:	f84a 0b04 	str.w	r0, [sl], #4
 800698e:	f853 0b04 	ldr.w	r0, [r3], #4
 8006992:	459c      	cmp	ip, r3
 8006994:	fa20 f00e 	lsr.w	r0, r0, lr
 8006998:	d814      	bhi.n	80069c4 <__lshift+0x94>
 800699a:	6048      	str	r0, [r1, #4]
 800699c:	b108      	cbz	r0, 80069a2 <__lshift+0x72>
 800699e:	f109 0502 	add.w	r5, r9, #2
 80069a2:	3d01      	subs	r5, #1
 80069a4:	4638      	mov	r0, r7
 80069a6:	f8c8 5010 	str.w	r5, [r8, #16]
 80069aa:	4621      	mov	r1, r4
 80069ac:	f7ff fe32 	bl	8006614 <_Bfree>
 80069b0:	4640      	mov	r0, r8
 80069b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b6:	3101      	adds	r1, #1
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	e7c7      	b.n	800694c <__lshift+0x1c>
 80069bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80069c0:	3301      	adds	r3, #1
 80069c2:	e7cd      	b.n	8006960 <__lshift+0x30>
 80069c4:	4651      	mov	r1, sl
 80069c6:	e7dc      	b.n	8006982 <__lshift+0x52>
 80069c8:	3904      	subs	r1, #4
 80069ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80069ce:	f841 2f04 	str.w	r2, [r1, #4]!
 80069d2:	459c      	cmp	ip, r3
 80069d4:	d8f9      	bhi.n	80069ca <__lshift+0x9a>
 80069d6:	e7e4      	b.n	80069a2 <__lshift+0x72>

080069d8 <__mcmp>:
 80069d8:	6903      	ldr	r3, [r0, #16]
 80069da:	690a      	ldr	r2, [r1, #16]
 80069dc:	1a9b      	subs	r3, r3, r2
 80069de:	b530      	push	{r4, r5, lr}
 80069e0:	d10c      	bne.n	80069fc <__mcmp+0x24>
 80069e2:	0092      	lsls	r2, r2, #2
 80069e4:	3014      	adds	r0, #20
 80069e6:	3114      	adds	r1, #20
 80069e8:	1884      	adds	r4, r0, r2
 80069ea:	4411      	add	r1, r2
 80069ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80069f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80069f4:	4295      	cmp	r5, r2
 80069f6:	d003      	beq.n	8006a00 <__mcmp+0x28>
 80069f8:	d305      	bcc.n	8006a06 <__mcmp+0x2e>
 80069fa:	2301      	movs	r3, #1
 80069fc:	4618      	mov	r0, r3
 80069fe:	bd30      	pop	{r4, r5, pc}
 8006a00:	42a0      	cmp	r0, r4
 8006a02:	d3f3      	bcc.n	80069ec <__mcmp+0x14>
 8006a04:	e7fa      	b.n	80069fc <__mcmp+0x24>
 8006a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a0a:	e7f7      	b.n	80069fc <__mcmp+0x24>

08006a0c <__mdiff>:
 8006a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a10:	460d      	mov	r5, r1
 8006a12:	4607      	mov	r7, r0
 8006a14:	4611      	mov	r1, r2
 8006a16:	4628      	mov	r0, r5
 8006a18:	4614      	mov	r4, r2
 8006a1a:	f7ff ffdd 	bl	80069d8 <__mcmp>
 8006a1e:	1e06      	subs	r6, r0, #0
 8006a20:	d108      	bne.n	8006a34 <__mdiff+0x28>
 8006a22:	4631      	mov	r1, r6
 8006a24:	4638      	mov	r0, r7
 8006a26:	f7ff fdc1 	bl	80065ac <_Balloc>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a34:	bfa4      	itt	ge
 8006a36:	4623      	movge	r3, r4
 8006a38:	462c      	movge	r4, r5
 8006a3a:	4638      	mov	r0, r7
 8006a3c:	6861      	ldr	r1, [r4, #4]
 8006a3e:	bfa6      	itte	ge
 8006a40:	461d      	movge	r5, r3
 8006a42:	2600      	movge	r6, #0
 8006a44:	2601      	movlt	r6, #1
 8006a46:	f7ff fdb1 	bl	80065ac <_Balloc>
 8006a4a:	692b      	ldr	r3, [r5, #16]
 8006a4c:	60c6      	str	r6, [r0, #12]
 8006a4e:	6926      	ldr	r6, [r4, #16]
 8006a50:	f105 0914 	add.w	r9, r5, #20
 8006a54:	f104 0214 	add.w	r2, r4, #20
 8006a58:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006a5c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006a60:	f100 0514 	add.w	r5, r0, #20
 8006a64:	f04f 0e00 	mov.w	lr, #0
 8006a68:	f852 ab04 	ldr.w	sl, [r2], #4
 8006a6c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006a70:	fa1e f18a 	uxtah	r1, lr, sl
 8006a74:	b2a3      	uxth	r3, r4
 8006a76:	1ac9      	subs	r1, r1, r3
 8006a78:	0c23      	lsrs	r3, r4, #16
 8006a7a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006a7e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006a82:	b289      	uxth	r1, r1
 8006a84:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006a88:	45c8      	cmp	r8, r9
 8006a8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006a8e:	4694      	mov	ip, r2
 8006a90:	f845 3b04 	str.w	r3, [r5], #4
 8006a94:	d8e8      	bhi.n	8006a68 <__mdiff+0x5c>
 8006a96:	45bc      	cmp	ip, r7
 8006a98:	d304      	bcc.n	8006aa4 <__mdiff+0x98>
 8006a9a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006a9e:	b183      	cbz	r3, 8006ac2 <__mdiff+0xb6>
 8006aa0:	6106      	str	r6, [r0, #16]
 8006aa2:	e7c5      	b.n	8006a30 <__mdiff+0x24>
 8006aa4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006aa8:	fa1e f381 	uxtah	r3, lr, r1
 8006aac:	141a      	asrs	r2, r3, #16
 8006aae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ab8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006abc:	f845 3b04 	str.w	r3, [r5], #4
 8006ac0:	e7e9      	b.n	8006a96 <__mdiff+0x8a>
 8006ac2:	3e01      	subs	r6, #1
 8006ac4:	e7e9      	b.n	8006a9a <__mdiff+0x8e>

08006ac6 <__d2b>:
 8006ac6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006aca:	460e      	mov	r6, r1
 8006acc:	2101      	movs	r1, #1
 8006ace:	ec59 8b10 	vmov	r8, r9, d0
 8006ad2:	4615      	mov	r5, r2
 8006ad4:	f7ff fd6a 	bl	80065ac <_Balloc>
 8006ad8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006adc:	4607      	mov	r7, r0
 8006ade:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ae2:	bb34      	cbnz	r4, 8006b32 <__d2b+0x6c>
 8006ae4:	9301      	str	r3, [sp, #4]
 8006ae6:	f1b8 0300 	subs.w	r3, r8, #0
 8006aea:	d027      	beq.n	8006b3c <__d2b+0x76>
 8006aec:	a802      	add	r0, sp, #8
 8006aee:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006af2:	f7ff fe00 	bl	80066f6 <__lo0bits>
 8006af6:	9900      	ldr	r1, [sp, #0]
 8006af8:	b1f0      	cbz	r0, 8006b38 <__d2b+0x72>
 8006afa:	9a01      	ldr	r2, [sp, #4]
 8006afc:	f1c0 0320 	rsb	r3, r0, #32
 8006b00:	fa02 f303 	lsl.w	r3, r2, r3
 8006b04:	430b      	orrs	r3, r1
 8006b06:	40c2      	lsrs	r2, r0
 8006b08:	617b      	str	r3, [r7, #20]
 8006b0a:	9201      	str	r2, [sp, #4]
 8006b0c:	9b01      	ldr	r3, [sp, #4]
 8006b0e:	61bb      	str	r3, [r7, #24]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	bf14      	ite	ne
 8006b14:	2102      	movne	r1, #2
 8006b16:	2101      	moveq	r1, #1
 8006b18:	6139      	str	r1, [r7, #16]
 8006b1a:	b1c4      	cbz	r4, 8006b4e <__d2b+0x88>
 8006b1c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006b20:	4404      	add	r4, r0
 8006b22:	6034      	str	r4, [r6, #0]
 8006b24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b28:	6028      	str	r0, [r5, #0]
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	b003      	add	sp, #12
 8006b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b36:	e7d5      	b.n	8006ae4 <__d2b+0x1e>
 8006b38:	6179      	str	r1, [r7, #20]
 8006b3a:	e7e7      	b.n	8006b0c <__d2b+0x46>
 8006b3c:	a801      	add	r0, sp, #4
 8006b3e:	f7ff fdda 	bl	80066f6 <__lo0bits>
 8006b42:	9b01      	ldr	r3, [sp, #4]
 8006b44:	617b      	str	r3, [r7, #20]
 8006b46:	2101      	movs	r1, #1
 8006b48:	6139      	str	r1, [r7, #16]
 8006b4a:	3020      	adds	r0, #32
 8006b4c:	e7e5      	b.n	8006b1a <__d2b+0x54>
 8006b4e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006b52:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b56:	6030      	str	r0, [r6, #0]
 8006b58:	6918      	ldr	r0, [r3, #16]
 8006b5a:	f7ff fdad 	bl	80066b8 <__hi0bits>
 8006b5e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006b62:	e7e1      	b.n	8006b28 <__d2b+0x62>

08006b64 <_calloc_r>:
 8006b64:	b538      	push	{r3, r4, r5, lr}
 8006b66:	fb02 f401 	mul.w	r4, r2, r1
 8006b6a:	4621      	mov	r1, r4
 8006b6c:	f000 f808 	bl	8006b80 <_malloc_r>
 8006b70:	4605      	mov	r5, r0
 8006b72:	b118      	cbz	r0, 8006b7c <_calloc_r+0x18>
 8006b74:	4622      	mov	r2, r4
 8006b76:	2100      	movs	r1, #0
 8006b78:	f7fe fb6b 	bl	8005252 <memset>
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	bd38      	pop	{r3, r4, r5, pc}

08006b80 <_malloc_r>:
 8006b80:	b570      	push	{r4, r5, r6, lr}
 8006b82:	1ccd      	adds	r5, r1, #3
 8006b84:	f025 0503 	bic.w	r5, r5, #3
 8006b88:	3508      	adds	r5, #8
 8006b8a:	2d0c      	cmp	r5, #12
 8006b8c:	bf38      	it	cc
 8006b8e:	250c      	movcc	r5, #12
 8006b90:	2d00      	cmp	r5, #0
 8006b92:	4606      	mov	r6, r0
 8006b94:	db01      	blt.n	8006b9a <_malloc_r+0x1a>
 8006b96:	42a9      	cmp	r1, r5
 8006b98:	d903      	bls.n	8006ba2 <_malloc_r+0x22>
 8006b9a:	230c      	movs	r3, #12
 8006b9c:	6033      	str	r3, [r6, #0]
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	bd70      	pop	{r4, r5, r6, pc}
 8006ba2:	f000 f869 	bl	8006c78 <__malloc_lock>
 8006ba6:	4a21      	ldr	r2, [pc, #132]	; (8006c2c <_malloc_r+0xac>)
 8006ba8:	6814      	ldr	r4, [r2, #0]
 8006baa:	4621      	mov	r1, r4
 8006bac:	b991      	cbnz	r1, 8006bd4 <_malloc_r+0x54>
 8006bae:	4c20      	ldr	r4, [pc, #128]	; (8006c30 <_malloc_r+0xb0>)
 8006bb0:	6823      	ldr	r3, [r4, #0]
 8006bb2:	b91b      	cbnz	r3, 8006bbc <_malloc_r+0x3c>
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	f000 f83d 	bl	8006c34 <_sbrk_r>
 8006bba:	6020      	str	r0, [r4, #0]
 8006bbc:	4629      	mov	r1, r5
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	f000 f838 	bl	8006c34 <_sbrk_r>
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	d124      	bne.n	8006c12 <_malloc_r+0x92>
 8006bc8:	230c      	movs	r3, #12
 8006bca:	6033      	str	r3, [r6, #0]
 8006bcc:	4630      	mov	r0, r6
 8006bce:	f000 f854 	bl	8006c7a <__malloc_unlock>
 8006bd2:	e7e4      	b.n	8006b9e <_malloc_r+0x1e>
 8006bd4:	680b      	ldr	r3, [r1, #0]
 8006bd6:	1b5b      	subs	r3, r3, r5
 8006bd8:	d418      	bmi.n	8006c0c <_malloc_r+0x8c>
 8006bda:	2b0b      	cmp	r3, #11
 8006bdc:	d90f      	bls.n	8006bfe <_malloc_r+0x7e>
 8006bde:	600b      	str	r3, [r1, #0]
 8006be0:	50cd      	str	r5, [r1, r3]
 8006be2:	18cc      	adds	r4, r1, r3
 8006be4:	4630      	mov	r0, r6
 8006be6:	f000 f848 	bl	8006c7a <__malloc_unlock>
 8006bea:	f104 000b 	add.w	r0, r4, #11
 8006bee:	1d23      	adds	r3, r4, #4
 8006bf0:	f020 0007 	bic.w	r0, r0, #7
 8006bf4:	1ac3      	subs	r3, r0, r3
 8006bf6:	d0d3      	beq.n	8006ba0 <_malloc_r+0x20>
 8006bf8:	425a      	negs	r2, r3
 8006bfa:	50e2      	str	r2, [r4, r3]
 8006bfc:	e7d0      	b.n	8006ba0 <_malloc_r+0x20>
 8006bfe:	428c      	cmp	r4, r1
 8006c00:	684b      	ldr	r3, [r1, #4]
 8006c02:	bf16      	itet	ne
 8006c04:	6063      	strne	r3, [r4, #4]
 8006c06:	6013      	streq	r3, [r2, #0]
 8006c08:	460c      	movne	r4, r1
 8006c0a:	e7eb      	b.n	8006be4 <_malloc_r+0x64>
 8006c0c:	460c      	mov	r4, r1
 8006c0e:	6849      	ldr	r1, [r1, #4]
 8006c10:	e7cc      	b.n	8006bac <_malloc_r+0x2c>
 8006c12:	1cc4      	adds	r4, r0, #3
 8006c14:	f024 0403 	bic.w	r4, r4, #3
 8006c18:	42a0      	cmp	r0, r4
 8006c1a:	d005      	beq.n	8006c28 <_malloc_r+0xa8>
 8006c1c:	1a21      	subs	r1, r4, r0
 8006c1e:	4630      	mov	r0, r6
 8006c20:	f000 f808 	bl	8006c34 <_sbrk_r>
 8006c24:	3001      	adds	r0, #1
 8006c26:	d0cf      	beq.n	8006bc8 <_malloc_r+0x48>
 8006c28:	6025      	str	r5, [r4, #0]
 8006c2a:	e7db      	b.n	8006be4 <_malloc_r+0x64>
 8006c2c:	20001504 	.word	0x20001504
 8006c30:	20001508 	.word	0x20001508

08006c34 <_sbrk_r>:
 8006c34:	b538      	push	{r3, r4, r5, lr}
 8006c36:	4c06      	ldr	r4, [pc, #24]	; (8006c50 <_sbrk_r+0x1c>)
 8006c38:	2300      	movs	r3, #0
 8006c3a:	4605      	mov	r5, r0
 8006c3c:	4608      	mov	r0, r1
 8006c3e:	6023      	str	r3, [r4, #0]
 8006c40:	f7fa fe4e 	bl	80018e0 <_sbrk>
 8006c44:	1c43      	adds	r3, r0, #1
 8006c46:	d102      	bne.n	8006c4e <_sbrk_r+0x1a>
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	b103      	cbz	r3, 8006c4e <_sbrk_r+0x1a>
 8006c4c:	602b      	str	r3, [r5, #0]
 8006c4e:	bd38      	pop	{r3, r4, r5, pc}
 8006c50:	20001bd4 	.word	0x20001bd4

08006c54 <__ascii_mbtowc>:
 8006c54:	b082      	sub	sp, #8
 8006c56:	b901      	cbnz	r1, 8006c5a <__ascii_mbtowc+0x6>
 8006c58:	a901      	add	r1, sp, #4
 8006c5a:	b142      	cbz	r2, 8006c6e <__ascii_mbtowc+0x1a>
 8006c5c:	b14b      	cbz	r3, 8006c72 <__ascii_mbtowc+0x1e>
 8006c5e:	7813      	ldrb	r3, [r2, #0]
 8006c60:	600b      	str	r3, [r1, #0]
 8006c62:	7812      	ldrb	r2, [r2, #0]
 8006c64:	1c10      	adds	r0, r2, #0
 8006c66:	bf18      	it	ne
 8006c68:	2001      	movne	r0, #1
 8006c6a:	b002      	add	sp, #8
 8006c6c:	4770      	bx	lr
 8006c6e:	4610      	mov	r0, r2
 8006c70:	e7fb      	b.n	8006c6a <__ascii_mbtowc+0x16>
 8006c72:	f06f 0001 	mvn.w	r0, #1
 8006c76:	e7f8      	b.n	8006c6a <__ascii_mbtowc+0x16>

08006c78 <__malloc_lock>:
 8006c78:	4770      	bx	lr

08006c7a <__malloc_unlock>:
 8006c7a:	4770      	bx	lr

08006c7c <__ascii_wctomb>:
 8006c7c:	b149      	cbz	r1, 8006c92 <__ascii_wctomb+0x16>
 8006c7e:	2aff      	cmp	r2, #255	; 0xff
 8006c80:	bf85      	ittet	hi
 8006c82:	238a      	movhi	r3, #138	; 0x8a
 8006c84:	6003      	strhi	r3, [r0, #0]
 8006c86:	700a      	strbls	r2, [r1, #0]
 8006c88:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006c8c:	bf98      	it	ls
 8006c8e:	2001      	movls	r0, #1
 8006c90:	4770      	bx	lr
 8006c92:	4608      	mov	r0, r1
 8006c94:	4770      	bx	lr
	...

08006c98 <_init>:
 8006c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9a:	bf00      	nop
 8006c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c9e:	bc08      	pop	{r3}
 8006ca0:	469e      	mov	lr, r3
 8006ca2:	4770      	bx	lr

08006ca4 <_fini>:
 8006ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca6:	bf00      	nop
 8006ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006caa:	bc08      	pop	{r3}
 8006cac:	469e      	mov	lr, r3
 8006cae:	4770      	bx	lr
