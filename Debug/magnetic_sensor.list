
magnetic_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bd8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000134e4  08007d78  08007d78  00017d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b25c  0801b25c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801b25c  0801b25c  0002b25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b264  0801b264  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b264  0801b264  0002b264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b268  0801b268  0002b268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801b26c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a10  200001dc  0801b448  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bec  0801b448  00031bec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015558  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b4  00000000  00000000  00045764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  00048818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  00049210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b2a  00000000  00000000  00049b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d71b  00000000  00000000  000616c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093aef  00000000  00000000  0006eddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  001028cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036dc  00000000  00000000  00102994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00004df4  00000000  00000000  00106070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007d60 	.word	0x08007d60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007d60 	.word	0x08007d60

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f56:	f000 fe65 	bl	8001c24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f5a:	f000 f8a1 	bl	80010a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f5e:	f000 f987 	bl	8001270 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000f62:	f000 f909 	bl	8001178 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8000f66:	f000 f959 	bl	800121c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_IT(&hadc1);
 8000f6a:	4845      	ldr	r0, [pc, #276]	; (8001080 <main+0x130>)
 8000f6c:	f000 ff10 	bl	8001d90 <HAL_ADC_Start_IT>
//  HAL_ADC_Start_DMA(hadc, pData, Length)
	while (ARM_MATH_SUCCESS != arm_rfft_fast_init_f32(&fftInstance, FFT_LENGTH))
 8000f70:	bf00      	nop
 8000f72:	2140      	movs	r1, #64	; 0x40
 8000f74:	4843      	ldr	r0, [pc, #268]	; (8001084 <main+0x134>)
 8000f76:	f002 fd29 	bl	80039cc <arm_rfft_fast_init_f32>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1f8      	bne.n	8000f72 <main+0x22>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (computeFFT != 0) {
 8000f80:	4b41      	ldr	r3, [pc, #260]	; (8001088 <main+0x138>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0fa      	beq.n	8000f80 <main+0x30>
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);

			convertLastADCValueBatch();
 8000f8a:	f000 fb11 	bl	80015b0 <convertLastADCValueBatch>
			//TODO: note that sensor value conversion is useless, since conversion doesn't affect FFT
			//if we need to compute FFT with values at both ends of array...
			arm_rfft_fast_f32(&fftInstance, tempValueBuffer, fftBuffer, 0);
 8000f8e:	2300      	movs	r3, #0
 8000f90:	4a3e      	ldr	r2, [pc, #248]	; (800108c <main+0x13c>)
 8000f92:	493f      	ldr	r1, [pc, #252]	; (8001090 <main+0x140>)
 8000f94:	483b      	ldr	r0, [pc, #236]	; (8001084 <main+0x134>)
 8000f96:	f002 fdfd 	bl	8003b94 <arm_rfft_fast_f32>
			arm_cmplx_mag_f32(fftBuffer, magnitudes, FFT_LENGTH / 2);
 8000f9a:	2220      	movs	r2, #32
 8000f9c:	493d      	ldr	r1, [pc, #244]	; (8001094 <main+0x144>)
 8000f9e:	483b      	ldr	r0, [pc, #236]	; (800108c <main+0x13c>)
 8000fa0:	f003 fc8c 	bl	80048bc <arm_cmplx_mag_f32>
			maxValue = magnitudes[0];
 8000fa4:	4b3b      	ldr	r3, [pc, #236]	; (8001094 <main+0x144>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	60fb      	str	r3, [r7, #12]
			maxValueIndex = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]

			for (int i = 1; i < FFT_LENGTH / 2 - 1; i++) {
 8000fae:	2301      	movs	r3, #1
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	e017      	b.n	8000fe4 <main+0x94>
				if (magnitudes[i] > maxValue) {
 8000fb4:	4a37      	ldr	r2, [pc, #220]	; (8001094 <main+0x144>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	edd3 7a00 	vldr	s15, [r3]
 8000fc0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fcc:	d507      	bpl.n	8000fde <main+0x8e>
					maxValue = magnitudes[i];
 8000fce:	4a31      	ldr	r2, [pc, #196]	; (8001094 <main+0x144>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	60fb      	str	r3, [r7, #12]
					maxValueIndex = i;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	60bb      	str	r3, [r7, #8]
			for (int i = 1; i < FFT_LENGTH / 2 - 1; i++) {
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b1e      	cmp	r3, #30
 8000fe8:	dde4      	ble.n	8000fb4 <main+0x64>
				}
			}

			if(maxValueIndex == FREQ_ONE_BIN)
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	2b0b      	cmp	r3, #11
 8000fee:	d121      	bne.n	8001034 <main+0xe4>
				receivedData[(receivedBitSize-1)/8] |= 1 << (7 - ((receivedBitSize-1) % 8));
 8000ff0:	4b29      	ldr	r3, [pc, #164]	; (8001098 <main+0x148>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	425a      	negs	r2, r3
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	f002 0207 	and.w	r2, r2, #7
 8001002:	bf58      	it	pl
 8001004:	4253      	negpl	r3, r2
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2201      	movs	r2, #1
 800100c:	fa02 f003 	lsl.w	r0, r2, r3
 8001010:	4b21      	ldr	r3, [pc, #132]	; (8001098 <main+0x148>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	b29b      	uxth	r3, r3
 8001016:	3b01      	subs	r3, #1
 8001018:	2b00      	cmp	r3, #0
 800101a:	da00      	bge.n	800101e <main+0xce>
 800101c:	3307      	adds	r3, #7
 800101e:	10db      	asrs	r3, r3, #3
 8001020:	4a1e      	ldr	r2, [pc, #120]	; (800109c <main+0x14c>)
 8001022:	5cd2      	ldrb	r2, [r2, r3]
 8001024:	b251      	sxtb	r1, r2
 8001026:	b242      	sxtb	r2, r0
 8001028:	430a      	orrs	r2, r1
 800102a:	b252      	sxtb	r2, r2
 800102c:	b2d1      	uxtb	r1, r2
 800102e:	4a1b      	ldr	r2, [pc, #108]	; (800109c <main+0x14c>)
 8001030:	54d1      	strb	r1, [r2, r3]
 8001032:	e021      	b.n	8001078 <main+0x128>
			else
				receivedData[(receivedBitSize-1)/8] &= ~(1 << (7 - ((receivedBitSize-1) % 8)));
 8001034:	4b18      	ldr	r3, [pc, #96]	; (8001098 <main+0x148>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	b29b      	uxth	r3, r3
 800103a:	3b01      	subs	r3, #1
 800103c:	425a      	negs	r2, r3
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	f002 0207 	and.w	r2, r2, #7
 8001046:	bf58      	it	pl
 8001048:	4253      	negpl	r3, r2
 800104a:	f1c3 0307 	rsb	r3, r3, #7
 800104e:	2201      	movs	r2, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43d8      	mvns	r0, r3
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <main+0x148>)
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	b29b      	uxth	r3, r3
 800105c:	3b01      	subs	r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	da00      	bge.n	8001064 <main+0x114>
 8001062:	3307      	adds	r3, #7
 8001064:	10db      	asrs	r3, r3, #3
 8001066:	4a0d      	ldr	r2, [pc, #52]	; (800109c <main+0x14c>)
 8001068:	5cd2      	ldrb	r2, [r2, r3]
 800106a:	b251      	sxtb	r1, r2
 800106c:	b242      	sxtb	r2, r0
 800106e:	400a      	ands	r2, r1
 8001070:	b252      	sxtb	r2, r2
 8001072:	b2d1      	uxtb	r1, r2
 8001074:	4a09      	ldr	r2, [pc, #36]	; (800109c <main+0x14c>)
 8001076:	54d1      	strb	r1, [r2, r3]
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
			computeFFT = 0;
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <main+0x138>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
		if (computeFFT != 0) {
 800107e:	e77f      	b.n	8000f80 <main+0x30>
 8001080:	20001914 	.word	0x20001914
 8001084:	20001ac0 	.word	0x20001ac0
 8001088:	200014fc 	.word	0x200014fc
 800108c:	200011fc 	.word	0x200011fc
 8001090:	20001810 	.word	0x20001810
 8001094:	20001a3c 	.word	0x20001a3c
 8001098:	200014fe 	.word	0x200014fe
 800109c:	2000195c 	.word	0x2000195c

080010a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b094      	sub	sp, #80	; 0x50
 80010a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010a6:	f107 0320 	add.w	r3, r7, #32
 80010aa:	2230      	movs	r2, #48	; 0x30
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f004 f98c 	bl	80053cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	4b29      	ldr	r3, [pc, #164]	; (8001170 <SystemClock_Config+0xd0>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	4a28      	ldr	r2, [pc, #160]	; (8001170 <SystemClock_Config+0xd0>)
 80010ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d2:	6413      	str	r3, [r2, #64]	; 0x40
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <SystemClock_Config+0xd0>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	4b23      	ldr	r3, [pc, #140]	; (8001174 <SystemClock_Config+0xd4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010ec:	4a21      	ldr	r2, [pc, #132]	; (8001174 <SystemClock_Config+0xd4>)
 80010ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <SystemClock_Config+0xd4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001100:	2302      	movs	r3, #2
 8001102:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001104:	2301      	movs	r3, #1
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001108:	2310      	movs	r3, #16
 800110a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110c:	2302      	movs	r3, #2
 800110e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001110:	2300      	movs	r3, #0
 8001112:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 10;
 8001114:	230a      	movs	r3, #10
 8001116:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8001118:	2354      	movs	r3, #84	; 0x54
 800111a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800111c:	2302      	movs	r3, #2
 800111e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001120:	2304      	movs	r3, #4
 8001122:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001124:	f107 0320 	add.w	r3, r7, #32
 8001128:	4618      	mov	r0, r3
 800112a:	f001 fd29 	bl	8002b80 <HAL_RCC_OscConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0x98>
		Error_Handler();
 8001134:	f000 fb7e 	bl	8001834 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001138:	230f      	movs	r3, #15
 800113a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113c:	2302      	movs	r3, #2
 800113e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001148:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800114a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800114e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2102      	movs	r1, #2
 8001156:	4618      	mov	r0, r3
 8001158:	f001 ff8a 	bl	8003070 <HAL_RCC_ClockConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0xc6>
		Error_Handler();
 8001162:	f000 fb67 	bl	8001834 <Error_Handler>
	}
}
 8001166:	bf00      	nop
 8001168:	3750      	adds	r7, #80	; 0x50
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40007000 	.word	0x40007000

08001178 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800117e:	463b      	mov	r3, r7
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <MX_ADC1_Init+0x98>)
 800118c:	4a21      	ldr	r2, [pc, #132]	; (8001214 <MX_ADC1_Init+0x9c>)
 800118e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001190:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <MX_ADC1_Init+0x98>)
 8001192:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001196:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <MX_ADC1_Init+0x98>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <MX_ADC1_Init+0x98>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <MX_ADC1_Init+0x98>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <MX_ADC1_Init+0x98>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_ADC1_Init+0x98>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_ADC1_Init+0x98>)
 80011ba:	4a17      	ldr	r2, [pc, #92]	; (8001218 <MX_ADC1_Init+0xa0>)
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_ADC1_Init+0x98>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_ADC1_Init+0x98>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_ADC1_Init+0x98>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_ADC1_Init+0x98>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <MX_ADC1_Init+0x98>)
 80011da:	f000 fd95 	bl	8001d08 <HAL_ADC_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC1_Init+0x70>
		Error_Handler();
 80011e4:	f000 fb26 	bl	8001834 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80011ec:	2301      	movs	r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80011f0:	2307      	movs	r3, #7
 80011f2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80011f4:	463b      	mov	r3, r7
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_ADC1_Init+0x98>)
 80011fa:	f000 ffe9 	bl	80021d0 <HAL_ADC_ConfigChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ADC1_Init+0x90>
		Error_Handler();
 8001204:	f000 fb16 	bl	8001834 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20001914 	.word	0x20001914
 8001214:	40012000 	.word	0x40012000
 8001218:	0f000001 	.word	0x0f000001

0800121c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <MX_USART1_UART_Init+0x50>)
 8001224:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 8001228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800122c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_USART1_UART_Init+0x4c>)
 8001254:	f002 f8dc 	bl	8003410 <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800125e:	f000 fae9 	bl	8001834 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20001978 	.word	0x20001978
 800126c:	40011000 	.word	0x40011000

08001270 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	4b23      	ldr	r3, [pc, #140]	; (8001318 <MX_GPIO_Init+0xa8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a22      	ldr	r2, [pc, #136]	; (8001318 <MX_GPIO_Init+0xa8>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <MX_GPIO_Init+0xa8>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <MX_GPIO_Init+0xa8>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a1b      	ldr	r2, [pc, #108]	; (8001318 <MX_GPIO_Init+0xa8>)
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <MX_GPIO_Init+0xa8>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	2120      	movs	r1, #32
 80012c2:	4816      	ldr	r0, [pc, #88]	; (800131c <MX_GPIO_Init+0xac>)
 80012c4:	f001 fc42 	bl	8002b4c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ce:	4814      	ldr	r0, [pc, #80]	; (8001320 <MX_GPIO_Init+0xb0>)
 80012d0:	f001 fc3c 	bl	8002b4c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012d4:	2320      	movs	r3, #32
 80012d6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	4619      	mov	r1, r3
 80012ea:	480c      	ldr	r0, [pc, #48]	; (800131c <MX_GPIO_Init+0xac>)
 80012ec:	f001 faaa 	bl	8002844 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_GPIO_Init+0xb0>)
 800130a:	f001 fa9b 	bl	8002844 <HAL_GPIO_Init>

}
 800130e:	bf00      	nop
 8001310:	3720      	adds	r7, #32
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40020000 	.word	0x40020000
 8001320:	40020800 	.word	0x40020800
 8001324:	00000000 	.word	0x00000000

08001328 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af02      	add	r7, sp, #8
 800132e:	6078      	str	r0, [r7, #4]
	//if receiving samples for data
	if (receivingData) {
 8001330:	4b8f      	ldr	r3, [pc, #572]	; (8001570 <HAL_ADC_ConvCpltCallback+0x248>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d042      	beq.n	80013c0 <HAL_ADC_ConvCpltCallback+0x98>
		valueBuffer[valueBufferIndex] = HAL_ADC_GetValue(&hadc1);
 800133a:	488e      	ldr	r0, [pc, #568]	; (8001574 <HAL_ADC_ConvCpltCallback+0x24c>)
 800133c:	f000 ff27 	bl	800218e <HAL_ADC_GetValue>
 8001340:	ee07 0a90 	vmov	s15, r0
 8001344:	4b8c      	ldr	r3, [pc, #560]	; (8001578 <HAL_ADC_ConvCpltCallback+0x250>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	b29b      	uxth	r3, r3
 800134a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800134e:	4a8b      	ldr	r2, [pc, #556]	; (800157c <HAL_ADC_ConvCpltCallback+0x254>)
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	edc3 7a00 	vstr	s15, [r3]
		valueBufferIndex = (valueBufferIndex + 1) % FFT_BUFFER_LENGTH;
 8001358:	4b87      	ldr	r3, [pc, #540]	; (8001578 <HAL_ADC_ConvCpltCallback+0x250>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	b29b      	uxth	r3, r3
 800135e:	3301      	adds	r3, #1
 8001360:	425a      	negs	r2, r3
 8001362:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001366:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800136a:	bf58      	it	pl
 800136c:	4253      	negpl	r3, r2
 800136e:	b29a      	uxth	r2, r3
 8001370:	4b81      	ldr	r3, [pc, #516]	; (8001578 <HAL_ADC_ConvCpltCallback+0x250>)
 8001372:	801a      	strh	r2, [r3, #0]
		//TODO: this check shouldn't be required, since fft computation should be much faster than ADC ...
		if (computeFFT == 0) {
 8001374:	4b82      	ldr	r3, [pc, #520]	; (8001580 <HAL_ADC_ConvCpltCallback+0x258>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d116      	bne.n	80013ac <HAL_ADC_ConvCpltCallback+0x84>
			if (valueBufferIndex % FFT_LENGTH == 0) {
 800137e:	4b7e      	ldr	r3, [pc, #504]	; (8001578 <HAL_ADC_ConvCpltCallback+0x250>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	b29b      	uxth	r3, r3
 8001384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001388:	b29b      	uxth	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10e      	bne.n	80013ac <HAL_ADC_ConvCpltCallback+0x84>
				computeFFTLastIndex = valueBufferIndex;
 800138e:	4b7a      	ldr	r3, [pc, #488]	; (8001578 <HAL_ADC_ConvCpltCallback+0x250>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	b29a      	uxth	r2, r3
 8001394:	4b7b      	ldr	r3, [pc, #492]	; (8001584 <HAL_ADC_ConvCpltCallback+0x25c>)
 8001396:	801a      	strh	r2, [r3, #0]
				computeFFT = 1;
 8001398:	4b79      	ldr	r3, [pc, #484]	; (8001580 <HAL_ADC_ConvCpltCallback+0x258>)
 800139a:	2201      	movs	r2, #1
 800139c:	701a      	strb	r2, [r3, #0]
				receivedBitSize++;
 800139e:	4b7a      	ldr	r3, [pc, #488]	; (8001588 <HAL_ADC_ConvCpltCallback+0x260>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	3301      	adds	r3, #1
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	4b77      	ldr	r3, [pc, #476]	; (8001588 <HAL_ADC_ConvCpltCallback+0x260>)
 80013aa:	801a      	strh	r2, [r3, #0]
			}
		}
		if (receivedBitSize == FSK_MESSAGE_BIT_SIZE)
 80013ac:	4b76      	ldr	r3, [pc, #472]	; (8001588 <HAL_ADC_ConvCpltCallback+0x260>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	2b20      	cmp	r3, #32
 80013b4:	f040 80d1 	bne.w	800155a <HAL_ADC_ConvCpltCallback+0x232>
			receivingData = 0;
 80013b8:	4b6d      	ldr	r3, [pc, #436]	; (8001570 <HAL_ADC_ConvCpltCallback+0x248>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
 80013be:	e0cc      	b.n	800155a <HAL_ADC_ConvCpltCallback+0x232>

	} else {
		//trying to receive chirp
		receivedChirpOffset = 0.0;
 80013c0:	4b72      	ldr	r3, [pc, #456]	; (800158c <HAL_ADC_ConvCpltCallback+0x264>)
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
		//inserting new ADC value in last (chirp length) buffer position
		//after sliding previous values
		for (int i = 0; i < CHIRP_LENGTH - 1; i++) {
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	e01b      	b.n	8001406 <HAL_ADC_ConvCpltCallback+0xde>
			receivedChirpBuffer[i] = receivedChirpBuffer[i + 1];
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	3301      	adds	r3, #1
 80013d2:	4a6f      	ldr	r2, [pc, #444]	; (8001590 <HAL_ADC_ConvCpltCallback+0x268>)
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	496d      	ldr	r1, [pc, #436]	; (8001590 <HAL_ADC_ConvCpltCallback+0x268>)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	601a      	str	r2, [r3, #0]
			receivedChirpOffset += receivedChirpBuffer[i];
 80013e4:	4a6a      	ldr	r2, [pc, #424]	; (8001590 <HAL_ADC_ConvCpltCallback+0x268>)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	ed93 7a00 	vldr	s14, [r3]
 80013f0:	4b66      	ldr	r3, [pc, #408]	; (800158c <HAL_ADC_ConvCpltCallback+0x264>)
 80013f2:	edd3 7a00 	vldr	s15, [r3]
 80013f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fa:	4b64      	ldr	r3, [pc, #400]	; (800158c <HAL_ADC_ConvCpltCallback+0x264>)
 80013fc:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < CHIRP_LENGTH - 1; i++) {
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2b3e      	cmp	r3, #62	; 0x3e
 800140a:	dde0      	ble.n	80013ce <HAL_ADC_ConvCpltCallback+0xa6>
		}
		receivedChirpBuffer[CHIRP_LENGTH - 1] = HAL_ADC_GetValue(&hadc1);
 800140c:	4859      	ldr	r0, [pc, #356]	; (8001574 <HAL_ADC_ConvCpltCallback+0x24c>)
 800140e:	f000 febe 	bl	800218e <HAL_ADC_GetValue>
 8001412:	ee07 0a90 	vmov	s15, r0
 8001416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800141a:	4b5d      	ldr	r3, [pc, #372]	; (8001590 <HAL_ADC_ConvCpltCallback+0x268>)
 800141c:	edc3 7a3f 	vstr	s15, [r3, #252]	; 0xfc
		receivedChirpOffset += receivedChirpBuffer[CHIRP_LENGTH - 1];
 8001420:	4b5b      	ldr	r3, [pc, #364]	; (8001590 <HAL_ADC_ConvCpltCallback+0x268>)
 8001422:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 8001426:	4b59      	ldr	r3, [pc, #356]	; (800158c <HAL_ADC_ConvCpltCallback+0x264>)
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001430:	4b56      	ldr	r3, [pc, #344]	; (800158c <HAL_ADC_ConvCpltCallback+0x264>)
 8001432:	edc3 7a00 	vstr	s15, [r3]
		receivedChirpOffset = receivedChirpOffset / CHIRP_LENGTH;
 8001436:	4b55      	ldr	r3, [pc, #340]	; (800158c <HAL_ADC_ConvCpltCallback+0x264>)
 8001438:	ed93 7a00 	vldr	s14, [r3]
 800143c:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001594 <HAL_ADC_ConvCpltCallback+0x26c>
 8001440:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001444:	4b51      	ldr	r3, [pc, #324]	; (800158c <HAL_ADC_ConvCpltCallback+0x264>)
 8001446:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < CHIRP_LENGTH; i++) {
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	e009      	b.n	8001464 <HAL_ADC_ConvCpltCallback+0x13c>
			chirpOffsetValue[i] = receivedChirpOffset;
 8001450:	4b4e      	ldr	r3, [pc, #312]	; (800158c <HAL_ADC_ConvCpltCallback+0x264>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4950      	ldr	r1, [pc, #320]	; (8001598 <HAL_ADC_ConvCpltCallback+0x270>)
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	440b      	add	r3, r1
 800145c:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < CHIRP_LENGTH; i++) {
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	3301      	adds	r3, #1
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	2b3f      	cmp	r3, #63	; 0x3f
 8001468:	ddf2      	ble.n	8001450 <HAL_ADC_ConvCpltCallback+0x128>
		}
		memcpy(receivedTempChirpBuffer, receivedChirpBuffer, CHIRP_LENGTH);
 800146a:	2240      	movs	r2, #64	; 0x40
 800146c:	4948      	ldr	r1, [pc, #288]	; (8001590 <HAL_ADC_ConvCpltCallback+0x268>)
 800146e:	484b      	ldr	r0, [pc, #300]	; (800159c <HAL_ADC_ConvCpltCallback+0x274>)
 8001470:	f003 ff9e 	bl	80053b0 <memcpy>
		//remove offset
		arm_sub_f32(receivedTempChirpBuffer, chirpOffsetValue,
 8001474:	2340      	movs	r3, #64	; 0x40
 8001476:	4a49      	ldr	r2, [pc, #292]	; (800159c <HAL_ADC_ConvCpltCallback+0x274>)
 8001478:	4947      	ldr	r1, [pc, #284]	; (8001598 <HAL_ADC_ConvCpltCallback+0x270>)
 800147a:	4848      	ldr	r0, [pc, #288]	; (800159c <HAL_ADC_ConvCpltCallback+0x274>)
 800147c:	f003 fb42 	bl	8004b04 <arm_sub_f32>
				receivedTempChirpBuffer, CHIRP_LENGTH);
		//normalize and correlate
		receivedChirpNorm = 0.0;
 8001480:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <HAL_ADC_ConvCpltCallback+0x278>)
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < CHIRP_LENGTH; i++) {
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	e018      	b.n	80014c0 <HAL_ADC_ConvCpltCallback+0x198>
			receivedChirpNorm = receivedChirpNorm
					+ receivedTempChirpBuffer[i] * receivedTempChirpBuffer[i];
 800148e:	4a43      	ldr	r2, [pc, #268]	; (800159c <HAL_ADC_ConvCpltCallback+0x274>)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	ed93 7a00 	vldr	s14, [r3]
 800149a:	4a40      	ldr	r2, [pc, #256]	; (800159c <HAL_ADC_ConvCpltCallback+0x274>)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014aa:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <HAL_ADC_ConvCpltCallback+0x278>)
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	ee77 7a27 	vadd.f32	s15, s14, s15
			receivedChirpNorm = receivedChirpNorm
 80014b4:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <HAL_ADC_ConvCpltCallback+0x278>)
 80014b6:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < CHIRP_LENGTH; i++) {
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	3301      	adds	r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b3f      	cmp	r3, #63	; 0x3f
 80014c4:	dde3      	ble.n	800148e <HAL_ADC_ConvCpltCallback+0x166>
		}
		receivedChirpNorm = sqrt(receivedChirpNorm);
 80014c6:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <HAL_ADC_ConvCpltCallback+0x278>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f844 	bl	8000558 <__aeabi_f2d>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	ec43 2b10 	vmov	d0, r2, r3
 80014d8:	f003 fe2e 	bl	8005138 <sqrt>
 80014dc:	ec53 2b10 	vmov	r2, r3, d0
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	f7ff fb68 	bl	8000bb8 <__aeabi_d2f>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4a2d      	ldr	r2, [pc, #180]	; (80015a0 <HAL_ADC_ConvCpltCallback+0x278>)
 80014ec:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < CHIRP_LENGTH; i++) {
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	e013      	b.n	800151c <HAL_ADC_ConvCpltCallback+0x1f4>
			receivedTempChirpBuffer[i] = receivedTempChirpBuffer[i]
 80014f4:	4a29      	ldr	r2, [pc, #164]	; (800159c <HAL_ADC_ConvCpltCallback+0x274>)
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	edd3 6a00 	vldr	s13, [r3]
					/ receivedChirpNorm;
 8001500:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <HAL_ADC_ConvCpltCallback+0x278>)
 8001502:	ed93 7a00 	vldr	s14, [r3]
 8001506:	eec6 7a87 	vdiv.f32	s15, s13, s14
			receivedTempChirpBuffer[i] = receivedTempChirpBuffer[i]
 800150a:	4a24      	ldr	r2, [pc, #144]	; (800159c <HAL_ADC_ConvCpltCallback+0x274>)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < CHIRP_LENGTH; i++) {
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	3301      	adds	r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	2b3f      	cmp	r3, #63	; 0x3f
 8001520:	dde8      	ble.n	80014f4 <HAL_ADC_ConvCpltCallback+0x1cc>
		}
		//detect chirp by correlation
		arm_correlate_f32(receivedTempChirpBuffer, CHIRP_LENGTH, chirpBuffer,
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <HAL_ADC_ConvCpltCallback+0x27c>)
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2340      	movs	r3, #64	; 0x40
 8001528:	4a1f      	ldr	r2, [pc, #124]	; (80015a8 <HAL_ADC_ConvCpltCallback+0x280>)
 800152a:	2140      	movs	r1, #64	; 0x40
 800152c:	481b      	ldr	r0, [pc, #108]	; (800159c <HAL_ADC_ConvCpltCallback+0x274>)
 800152e:	f002 ff0f 	bl	8004350 <arm_correlate_f32>
		CHIRP_LENGTH, chirpCorrelation);
		//TODO: evaluate correlation threshold!
		if (chirpCorrelation[CHIRP_LENGTH - 1] > CORRELATION_THRESHOLD) {
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <HAL_ADC_ConvCpltCallback+0x27c>)
 8001534:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f80d 	bl	8000558 <__aeabi_f2d>
 800153e:	a30a      	add	r3, pc, #40	; (adr r3, 8001568 <HAL_ADC_ConvCpltCallback+0x240>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f7ff faf0 	bl	8000b28 <__aeabi_dcmpgt>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d005      	beq.n	800155a <HAL_ADC_ConvCpltCallback+0x232>
			receivedBitSize = 0;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_ADC_ConvCpltCallback+0x260>)
 8001550:	2200      	movs	r2, #0
 8001552:	801a      	strh	r2, [r3, #0]
			receivingData = 1;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_ADC_ConvCpltCallback+0x248>)
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
		}

	}
	/*If continuousconversion mode is DISABLED uncomment below*/
	HAL_ADC_Start_IT(&hadc1);
 800155a:	4806      	ldr	r0, [pc, #24]	; (8001574 <HAL_ADC_ConvCpltCallback+0x24c>)
 800155c:	f000 fc18 	bl	8001d90 <HAL_ADC_Start_IT>
}
 8001560:	bf00      	nop
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	cccccccd 	.word	0xcccccccd
 800156c:	3feccccc 	.word	0x3feccccc
 8001570:	200014fd 	.word	0x200014fd
 8001574:	20001914 	.word	0x20001914
 8001578:	200011f8 	.word	0x200011f8
 800157c:	200001f8 	.word	0x200001f8
 8001580:	200014fc 	.word	0x200014fc
 8001584:	20001500 	.word	0x20001500
 8001588:	200014fe 	.word	0x200014fe
 800158c:	2000170c 	.word	0x2000170c
 8001590:	200012fc 	.word	0x200012fc
 8001594:	42800000 	.word	0x42800000
 8001598:	20001710 	.word	0x20001710
 800159c:	200013fc 	.word	0x200013fc
 80015a0:	20001910 	.word	0x20001910
 80015a4:	20001510 	.word	0x20001510
 80015a8:	08007d78 	.word	0x08007d78
 80015ac:	00000000 	.word	0x00000000

080015b0 <convertLastADCValueBatch>:

static void convertLastADCValueBatch() {
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
	if (computeFFTLastIndex < FFT_LENGTH) {
 80015b6:	4b9a      	ldr	r3, [pc, #616]	; (8001820 <convertLastADCValueBatch+0x270>)
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	2b3f      	cmp	r3, #63	; 0x3f
 80015be:	f200 80b0 	bhi.w	8001722 <convertLastADCValueBatch+0x172>
		for (int i = computeFFTLastIndex - FFT_LENGTH + FFT_BUFFER_LENGTH,
 80015c2:	4b97      	ldr	r3, [pc, #604]	; (8001820 <convertLastADCValueBatch+0x270>)
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 80015cc:	617b      	str	r3, [r7, #20]
				j = 0; i < FFT_BUFFER_LENGTH; i++, j++) {
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
		for (int i = computeFFTLastIndex - FFT_LENGTH + FFT_BUFFER_LENGTH,
 80015d2:	e048      	b.n	8001666 <convertLastADCValueBatch+0xb6>
			//ADC value mapping
			valueBuffer[i] *= (3300.0 / 4500.0);
 80015d4:	4a93      	ldr	r2, [pc, #588]	; (8001824 <convertLastADCValueBatch+0x274>)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ffba 	bl	8000558 <__aeabi_f2d>
 80015e4:	a38c      	add	r3, pc, #560	; (adr r3, 8001818 <convertLastADCValueBatch+0x268>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	f7ff f80d 	bl	8000608 <__aeabi_dmul>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	f7ff fadf 	bl	8000bb8 <__aeabi_d2f>
 80015fa:	4602      	mov	r2, r0
 80015fc:	4989      	ldr	r1, [pc, #548]	; (8001824 <convertLastADCValueBatch+0x274>)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	440b      	add	r3, r1
 8001604:	601a      	str	r2, [r3, #0]
			//sensor conversion
			valueBuffer[i] = valueBuffer[i] - 1680;
 8001606:	4a87      	ldr	r2, [pc, #540]	; (8001824 <convertLastADCValueBatch+0x274>)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	edd3 7a00 	vldr	s15, [r3]
 8001612:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8001828 <convertLastADCValueBatch+0x278>
 8001616:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800161a:	4a82      	ldr	r2, [pc, #520]	; (8001824 <convertLastADCValueBatch+0x274>)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	edc3 7a00 	vstr	s15, [r3]
			valueBuffer[i] = valueBuffer[i] / (4 * 12.2 * 100);
 8001626:	4a7f      	ldr	r2, [pc, #508]	; (8001824 <convertLastADCValueBatch+0x274>)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	ed93 7a00 	vldr	s14, [r3]
 8001632:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800182c <convertLastADCValueBatch+0x27c>
 8001636:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163a:	4a7a      	ldr	r2, [pc, #488]	; (8001824 <convertLastADCValueBatch+0x274>)
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	edc3 7a00 	vstr	s15, [r3]
			tempValueBuffer[j] = valueBuffer[i];
 8001646:	4a77      	ldr	r2, [pc, #476]	; (8001824 <convertLastADCValueBatch+0x274>)
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4977      	ldr	r1, [pc, #476]	; (8001830 <convertLastADCValueBatch+0x280>)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	440b      	add	r3, r1
 8001658:	601a      	str	r2, [r3, #0]
				j = 0; i < FFT_BUFFER_LENGTH; i++, j++) {
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3301      	adds	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	3301      	adds	r3, #1
 8001664:	613b      	str	r3, [r7, #16]
		for (int i = computeFFTLastIndex - FFT_LENGTH + FFT_BUFFER_LENGTH,
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800166c:	dbb2      	blt.n	80015d4 <convertLastADCValueBatch+0x24>
		}

		for (int i = 0, j = FFT_LENGTH - computeFFTLastIndex;
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b6b      	ldr	r3, [pc, #428]	; (8001820 <convertLastADCValueBatch+0x270>)
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	b29b      	uxth	r3, r3
 8001678:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	e048      	b.n	8001712 <convertLastADCValueBatch+0x162>
				i < computeFFTLastIndex; i++, j++) {
			valueBuffer[i] *= (3300.0 / 4500.0);
 8001680:	4a68      	ldr	r2, [pc, #416]	; (8001824 <convertLastADCValueBatch+0x274>)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe ff64 	bl	8000558 <__aeabi_f2d>
 8001690:	a361      	add	r3, pc, #388	; (adr r3, 8001818 <convertLastADCValueBatch+0x268>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f7fe ffb7 	bl	8000608 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f7ff fa89 	bl	8000bb8 <__aeabi_d2f>
 80016a6:	4602      	mov	r2, r0
 80016a8:	495e      	ldr	r1, [pc, #376]	; (8001824 <convertLastADCValueBatch+0x274>)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	601a      	str	r2, [r3, #0]
			//sensor conversion
			valueBuffer[i] = valueBuffer[i] - 1680;
 80016b2:	4a5c      	ldr	r2, [pc, #368]	; (8001824 <convertLastADCValueBatch+0x274>)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001828 <convertLastADCValueBatch+0x278>
 80016c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016c6:	4a57      	ldr	r2, [pc, #348]	; (8001824 <convertLastADCValueBatch+0x274>)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	edc3 7a00 	vstr	s15, [r3]
			valueBuffer[i] = valueBuffer[i] / (4 * 12.2 * 100);
 80016d2:	4a54      	ldr	r2, [pc, #336]	; (8001824 <convertLastADCValueBatch+0x274>)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	ed93 7a00 	vldr	s14, [r3]
 80016de:	eddf 6a53 	vldr	s13, [pc, #332]	; 800182c <convertLastADCValueBatch+0x27c>
 80016e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016e6:	4a4f      	ldr	r2, [pc, #316]	; (8001824 <convertLastADCValueBatch+0x274>)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	edc3 7a00 	vstr	s15, [r3]
			tempValueBuffer[j] = valueBuffer[i];
 80016f2:	4a4c      	ldr	r2, [pc, #304]	; (8001824 <convertLastADCValueBatch+0x274>)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	494c      	ldr	r1, [pc, #304]	; (8001830 <convertLastADCValueBatch+0x280>)
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	440b      	add	r3, r1
 8001704:	601a      	str	r2, [r3, #0]
				i < computeFFTLastIndex; i++, j++) {
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3301      	adds	r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	3301      	adds	r3, #1
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	4b43      	ldr	r3, [pc, #268]	; (8001820 <convertLastADCValueBatch+0x270>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	b29b      	uxth	r3, r3
 8001718:	461a      	mov	r2, r3
		for (int i = 0, j = FFT_LENGTH - computeFFTLastIndex;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4293      	cmp	r3, r2
 800171e:	dbaf      	blt.n	8001680 <convertLastADCValueBatch+0xd0>

			tempValueBuffer[i] = valueBuffer[i + computeFFTLastIndex
					- FFT_LENGTH];
		}
	}
}
 8001720:	e073      	b.n	800180a <convertLastADCValueBatch+0x25a>
		for (int i = 0; i < FFT_LENGTH; i++) {
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	e06d      	b.n	8001804 <convertLastADCValueBatch+0x254>
			valueBuffer[i + computeFFTLastIndex - FFT_LENGTH] *= (3300.0
 8001728:	4b3d      	ldr	r3, [pc, #244]	; (8001820 <convertLastADCValueBatch+0x270>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	b29c      	uxth	r4, r3
 800172e:	4622      	mov	r2, r4
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4413      	add	r3, r2
 8001734:	3b40      	subs	r3, #64	; 0x40
 8001736:	4a3b      	ldr	r2, [pc, #236]	; (8001824 <convertLastADCValueBatch+0x274>)
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe ff0a 	bl	8000558 <__aeabi_f2d>
 8001744:	a334      	add	r3, pc, #208	; (adr r3, 8001818 <convertLastADCValueBatch+0x268>)
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	f7fe ff5d 	bl	8000608 <__aeabi_dmul>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	4622      	mov	r2, r4
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4413      	add	r3, r2
 800175c:	f1a3 0440 	sub.w	r4, r3, #64	; 0x40
 8001760:	f7ff fa2a 	bl	8000bb8 <__aeabi_d2f>
 8001764:	4602      	mov	r2, r0
 8001766:	492f      	ldr	r1, [pc, #188]	; (8001824 <convertLastADCValueBatch+0x274>)
 8001768:	00a3      	lsls	r3, r4, #2
 800176a:	440b      	add	r3, r1
 800176c:	601a      	str	r2, [r3, #0]
					+ computeFFTLastIndex - FFT_LENGTH] - 1680;
 800176e:	4b2c      	ldr	r3, [pc, #176]	; (8001820 <convertLastADCValueBatch+0x270>)
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	b29b      	uxth	r3, r3
 8001774:	461a      	mov	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	3b40      	subs	r3, #64	; 0x40
			valueBuffer[i + computeFFTLastIndex - FFT_LENGTH] = valueBuffer[i
 800177c:	4a29      	ldr	r2, [pc, #164]	; (8001824 <convertLastADCValueBatch+0x274>)
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	edd3 7a00 	vldr	s15, [r3]
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <convertLastADCValueBatch+0x270>)
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	b29b      	uxth	r3, r3
 800178c:	461a      	mov	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	3b40      	subs	r3, #64	; 0x40
					+ computeFFTLastIndex - FFT_LENGTH] - 1680;
 8001794:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001828 <convertLastADCValueBatch+0x278>
 8001798:	ee77 7ac7 	vsub.f32	s15, s15, s14
			valueBuffer[i + computeFFTLastIndex - FFT_LENGTH] = valueBuffer[i
 800179c:	4a21      	ldr	r2, [pc, #132]	; (8001824 <convertLastADCValueBatch+0x274>)
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	edc3 7a00 	vstr	s15, [r3]
					+ computeFFTLastIndex - FFT_LENGTH] / (4 * 12.2 * 100);
 80017a6:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <convertLastADCValueBatch+0x270>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	3b40      	subs	r3, #64	; 0x40
			valueBuffer[i + computeFFTLastIndex - FFT_LENGTH] = valueBuffer[i
 80017b4:	4a1b      	ldr	r2, [pc, #108]	; (8001824 <convertLastADCValueBatch+0x274>)
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	ed93 7a00 	vldr	s14, [r3]
 80017be:	4b18      	ldr	r3, [pc, #96]	; (8001820 <convertLastADCValueBatch+0x270>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	461a      	mov	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	3b40      	subs	r3, #64	; 0x40
 80017cc:	eddf 6a17 	vldr	s13, [pc, #92]	; 800182c <convertLastADCValueBatch+0x27c>
 80017d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017d4:	4a13      	ldr	r2, [pc, #76]	; (8001824 <convertLastADCValueBatch+0x274>)
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	edc3 7a00 	vstr	s15, [r3]
			tempValueBuffer[i] = valueBuffer[i + computeFFTLastIndex
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <convertLastADCValueBatch+0x270>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	461a      	mov	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
					- FFT_LENGTH];
 80017ea:	3b40      	subs	r3, #64	; 0x40
			tempValueBuffer[i] = valueBuffer[i + computeFFTLastIndex
 80017ec:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <convertLastADCValueBatch+0x274>)
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	490e      	ldr	r1, [pc, #56]	; (8001830 <convertLastADCValueBatch+0x280>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < FFT_LENGTH; i++) {
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3301      	adds	r3, #1
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b3f      	cmp	r3, #63	; 0x3f
 8001808:	dd8e      	ble.n	8001728 <convertLastADCValueBatch+0x178>
}
 800180a:	bf00      	nop
 800180c:	371c      	adds	r7, #28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd90      	pop	{r4, r7, pc}
 8001812:	bf00      	nop
 8001814:	f3af 8000 	nop.w
 8001818:	77777777 	.word	0x77777777
 800181c:	3fe77777 	.word	0x3fe77777
 8001820:	20001500 	.word	0x20001500
 8001824:	200001f8 	.word	0x200001f8
 8001828:	44d20000 	.word	0x44d20000
 800182c:	45988000 	.word	0x45988000
 8001830:	20001810 	.word	0x20001810

08001834 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001838:	b672      	cpsid	i
}
 800183a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800183c:	e7fe      	b.n	800183c <Error_Handler+0x8>
	...

08001840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <HAL_MspInit+0x4c>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a0f      	ldr	r2, [pc, #60]	; (800188c <HAL_MspInit+0x4c>)
 8001850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
 8001856:	4b0d      	ldr	r3, [pc, #52]	; (800188c <HAL_MspInit+0x4c>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_MspInit+0x4c>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a08      	ldr	r2, [pc, #32]	; (800188c <HAL_MspInit+0x4c>)
 800186c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_MspInit+0x4c>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800

08001890 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a1b      	ldr	r2, [pc, #108]	; (800191c <HAL_ADC_MspInit+0x8c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d12f      	bne.n	8001912 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <HAL_ADC_MspInit+0x90>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	4a19      	ldr	r2, [pc, #100]	; (8001920 <HAL_ADC_MspInit+0x90>)
 80018bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c0:	6453      	str	r3, [r2, #68]	; 0x44
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <HAL_ADC_MspInit+0x90>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b13      	ldr	r3, [pc, #76]	; (8001920 <HAL_ADC_MspInit+0x90>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a12      	ldr	r2, [pc, #72]	; (8001920 <HAL_ADC_MspInit+0x90>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_ADC_MspInit+0x90>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018ea:	2302      	movs	r3, #2
 80018ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ee:	2303      	movs	r3, #3
 80018f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	4809      	ldr	r0, [pc, #36]	; (8001924 <HAL_ADC_MspInit+0x94>)
 80018fe:	f000 ffa1 	bl	8002844 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2101      	movs	r1, #1
 8001906:	2012      	movs	r0, #18
 8001908:	f000 ff65 	bl	80027d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800190c:	2012      	movs	r0, #18
 800190e:	f000 ff7e 	bl	800280e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001912:	bf00      	nop
 8001914:	3728      	adds	r7, #40	; 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40012000 	.word	0x40012000
 8001920:	40023800 	.word	0x40023800
 8001924:	40020000 	.word	0x40020000

08001928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a19      	ldr	r2, [pc, #100]	; (80019ac <HAL_UART_MspInit+0x84>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d12c      	bne.n	80019a4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <HAL_UART_MspInit+0x88>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	4a17      	ldr	r2, [pc, #92]	; (80019b0 <HAL_UART_MspInit+0x88>)
 8001954:	f043 0310 	orr.w	r3, r3, #16
 8001958:	6453      	str	r3, [r2, #68]	; 0x44
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_UART_MspInit+0x88>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <HAL_UART_MspInit+0x88>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a10      	ldr	r2, [pc, #64]	; (80019b0 <HAL_UART_MspInit+0x88>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <HAL_UART_MspInit+0x88>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001982:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001994:	2307      	movs	r3, #7
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <HAL_UART_MspInit+0x8c>)
 80019a0:	f000 ff50 	bl	8002844 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019a4:	bf00      	nop
 80019a6:	3728      	adds	r7, #40	; 0x28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40011000 	.word	0x40011000
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020000 	.word	0x40020000

080019b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <NMI_Handler+0x4>

080019be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <HardFault_Handler+0x4>

080019c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <MemManage_Handler+0x4>

080019ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ce:	e7fe      	b.n	80019ce <BusFault_Handler+0x4>

080019d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <UsageFault_Handler+0x4>

080019d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a04:	f000 f960 	bl	8001cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <ADC_IRQHandler+0x10>)
 8001a12:	f000 fa7b 	bl	8001f0c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20001914 	.word	0x20001914

08001a20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
	return 1;
 8001a24:	2301      	movs	r3, #1
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <_kill>:

int _kill(int pid, int sig)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a3a:	f003 fc8f 	bl	800535c <__errno>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2216      	movs	r2, #22
 8001a42:	601a      	str	r2, [r3, #0]
	return -1;
 8001a44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <_exit>:

void _exit (int status)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ffe7 	bl	8001a30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a62:	e7fe      	b.n	8001a62 <_exit+0x12>

08001a64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	e00a      	b.n	8001a8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a76:	f3af 8000 	nop.w
 8001a7a:	4601      	mov	r1, r0
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	60ba      	str	r2, [r7, #8]
 8001a82:	b2ca      	uxtb	r2, r1
 8001a84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbf0      	blt.n	8001a76 <_read+0x12>
	}

return len;
 8001a94:	687b      	ldr	r3, [r7, #4]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	e009      	b.n	8001ac4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	60ba      	str	r2, [r7, #8]
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	dbf1      	blt.n	8001ab0 <_write+0x12>
	}
	return len;
 8001acc:	687b      	ldr	r3, [r7, #4]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <_close>:

int _close(int file)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
	return -1;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001afe:	605a      	str	r2, [r3, #4]
	return 0;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <_isatty>:

int _isatty(int file)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
	return 1;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b48:	4a14      	ldr	r2, [pc, #80]	; (8001b9c <_sbrk+0x5c>)
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <_sbrk+0x60>)
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b54:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <_sbrk+0x64>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d102      	bne.n	8001b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <_sbrk+0x64>)
 8001b5e:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <_sbrk+0x68>)
 8001b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <_sbrk+0x64>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d207      	bcs.n	8001b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b70:	f003 fbf4 	bl	800535c <__errno>
 8001b74:	4603      	mov	r3, r0
 8001b76:	220c      	movs	r2, #12
 8001b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b7e:	e009      	b.n	8001b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <_sbrk+0x64>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b86:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <_sbrk+0x64>)
 8001b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b92:	68fb      	ldr	r3, [r7, #12]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20018000 	.word	0x20018000
 8001ba0:	00000400 	.word	0x00000400
 8001ba4:	20001504 	.word	0x20001504
 8001ba8:	20001bf0 	.word	0x20001bf0

08001bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <SystemInit+0x20>)
 8001bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb6:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <SystemInit+0x20>)
 8001bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bd4:	480d      	ldr	r0, [pc, #52]	; (8001c0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bd6:	490e      	ldr	r1, [pc, #56]	; (8001c10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bd8:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bdc:	e002      	b.n	8001be4 <LoopCopyDataInit>

08001bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be2:	3304      	adds	r3, #4

08001be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be8:	d3f9      	bcc.n	8001bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bea:	4a0b      	ldr	r2, [pc, #44]	; (8001c18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bec:	4c0b      	ldr	r4, [pc, #44]	; (8001c1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf0:	e001      	b.n	8001bf6 <LoopFillZerobss>

08001bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf4:	3204      	adds	r2, #4

08001bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf8:	d3fb      	bcc.n	8001bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bfa:	f7ff ffd7 	bl	8001bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bfe:	f003 fbb3 	bl	8005368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c02:	f7ff f9a5 	bl	8000f50 <main>
  bx  lr    
 8001c06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c10:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001c14:	0801b26c 	.word	0x0801b26c
  ldr r2, =_sbss
 8001c18:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001c1c:	20001bec 	.word	0x20001bec

08001c20 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c20:	e7fe      	b.n	8001c20 <DMA1_Stream0_IRQHandler>
	...

08001c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c28:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <HAL_Init+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <HAL_Init+0x40>)
 8001c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_Init+0x40>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <HAL_Init+0x40>)
 8001c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <HAL_Init+0x40>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a07      	ldr	r2, [pc, #28]	; (8001c64 <HAL_Init+0x40>)
 8001c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c4c:	2003      	movs	r0, #3
 8001c4e:	f000 fdb7 	bl	80027c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f000 f808 	bl	8001c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c58:	f7ff fdf2 	bl	8001840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023c00 	.word	0x40023c00

08001c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_InitTick+0x54>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_InitTick+0x58>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 fdcf 	bl	800282a <HAL_SYSTICK_Config>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00e      	b.n	8001cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b0f      	cmp	r3, #15
 8001c9a:	d80a      	bhi.n	8001cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ca4:	f000 fd97 	bl	80027d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca8:	4a06      	ldr	r2, [pc, #24]	; (8001cc4 <HAL_InitTick+0x5c>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e000      	b.n	8001cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	20000008 	.word	0x20000008
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_IncTick+0x20>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_IncTick+0x24>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <HAL_IncTick+0x24>)
 8001cda:	6013      	str	r3, [r2, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000008 	.word	0x20000008
 8001cec:	20001bd8 	.word	0x20001bd8

08001cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <HAL_GetTick+0x14>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20001bd8 	.word	0x20001bd8

08001d08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e033      	b.n	8001d86 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d109      	bne.n	8001d3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff fdb2 	bl	8001890 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d118      	bne.n	8001d78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d4e:	f023 0302 	bic.w	r3, r3, #2
 8001d52:	f043 0202 	orr.w	r2, r3, #2
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 fb5a 	bl	8002414 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f023 0303 	bic.w	r3, r3, #3
 8001d6e:	f043 0201 	orr.w	r2, r3, #1
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40
 8001d76:	e001      	b.n	8001d7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_ADC_Start_IT+0x1a>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e0a1      	b.n	8001eee <HAL_ADC_Start_IT+0x15e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d018      	beq.n	8001df2 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dd0:	4b4a      	ldr	r3, [pc, #296]	; (8001efc <HAL_ADC_Start_IT+0x16c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a4a      	ldr	r2, [pc, #296]	; (8001f00 <HAL_ADC_Start_IT+0x170>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	0c9a      	lsrs	r2, r3, #18
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001de4:	e002      	b.n	8001dec <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f9      	bne.n	8001de6 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d169      	bne.n	8001ed4 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e3e:	d106      	bne.n	8001e4e <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e44:	f023 0206 	bic.w	r2, r3, #6
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	645a      	str	r2, [r3, #68]	; 0x44
 8001e4c:	e002      	b.n	8001e54 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e5c:	4b29      	ldr	r3, [pc, #164]	; (8001f04 <HAL_ADC_Start_IT+0x174>)
 8001e5e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e68:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e78:	f043 0320 	orr.w	r3, r3, #32
 8001e7c:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 031f 	and.w	r3, r3, #31
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10f      	bne.n	8001eaa <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d129      	bne.n	8001eec <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	e020      	b.n	8001eec <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a16      	ldr	r2, [pc, #88]	; (8001f08 <HAL_ADC_Start_IT+0x178>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d11b      	bne.n	8001eec <HAL_ADC_Start_IT+0x15c>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d114      	bne.n	8001eec <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	e00b      	b.n	8001eec <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	f043 0210 	orr.w	r2, r3, #16
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee4:	f043 0201 	orr.w	r2, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000000 	.word	0x20000000
 8001f00:	431bde83 	.word	0x431bde83
 8001f04:	40012300 	.word	0x40012300
 8001f08:	40012000 	.word	0x40012000

08001f0c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	bf0c      	ite	eq
 8001f2a:	2301      	moveq	r3, #1
 8001f2c:	2300      	movne	r3, #0
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b20      	cmp	r3, #32
 8001f3e:	bf0c      	ite	eq
 8001f40:	2301      	moveq	r3, #1
 8001f42:	2300      	movne	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d049      	beq.n	8001fe2 <HAL_ADC_IRQHandler+0xd6>
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d046      	beq.n	8001fe2 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d105      	bne.n	8001f6c <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d12b      	bne.n	8001fd2 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d127      	bne.n	8001fd2 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d006      	beq.n	8001f9e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d119      	bne.n	8001fd2 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0220 	bic.w	r2, r2, #32
 8001fac:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d105      	bne.n	8001fd2 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f043 0201 	orr.w	r2, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff f9a8 	bl	8001328 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0212 	mvn.w	r2, #18
 8001fe0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	bf0c      	ite	eq
 8001ff0:	2301      	moveq	r3, #1
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002002:	2b80      	cmp	r3, #128	; 0x80
 8002004:	bf0c      	ite	eq
 8002006:	2301      	moveq	r3, #1
 8002008:	2300      	movne	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d057      	beq.n	80020c4 <HAL_ADC_IRQHandler+0x1b8>
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d054      	beq.n	80020c4 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b00      	cmp	r3, #0
 8002024:	d105      	bne.n	8002032 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d139      	bne.n	80020b4 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002046:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800204a:	2b00      	cmp	r3, #0
 800204c:	d006      	beq.n	800205c <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002058:	2b00      	cmp	r3, #0
 800205a:	d12b      	bne.n	80020b4 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002066:	2b00      	cmp	r3, #0
 8002068:	d124      	bne.n	80020b4 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002074:	2b00      	cmp	r3, #0
 8002076:	d11d      	bne.n	80020b4 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800207c:	2b00      	cmp	r3, #0
 800207e:	d119      	bne.n	80020b4 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800208e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d105      	bne.n	80020b4 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f043 0201 	orr.w	r2, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 faa9 	bl	800260c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f06f 020c 	mvn.w	r2, #12
 80020c2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	bf0c      	ite	eq
 80020d2:	2301      	moveq	r3, #1
 80020d4:	2300      	movne	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e4:	2b40      	cmp	r3, #64	; 0x40
 80020e6:	bf0c      	ite	eq
 80020e8:	2301      	moveq	r3, #1
 80020ea:	2300      	movne	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d017      	beq.n	8002126 <HAL_ADC_IRQHandler+0x21a>
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d014      	beq.n	8002126 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b01      	cmp	r3, #1
 8002108:	d10d      	bne.n	8002126 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f846 	bl	80021a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0201 	mvn.w	r2, #1
 8002124:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0320 	and.w	r3, r3, #32
 8002130:	2b20      	cmp	r3, #32
 8002132:	bf0c      	ite	eq
 8002134:	2301      	moveq	r3, #1
 8002136:	2300      	movne	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002146:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800214a:	bf0c      	ite	eq
 800214c:	2301      	moveq	r3, #1
 800214e:	2300      	movne	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d015      	beq.n	8002186 <HAL_ADC_IRQHandler+0x27a>
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d012      	beq.n	8002186 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002164:	f043 0202 	orr.w	r2, r3, #2
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0220 	mvn.w	r2, #32
 8002174:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f820 	bl	80021bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0220 	mvn.w	r2, #32
 8002184:	601a      	str	r2, [r3, #0]
  }
}
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x1c>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e105      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x228>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b09      	cmp	r3, #9
 80021fa:	d925      	bls.n	8002248 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68d9      	ldr	r1, [r3, #12]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	461a      	mov	r2, r3
 800220a:	4613      	mov	r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4413      	add	r3, r2
 8002210:	3b1e      	subs	r3, #30
 8002212:	2207      	movs	r2, #7
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43da      	mvns	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	400a      	ands	r2, r1
 8002220:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68d9      	ldr	r1, [r3, #12]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	b29b      	uxth	r3, r3
 8002232:	4618      	mov	r0, r3
 8002234:	4603      	mov	r3, r0
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4403      	add	r3, r0
 800223a:	3b1e      	subs	r3, #30
 800223c:	409a      	lsls	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	e022      	b.n	800228e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6919      	ldr	r1, [r3, #16]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	461a      	mov	r2, r3
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	2207      	movs	r2, #7
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43da      	mvns	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	400a      	ands	r2, r1
 800226a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6919      	ldr	r1, [r3, #16]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	4618      	mov	r0, r3
 800227e:	4603      	mov	r3, r0
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4403      	add	r3, r0
 8002284:	409a      	lsls	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b06      	cmp	r3, #6
 8002294:	d824      	bhi.n	80022e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	3b05      	subs	r3, #5
 80022a8:	221f      	movs	r2, #31
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43da      	mvns	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	400a      	ands	r2, r1
 80022b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	4618      	mov	r0, r3
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	3b05      	subs	r3, #5
 80022d2:	fa00 f203 	lsl.w	r2, r0, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	635a      	str	r2, [r3, #52]	; 0x34
 80022de:	e04c      	b.n	800237a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b0c      	cmp	r3, #12
 80022e6:	d824      	bhi.n	8002332 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	3b23      	subs	r3, #35	; 0x23
 80022fa:	221f      	movs	r2, #31
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43da      	mvns	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	400a      	ands	r2, r1
 8002308:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	b29b      	uxth	r3, r3
 8002316:	4618      	mov	r0, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	3b23      	subs	r3, #35	; 0x23
 8002324:	fa00 f203 	lsl.w	r2, r0, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
 8002330:	e023      	b.n	800237a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	3b41      	subs	r3, #65	; 0x41
 8002344:	221f      	movs	r2, #31
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43da      	mvns	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	400a      	ands	r2, r1
 8002352:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	4618      	mov	r0, r3
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	3b41      	subs	r3, #65	; 0x41
 800236e:	fa00 f203 	lsl.w	r2, r0, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800237a:	4b22      	ldr	r3, [pc, #136]	; (8002404 <HAL_ADC_ConfigChannel+0x234>)
 800237c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a21      	ldr	r2, [pc, #132]	; (8002408 <HAL_ADC_ConfigChannel+0x238>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d109      	bne.n	800239c <HAL_ADC_ConfigChannel+0x1cc>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b12      	cmp	r3, #18
 800238e:	d105      	bne.n	800239c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a19      	ldr	r2, [pc, #100]	; (8002408 <HAL_ADC_ConfigChannel+0x238>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d123      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x21e>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b10      	cmp	r3, #16
 80023ac:	d003      	beq.n	80023b6 <HAL_ADC_ConfigChannel+0x1e6>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b11      	cmp	r3, #17
 80023b4:	d11b      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b10      	cmp	r3, #16
 80023c8:	d111      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <HAL_ADC_ConfigChannel+0x23c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a10      	ldr	r2, [pc, #64]	; (8002410 <HAL_ADC_ConfigChannel+0x240>)
 80023d0:	fba2 2303 	umull	r2, r3, r2, r3
 80023d4:	0c9a      	lsrs	r2, r3, #18
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023e0:	e002      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f9      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	40012300 	.word	0x40012300
 8002408:	40012000 	.word	0x40012000
 800240c:	20000000 	.word	0x20000000
 8002410:	431bde83 	.word	0x431bde83

08002414 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800241c:	4b79      	ldr	r3, [pc, #484]	; (8002604 <ADC_Init+0x1f0>)
 800241e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	431a      	orrs	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002448:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6859      	ldr	r1, [r3, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	021a      	lsls	r2, r3, #8
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800246c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6859      	ldr	r1, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800248e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6899      	ldr	r1, [r3, #8]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	4a58      	ldr	r2, [pc, #352]	; (8002608 <ADC_Init+0x1f4>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d022      	beq.n	80024f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6899      	ldr	r1, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6899      	ldr	r1, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	e00f      	b.n	8002512 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002500:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002510:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0202 	bic.w	r2, r2, #2
 8002520:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6899      	ldr	r1, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	7e1b      	ldrb	r3, [r3, #24]
 800252c:	005a      	lsls	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3020 	ldrb.w	r3, [r3, #32]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d01b      	beq.n	8002578 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800254e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800255e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6859      	ldr	r1, [r3, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	3b01      	subs	r3, #1
 800256c:	035a      	lsls	r2, r3, #13
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	e007      	b.n	8002588 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002586:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002596:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	051a      	lsls	r2, r3, #20
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6899      	ldr	r1, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025ca:	025a      	lsls	r2, r3, #9
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6899      	ldr	r1, [r3, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	029a      	lsls	r2, r3, #10
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	609a      	str	r2, [r3, #8]
}
 80025f8:	bf00      	nop
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	40012300 	.word	0x40012300
 8002608:	0f000001 	.word	0x0f000001

0800260c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002630:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <__NVIC_SetPriorityGrouping+0x44>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800263c:	4013      	ands	r3, r2
 800263e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800264c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002652:	4a04      	ldr	r2, [pc, #16]	; (8002664 <__NVIC_SetPriorityGrouping+0x44>)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	60d3      	str	r3, [r2, #12]
}
 8002658:	bf00      	nop
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800266c:	4b04      	ldr	r3, [pc, #16]	; (8002680 <__NVIC_GetPriorityGrouping+0x18>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	0a1b      	lsrs	r3, r3, #8
 8002672:	f003 0307 	and.w	r3, r3, #7
}
 8002676:	4618      	mov	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	2b00      	cmp	r3, #0
 8002694:	db0b      	blt.n	80026ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	f003 021f 	and.w	r2, r3, #31
 800269c:	4907      	ldr	r1, [pc, #28]	; (80026bc <__NVIC_EnableIRQ+0x38>)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	2001      	movs	r0, #1
 80026a6:	fa00 f202 	lsl.w	r2, r0, r2
 80026aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	e000e100 	.word	0xe000e100

080026c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	6039      	str	r1, [r7, #0]
 80026ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	db0a      	blt.n	80026ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	490c      	ldr	r1, [pc, #48]	; (800270c <__NVIC_SetPriority+0x4c>)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	0112      	lsls	r2, r2, #4
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	440b      	add	r3, r1
 80026e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e8:	e00a      	b.n	8002700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	4908      	ldr	r1, [pc, #32]	; (8002710 <__NVIC_SetPriority+0x50>)
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	3b04      	subs	r3, #4
 80026f8:	0112      	lsls	r2, r2, #4
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	440b      	add	r3, r1
 80026fe:	761a      	strb	r2, [r3, #24]
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	e000e100 	.word	0xe000e100
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002714:	b480      	push	{r7}
 8002716:	b089      	sub	sp, #36	; 0x24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f1c3 0307 	rsb	r3, r3, #7
 800272e:	2b04      	cmp	r3, #4
 8002730:	bf28      	it	cs
 8002732:	2304      	movcs	r3, #4
 8002734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3304      	adds	r3, #4
 800273a:	2b06      	cmp	r3, #6
 800273c:	d902      	bls.n	8002744 <NVIC_EncodePriority+0x30>
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3b03      	subs	r3, #3
 8002742:	e000      	b.n	8002746 <NVIC_EncodePriority+0x32>
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43da      	mvns	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	401a      	ands	r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800275c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	fa01 f303 	lsl.w	r3, r1, r3
 8002766:	43d9      	mvns	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800276c:	4313      	orrs	r3, r2
         );
}
 800276e:	4618      	mov	r0, r3
 8002770:	3724      	adds	r7, #36	; 0x24
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3b01      	subs	r3, #1
 8002788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800278c:	d301      	bcc.n	8002792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800278e:	2301      	movs	r3, #1
 8002790:	e00f      	b.n	80027b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002792:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <SysTick_Config+0x40>)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3b01      	subs	r3, #1
 8002798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800279a:	210f      	movs	r1, #15
 800279c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027a0:	f7ff ff8e 	bl	80026c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <SysTick_Config+0x40>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027aa:	4b04      	ldr	r3, [pc, #16]	; (80027bc <SysTick_Config+0x40>)
 80027ac:	2207      	movs	r2, #7
 80027ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	e000e010 	.word	0xe000e010

080027c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff ff29 	bl	8002620 <__NVIC_SetPriorityGrouping>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b086      	sub	sp, #24
 80027da:	af00      	add	r7, sp, #0
 80027dc:	4603      	mov	r3, r0
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
 80027e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027e8:	f7ff ff3e 	bl	8002668 <__NVIC_GetPriorityGrouping>
 80027ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	68b9      	ldr	r1, [r7, #8]
 80027f2:	6978      	ldr	r0, [r7, #20]
 80027f4:	f7ff ff8e 	bl	8002714 <NVIC_EncodePriority>
 80027f8:	4602      	mov	r2, r0
 80027fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ff5d 	bl	80026c0 <__NVIC_SetPriority>
}
 8002806:	bf00      	nop
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	4603      	mov	r3, r0
 8002816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ff31 	bl	8002684 <__NVIC_EnableIRQ>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff ffa2 	bl	800277c <SysTick_Config>
 8002838:	4603      	mov	r3, r0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002844:	b480      	push	{r7}
 8002846:	b089      	sub	sp, #36	; 0x24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002856:	2300      	movs	r3, #0
 8002858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	e159      	b.n	8002b14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002860:	2201      	movs	r2, #1
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4013      	ands	r3, r2
 8002872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	429a      	cmp	r2, r3
 800287a:	f040 8148 	bne.w	8002b0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b01      	cmp	r3, #1
 8002888:	d005      	beq.n	8002896 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002892:	2b02      	cmp	r3, #2
 8002894:	d130      	bne.n	80028f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	2203      	movs	r2, #3
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028cc:	2201      	movs	r2, #1
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	091b      	lsrs	r3, r3, #4
 80028e2:	f003 0201 	and.w	r2, r3, #1
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	2b03      	cmp	r3, #3
 8002902:	d017      	beq.n	8002934 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	2203      	movs	r2, #3
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d123      	bne.n	8002988 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	08da      	lsrs	r2, r3, #3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3208      	adds	r2, #8
 8002948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800294c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	220f      	movs	r2, #15
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	08da      	lsrs	r2, r3, #3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3208      	adds	r2, #8
 8002982:	69b9      	ldr	r1, [r7, #24]
 8002984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	2203      	movs	r2, #3
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0203 	and.w	r2, r3, #3
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80a2 	beq.w	8002b0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	4b57      	ldr	r3, [pc, #348]	; (8002b2c <HAL_GPIO_Init+0x2e8>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	4a56      	ldr	r2, [pc, #344]	; (8002b2c <HAL_GPIO_Init+0x2e8>)
 80029d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029d8:	6453      	str	r3, [r2, #68]	; 0x44
 80029da:	4b54      	ldr	r3, [pc, #336]	; (8002b2c <HAL_GPIO_Init+0x2e8>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029e6:	4a52      	ldr	r2, [pc, #328]	; (8002b30 <HAL_GPIO_Init+0x2ec>)
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	089b      	lsrs	r3, r3, #2
 80029ec:	3302      	adds	r3, #2
 80029ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	220f      	movs	r2, #15
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a49      	ldr	r2, [pc, #292]	; (8002b34 <HAL_GPIO_Init+0x2f0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d019      	beq.n	8002a46 <HAL_GPIO_Init+0x202>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a48      	ldr	r2, [pc, #288]	; (8002b38 <HAL_GPIO_Init+0x2f4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d013      	beq.n	8002a42 <HAL_GPIO_Init+0x1fe>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a47      	ldr	r2, [pc, #284]	; (8002b3c <HAL_GPIO_Init+0x2f8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00d      	beq.n	8002a3e <HAL_GPIO_Init+0x1fa>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a46      	ldr	r2, [pc, #280]	; (8002b40 <HAL_GPIO_Init+0x2fc>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d007      	beq.n	8002a3a <HAL_GPIO_Init+0x1f6>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a45      	ldr	r2, [pc, #276]	; (8002b44 <HAL_GPIO_Init+0x300>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d101      	bne.n	8002a36 <HAL_GPIO_Init+0x1f2>
 8002a32:	2304      	movs	r3, #4
 8002a34:	e008      	b.n	8002a48 <HAL_GPIO_Init+0x204>
 8002a36:	2307      	movs	r3, #7
 8002a38:	e006      	b.n	8002a48 <HAL_GPIO_Init+0x204>
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e004      	b.n	8002a48 <HAL_GPIO_Init+0x204>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e002      	b.n	8002a48 <HAL_GPIO_Init+0x204>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_GPIO_Init+0x204>
 8002a46:	2300      	movs	r3, #0
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	f002 0203 	and.w	r2, r2, #3
 8002a4e:	0092      	lsls	r2, r2, #2
 8002a50:	4093      	lsls	r3, r2
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a58:	4935      	ldr	r1, [pc, #212]	; (8002b30 <HAL_GPIO_Init+0x2ec>)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	089b      	lsrs	r3, r3, #2
 8002a5e:	3302      	adds	r3, #2
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a66:	4b38      	ldr	r3, [pc, #224]	; (8002b48 <HAL_GPIO_Init+0x304>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a8a:	4a2f      	ldr	r2, [pc, #188]	; (8002b48 <HAL_GPIO_Init+0x304>)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a90:	4b2d      	ldr	r3, [pc, #180]	; (8002b48 <HAL_GPIO_Init+0x304>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ab4:	4a24      	ldr	r2, [pc, #144]	; (8002b48 <HAL_GPIO_Init+0x304>)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aba:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <HAL_GPIO_Init+0x304>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ade:	4a1a      	ldr	r2, [pc, #104]	; (8002b48 <HAL_GPIO_Init+0x304>)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae4:	4b18      	ldr	r3, [pc, #96]	; (8002b48 <HAL_GPIO_Init+0x304>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b08:	4a0f      	ldr	r2, [pc, #60]	; (8002b48 <HAL_GPIO_Init+0x304>)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3301      	adds	r3, #1
 8002b12:	61fb      	str	r3, [r7, #28]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	2b0f      	cmp	r3, #15
 8002b18:	f67f aea2 	bls.w	8002860 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	bf00      	nop
 8002b20:	3724      	adds	r7, #36	; 0x24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40013800 	.word	0x40013800
 8002b34:	40020000 	.word	0x40020000
 8002b38:	40020400 	.word	0x40020400
 8002b3c:	40020800 	.word	0x40020800
 8002b40:	40020c00 	.word	0x40020c00
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40013c00 	.word	0x40013c00

08002b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	807b      	strh	r3, [r7, #2]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b5c:	787b      	ldrb	r3, [r7, #1]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b62:	887a      	ldrh	r2, [r7, #2]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b68:	e003      	b.n	8002b72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b6a:	887b      	ldrh	r3, [r7, #2]
 8002b6c:	041a      	lsls	r2, r3, #16
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	619a      	str	r2, [r3, #24]
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e264      	b.n	800305c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d075      	beq.n	8002c8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b9e:	4ba3      	ldr	r3, [pc, #652]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d00c      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002baa:	4ba0      	ldr	r3, [pc, #640]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d112      	bne.n	8002bdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bb6:	4b9d      	ldr	r3, [pc, #628]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc2:	d10b      	bne.n	8002bdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc4:	4b99      	ldr	r3, [pc, #612]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d05b      	beq.n	8002c88 <HAL_RCC_OscConfig+0x108>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d157      	bne.n	8002c88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e23f      	b.n	800305c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be4:	d106      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x74>
 8002be6:	4b91      	ldr	r3, [pc, #580]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a90      	ldr	r2, [pc, #576]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e01d      	b.n	8002c30 <HAL_RCC_OscConfig+0xb0>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x98>
 8002bfe:	4b8b      	ldr	r3, [pc, #556]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a8a      	ldr	r2, [pc, #552]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	4b88      	ldr	r3, [pc, #544]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a87      	ldr	r2, [pc, #540]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e00b      	b.n	8002c30 <HAL_RCC_OscConfig+0xb0>
 8002c18:	4b84      	ldr	r3, [pc, #528]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a83      	ldr	r2, [pc, #524]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	4b81      	ldr	r3, [pc, #516]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a80      	ldr	r2, [pc, #512]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d013      	beq.n	8002c60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7ff f85a 	bl	8001cf0 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c40:	f7ff f856 	bl	8001cf0 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	; 0x64
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e204      	b.n	800305c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c52:	4b76      	ldr	r3, [pc, #472]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0xc0>
 8002c5e:	e014      	b.n	8002c8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7ff f846 	bl	8001cf0 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c68:	f7ff f842 	bl	8001cf0 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e1f0      	b.n	800305c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7a:	4b6c      	ldr	r3, [pc, #432]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0xe8>
 8002c86:	e000      	b.n	8002c8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d063      	beq.n	8002d5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c96:	4b65      	ldr	r3, [pc, #404]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00b      	beq.n	8002cba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ca2:	4b62      	ldr	r3, [pc, #392]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d11c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cae:	4b5f      	ldr	r3, [pc, #380]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d116      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cba:	4b5c      	ldr	r3, [pc, #368]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x152>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d001      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e1c4      	b.n	800305c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd2:	4b56      	ldr	r3, [pc, #344]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4952      	ldr	r1, [pc, #328]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce6:	e03a      	b.n	8002d5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d020      	beq.n	8002d32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf0:	4b4f      	ldr	r3, [pc, #316]	; (8002e30 <HAL_RCC_OscConfig+0x2b0>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf6:	f7fe fffb 	bl	8001cf0 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cfe:	f7fe fff7 	bl	8001cf0 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e1a5      	b.n	800305c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d10:	4b46      	ldr	r3, [pc, #280]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1c:	4b43      	ldr	r3, [pc, #268]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4940      	ldr	r1, [pc, #256]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]
 8002d30:	e015      	b.n	8002d5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d32:	4b3f      	ldr	r3, [pc, #252]	; (8002e30 <HAL_RCC_OscConfig+0x2b0>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7fe ffda 	bl	8001cf0 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d40:	f7fe ffd6 	bl	8001cf0 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e184      	b.n	800305c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d52:	4b36      	ldr	r3, [pc, #216]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d030      	beq.n	8002dcc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d016      	beq.n	8002da0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d72:	4b30      	ldr	r3, [pc, #192]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d78:	f7fe ffba 	bl	8001cf0 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d80:	f7fe ffb6 	bl	8001cf0 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e164      	b.n	800305c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d92:	4b26      	ldr	r3, [pc, #152]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0x200>
 8002d9e:	e015      	b.n	8002dcc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da0:	4b24      	ldr	r3, [pc, #144]	; (8002e34 <HAL_RCC_OscConfig+0x2b4>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da6:	f7fe ffa3 	bl	8001cf0 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dae:	f7fe ff9f 	bl	8001cf0 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e14d      	b.n	800305c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc0:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f0      	bne.n	8002dae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80a0 	beq.w	8002f1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dde:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10f      	bne.n	8002e0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	4a0e      	ldr	r2, [pc, #56]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dfa:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e06:	2301      	movs	r3, #1
 8002e08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <HAL_RCC_OscConfig+0x2b8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d121      	bne.n	8002e5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e16:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <HAL_RCC_OscConfig+0x2b8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a07      	ldr	r2, [pc, #28]	; (8002e38 <HAL_RCC_OscConfig+0x2b8>)
 8002e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e22:	f7fe ff65 	bl	8001cf0 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e28:	e011      	b.n	8002e4e <HAL_RCC_OscConfig+0x2ce>
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	42470000 	.word	0x42470000
 8002e34:	42470e80 	.word	0x42470e80
 8002e38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3c:	f7fe ff58 	bl	8001cf0 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e106      	b.n	800305c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4e:	4b85      	ldr	r3, [pc, #532]	; (8003064 <HAL_RCC_OscConfig+0x4e4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d106      	bne.n	8002e70 <HAL_RCC_OscConfig+0x2f0>
 8002e62:	4b81      	ldr	r3, [pc, #516]	; (8003068 <HAL_RCC_OscConfig+0x4e8>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	4a80      	ldr	r2, [pc, #512]	; (8003068 <HAL_RCC_OscConfig+0x4e8>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6e:	e01c      	b.n	8002eaa <HAL_RCC_OscConfig+0x32a>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b05      	cmp	r3, #5
 8002e76:	d10c      	bne.n	8002e92 <HAL_RCC_OscConfig+0x312>
 8002e78:	4b7b      	ldr	r3, [pc, #492]	; (8003068 <HAL_RCC_OscConfig+0x4e8>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7c:	4a7a      	ldr	r2, [pc, #488]	; (8003068 <HAL_RCC_OscConfig+0x4e8>)
 8002e7e:	f043 0304 	orr.w	r3, r3, #4
 8002e82:	6713      	str	r3, [r2, #112]	; 0x70
 8002e84:	4b78      	ldr	r3, [pc, #480]	; (8003068 <HAL_RCC_OscConfig+0x4e8>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e88:	4a77      	ldr	r2, [pc, #476]	; (8003068 <HAL_RCC_OscConfig+0x4e8>)
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e90:	e00b      	b.n	8002eaa <HAL_RCC_OscConfig+0x32a>
 8002e92:	4b75      	ldr	r3, [pc, #468]	; (8003068 <HAL_RCC_OscConfig+0x4e8>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e96:	4a74      	ldr	r2, [pc, #464]	; (8003068 <HAL_RCC_OscConfig+0x4e8>)
 8002e98:	f023 0301 	bic.w	r3, r3, #1
 8002e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9e:	4b72      	ldr	r3, [pc, #456]	; (8003068 <HAL_RCC_OscConfig+0x4e8>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea2:	4a71      	ldr	r2, [pc, #452]	; (8003068 <HAL_RCC_OscConfig+0x4e8>)
 8002ea4:	f023 0304 	bic.w	r3, r3, #4
 8002ea8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d015      	beq.n	8002ede <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb2:	f7fe ff1d 	bl	8001cf0 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7fe ff19 	bl	8001cf0 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e0c5      	b.n	800305c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed0:	4b65      	ldr	r3, [pc, #404]	; (8003068 <HAL_RCC_OscConfig+0x4e8>)
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0ee      	beq.n	8002eba <HAL_RCC_OscConfig+0x33a>
 8002edc:	e014      	b.n	8002f08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ede:	f7fe ff07 	bl	8001cf0 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee4:	e00a      	b.n	8002efc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee6:	f7fe ff03 	bl	8001cf0 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e0af      	b.n	800305c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efc:	4b5a      	ldr	r3, [pc, #360]	; (8003068 <HAL_RCC_OscConfig+0x4e8>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1ee      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d105      	bne.n	8002f1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f0e:	4b56      	ldr	r3, [pc, #344]	; (8003068 <HAL_RCC_OscConfig+0x4e8>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	4a55      	ldr	r2, [pc, #340]	; (8003068 <HAL_RCC_OscConfig+0x4e8>)
 8002f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 809b 	beq.w	800305a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f24:	4b50      	ldr	r3, [pc, #320]	; (8003068 <HAL_RCC_OscConfig+0x4e8>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 030c 	and.w	r3, r3, #12
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d05c      	beq.n	8002fea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d141      	bne.n	8002fbc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f38:	4b4c      	ldr	r3, [pc, #304]	; (800306c <HAL_RCC_OscConfig+0x4ec>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3e:	f7fe fed7 	bl	8001cf0 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f46:	f7fe fed3 	bl	8001cf0 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e081      	b.n	800305c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f58:	4b43      	ldr	r3, [pc, #268]	; (8003068 <HAL_RCC_OscConfig+0x4e8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1f0      	bne.n	8002f46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69da      	ldr	r2, [r3, #28]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	019b      	lsls	r3, r3, #6
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7a:	085b      	lsrs	r3, r3, #1
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	041b      	lsls	r3, r3, #16
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f86:	061b      	lsls	r3, r3, #24
 8002f88:	4937      	ldr	r1, [pc, #220]	; (8003068 <HAL_RCC_OscConfig+0x4e8>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f8e:	4b37      	ldr	r3, [pc, #220]	; (800306c <HAL_RCC_OscConfig+0x4ec>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7fe feac 	bl	8001cf0 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f9c:	f7fe fea8 	bl	8001cf0 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e056      	b.n	800305c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fae:	4b2e      	ldr	r3, [pc, #184]	; (8003068 <HAL_RCC_OscConfig+0x4e8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCC_OscConfig+0x41c>
 8002fba:	e04e      	b.n	800305a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fbc:	4b2b      	ldr	r3, [pc, #172]	; (800306c <HAL_RCC_OscConfig+0x4ec>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc2:	f7fe fe95 	bl	8001cf0 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fca:	f7fe fe91 	bl	8001cf0 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e03f      	b.n	800305c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fdc:	4b22      	ldr	r3, [pc, #136]	; (8003068 <HAL_RCC_OscConfig+0x4e8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1f0      	bne.n	8002fca <HAL_RCC_OscConfig+0x44a>
 8002fe8:	e037      	b.n	800305a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e032      	b.n	800305c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <HAL_RCC_OscConfig+0x4e8>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d028      	beq.n	8003056 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800300e:	429a      	cmp	r2, r3
 8003010:	d121      	bne.n	8003056 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301c:	429a      	cmp	r2, r3
 800301e:	d11a      	bne.n	8003056 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003026:	4013      	ands	r3, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800302c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800302e:	4293      	cmp	r3, r2
 8003030:	d111      	bne.n	8003056 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	3b01      	subs	r3, #1
 8003040:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003042:	429a      	cmp	r2, r3
 8003044:	d107      	bne.n	8003056 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003052:	429a      	cmp	r2, r3
 8003054:	d001      	beq.n	800305a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40007000 	.word	0x40007000
 8003068:	40023800 	.word	0x40023800
 800306c:	42470060 	.word	0x42470060

08003070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0cc      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003084:	4b68      	ldr	r3, [pc, #416]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d90c      	bls.n	80030ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b65      	ldr	r3, [pc, #404]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309a:	4b63      	ldr	r3, [pc, #396]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0b8      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d020      	beq.n	80030fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030c4:	4b59      	ldr	r3, [pc, #356]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	4a58      	ldr	r2, [pc, #352]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030dc:	4b53      	ldr	r3, [pc, #332]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	4a52      	ldr	r2, [pc, #328]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e8:	4b50      	ldr	r3, [pc, #320]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	494d      	ldr	r1, [pc, #308]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d044      	beq.n	8003190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d107      	bne.n	800311e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310e:	4b47      	ldr	r3, [pc, #284]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d119      	bne.n	800314e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e07f      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d003      	beq.n	800312e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800312a:	2b03      	cmp	r3, #3
 800312c:	d107      	bne.n	800313e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312e:	4b3f      	ldr	r3, [pc, #252]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e06f      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313e:	4b3b      	ldr	r3, [pc, #236]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e067      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800314e:	4b37      	ldr	r3, [pc, #220]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f023 0203 	bic.w	r2, r3, #3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	4934      	ldr	r1, [pc, #208]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	4313      	orrs	r3, r2
 800315e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003160:	f7fe fdc6 	bl	8001cf0 <HAL_GetTick>
 8003164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003166:	e00a      	b.n	800317e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003168:	f7fe fdc2 	bl	8001cf0 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f241 3288 	movw	r2, #5000	; 0x1388
 8003176:	4293      	cmp	r3, r2
 8003178:	d901      	bls.n	800317e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e04f      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317e:	4b2b      	ldr	r3, [pc, #172]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 020c 	and.w	r2, r3, #12
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	429a      	cmp	r2, r3
 800318e:	d1eb      	bne.n	8003168 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003190:	4b25      	ldr	r3, [pc, #148]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d20c      	bcs.n	80031b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b22      	ldr	r3, [pc, #136]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a6:	4b20      	ldr	r3, [pc, #128]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e032      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c4:	4b19      	ldr	r3, [pc, #100]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4916      	ldr	r1, [pc, #88]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d009      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031e2:	4b12      	ldr	r3, [pc, #72]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	490e      	ldr	r1, [pc, #56]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031f6:	f000 f821 	bl	800323c <HAL_RCC_GetSysClockFreq>
 80031fa:	4602      	mov	r2, r0
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	091b      	lsrs	r3, r3, #4
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	490a      	ldr	r1, [pc, #40]	; (8003230 <HAL_RCC_ClockConfig+0x1c0>)
 8003208:	5ccb      	ldrb	r3, [r1, r3]
 800320a:	fa22 f303 	lsr.w	r3, r2, r3
 800320e:	4a09      	ldr	r2, [pc, #36]	; (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe fd26 	bl	8001c68 <HAL_InitTick>

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40023c00 	.word	0x40023c00
 800322c:	40023800 	.word	0x40023800
 8003230:	08007e78 	.word	0x08007e78
 8003234:	20000000 	.word	0x20000000
 8003238:	20000004 	.word	0x20000004

0800323c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800323c:	b5b0      	push	{r4, r5, r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003242:	2100      	movs	r1, #0
 8003244:	6079      	str	r1, [r7, #4]
 8003246:	2100      	movs	r1, #0
 8003248:	60f9      	str	r1, [r7, #12]
 800324a:	2100      	movs	r1, #0
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800324e:	2100      	movs	r1, #0
 8003250:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003252:	4952      	ldr	r1, [pc, #328]	; (800339c <HAL_RCC_GetSysClockFreq+0x160>)
 8003254:	6889      	ldr	r1, [r1, #8]
 8003256:	f001 010c 	and.w	r1, r1, #12
 800325a:	2908      	cmp	r1, #8
 800325c:	d00d      	beq.n	800327a <HAL_RCC_GetSysClockFreq+0x3e>
 800325e:	2908      	cmp	r1, #8
 8003260:	f200 8094 	bhi.w	800338c <HAL_RCC_GetSysClockFreq+0x150>
 8003264:	2900      	cmp	r1, #0
 8003266:	d002      	beq.n	800326e <HAL_RCC_GetSysClockFreq+0x32>
 8003268:	2904      	cmp	r1, #4
 800326a:	d003      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0x38>
 800326c:	e08e      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800326e:	4b4c      	ldr	r3, [pc, #304]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003270:	60bb      	str	r3, [r7, #8]
       break;
 8003272:	e08e      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003274:	4b4b      	ldr	r3, [pc, #300]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003276:	60bb      	str	r3, [r7, #8]
      break;
 8003278:	e08b      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800327a:	4948      	ldr	r1, [pc, #288]	; (800339c <HAL_RCC_GetSysClockFreq+0x160>)
 800327c:	6849      	ldr	r1, [r1, #4]
 800327e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003282:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003284:	4945      	ldr	r1, [pc, #276]	; (800339c <HAL_RCC_GetSysClockFreq+0x160>)
 8003286:	6849      	ldr	r1, [r1, #4]
 8003288:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800328c:	2900      	cmp	r1, #0
 800328e:	d024      	beq.n	80032da <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003290:	4942      	ldr	r1, [pc, #264]	; (800339c <HAL_RCC_GetSysClockFreq+0x160>)
 8003292:	6849      	ldr	r1, [r1, #4]
 8003294:	0989      	lsrs	r1, r1, #6
 8003296:	4608      	mov	r0, r1
 8003298:	f04f 0100 	mov.w	r1, #0
 800329c:	f240 14ff 	movw	r4, #511	; 0x1ff
 80032a0:	f04f 0500 	mov.w	r5, #0
 80032a4:	ea00 0204 	and.w	r2, r0, r4
 80032a8:	ea01 0305 	and.w	r3, r1, r5
 80032ac:	493d      	ldr	r1, [pc, #244]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x168>)
 80032ae:	fb01 f003 	mul.w	r0, r1, r3
 80032b2:	2100      	movs	r1, #0
 80032b4:	fb01 f102 	mul.w	r1, r1, r2
 80032b8:	1844      	adds	r4, r0, r1
 80032ba:	493a      	ldr	r1, [pc, #232]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x168>)
 80032bc:	fba2 0101 	umull	r0, r1, r2, r1
 80032c0:	1863      	adds	r3, r4, r1
 80032c2:	4619      	mov	r1, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	461a      	mov	r2, r3
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	f7fd fcc4 	bl	8000c58 <__aeabi_uldivmod>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4613      	mov	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	e04a      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032da:	4b30      	ldr	r3, [pc, #192]	; (800339c <HAL_RCC_GetSysClockFreq+0x160>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	099b      	lsrs	r3, r3, #6
 80032e0:	461a      	mov	r2, r3
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032ea:	f04f 0100 	mov.w	r1, #0
 80032ee:	ea02 0400 	and.w	r4, r2, r0
 80032f2:	ea03 0501 	and.w	r5, r3, r1
 80032f6:	4620      	mov	r0, r4
 80032f8:	4629      	mov	r1, r5
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	014b      	lsls	r3, r1, #5
 8003304:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003308:	0142      	lsls	r2, r0, #5
 800330a:	4610      	mov	r0, r2
 800330c:	4619      	mov	r1, r3
 800330e:	1b00      	subs	r0, r0, r4
 8003310:	eb61 0105 	sbc.w	r1, r1, r5
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	018b      	lsls	r3, r1, #6
 800331e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003322:	0182      	lsls	r2, r0, #6
 8003324:	1a12      	subs	r2, r2, r0
 8003326:	eb63 0301 	sbc.w	r3, r3, r1
 800332a:	f04f 0000 	mov.w	r0, #0
 800332e:	f04f 0100 	mov.w	r1, #0
 8003332:	00d9      	lsls	r1, r3, #3
 8003334:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003338:	00d0      	lsls	r0, r2, #3
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	1912      	adds	r2, r2, r4
 8003340:	eb45 0303 	adc.w	r3, r5, r3
 8003344:	f04f 0000 	mov.w	r0, #0
 8003348:	f04f 0100 	mov.w	r1, #0
 800334c:	0299      	lsls	r1, r3, #10
 800334e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003352:	0290      	lsls	r0, r2, #10
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4610      	mov	r0, r2
 800335a:	4619      	mov	r1, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	461a      	mov	r2, r3
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	f7fd fc78 	bl	8000c58 <__aeabi_uldivmod>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4613      	mov	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003370:	4b0a      	ldr	r3, [pc, #40]	; (800339c <HAL_RCC_GetSysClockFreq+0x160>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	0c1b      	lsrs	r3, r3, #16
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	3301      	adds	r3, #1
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	fbb2 f3f3 	udiv	r3, r2, r3
 8003388:	60bb      	str	r3, [r7, #8]
      break;
 800338a:	e002      	b.n	8003392 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x164>)
 800338e:	60bb      	str	r3, [r7, #8]
      break;
 8003390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003392:	68bb      	ldr	r3, [r7, #8]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bdb0      	pop	{r4, r5, r7, pc}
 800339c:	40023800 	.word	0x40023800
 80033a0:	00f42400 	.word	0x00f42400
 80033a4:	017d7840 	.word	0x017d7840

080033a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ac:	4b03      	ldr	r3, [pc, #12]	; (80033bc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ae:	681b      	ldr	r3, [r3, #0]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000000 	.word	0x20000000

080033c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033c4:	f7ff fff0 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	0a9b      	lsrs	r3, r3, #10
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	4903      	ldr	r1, [pc, #12]	; (80033e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40023800 	.word	0x40023800
 80033e4:	08007e88 	.word	0x08007e88

080033e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033ec:	f7ff ffdc 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80033f0:	4602      	mov	r2, r0
 80033f2:	4b05      	ldr	r3, [pc, #20]	; (8003408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	0b5b      	lsrs	r3, r3, #13
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	4903      	ldr	r1, [pc, #12]	; (800340c <HAL_RCC_GetPCLK2Freq+0x24>)
 80033fe:	5ccb      	ldrb	r3, [r1, r3]
 8003400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40023800 	.word	0x40023800
 800340c:	08007e88 	.word	0x08007e88

08003410 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e03f      	b.n	80034a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fe fa76 	bl	8001928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2224      	movs	r2, #36	; 0x24
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003452:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f829 	bl	80034ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003468:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003478:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003488:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
	...

080034ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034b0:	b09f      	sub	sp, #124	; 0x7c
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c2:	68d9      	ldr	r1, [r3, #12]
 80034c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	ea40 0301 	orr.w	r3, r0, r1
 80034cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	431a      	orrs	r2, r3
 80034de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80034e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034f0:	f021 010c 	bic.w	r1, r1, #12
 80034f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034fa:	430b      	orrs	r3, r1
 80034fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350a:	6999      	ldr	r1, [r3, #24]
 800350c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	ea40 0301 	orr.w	r3, r0, r1
 8003514:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	4bc5      	ldr	r3, [pc, #788]	; (8003830 <UART_SetConfig+0x384>)
 800351c:	429a      	cmp	r2, r3
 800351e:	d004      	beq.n	800352a <UART_SetConfig+0x7e>
 8003520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4bc3      	ldr	r3, [pc, #780]	; (8003834 <UART_SetConfig+0x388>)
 8003526:	429a      	cmp	r2, r3
 8003528:	d103      	bne.n	8003532 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800352a:	f7ff ff5d 	bl	80033e8 <HAL_RCC_GetPCLK2Freq>
 800352e:	6778      	str	r0, [r7, #116]	; 0x74
 8003530:	e002      	b.n	8003538 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003532:	f7ff ff45 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 8003536:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003540:	f040 80b6 	bne.w	80036b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003544:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003546:	461c      	mov	r4, r3
 8003548:	f04f 0500 	mov.w	r5, #0
 800354c:	4622      	mov	r2, r4
 800354e:	462b      	mov	r3, r5
 8003550:	1891      	adds	r1, r2, r2
 8003552:	6439      	str	r1, [r7, #64]	; 0x40
 8003554:	415b      	adcs	r3, r3
 8003556:	647b      	str	r3, [r7, #68]	; 0x44
 8003558:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800355c:	1912      	adds	r2, r2, r4
 800355e:	eb45 0303 	adc.w	r3, r5, r3
 8003562:	f04f 0000 	mov.w	r0, #0
 8003566:	f04f 0100 	mov.w	r1, #0
 800356a:	00d9      	lsls	r1, r3, #3
 800356c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003570:	00d0      	lsls	r0, r2, #3
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	1911      	adds	r1, r2, r4
 8003578:	6639      	str	r1, [r7, #96]	; 0x60
 800357a:	416b      	adcs	r3, r5
 800357c:	667b      	str	r3, [r7, #100]	; 0x64
 800357e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	461a      	mov	r2, r3
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	1891      	adds	r1, r2, r2
 800358a:	63b9      	str	r1, [r7, #56]	; 0x38
 800358c:	415b      	adcs	r3, r3
 800358e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003590:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003594:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003598:	f7fd fb5e 	bl	8000c58 <__aeabi_uldivmod>
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4ba5      	ldr	r3, [pc, #660]	; (8003838 <UART_SetConfig+0x38c>)
 80035a2:	fba3 2302 	umull	r2, r3, r3, r2
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	011e      	lsls	r6, r3, #4
 80035aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035ac:	461c      	mov	r4, r3
 80035ae:	f04f 0500 	mov.w	r5, #0
 80035b2:	4622      	mov	r2, r4
 80035b4:	462b      	mov	r3, r5
 80035b6:	1891      	adds	r1, r2, r2
 80035b8:	6339      	str	r1, [r7, #48]	; 0x30
 80035ba:	415b      	adcs	r3, r3
 80035bc:	637b      	str	r3, [r7, #52]	; 0x34
 80035be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035c2:	1912      	adds	r2, r2, r4
 80035c4:	eb45 0303 	adc.w	r3, r5, r3
 80035c8:	f04f 0000 	mov.w	r0, #0
 80035cc:	f04f 0100 	mov.w	r1, #0
 80035d0:	00d9      	lsls	r1, r3, #3
 80035d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035d6:	00d0      	lsls	r0, r2, #3
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	1911      	adds	r1, r2, r4
 80035de:	65b9      	str	r1, [r7, #88]	; 0x58
 80035e0:	416b      	adcs	r3, r5
 80035e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	461a      	mov	r2, r3
 80035ea:	f04f 0300 	mov.w	r3, #0
 80035ee:	1891      	adds	r1, r2, r2
 80035f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80035f2:	415b      	adcs	r3, r3
 80035f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80035fe:	f7fd fb2b 	bl	8000c58 <__aeabi_uldivmod>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4b8c      	ldr	r3, [pc, #560]	; (8003838 <UART_SetConfig+0x38c>)
 8003608:	fba3 1302 	umull	r1, r3, r3, r2
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	2164      	movs	r1, #100	; 0x64
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	3332      	adds	r3, #50	; 0x32
 800361a:	4a87      	ldr	r2, [pc, #540]	; (8003838 <UART_SetConfig+0x38c>)
 800361c:	fba2 2303 	umull	r2, r3, r2, r3
 8003620:	095b      	lsrs	r3, r3, #5
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003628:	441e      	add	r6, r3
 800362a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800362c:	4618      	mov	r0, r3
 800362e:	f04f 0100 	mov.w	r1, #0
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	1894      	adds	r4, r2, r2
 8003638:	623c      	str	r4, [r7, #32]
 800363a:	415b      	adcs	r3, r3
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
 800363e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003642:	1812      	adds	r2, r2, r0
 8003644:	eb41 0303 	adc.w	r3, r1, r3
 8003648:	f04f 0400 	mov.w	r4, #0
 800364c:	f04f 0500 	mov.w	r5, #0
 8003650:	00dd      	lsls	r5, r3, #3
 8003652:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003656:	00d4      	lsls	r4, r2, #3
 8003658:	4622      	mov	r2, r4
 800365a:	462b      	mov	r3, r5
 800365c:	1814      	adds	r4, r2, r0
 800365e:	653c      	str	r4, [r7, #80]	; 0x50
 8003660:	414b      	adcs	r3, r1
 8003662:	657b      	str	r3, [r7, #84]	; 0x54
 8003664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	461a      	mov	r2, r3
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	1891      	adds	r1, r2, r2
 8003670:	61b9      	str	r1, [r7, #24]
 8003672:	415b      	adcs	r3, r3
 8003674:	61fb      	str	r3, [r7, #28]
 8003676:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800367a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800367e:	f7fd faeb 	bl	8000c58 <__aeabi_uldivmod>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4b6c      	ldr	r3, [pc, #432]	; (8003838 <UART_SetConfig+0x38c>)
 8003688:	fba3 1302 	umull	r1, r3, r3, r2
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	2164      	movs	r1, #100	; 0x64
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	3332      	adds	r3, #50	; 0x32
 800369a:	4a67      	ldr	r2, [pc, #412]	; (8003838 <UART_SetConfig+0x38c>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	095b      	lsrs	r3, r3, #5
 80036a2:	f003 0207 	and.w	r2, r3, #7
 80036a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4432      	add	r2, r6
 80036ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036ae:	e0b9      	b.n	8003824 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036b2:	461c      	mov	r4, r3
 80036b4:	f04f 0500 	mov.w	r5, #0
 80036b8:	4622      	mov	r2, r4
 80036ba:	462b      	mov	r3, r5
 80036bc:	1891      	adds	r1, r2, r2
 80036be:	6139      	str	r1, [r7, #16]
 80036c0:	415b      	adcs	r3, r3
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80036c8:	1912      	adds	r2, r2, r4
 80036ca:	eb45 0303 	adc.w	r3, r5, r3
 80036ce:	f04f 0000 	mov.w	r0, #0
 80036d2:	f04f 0100 	mov.w	r1, #0
 80036d6:	00d9      	lsls	r1, r3, #3
 80036d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036dc:	00d0      	lsls	r0, r2, #3
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	eb12 0804 	adds.w	r8, r2, r4
 80036e6:	eb43 0905 	adc.w	r9, r3, r5
 80036ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f04f 0100 	mov.w	r1, #0
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	008b      	lsls	r3, r1, #2
 80036fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003702:	0082      	lsls	r2, r0, #2
 8003704:	4640      	mov	r0, r8
 8003706:	4649      	mov	r1, r9
 8003708:	f7fd faa6 	bl	8000c58 <__aeabi_uldivmod>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4b49      	ldr	r3, [pc, #292]	; (8003838 <UART_SetConfig+0x38c>)
 8003712:	fba3 2302 	umull	r2, r3, r3, r2
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	011e      	lsls	r6, r3, #4
 800371a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800371c:	4618      	mov	r0, r3
 800371e:	f04f 0100 	mov.w	r1, #0
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	1894      	adds	r4, r2, r2
 8003728:	60bc      	str	r4, [r7, #8]
 800372a:	415b      	adcs	r3, r3
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003732:	1812      	adds	r2, r2, r0
 8003734:	eb41 0303 	adc.w	r3, r1, r3
 8003738:	f04f 0400 	mov.w	r4, #0
 800373c:	f04f 0500 	mov.w	r5, #0
 8003740:	00dd      	lsls	r5, r3, #3
 8003742:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003746:	00d4      	lsls	r4, r2, #3
 8003748:	4622      	mov	r2, r4
 800374a:	462b      	mov	r3, r5
 800374c:	1814      	adds	r4, r2, r0
 800374e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003750:	414b      	adcs	r3, r1
 8003752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4618      	mov	r0, r3
 800375a:	f04f 0100 	mov.w	r1, #0
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	008b      	lsls	r3, r1, #2
 8003768:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800376c:	0082      	lsls	r2, r0, #2
 800376e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003772:	f7fd fa71 	bl	8000c58 <__aeabi_uldivmod>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4b2f      	ldr	r3, [pc, #188]	; (8003838 <UART_SetConfig+0x38c>)
 800377c:	fba3 1302 	umull	r1, r3, r3, r2
 8003780:	095b      	lsrs	r3, r3, #5
 8003782:	2164      	movs	r1, #100	; 0x64
 8003784:	fb01 f303 	mul.w	r3, r1, r3
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	3332      	adds	r3, #50	; 0x32
 800378e:	4a2a      	ldr	r2, [pc, #168]	; (8003838 <UART_SetConfig+0x38c>)
 8003790:	fba2 2303 	umull	r2, r3, r2, r3
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800379a:	441e      	add	r6, r3
 800379c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800379e:	4618      	mov	r0, r3
 80037a0:	f04f 0100 	mov.w	r1, #0
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	1894      	adds	r4, r2, r2
 80037aa:	603c      	str	r4, [r7, #0]
 80037ac:	415b      	adcs	r3, r3
 80037ae:	607b      	str	r3, [r7, #4]
 80037b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037b4:	1812      	adds	r2, r2, r0
 80037b6:	eb41 0303 	adc.w	r3, r1, r3
 80037ba:	f04f 0400 	mov.w	r4, #0
 80037be:	f04f 0500 	mov.w	r5, #0
 80037c2:	00dd      	lsls	r5, r3, #3
 80037c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037c8:	00d4      	lsls	r4, r2, #3
 80037ca:	4622      	mov	r2, r4
 80037cc:	462b      	mov	r3, r5
 80037ce:	eb12 0a00 	adds.w	sl, r2, r0
 80037d2:	eb43 0b01 	adc.w	fp, r3, r1
 80037d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	4618      	mov	r0, r3
 80037dc:	f04f 0100 	mov.w	r1, #0
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	008b      	lsls	r3, r1, #2
 80037ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80037ee:	0082      	lsls	r2, r0, #2
 80037f0:	4650      	mov	r0, sl
 80037f2:	4659      	mov	r1, fp
 80037f4:	f7fd fa30 	bl	8000c58 <__aeabi_uldivmod>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <UART_SetConfig+0x38c>)
 80037fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	2164      	movs	r1, #100	; 0x64
 8003806:	fb01 f303 	mul.w	r3, r1, r3
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	3332      	adds	r3, #50	; 0x32
 8003810:	4a09      	ldr	r2, [pc, #36]	; (8003838 <UART_SetConfig+0x38c>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	f003 020f 	and.w	r2, r3, #15
 800381c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4432      	add	r2, r6
 8003822:	609a      	str	r2, [r3, #8]
}
 8003824:	bf00      	nop
 8003826:	377c      	adds	r7, #124	; 0x7c
 8003828:	46bd      	mov	sp, r7
 800382a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800382e:	bf00      	nop
 8003830:	40011000 	.word	0x40011000
 8003834:	40011400 	.word	0x40011400
 8003838:	51eb851f 	.word	0x51eb851f

0800383c <arm_rfft_32_fast_init_f32>:
 800383c:	b178      	cbz	r0, 800385e <arm_rfft_32_fast_init_f32+0x22>
 800383e:	b430      	push	{r4, r5}
 8003840:	4908      	ldr	r1, [pc, #32]	; (8003864 <arm_rfft_32_fast_init_f32+0x28>)
 8003842:	4a09      	ldr	r2, [pc, #36]	; (8003868 <arm_rfft_32_fast_init_f32+0x2c>)
 8003844:	2310      	movs	r3, #16
 8003846:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800384a:	8003      	strh	r3, [r0, #0]
 800384c:	2520      	movs	r5, #32
 800384e:	2414      	movs	r4, #20
 8003850:	4b06      	ldr	r3, [pc, #24]	; (800386c <arm_rfft_32_fast_init_f32+0x30>)
 8003852:	8205      	strh	r5, [r0, #16]
 8003854:	8184      	strh	r4, [r0, #12]
 8003856:	6143      	str	r3, [r0, #20]
 8003858:	bc30      	pop	{r4, r5}
 800385a:	2000      	movs	r0, #0
 800385c:	4770      	bx	lr
 800385e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003862:	4770      	bx	lr
 8003864:	08008e40 	.word	0x08008e40
 8003868:	0800d778 	.word	0x0800d778
 800386c:	080164f8 	.word	0x080164f8

08003870 <arm_rfft_64_fast_init_f32>:
 8003870:	b178      	cbz	r0, 8003892 <arm_rfft_64_fast_init_f32+0x22>
 8003872:	b430      	push	{r4, r5}
 8003874:	4908      	ldr	r1, [pc, #32]	; (8003898 <arm_rfft_64_fast_init_f32+0x28>)
 8003876:	4a09      	ldr	r2, [pc, #36]	; (800389c <arm_rfft_64_fast_init_f32+0x2c>)
 8003878:	2320      	movs	r3, #32
 800387a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800387e:	8003      	strh	r3, [r0, #0]
 8003880:	2540      	movs	r5, #64	; 0x40
 8003882:	2430      	movs	r4, #48	; 0x30
 8003884:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <arm_rfft_64_fast_init_f32+0x30>)
 8003886:	8205      	strh	r5, [r0, #16]
 8003888:	8184      	strh	r4, [r0, #12]
 800388a:	6143      	str	r3, [r0, #20]
 800388c:	bc30      	pop	{r4, r5}
 800388e:	2000      	movs	r0, #0
 8003890:	4770      	bx	lr
 8003892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003896:	4770      	bx	lr
 8003898:	0800af98 	.word	0x0800af98
 800389c:	08011ff8 	.word	0x08011ff8
 80038a0:	0801ad78 	.word	0x0801ad78

080038a4 <arm_rfft_256_fast_init_f32>:
 80038a4:	b180      	cbz	r0, 80038c8 <arm_rfft_256_fast_init_f32+0x24>
 80038a6:	b430      	push	{r4, r5}
 80038a8:	4909      	ldr	r1, [pc, #36]	; (80038d0 <arm_rfft_256_fast_init_f32+0x2c>)
 80038aa:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <arm_rfft_256_fast_init_f32+0x30>)
 80038ac:	2380      	movs	r3, #128	; 0x80
 80038ae:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80038b2:	8003      	strh	r3, [r0, #0]
 80038b4:	f44f 7580 	mov.w	r5, #256	; 0x100
 80038b8:	24d0      	movs	r4, #208	; 0xd0
 80038ba:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <arm_rfft_256_fast_init_f32+0x34>)
 80038bc:	8205      	strh	r5, [r0, #16]
 80038be:	8184      	strh	r4, [r0, #12]
 80038c0:	6143      	str	r3, [r0, #20]
 80038c2:	bc30      	pop	{r4, r5}
 80038c4:	2000      	movs	r0, #0
 80038c6:	4770      	bx	lr
 80038c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	08008ca0 	.word	0x08008ca0
 80038d4:	0800d378 	.word	0x0800d378
 80038d8:	080160f8 	.word	0x080160f8

080038dc <arm_rfft_512_fast_init_f32>:
 80038dc:	b190      	cbz	r0, 8003904 <arm_rfft_512_fast_init_f32+0x28>
 80038de:	b430      	push	{r4, r5}
 80038e0:	490a      	ldr	r1, [pc, #40]	; (800390c <arm_rfft_512_fast_init_f32+0x30>)
 80038e2:	4a0b      	ldr	r2, [pc, #44]	; (8003910 <arm_rfft_512_fast_init_f32+0x34>)
 80038e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038e8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80038ec:	8003      	strh	r3, [r0, #0]
 80038ee:	f44f 7500 	mov.w	r5, #512	; 0x200
 80038f2:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80038f6:	4b07      	ldr	r3, [pc, #28]	; (8003914 <arm_rfft_512_fast_init_f32+0x38>)
 80038f8:	8205      	strh	r5, [r0, #16]
 80038fa:	8184      	strh	r4, [r0, #12]
 80038fc:	6143      	str	r3, [r0, #20]
 80038fe:	bc30      	pop	{r4, r5}
 8003900:	2000      	movs	r0, #0
 8003902:	4770      	bx	lr
 8003904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	0800ac28 	.word	0x0800ac28
 8003910:	080117f8 	.word	0x080117f8
 8003914:	0801a578 	.word	0x0801a578

08003918 <arm_rfft_1024_fast_init_f32>:
 8003918:	b190      	cbz	r0, 8003940 <arm_rfft_1024_fast_init_f32+0x28>
 800391a:	b430      	push	{r4, r5}
 800391c:	490a      	ldr	r1, [pc, #40]	; (8003948 <arm_rfft_1024_fast_init_f32+0x30>)
 800391e:	4a0b      	ldr	r2, [pc, #44]	; (800394c <arm_rfft_1024_fast_init_f32+0x34>)
 8003920:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003924:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003928:	8003      	strh	r3, [r0, #0]
 800392a:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800392e:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8003932:	4b07      	ldr	r3, [pc, #28]	; (8003950 <arm_rfft_1024_fast_init_f32+0x38>)
 8003934:	8205      	strh	r5, [r0, #16]
 8003936:	8184      	strh	r4, [r0, #12]
 8003938:	6143      	str	r3, [r0, #20]
 800393a:	bc30      	pop	{r4, r5}
 800393c:	2000      	movs	r0, #0
 800393e:	4770      	bx	lr
 8003940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	0800aff8 	.word	0x0800aff8
 800394c:	080120f8 	.word	0x080120f8
 8003950:	080130f8 	.word	0x080130f8

08003954 <arm_rfft_2048_fast_init_f32>:
 8003954:	b190      	cbz	r0, 800397c <arm_rfft_2048_fast_init_f32+0x28>
 8003956:	b430      	push	{r4, r5}
 8003958:	490a      	ldr	r1, [pc, #40]	; (8003984 <arm_rfft_2048_fast_init_f32+0x30>)
 800395a:	4a0b      	ldr	r2, [pc, #44]	; (8003988 <arm_rfft_2048_fast_init_f32+0x34>)
 800395c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003960:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8003964:	8003      	strh	r3, [r0, #0]
 8003966:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800396a:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800396e:	4b07      	ldr	r3, [pc, #28]	; (800398c <arm_rfft_2048_fast_init_f32+0x38>)
 8003970:	8205      	strh	r5, [r0, #16]
 8003972:	8184      	strh	r4, [r0, #12]
 8003974:	6143      	str	r3, [r0, #20]
 8003976:	bc30      	pop	{r4, r5}
 8003978:	2000      	movs	r0, #0
 800397a:	4770      	bx	lr
 800397c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	08007e90 	.word	0x08007e90
 8003988:	0800b378 	.word	0x0800b378
 800398c:	080140f8 	.word	0x080140f8

08003990 <arm_rfft_4096_fast_init_f32>:
 8003990:	b190      	cbz	r0, 80039b8 <arm_rfft_4096_fast_init_f32+0x28>
 8003992:	b430      	push	{r4, r5}
 8003994:	490a      	ldr	r1, [pc, #40]	; (80039c0 <arm_rfft_4096_fast_init_f32+0x30>)
 8003996:	4a0b      	ldr	r2, [pc, #44]	; (80039c4 <arm_rfft_4096_fast_init_f32+0x34>)
 8003998:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800399c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80039a0:	8003      	strh	r3, [r0, #0]
 80039a2:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80039a6:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 80039aa:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <arm_rfft_4096_fast_init_f32+0x38>)
 80039ac:	8205      	strh	r5, [r0, #16]
 80039ae:	8184      	strh	r4, [r0, #12]
 80039b0:	6143      	str	r3, [r0, #20]
 80039b2:	bc30      	pop	{r4, r5}
 80039b4:	2000      	movs	r0, #0
 80039b6:	4770      	bx	lr
 80039b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	08008e68 	.word	0x08008e68
 80039c4:	0800d7f8 	.word	0x0800d7f8
 80039c8:	08016578 	.word	0x08016578

080039cc <arm_rfft_fast_init_f32>:
 80039cc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80039d0:	d01f      	beq.n	8003a12 <arm_rfft_fast_init_f32+0x46>
 80039d2:	d90b      	bls.n	80039ec <arm_rfft_fast_init_f32+0x20>
 80039d4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80039d8:	d019      	beq.n	8003a0e <arm_rfft_fast_init_f32+0x42>
 80039da:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80039de:	d012      	beq.n	8003a06 <arm_rfft_fast_init_f32+0x3a>
 80039e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80039e4:	d00d      	beq.n	8003a02 <arm_rfft_fast_init_f32+0x36>
 80039e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039ea:	4770      	bx	lr
 80039ec:	2940      	cmp	r1, #64	; 0x40
 80039ee:	d00c      	beq.n	8003a0a <arm_rfft_fast_init_f32+0x3e>
 80039f0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80039f4:	d003      	beq.n	80039fe <arm_rfft_fast_init_f32+0x32>
 80039f6:	2920      	cmp	r1, #32
 80039f8:	d1f5      	bne.n	80039e6 <arm_rfft_fast_init_f32+0x1a>
 80039fa:	4b07      	ldr	r3, [pc, #28]	; (8003a18 <arm_rfft_fast_init_f32+0x4c>)
 80039fc:	4718      	bx	r3
 80039fe:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <arm_rfft_fast_init_f32+0x50>)
 8003a00:	4718      	bx	r3
 8003a02:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <arm_rfft_fast_init_f32+0x54>)
 8003a04:	4718      	bx	r3
 8003a06:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <arm_rfft_fast_init_f32+0x58>)
 8003a08:	4718      	bx	r3
 8003a0a:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <arm_rfft_fast_init_f32+0x5c>)
 8003a0c:	e7f6      	b.n	80039fc <arm_rfft_fast_init_f32+0x30>
 8003a0e:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <arm_rfft_fast_init_f32+0x60>)
 8003a10:	e7f4      	b.n	80039fc <arm_rfft_fast_init_f32+0x30>
 8003a12:	4b07      	ldr	r3, [pc, #28]	; (8003a30 <arm_rfft_fast_init_f32+0x64>)
 8003a14:	e7f2      	b.n	80039fc <arm_rfft_fast_init_f32+0x30>
 8003a16:	bf00      	nop
 8003a18:	0800383d 	.word	0x0800383d
 8003a1c:	080038a5 	.word	0x080038a5
 8003a20:	08003919 	.word	0x08003919
 8003a24:	08003991 	.word	0x08003991
 8003a28:	08003871 	.word	0x08003871
 8003a2c:	08003955 	.word	0x08003955
 8003a30:	080038dd 	.word	0x080038dd

08003a34 <stage_rfft_f32>:
 8003a34:	b410      	push	{r4}
 8003a36:	edd1 7a00 	vldr	s15, [r1]
 8003a3a:	ed91 7a01 	vldr	s14, [r1, #4]
 8003a3e:	8804      	ldrh	r4, [r0, #0]
 8003a40:	6940      	ldr	r0, [r0, #20]
 8003a42:	ee37 7a07 	vadd.f32	s14, s14, s14
 8003a46:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003a4a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8003a4e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003a52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a56:	3c01      	subs	r4, #1
 8003a58:	ee26 7a84 	vmul.f32	s14, s13, s8
 8003a5c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8003a60:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8003a64:	ed82 7a00 	vstr	s14, [r2]
 8003a68:	edc2 7a01 	vstr	s15, [r2, #4]
 8003a6c:	3010      	adds	r0, #16
 8003a6e:	3210      	adds	r2, #16
 8003a70:	3b08      	subs	r3, #8
 8003a72:	3110      	adds	r1, #16
 8003a74:	ed11 5a02 	vldr	s10, [r1, #-8]
 8003a78:	ed93 7a02 	vldr	s14, [r3, #8]
 8003a7c:	ed50 6a02 	vldr	s13, [r0, #-8]
 8003a80:	edd3 4a03 	vldr	s9, [r3, #12]
 8003a84:	ed51 7a01 	vldr	s15, [r1, #-4]
 8003a88:	ed10 6a01 	vldr	s12, [r0, #-4]
 8003a8c:	ee77 5a45 	vsub.f32	s11, s14, s10
 8003a90:	ee37 7a05 	vadd.f32	s14, s14, s10
 8003a94:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8003a98:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8003a9c:	ee66 5a25 	vmul.f32	s11, s12, s11
 8003aa0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8003aa4:	ee37 7a23 	vadd.f32	s14, s14, s7
 8003aa8:	ee66 6a85 	vmul.f32	s13, s13, s10
 8003aac:	ee26 6a05 	vmul.f32	s12, s12, s10
 8003ab0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8003ab4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003ab8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003abc:	ee27 7a04 	vmul.f32	s14, s14, s8
 8003ac0:	ee67 7a84 	vmul.f32	s15, s15, s8
 8003ac4:	3c01      	subs	r4, #1
 8003ac6:	ed02 7a02 	vstr	s14, [r2, #-8]
 8003aca:	ed42 7a01 	vstr	s15, [r2, #-4]
 8003ace:	f1a3 0308 	sub.w	r3, r3, #8
 8003ad2:	f101 0108 	add.w	r1, r1, #8
 8003ad6:	f100 0008 	add.w	r0, r0, #8
 8003ada:	f102 0208 	add.w	r2, r2, #8
 8003ade:	d1c9      	bne.n	8003a74 <stage_rfft_f32+0x40>
 8003ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop

08003ae8 <merge_rfft_f32>:
 8003ae8:	b410      	push	{r4}
 8003aea:	edd1 7a00 	vldr	s15, [r1]
 8003aee:	edd1 6a01 	vldr	s13, [r1, #4]
 8003af2:	8804      	ldrh	r4, [r0, #0]
 8003af4:	6940      	ldr	r0, [r0, #20]
 8003af6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003afa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003afe:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8003b02:	ee27 7a04 	vmul.f32	s14, s14, s8
 8003b06:	ee67 7a84 	vmul.f32	s15, s15, s8
 8003b0a:	3c01      	subs	r4, #1
 8003b0c:	ed82 7a00 	vstr	s14, [r2]
 8003b10:	edc2 7a01 	vstr	s15, [r2, #4]
 8003b14:	b3dc      	cbz	r4, 8003b8e <merge_rfft_f32+0xa6>
 8003b16:	00e3      	lsls	r3, r4, #3
 8003b18:	3b08      	subs	r3, #8
 8003b1a:	440b      	add	r3, r1
 8003b1c:	3010      	adds	r0, #16
 8003b1e:	3210      	adds	r2, #16
 8003b20:	3110      	adds	r1, #16
 8003b22:	ed11 5a02 	vldr	s10, [r1, #-8]
 8003b26:	ed93 7a02 	vldr	s14, [r3, #8]
 8003b2a:	ed50 6a02 	vldr	s13, [r0, #-8]
 8003b2e:	edd3 4a03 	vldr	s9, [r3, #12]
 8003b32:	ed51 7a01 	vldr	s15, [r1, #-4]
 8003b36:	ed10 6a01 	vldr	s12, [r0, #-4]
 8003b3a:	ee75 5a47 	vsub.f32	s11, s10, s14
 8003b3e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8003b42:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8003b46:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8003b4a:	ee66 5a25 	vmul.f32	s11, s12, s11
 8003b4e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8003b52:	ee37 7a63 	vsub.f32	s14, s14, s7
 8003b56:	ee66 6a85 	vmul.f32	s13, s13, s10
 8003b5a:	ee26 6a05 	vmul.f32	s12, s12, s10
 8003b5e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8003b62:	ee37 7a46 	vsub.f32	s14, s14, s12
 8003b66:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003b6a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8003b6e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8003b72:	3c01      	subs	r4, #1
 8003b74:	ed02 7a02 	vstr	s14, [r2, #-8]
 8003b78:	ed42 7a01 	vstr	s15, [r2, #-4]
 8003b7c:	f1a3 0308 	sub.w	r3, r3, #8
 8003b80:	f101 0108 	add.w	r1, r1, #8
 8003b84:	f100 0008 	add.w	r0, r0, #8
 8003b88:	f102 0208 	add.w	r2, r2, #8
 8003b8c:	d1c9      	bne.n	8003b22 <merge_rfft_f32+0x3a>
 8003b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <arm_rfft_fast_f32>:
 8003b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b98:	8a05      	ldrh	r5, [r0, #16]
 8003b9a:	086d      	lsrs	r5, r5, #1
 8003b9c:	8005      	strh	r5, [r0, #0]
 8003b9e:	4604      	mov	r4, r0
 8003ba0:	4616      	mov	r6, r2
 8003ba2:	461d      	mov	r5, r3
 8003ba4:	b14b      	cbz	r3, 8003bba <arm_rfft_fast_f32+0x26>
 8003ba6:	f7ff ff9f 	bl	8003ae8 <merge_rfft_f32>
 8003baa:	462a      	mov	r2, r5
 8003bac:	4631      	mov	r1, r6
 8003bae:	4620      	mov	r0, r4
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bb6:	f000 bb33 	b.w	8004220 <arm_cfft_f32>
 8003bba:	460f      	mov	r7, r1
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f000 fb2e 	bl	8004220 <arm_cfft_f32>
 8003bc4:	4632      	mov	r2, r6
 8003bc6:	4639      	mov	r1, r7
 8003bc8:	4620      	mov	r0, r4
 8003bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bce:	f7ff bf31 	b.w	8003a34 <stage_rfft_f32>
 8003bd2:	bf00      	nop

08003bd4 <arm_cfft_radix8by2_f32>:
 8003bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bd8:	ed2d 8b08 	vpush	{d8-d11}
 8003bdc:	4607      	mov	r7, r0
 8003bde:	4608      	mov	r0, r1
 8003be0:	f8b7 c000 	ldrh.w	ip, [r7]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8003bea:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8003bee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003bf2:	f000 80b0 	beq.w	8003d56 <arm_cfft_radix8by2_f32+0x182>
 8003bf6:	008c      	lsls	r4, r1, #2
 8003bf8:	3410      	adds	r4, #16
 8003bfa:	f100 0310 	add.w	r3, r0, #16
 8003bfe:	1906      	adds	r6, r0, r4
 8003c00:	3210      	adds	r2, #16
 8003c02:	4444      	add	r4, r8
 8003c04:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8003c08:	f108 0510 	add.w	r5, r8, #16
 8003c0c:	ed15 2a04 	vldr	s4, [r5, #-16]
 8003c10:	ed55 2a03 	vldr	s5, [r5, #-12]
 8003c14:	ed54 4a04 	vldr	s9, [r4, #-16]
 8003c18:	ed14 4a03 	vldr	s8, [r4, #-12]
 8003c1c:	ed14 6a02 	vldr	s12, [r4, #-8]
 8003c20:	ed54 5a01 	vldr	s11, [r4, #-4]
 8003c24:	ed53 3a04 	vldr	s7, [r3, #-16]
 8003c28:	ed15 0a02 	vldr	s0, [r5, #-8]
 8003c2c:	ed55 0a01 	vldr	s1, [r5, #-4]
 8003c30:	ed56 6a04 	vldr	s13, [r6, #-16]
 8003c34:	ed16 3a03 	vldr	s6, [r6, #-12]
 8003c38:	ed13 7a03 	vldr	s14, [r3, #-12]
 8003c3c:	ed13 5a02 	vldr	s10, [r3, #-8]
 8003c40:	ed53 7a01 	vldr	s15, [r3, #-4]
 8003c44:	ed16 1a02 	vldr	s2, [r6, #-8]
 8003c48:	ed56 1a01 	vldr	s3, [r6, #-4]
 8003c4c:	ee73 ba82 	vadd.f32	s23, s7, s4
 8003c50:	ee37 ba22 	vadd.f32	s22, s14, s5
 8003c54:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8003c58:	ee33 9a04 	vadd.f32	s18, s6, s8
 8003c5c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8003c60:	ee75 aa00 	vadd.f32	s21, s10, s0
 8003c64:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8003c68:	ee71 8a06 	vadd.f32	s17, s2, s12
 8003c6c:	ed43 ba04 	vstr	s23, [r3, #-16]
 8003c70:	ed03 ba03 	vstr	s22, [r3, #-12]
 8003c74:	ed43 aa02 	vstr	s21, [r3, #-8]
 8003c78:	ed03 aa01 	vstr	s20, [r3, #-4]
 8003c7c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8003c80:	ed46 9a04 	vstr	s19, [r6, #-16]
 8003c84:	ed06 9a03 	vstr	s18, [r6, #-12]
 8003c88:	ed46 8a02 	vstr	s17, [r6, #-8]
 8003c8c:	ee37 7a62 	vsub.f32	s14, s14, s5
 8003c90:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8003c94:	ee34 4a43 	vsub.f32	s8, s8, s6
 8003c98:	ed52 6a03 	vldr	s13, [r2, #-12]
 8003c9c:	ed12 3a04 	vldr	s6, [r2, #-16]
 8003ca0:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8003ca4:	ee27 8a26 	vmul.f32	s16, s14, s13
 8003ca8:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8003cac:	ee23 2a83 	vmul.f32	s4, s7, s6
 8003cb0:	ee64 4a83 	vmul.f32	s9, s9, s6
 8003cb4:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8003cb8:	ee27 7a03 	vmul.f32	s14, s14, s6
 8003cbc:	ee64 6a26 	vmul.f32	s13, s8, s13
 8003cc0:	ee24 4a03 	vmul.f32	s8, s8, s6
 8003cc4:	ee37 7a63 	vsub.f32	s14, s14, s7
 8003cc8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8003ccc:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8003cd0:	ee32 3a08 	vadd.f32	s6, s4, s16
 8003cd4:	ed05 7a03 	vstr	s14, [r5, #-12]
 8003cd8:	ed05 3a04 	vstr	s6, [r5, #-16]
 8003cdc:	ed04 4a04 	vstr	s8, [r4, #-16]
 8003ce0:	ed44 6a03 	vstr	s13, [r4, #-12]
 8003ce4:	ed12 7a01 	vldr	s14, [r2, #-4]
 8003ce8:	ee76 6a41 	vsub.f32	s13, s12, s2
 8003cec:	ee35 5a40 	vsub.f32	s10, s10, s0
 8003cf0:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8003cf4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8003cf8:	ed52 5a02 	vldr	s11, [r2, #-8]
 8003cfc:	ee67 3a87 	vmul.f32	s7, s15, s14
 8003d00:	ee66 4a87 	vmul.f32	s9, s13, s14
 8003d04:	ee25 4a25 	vmul.f32	s8, s10, s11
 8003d08:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003d0c:	ee25 5a07 	vmul.f32	s10, s10, s14
 8003d10:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8003d14:	ee26 7a07 	vmul.f32	s14, s12, s14
 8003d18:	ee26 6a25 	vmul.f32	s12, s12, s11
 8003d1c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8003d20:	ee74 5a23 	vadd.f32	s11, s8, s7
 8003d24:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8003d28:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003d2c:	3310      	adds	r3, #16
 8003d2e:	4563      	cmp	r3, ip
 8003d30:	ed45 5a02 	vstr	s11, [r5, #-8]
 8003d34:	f106 0610 	add.w	r6, r6, #16
 8003d38:	ed45 7a01 	vstr	s15, [r5, #-4]
 8003d3c:	f102 0210 	add.w	r2, r2, #16
 8003d40:	ed04 6a02 	vstr	s12, [r4, #-8]
 8003d44:	ed04 7a01 	vstr	s14, [r4, #-4]
 8003d48:	f105 0510 	add.w	r5, r5, #16
 8003d4c:	f104 0410 	add.w	r4, r4, #16
 8003d50:	f47f af5c 	bne.w	8003c0c <arm_cfft_radix8by2_f32+0x38>
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	b28c      	uxth	r4, r1
 8003d58:	4621      	mov	r1, r4
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	f000 ff2c 	bl	8004bb8 <arm_radix8_butterfly_f32>
 8003d60:	ecbd 8b08 	vpop	{d8-d11}
 8003d64:	4621      	mov	r1, r4
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	4640      	mov	r0, r8
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d70:	f000 bf22 	b.w	8004bb8 <arm_radix8_butterfly_f32>

08003d74 <arm_cfft_radix8by4_f32>:
 8003d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d78:	ed2d 8b0a 	vpush	{d8-d12}
 8003d7c:	b08d      	sub	sp, #52	; 0x34
 8003d7e:	460d      	mov	r5, r1
 8003d80:	910b      	str	r1, [sp, #44]	; 0x2c
 8003d82:	8801      	ldrh	r1, [r0, #0]
 8003d84:	6842      	ldr	r2, [r0, #4]
 8003d86:	900a      	str	r0, [sp, #40]	; 0x28
 8003d88:	0849      	lsrs	r1, r1, #1
 8003d8a:	008b      	lsls	r3, r1, #2
 8003d8c:	18ee      	adds	r6, r5, r3
 8003d8e:	18f0      	adds	r0, r6, r3
 8003d90:	edd0 5a00 	vldr	s11, [r0]
 8003d94:	edd5 7a00 	vldr	s15, [r5]
 8003d98:	ed96 7a00 	vldr	s14, [r6]
 8003d9c:	edd0 3a01 	vldr	s7, [r0, #4]
 8003da0:	ed96 4a01 	vldr	s8, [r6, #4]
 8003da4:	ed95 5a01 	vldr	s10, [r5, #4]
 8003da8:	9008      	str	r0, [sp, #32]
 8003daa:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8003dae:	18c7      	adds	r7, r0, r3
 8003db0:	edd7 4a00 	vldr	s9, [r7]
 8003db4:	ed97 3a01 	vldr	s6, [r7, #4]
 8003db8:	9701      	str	r7, [sp, #4]
 8003dba:	ee77 6a06 	vadd.f32	s13, s14, s12
 8003dbe:	462c      	mov	r4, r5
 8003dc0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8003dc4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8003dc8:	ee16 ca90 	vmov	ip, s13
 8003dcc:	f844 cb08 	str.w	ip, [r4], #8
 8003dd0:	ee75 6a23 	vadd.f32	s13, s10, s7
 8003dd4:	edd6 5a01 	vldr	s11, [r6, #4]
 8003dd8:	edd7 2a01 	vldr	s5, [r7, #4]
 8003ddc:	9404      	str	r4, [sp, #16]
 8003dde:	ee35 5a63 	vsub.f32	s10, s10, s7
 8003de2:	ee74 3a27 	vadd.f32	s7, s8, s15
 8003de6:	ee36 6a47 	vsub.f32	s12, s12, s14
 8003dea:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8003dee:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8003df2:	0849      	lsrs	r1, r1, #1
 8003df4:	f102 0e08 	add.w	lr, r2, #8
 8003df8:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8003dfc:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8003e00:	9109      	str	r1, [sp, #36]	; 0x24
 8003e02:	ee35 4a47 	vsub.f32	s8, s10, s14
 8003e06:	f1a1 0902 	sub.w	r9, r1, #2
 8003e0a:	f8cd e00c 	str.w	lr, [sp, #12]
 8003e0e:	4631      	mov	r1, r6
 8003e10:	ee13 ea90 	vmov	lr, s7
 8003e14:	ee36 6a64 	vsub.f32	s12, s12, s9
 8003e18:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8003e1c:	4604      	mov	r4, r0
 8003e1e:	edc5 5a01 	vstr	s11, [r5, #4]
 8003e22:	ee37 7a05 	vadd.f32	s14, s14, s10
 8003e26:	f841 eb08 	str.w	lr, [r1], #8
 8003e2a:	ee34 5a24 	vadd.f32	s10, s8, s9
 8003e2e:	ee16 ea10 	vmov	lr, s12
 8003e32:	ed86 5a01 	vstr	s10, [r6, #4]
 8003e36:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8003e3a:	f844 eb08 	str.w	lr, [r4], #8
 8003e3e:	ee77 7a83 	vadd.f32	s15, s15, s6
 8003e42:	edc0 6a01 	vstr	s13, [r0, #4]
 8003e46:	9405      	str	r4, [sp, #20]
 8003e48:	4604      	mov	r4, r0
 8003e4a:	ee17 0a90 	vmov	r0, s15
 8003e4e:	9106      	str	r1, [sp, #24]
 8003e50:	ee37 7a64 	vsub.f32	s14, s14, s9
 8003e54:	f102 0110 	add.w	r1, r2, #16
 8003e58:	46bc      	mov	ip, r7
 8003e5a:	9100      	str	r1, [sp, #0]
 8003e5c:	f847 0b08 	str.w	r0, [r7], #8
 8003e60:	f102 0118 	add.w	r1, r2, #24
 8003e64:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8003e68:	9102      	str	r1, [sp, #8]
 8003e6a:	ed8c 7a01 	vstr	s14, [ip, #4]
 8003e6e:	9007      	str	r0, [sp, #28]
 8003e70:	f000 8134 	beq.w	80040dc <arm_cfft_radix8by4_f32+0x368>
 8003e74:	f102 0920 	add.w	r9, r2, #32
 8003e78:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8003e7c:	9a01      	ldr	r2, [sp, #4]
 8003e7e:	f8dd a000 	ldr.w	sl, [sp]
 8003e82:	3b0c      	subs	r3, #12
 8003e84:	4683      	mov	fp, r0
 8003e86:	4463      	add	r3, ip
 8003e88:	f105 0e10 	add.w	lr, r5, #16
 8003e8c:	f1a4 010c 	sub.w	r1, r4, #12
 8003e90:	f104 0510 	add.w	r5, r4, #16
 8003e94:	f1a6 0c0c 	sub.w	ip, r6, #12
 8003e98:	f1a2 040c 	sub.w	r4, r2, #12
 8003e9c:	f106 0010 	add.w	r0, r6, #16
 8003ea0:	3210      	adds	r2, #16
 8003ea2:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8003ea6:	ed55 5a02 	vldr	s11, [r5, #-8]
 8003eaa:	ed50 7a02 	vldr	s15, [r0, #-8]
 8003eae:	ed52 1a02 	vldr	s3, [r2, #-8]
 8003eb2:	ed55 6a01 	vldr	s13, [r5, #-4]
 8003eb6:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8003eba:	ed12 1a01 	vldr	s2, [r2, #-4]
 8003ebe:	ed10 8a01 	vldr	s16, [r0, #-4]
 8003ec2:	ee35 4a25 	vadd.f32	s8, s10, s11
 8003ec6:	ee30 6a26 	vadd.f32	s12, s0, s13
 8003eca:	ee37 7a84 	vadd.f32	s14, s15, s8
 8003ece:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003ed2:	ee37 7a21 	vadd.f32	s14, s14, s3
 8003ed6:	ee75 5a65 	vsub.f32	s11, s10, s11
 8003eda:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8003ede:	ed10 7a01 	vldr	s14, [r0, #-4]
 8003ee2:	ed52 6a01 	vldr	s13, [r2, #-4]
 8003ee6:	ee36 7a07 	vadd.f32	s14, s12, s14
 8003eea:	ee78 aa25 	vadd.f32	s21, s16, s11
 8003eee:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003ef2:	ee70 3a67 	vsub.f32	s7, s0, s15
 8003ef6:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8003efa:	ed94 7a02 	vldr	s14, [r4, #8]
 8003efe:	ed9c 2a02 	vldr	s4, [ip, #8]
 8003f02:	ed91 ba02 	vldr	s22, [r1, #8]
 8003f06:	edd3 9a02 	vldr	s19, [r3, #8]
 8003f0a:	edd4 2a01 	vldr	s5, [r4, #4]
 8003f0e:	ed9c 9a01 	vldr	s18, [ip, #4]
 8003f12:	ed93 5a01 	vldr	s10, [r3, #4]
 8003f16:	edd1 0a01 	vldr	s1, [r1, #4]
 8003f1a:	ee72 6a07 	vadd.f32	s13, s4, s14
 8003f1e:	ee32 2a47 	vsub.f32	s4, s4, s14
 8003f22:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8003f26:	ee79 4a22 	vadd.f32	s9, s18, s5
 8003f2a:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8003f2e:	ee79 2a62 	vsub.f32	s5, s18, s5
 8003f32:	ed8c 7a02 	vstr	s14, [ip, #8]
 8003f36:	ed91 7a01 	vldr	s14, [r1, #4]
 8003f3a:	edd3 8a01 	vldr	s17, [r3, #4]
 8003f3e:	ee34 7a87 	vadd.f32	s14, s9, s14
 8003f42:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8003f46:	ee37 7a28 	vadd.f32	s14, s14, s17
 8003f4a:	ee32 9a60 	vsub.f32	s18, s4, s1
 8003f4e:	ed8c 7a01 	vstr	s14, [ip, #4]
 8003f52:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8003f56:	ed1a aa02 	vldr	s20, [sl, #-8]
 8003f5a:	ee73 8a22 	vadd.f32	s17, s6, s5
 8003f5e:	ee39 9a05 	vadd.f32	s18, s18, s10
 8003f62:	ee7a aac1 	vsub.f32	s21, s21, s2
 8003f66:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8003f6a:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8003f6e:	ee69 ba07 	vmul.f32	s23, s18, s14
 8003f72:	ee6a aa87 	vmul.f32	s21, s21, s14
 8003f76:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8003f7a:	ee63 ca87 	vmul.f32	s25, s7, s14
 8003f7e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8003f82:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8003f86:	ee68 8a87 	vmul.f32	s17, s17, s14
 8003f8a:	ee73 3aea 	vsub.f32	s7, s7, s21
 8003f8e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8003f92:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8003f96:	ee3b aaca 	vsub.f32	s20, s23, s20
 8003f9a:	ee34 4a67 	vsub.f32	s8, s8, s15
 8003f9e:	ee76 6acb 	vsub.f32	s13, s13, s22
 8003fa2:	ee36 6a48 	vsub.f32	s12, s12, s16
 8003fa6:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8003faa:	ed00 7a02 	vstr	s14, [r0, #-8]
 8003fae:	ed40 3a01 	vstr	s7, [r0, #-4]
 8003fb2:	edc1 8a01 	vstr	s17, [r1, #4]
 8003fb6:	ed81 aa02 	vstr	s20, [r1, #8]
 8003fba:	ed59 3a04 	vldr	s7, [r9, #-16]
 8003fbe:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8003fc2:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8003fc6:	ed59 6a03 	vldr	s13, [r9, #-12]
 8003fca:	ee34 4a61 	vsub.f32	s8, s8, s3
 8003fce:	ee36 6a41 	vsub.f32	s12, s12, s2
 8003fd2:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8003fd6:	ee66 9a26 	vmul.f32	s19, s12, s13
 8003fda:	ee24 9a23 	vmul.f32	s18, s8, s7
 8003fde:	ee26 6a23 	vmul.f32	s12, s12, s7
 8003fe2:	ee24 4a26 	vmul.f32	s8, s8, s13
 8003fe6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003fea:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8003fee:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8003ff2:	ee36 6a44 	vsub.f32	s12, s12, s8
 8003ff6:	ee37 7a64 	vsub.f32	s14, s14, s9
 8003ffa:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8003ffe:	ee79 3a29 	vadd.f32	s7, s18, s19
 8004002:	ee75 6a60 	vsub.f32	s13, s10, s1
 8004006:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800400a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800400e:	ed45 3a02 	vstr	s7, [r5, #-8]
 8004012:	ed05 6a01 	vstr	s12, [r5, #-4]
 8004016:	ed84 7a01 	vstr	s14, [r4, #4]
 800401a:	ed84 4a02 	vstr	s8, [r4, #8]
 800401e:	ee35 6a81 	vadd.f32	s12, s11, s2
 8004022:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8004026:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800402a:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800402e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8004032:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8004036:	ee67 2a26 	vmul.f32	s5, s14, s13
 800403a:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800403e:	ee26 5a25 	vmul.f32	s10, s12, s11
 8004042:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004046:	ee26 6a26 	vmul.f32	s12, s12, s13
 800404a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800404e:	ee63 6a26 	vmul.f32	s13, s6, s13
 8004052:	ee23 3a25 	vmul.f32	s6, s6, s11
 8004056:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800405a:	ee75 5a24 	vadd.f32	s11, s10, s9
 800405e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8004062:	ee36 7a87 	vadd.f32	s14, s13, s14
 8004066:	f1bb 0b01 	subs.w	fp, fp, #1
 800406a:	ed42 5a02 	vstr	s11, [r2, #-8]
 800406e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8004072:	f10e 0e08 	add.w	lr, lr, #8
 8004076:	ed83 3a02 	vstr	s6, [r3, #8]
 800407a:	ed83 7a01 	vstr	s14, [r3, #4]
 800407e:	f1ac 0c08 	sub.w	ip, ip, #8
 8004082:	f10a 0a08 	add.w	sl, sl, #8
 8004086:	f100 0008 	add.w	r0, r0, #8
 800408a:	f1a1 0108 	sub.w	r1, r1, #8
 800408e:	f109 0910 	add.w	r9, r9, #16
 8004092:	f105 0508 	add.w	r5, r5, #8
 8004096:	f1a4 0408 	sub.w	r4, r4, #8
 800409a:	f108 0818 	add.w	r8, r8, #24
 800409e:	f102 0208 	add.w	r2, r2, #8
 80040a2:	f1a3 0308 	sub.w	r3, r3, #8
 80040a6:	f47f aefc 	bne.w	8003ea2 <arm_cfft_radix8by4_f32+0x12e>
 80040aa:	9907      	ldr	r1, [sp, #28]
 80040ac:	9800      	ldr	r0, [sp, #0]
 80040ae:	00cb      	lsls	r3, r1, #3
 80040b0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80040b4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80040b8:	9100      	str	r1, [sp, #0]
 80040ba:	9904      	ldr	r1, [sp, #16]
 80040bc:	4419      	add	r1, r3
 80040be:	9104      	str	r1, [sp, #16]
 80040c0:	9903      	ldr	r1, [sp, #12]
 80040c2:	4419      	add	r1, r3
 80040c4:	9103      	str	r1, [sp, #12]
 80040c6:	9906      	ldr	r1, [sp, #24]
 80040c8:	4419      	add	r1, r3
 80040ca:	9106      	str	r1, [sp, #24]
 80040cc:	9905      	ldr	r1, [sp, #20]
 80040ce:	441f      	add	r7, r3
 80040d0:	4419      	add	r1, r3
 80040d2:	9b02      	ldr	r3, [sp, #8]
 80040d4:	9105      	str	r1, [sp, #20]
 80040d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80040da:	9302      	str	r3, [sp, #8]
 80040dc:	9904      	ldr	r1, [sp, #16]
 80040de:	9805      	ldr	r0, [sp, #20]
 80040e0:	ed91 4a00 	vldr	s8, [r1]
 80040e4:	edd0 6a00 	vldr	s13, [r0]
 80040e8:	9b06      	ldr	r3, [sp, #24]
 80040ea:	ed97 3a00 	vldr	s6, [r7]
 80040ee:	edd3 7a00 	vldr	s15, [r3]
 80040f2:	edd0 4a01 	vldr	s9, [r0, #4]
 80040f6:	edd1 3a01 	vldr	s7, [r1, #4]
 80040fa:	ed97 2a01 	vldr	s4, [r7, #4]
 80040fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8004102:	9a03      	ldr	r2, [sp, #12]
 8004104:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8004108:	ee34 6a26 	vadd.f32	s12, s8, s13
 800410c:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8004110:	ee37 5a86 	vadd.f32	s10, s15, s12
 8004114:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8004118:	ee35 5a03 	vadd.f32	s10, s10, s6
 800411c:	ee74 6a66 	vsub.f32	s13, s8, s13
 8004120:	ed81 5a00 	vstr	s10, [r1]
 8004124:	ed93 5a01 	vldr	s10, [r3, #4]
 8004128:	edd7 4a01 	vldr	s9, [r7, #4]
 800412c:	ee35 5a85 	vadd.f32	s10, s11, s10
 8004130:	ee37 4a26 	vadd.f32	s8, s14, s13
 8004134:	ee35 5a24 	vadd.f32	s10, s10, s9
 8004138:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800413c:	ed81 5a01 	vstr	s10, [r1, #4]
 8004140:	edd2 1a00 	vldr	s3, [r2]
 8004144:	edd2 2a01 	vldr	s5, [r2, #4]
 8004148:	ee34 5a83 	vadd.f32	s10, s9, s6
 800414c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004150:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004154:	ee64 4a21 	vmul.f32	s9, s8, s3
 8004158:	ee24 4a22 	vmul.f32	s8, s8, s5
 800415c:	ee65 2a22 	vmul.f32	s5, s10, s5
 8004160:	ee25 5a21 	vmul.f32	s10, s10, s3
 8004164:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8004168:	ee35 5a44 	vsub.f32	s10, s10, s8
 800416c:	edc3 2a00 	vstr	s5, [r3]
 8004170:	ed83 5a01 	vstr	s10, [r3, #4]
 8004174:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8004178:	9b00      	ldr	r3, [sp, #0]
 800417a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800417e:	ed93 4a01 	vldr	s8, [r3, #4]
 8004182:	ed93 5a00 	vldr	s10, [r3]
 8004186:	9b02      	ldr	r3, [sp, #8]
 8004188:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800418c:	ee66 4a05 	vmul.f32	s9, s12, s10
 8004190:	ee25 5a85 	vmul.f32	s10, s11, s10
 8004194:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004198:	ee65 5a84 	vmul.f32	s11, s11, s8
 800419c:	ee35 6a46 	vsub.f32	s12, s10, s12
 80041a0:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80041a4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80041a8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80041ac:	ed80 6a01 	vstr	s12, [r0, #4]
 80041b0:	edc0 5a00 	vstr	s11, [r0]
 80041b4:	edd3 5a01 	vldr	s11, [r3, #4]
 80041b8:	edd3 6a00 	vldr	s13, [r3]
 80041bc:	ee37 7a02 	vadd.f32	s14, s14, s4
 80041c0:	ee77 7ac3 	vsub.f32	s15, s15, s6
 80041c4:	ee27 6a26 	vmul.f32	s12, s14, s13
 80041c8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80041cc:	ee27 7a25 	vmul.f32	s14, s14, s11
 80041d0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80041d4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80041d8:	ee76 7a27 	vadd.f32	s15, s12, s15
 80041dc:	ed87 7a01 	vstr	s14, [r7, #4]
 80041e0:	edc7 7a00 	vstr	s15, [r7]
 80041e4:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 80041e8:	4621      	mov	r1, r4
 80041ea:	686a      	ldr	r2, [r5, #4]
 80041ec:	2304      	movs	r3, #4
 80041ee:	f000 fce3 	bl	8004bb8 <arm_radix8_butterfly_f32>
 80041f2:	4630      	mov	r0, r6
 80041f4:	4621      	mov	r1, r4
 80041f6:	686a      	ldr	r2, [r5, #4]
 80041f8:	2304      	movs	r3, #4
 80041fa:	f000 fcdd 	bl	8004bb8 <arm_radix8_butterfly_f32>
 80041fe:	9808      	ldr	r0, [sp, #32]
 8004200:	686a      	ldr	r2, [r5, #4]
 8004202:	4621      	mov	r1, r4
 8004204:	2304      	movs	r3, #4
 8004206:	f000 fcd7 	bl	8004bb8 <arm_radix8_butterfly_f32>
 800420a:	686a      	ldr	r2, [r5, #4]
 800420c:	9801      	ldr	r0, [sp, #4]
 800420e:	4621      	mov	r1, r4
 8004210:	2304      	movs	r3, #4
 8004212:	b00d      	add	sp, #52	; 0x34
 8004214:	ecbd 8b0a 	vpop	{d8-d12}
 8004218:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800421c:	f000 bccc 	b.w	8004bb8 <arm_radix8_butterfly_f32>

08004220 <arm_cfft_f32>:
 8004220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004224:	2a01      	cmp	r2, #1
 8004226:	4606      	mov	r6, r0
 8004228:	4617      	mov	r7, r2
 800422a:	460c      	mov	r4, r1
 800422c:	4698      	mov	r8, r3
 800422e:	8805      	ldrh	r5, [r0, #0]
 8004230:	d056      	beq.n	80042e0 <arm_cfft_f32+0xc0>
 8004232:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8004236:	d063      	beq.n	8004300 <arm_cfft_f32+0xe0>
 8004238:	d916      	bls.n	8004268 <arm_cfft_f32+0x48>
 800423a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800423e:	d01a      	beq.n	8004276 <arm_cfft_f32+0x56>
 8004240:	d947      	bls.n	80042d2 <arm_cfft_f32+0xb2>
 8004242:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8004246:	d05b      	beq.n	8004300 <arm_cfft_f32+0xe0>
 8004248:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800424c:	d105      	bne.n	800425a <arm_cfft_f32+0x3a>
 800424e:	2301      	movs	r3, #1
 8004250:	6872      	ldr	r2, [r6, #4]
 8004252:	4629      	mov	r1, r5
 8004254:	4620      	mov	r0, r4
 8004256:	f000 fcaf 	bl	8004bb8 <arm_radix8_butterfly_f32>
 800425a:	f1b8 0f00 	cmp.w	r8, #0
 800425e:	d111      	bne.n	8004284 <arm_cfft_f32+0x64>
 8004260:	2f01      	cmp	r7, #1
 8004262:	d016      	beq.n	8004292 <arm_cfft_f32+0x72>
 8004264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004268:	2d20      	cmp	r5, #32
 800426a:	d049      	beq.n	8004300 <arm_cfft_f32+0xe0>
 800426c:	d935      	bls.n	80042da <arm_cfft_f32+0xba>
 800426e:	2d40      	cmp	r5, #64	; 0x40
 8004270:	d0ed      	beq.n	800424e <arm_cfft_f32+0x2e>
 8004272:	2d80      	cmp	r5, #128	; 0x80
 8004274:	d1f1      	bne.n	800425a <arm_cfft_f32+0x3a>
 8004276:	4621      	mov	r1, r4
 8004278:	4630      	mov	r0, r6
 800427a:	f7ff fcab 	bl	8003bd4 <arm_cfft_radix8by2_f32>
 800427e:	f1b8 0f00 	cmp.w	r8, #0
 8004282:	d0ed      	beq.n	8004260 <arm_cfft_f32+0x40>
 8004284:	68b2      	ldr	r2, [r6, #8]
 8004286:	89b1      	ldrh	r1, [r6, #12]
 8004288:	4620      	mov	r0, r4
 800428a:	f000 f841 	bl	8004310 <arm_bitreversal_32>
 800428e:	2f01      	cmp	r7, #1
 8004290:	d1e8      	bne.n	8004264 <arm_cfft_f32+0x44>
 8004292:	ee07 5a90 	vmov	s15, r5
 8004296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800429e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80042a2:	2d00      	cmp	r5, #0
 80042a4:	d0de      	beq.n	8004264 <arm_cfft_f32+0x44>
 80042a6:	f104 0108 	add.w	r1, r4, #8
 80042aa:	2300      	movs	r3, #0
 80042ac:	3301      	adds	r3, #1
 80042ae:	429d      	cmp	r5, r3
 80042b0:	f101 0108 	add.w	r1, r1, #8
 80042b4:	ed11 7a04 	vldr	s14, [r1, #-16]
 80042b8:	ed51 7a03 	vldr	s15, [r1, #-12]
 80042bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80042c0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80042c4:	ed01 7a04 	vstr	s14, [r1, #-16]
 80042c8:	ed41 7a03 	vstr	s15, [r1, #-12]
 80042cc:	d1ee      	bne.n	80042ac <arm_cfft_f32+0x8c>
 80042ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042d2:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80042d6:	d0ba      	beq.n	800424e <arm_cfft_f32+0x2e>
 80042d8:	e7bf      	b.n	800425a <arm_cfft_f32+0x3a>
 80042da:	2d10      	cmp	r5, #16
 80042dc:	d0cb      	beq.n	8004276 <arm_cfft_f32+0x56>
 80042de:	e7bc      	b.n	800425a <arm_cfft_f32+0x3a>
 80042e0:	b19d      	cbz	r5, 800430a <arm_cfft_f32+0xea>
 80042e2:	f101 030c 	add.w	r3, r1, #12
 80042e6:	2200      	movs	r2, #0
 80042e8:	ed53 7a02 	vldr	s15, [r3, #-8]
 80042ec:	3201      	adds	r2, #1
 80042ee:	eef1 7a67 	vneg.f32	s15, s15
 80042f2:	4295      	cmp	r5, r2
 80042f4:	ed43 7a02 	vstr	s15, [r3, #-8]
 80042f8:	f103 0308 	add.w	r3, r3, #8
 80042fc:	d1f4      	bne.n	80042e8 <arm_cfft_f32+0xc8>
 80042fe:	e798      	b.n	8004232 <arm_cfft_f32+0x12>
 8004300:	4621      	mov	r1, r4
 8004302:	4630      	mov	r0, r6
 8004304:	f7ff fd36 	bl	8003d74 <arm_cfft_radix8by4_f32>
 8004308:	e7a7      	b.n	800425a <arm_cfft_f32+0x3a>
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0aa      	beq.n	8004264 <arm_cfft_f32+0x44>
 800430e:	e7b9      	b.n	8004284 <arm_cfft_f32+0x64>

08004310 <arm_bitreversal_32>:
 8004310:	b1e9      	cbz	r1, 800434e <arm_bitreversal_32+0x3e>
 8004312:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004314:	2500      	movs	r5, #0
 8004316:	f102 0e02 	add.w	lr, r2, #2
 800431a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800431e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8004322:	08a4      	lsrs	r4, r4, #2
 8004324:	089b      	lsrs	r3, r3, #2
 8004326:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800432a:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800432e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8004332:	00a6      	lsls	r6, r4, #2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800433a:	3304      	adds	r3, #4
 800433c:	1d34      	adds	r4, r6, #4
 800433e:	3502      	adds	r5, #2
 8004340:	58c6      	ldr	r6, [r0, r3]
 8004342:	5907      	ldr	r7, [r0, r4]
 8004344:	50c7      	str	r7, [r0, r3]
 8004346:	428d      	cmp	r5, r1
 8004348:	5106      	str	r6, [r0, r4]
 800434a:	d3e6      	bcc.n	800431a <arm_bitreversal_32+0xa>
 800434c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800434e:	4770      	bx	lr

08004350 <arm_correlate_f32>:
 8004350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004354:	4299      	cmp	r1, r3
 8004356:	b08d      	sub	sp, #52	; 0x34
 8004358:	f0c0 824c 	bcc.w	80047f4 <arm_correlate_f32+0x4a4>
 800435c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800435e:	eba1 0c03 	sub.w	ip, r1, r3
 8004362:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 8004366:	f04f 0e04 	mov.w	lr, #4
 800436a:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 800436e:	3101      	adds	r1, #1
 8004370:	1ac9      	subs	r1, r1, r3
 8004372:	3c01      	subs	r4, #1
 8004374:	1e5e      	subs	r6, r3, #1
 8004376:	9102      	str	r1, [sp, #8]
 8004378:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800437c:	f000 8294 	beq.w	80048a8 <arm_correlate_f32+0x558>
 8004380:	eddf 7a53 	vldr	s15, [pc, #332]	; 80044d0 <arm_correlate_f32+0x180>
 8004384:	f1a1 0804 	sub.w	r8, r1, #4
 8004388:	46e1      	mov	r9, ip
 800438a:	4605      	mov	r5, r0
 800438c:	2401      	movs	r4, #1
 800438e:	f014 0703 	ands.w	r7, r4, #3
 8004392:	d01b      	beq.n	80043cc <arm_correlate_f32+0x7c>
 8004394:	ed91 7a00 	vldr	s14, [r1]
 8004398:	edd5 6a00 	vldr	s13, [r5]
 800439c:	ee27 7a26 	vmul.f32	s14, s14, s13
 80043a0:	3f01      	subs	r7, #1
 80043a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043a6:	d011      	beq.n	80043cc <arm_correlate_f32+0x7c>
 80043a8:	ed91 7a01 	vldr	s14, [r1, #4]
 80043ac:	edd5 6a01 	vldr	s13, [r5, #4]
 80043b0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80043b4:	2f01      	cmp	r7, #1
 80043b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043ba:	d007      	beq.n	80043cc <arm_correlate_f32+0x7c>
 80043bc:	ed95 7a02 	vldr	s14, [r5, #8]
 80043c0:	edd1 6a02 	vldr	s13, [r1, #8]
 80043c4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80043c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043cc:	1c67      	adds	r7, r4, #1
 80043ce:	42bb      	cmp	r3, r7
 80043d0:	edc9 7a00 	vstr	s15, [r9]
 80043d4:	4641      	mov	r1, r8
 80043d6:	44f1      	add	r9, lr
 80043d8:	d03a      	beq.n	8004450 <arm_correlate_f32+0x100>
 80043da:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 80043de:	f000 8267 	beq.w	80048b0 <arm_correlate_f32+0x560>
 80043e2:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 80043e6:	f100 0110 	add.w	r1, r0, #16
 80043ea:	eddf 7a39 	vldr	s15, [pc, #228]	; 80044d0 <arm_correlate_f32+0x180>
 80043ee:	eb01 050a 	add.w	r5, r1, sl
 80043f2:	f108 0410 	add.w	r4, r8, #16
 80043f6:	ed11 7a04 	vldr	s14, [r1, #-16]
 80043fa:	ed54 3a04 	vldr	s7, [r4, #-16]
 80043fe:	ed11 6a03 	vldr	s12, [r1, #-12]
 8004402:	ed14 4a03 	vldr	s8, [r4, #-12]
 8004406:	ed51 6a02 	vldr	s13, [r1, #-8]
 800440a:	ed54 4a02 	vldr	s9, [r4, #-8]
 800440e:	ed51 5a01 	vldr	s11, [r1, #-4]
 8004412:	ed14 5a01 	vldr	s10, [r4, #-4]
 8004416:	ee27 7a23 	vmul.f32	s14, s14, s7
 800441a:	ee26 6a04 	vmul.f32	s12, s12, s8
 800441e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004422:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8004426:	ee76 7a27 	vadd.f32	s15, s12, s15
 800442a:	ee65 6a85 	vmul.f32	s13, s11, s10
 800442e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004432:	3110      	adds	r1, #16
 8004434:	428d      	cmp	r5, r1
 8004436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800443a:	f104 0410 	add.w	r4, r4, #16
 800443e:	d1da      	bne.n	80043f6 <arm_correlate_f32+0xa6>
 8004440:	eb00 050a 	add.w	r5, r0, sl
 8004444:	eb08 010a 	add.w	r1, r8, sl
 8004448:	f1a8 0804 	sub.w	r8, r8, #4
 800444c:	463c      	mov	r4, r7
 800444e:	e79e      	b.n	800438e <arm_correlate_f32+0x3e>
 8004450:	2b03      	cmp	r3, #3
 8004452:	fb0e cc04 	mla	ip, lr, r4, ip
 8004456:	f240 81dd 	bls.w	8004814 <arm_correlate_f32+0x4c4>
 800445a:	9b02      	ldr	r3, [sp, #8]
 800445c:	0899      	lsrs	r1, r3, #2
 800445e:	9103      	str	r1, [sp, #12]
 8004460:	f000 8220 	beq.w	80048a4 <arm_correlate_f32+0x554>
 8004464:	08bb      	lsrs	r3, r7, #2
 8004466:	f007 0403 	and.w	r4, r7, #3
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	f103 0b0c 	add.w	fp, r3, #12
 8004472:	18d5      	adds	r5, r2, r3
 8004474:	1e63      	subs	r3, r4, #1
 8004476:	0109      	lsls	r1, r1, #4
 8004478:	9306      	str	r3, [sp, #24]
 800447a:	f100 080c 	add.w	r8, r0, #12
 800447e:	9401      	str	r4, [sp, #4]
 8004480:	9104      	str	r1, [sp, #16]
 8004482:	ea4f 048e 	mov.w	r4, lr, lsl #2
 8004486:	4441      	add	r1, r8
 8004488:	f102 0310 	add.w	r3, r2, #16
 800448c:	e9cd 6009 	strd	r6, r0, [sp, #36]	; 0x24
 8004490:	9e06      	ldr	r6, [sp, #24]
 8004492:	9405      	str	r4, [sp, #20]
 8004494:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 8004498:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 800449c:	46e1      	mov	r9, ip
 800449e:	4483      	add	fp, r0
 80044a0:	460f      	mov	r7, r1
 80044a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80044a4:	469c      	mov	ip, r3
 80044a6:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 80044d0 <arm_correlate_f32+0x180>
 80044aa:	ed58 1a03 	vldr	s3, [r8, #-12]
 80044ae:	ed18 2a02 	vldr	s4, [r8, #-8]
 80044b2:	ed58 2a01 	vldr	s5, [r8, #-4]
 80044b6:	ed98 0a00 	vldr	s0, [r8]
 80044ba:	9900      	ldr	r1, [sp, #0]
 80044bc:	eef0 5a46 	vmov.f32	s11, s12
 80044c0:	eeb0 5a46 	vmov.f32	s10, s12
 80044c4:	eef0 4a46 	vmov.f32	s9, s12
 80044c8:	4663      	mov	r3, ip
 80044ca:	4642      	mov	r2, r8
 80044cc:	e005      	b.n	80044da <arm_correlate_f32+0x18a>
 80044ce:	bf00      	nop
 80044d0:	00000000 	.word	0x00000000
 80044d4:	ed90 0a04 	vldr	s0, [r0, #16]
 80044d8:	3210      	adds	r2, #16
 80044da:	ed53 6a04 	vldr	s13, [r3, #-16]
 80044de:	ed13 7a03 	vldr	s14, [r3, #-12]
 80044e2:	ed53 7a02 	vldr	s15, [r3, #-8]
 80044e6:	ed13 1a01 	vldr	s2, [r3, #-4]
 80044ea:	ee62 3a26 	vmul.f32	s7, s4, s13
 80044ee:	ee22 4aa6 	vmul.f32	s8, s5, s13
 80044f2:	ee61 0aa6 	vmul.f32	s1, s3, s13
 80044f6:	edd2 1a01 	vldr	s3, [r2, #4]
 80044fa:	ee66 6a80 	vmul.f32	s13, s13, s0
 80044fe:	ee22 3a07 	vmul.f32	s6, s4, s14
 8004502:	ee33 5a85 	vadd.f32	s10, s7, s10
 8004506:	ee74 5a25 	vadd.f32	s11, s8, s11
 800450a:	ee62 3a87 	vmul.f32	s7, s5, s14
 800450e:	ee20 4a07 	vmul.f32	s8, s0, s14
 8004512:	ee70 4aa4 	vadd.f32	s9, s1, s9
 8004516:	ee36 6a86 	vadd.f32	s12, s13, s12
 800451a:	ed92 2a02 	vldr	s4, [r2, #8]
 800451e:	ee27 7a21 	vmul.f32	s14, s14, s3
 8004522:	ee73 3a85 	vadd.f32	s7, s7, s10
 8004526:	ee37 7a06 	vadd.f32	s14, s14, s12
 800452a:	ee20 5a27 	vmul.f32	s10, s0, s15
 800452e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8004532:	ee34 4a25 	vadd.f32	s8, s8, s11
 8004536:	ee62 4aa7 	vmul.f32	s9, s5, s15
 800453a:	ee61 5aa7 	vmul.f32	s11, s3, s15
 800453e:	edd2 2a03 	vldr	s5, [r2, #12]
 8004542:	ee67 7a82 	vmul.f32	s15, s15, s4
 8004546:	ee35 5a23 	vadd.f32	s10, s10, s7
 800454a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800454e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8004552:	ee20 0a01 	vmul.f32	s0, s0, s2
 8004556:	ee61 3a81 	vmul.f32	s7, s3, s2
 800455a:	ee75 5a84 	vadd.f32	s11, s11, s8
 800455e:	ee22 7a01 	vmul.f32	s14, s4, s2
 8004562:	ee21 6a22 	vmul.f32	s12, s2, s5
 8004566:	3901      	subs	r1, #1
 8004568:	f103 0310 	add.w	r3, r3, #16
 800456c:	ee70 4a24 	vadd.f32	s9, s0, s9
 8004570:	ee33 5a85 	vadd.f32	s10, s7, s10
 8004574:	ee77 5a25 	vadd.f32	s11, s14, s11
 8004578:	ee36 6a27 	vadd.f32	s12, s12, s15
 800457c:	4610      	mov	r0, r2
 800457e:	d1a9      	bne.n	80044d4 <arm_correlate_f32+0x184>
 8004580:	9b01      	ldr	r3, [sp, #4]
 8004582:	b3f3      	cbz	r3, 8004602 <arm_correlate_f32+0x2b2>
 8004584:	edd5 7a00 	vldr	s15, [r5]
 8004588:	ed9b 4a00 	vldr	s8, [fp]
 800458c:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8004590:	ee62 3a27 	vmul.f32	s7, s4, s15
 8004594:	ee22 7aa7 	vmul.f32	s14, s5, s15
 8004598:	ee64 7a27 	vmul.f32	s15, s8, s15
 800459c:	ee74 4aa6 	vadd.f32	s9, s9, s13
 80045a0:	ee35 5a23 	vadd.f32	s10, s10, s7
 80045a4:	ee75 5a87 	vadd.f32	s11, s11, s14
 80045a8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80045ac:	b34e      	cbz	r6, 8004602 <arm_correlate_f32+0x2b2>
 80045ae:	edd5 7a01 	vldr	s15, [r5, #4]
 80045b2:	eddb 6a01 	vldr	s13, [fp, #4]
 80045b6:	ee22 7a27 	vmul.f32	s14, s4, s15
 80045ba:	ee22 3aa7 	vmul.f32	s6, s5, s15
 80045be:	ee67 3a84 	vmul.f32	s7, s15, s8
 80045c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045c6:	2e01      	cmp	r6, #1
 80045c8:	ee74 4a87 	vadd.f32	s9, s9, s14
 80045cc:	ee35 5a03 	vadd.f32	s10, s10, s6
 80045d0:	ee75 5aa3 	vadd.f32	s11, s11, s7
 80045d4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80045d8:	d013      	beq.n	8004602 <arm_correlate_f32+0x2b2>
 80045da:	ed95 7a02 	vldr	s14, [r5, #8]
 80045de:	eddb 3a02 	vldr	s7, [fp, #8]
 80045e2:	ee62 7a87 	vmul.f32	s15, s5, s14
 80045e6:	ee27 4a04 	vmul.f32	s8, s14, s8
 80045ea:	ee67 6a26 	vmul.f32	s13, s14, s13
 80045ee:	ee27 7a23 	vmul.f32	s14, s14, s7
 80045f2:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80045f6:	ee35 5a04 	vadd.f32	s10, s10, s8
 80045fa:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80045fe:	ee36 6a07 	vadd.f32	s12, s12, s14
 8004602:	f108 0810 	add.w	r8, r8, #16
 8004606:	eb09 020e 	add.w	r2, r9, lr
 800460a:	eb0a 030e 	add.w	r3, sl, lr
 800460e:	4547      	cmp	r7, r8
 8004610:	edc9 4a00 	vstr	s9, [r9]
 8004614:	f10b 0b10 	add.w	fp, fp, #16
 8004618:	ed82 5a00 	vstr	s10, [r2]
 800461c:	44a1      	add	r9, r4
 800461e:	edca 5a00 	vstr	s11, [sl]
 8004622:	ed83 6a00 	vstr	s12, [r3]
 8004626:	44a2      	add	sl, r4
 8004628:	f47f af3d 	bne.w	80044a6 <arm_correlate_f32+0x156>
 800462c:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 8004630:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	; 0x24
 8004634:	9b03      	ldr	r3, [sp, #12]
 8004636:	9c05      	ldr	r4, [sp, #20]
 8004638:	9904      	ldr	r1, [sp, #16]
 800463a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800463c:	fb04 cc03 	mla	ip, r4, r3, ip
 8004640:	4401      	add	r1, r0
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	460d      	mov	r5, r1
 8004646:	9303      	str	r3, [sp, #12]
 8004648:	9b02      	ldr	r3, [sp, #8]
 800464a:	f013 0303 	ands.w	r3, r3, #3
 800464e:	9301      	str	r3, [sp, #4]
 8004650:	d071      	beq.n	8004736 <arm_correlate_f32+0x3e6>
 8004652:	9903      	ldr	r1, [sp, #12]
 8004654:	9205      	str	r2, [sp, #20]
 8004656:	f007 0403 	and.w	r4, r7, #3
 800465a:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 800465e:	1c4f      	adds	r7, r1, #1
 8004660:	1859      	adds	r1, r3, r1
 8004662:	1d03      	adds	r3, r0, #4
 8004664:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004668:	9400      	str	r4, [sp, #0]
 800466a:	f102 0110 	add.w	r1, r2, #16
 800466e:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 8004672:	3c01      	subs	r4, #1
 8004674:	e9cd 6003 	strd	r6, r0, [sp, #12]
 8004678:	eb02 090a 	add.w	r9, r2, sl
 800467c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8004680:	46e0      	mov	r8, ip
 8004682:	4618      	mov	r0, r3
 8004684:	460e      	mov	r6, r1
 8004686:	4622      	mov	r2, r4
 8004688:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 80044d0 <arm_correlate_f32+0x180>
 800468c:	f105 0110 	add.w	r1, r5, #16
 8004690:	4633      	mov	r3, r6
 8004692:	465c      	mov	r4, fp
 8004694:	ed11 7a04 	vldr	s14, [r1, #-16]
 8004698:	ed53 3a04 	vldr	s7, [r3, #-16]
 800469c:	ed11 6a03 	vldr	s12, [r1, #-12]
 80046a0:	ed13 4a03 	vldr	s8, [r3, #-12]
 80046a4:	ed51 6a02 	vldr	s13, [r1, #-8]
 80046a8:	ed53 4a02 	vldr	s9, [r3, #-8]
 80046ac:	ed51 5a01 	vldr	s11, [r1, #-4]
 80046b0:	ed13 5a01 	vldr	s10, [r3, #-4]
 80046b4:	ee27 7a23 	vmul.f32	s14, s14, s7
 80046b8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80046bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046c0:	ee26 7aa4 	vmul.f32	s14, s13, s9
 80046c4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80046c8:	ee65 6a85 	vmul.f32	s13, s11, s10
 80046cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046d0:	3c01      	subs	r4, #1
 80046d2:	f101 0110 	add.w	r1, r1, #16
 80046d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046da:	f103 0310 	add.w	r3, r3, #16
 80046de:	d1d9      	bne.n	8004694 <arm_correlate_f32+0x344>
 80046e0:	9b00      	ldr	r3, [sp, #0]
 80046e2:	4455      	add	r5, sl
 80046e4:	b1d3      	cbz	r3, 800471c <arm_correlate_f32+0x3cc>
 80046e6:	ed99 7a00 	vldr	s14, [r9]
 80046ea:	edd5 6a00 	vldr	s13, [r5]
 80046ee:	ee27 7a26 	vmul.f32	s14, s14, s13
 80046f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046f6:	b18a      	cbz	r2, 800471c <arm_correlate_f32+0x3cc>
 80046f8:	ed99 7a01 	vldr	s14, [r9, #4]
 80046fc:	edd5 6a01 	vldr	s13, [r5, #4]
 8004700:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004704:	2a01      	cmp	r2, #1
 8004706:	ee77 7a87 	vadd.f32	s15, s15, s14
 800470a:	d007      	beq.n	800471c <arm_correlate_f32+0x3cc>
 800470c:	ed95 7a02 	vldr	s14, [r5, #8]
 8004710:	edd9 6a02 	vldr	s13, [r9, #8]
 8004714:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004718:	ee77 7a87 	vadd.f32	s15, s15, s14
 800471c:	463d      	mov	r5, r7
 800471e:	3704      	adds	r7, #4
 8004720:	42b8      	cmp	r0, r7
 8004722:	edc8 7a00 	vstr	s15, [r8]
 8004726:	44f0      	add	r8, lr
 8004728:	d1ae      	bne.n	8004688 <arm_correlate_f32+0x338>
 800472a:	9b01      	ldr	r3, [sp, #4]
 800472c:	9a05      	ldr	r2, [sp, #20]
 800472e:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 8004732:	fb0e cc03 	mla	ip, lr, r3, ip
 8004736:	9b02      	ldr	r3, [sp, #8]
 8004738:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800473c:	08b5      	lsrs	r5, r6, #2
 800473e:	ed5f 5a9c 	vldr	s11, [pc, #-624]	; 80044d0 <arm_correlate_f32+0x180>
 8004742:	f000 80ac 	beq.w	800489e <arm_correlate_f32+0x54e>
 8004746:	f100 0110 	add.w	r1, r0, #16
 800474a:	f102 0310 	add.w	r3, r2, #16
 800474e:	462c      	mov	r4, r5
 8004750:	ed51 6a04 	vldr	s13, [r1, #-16]
 8004754:	ed53 3a04 	vldr	s7, [r3, #-16]
 8004758:	ed11 7a03 	vldr	s14, [r1, #-12]
 800475c:	ed13 4a03 	vldr	s8, [r3, #-12]
 8004760:	ed51 7a02 	vldr	s15, [r1, #-8]
 8004764:	ed53 4a02 	vldr	s9, [r3, #-8]
 8004768:	ed11 6a01 	vldr	s12, [r1, #-4]
 800476c:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004770:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8004774:	ee27 7a04 	vmul.f32	s14, s14, s8
 8004778:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800477c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8004780:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004784:	ee66 6a05 	vmul.f32	s13, s12, s10
 8004788:	ee77 7a87 	vadd.f32	s15, s15, s14
 800478c:	3c01      	subs	r4, #1
 800478e:	f101 0110 	add.w	r1, r1, #16
 8004792:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8004796:	f103 0310 	add.w	r3, r3, #16
 800479a:	d1d9      	bne.n	8004750 <arm_correlate_f32+0x400>
 800479c:	012d      	lsls	r5, r5, #4
 800479e:	1941      	adds	r1, r0, r5
 80047a0:	4415      	add	r5, r2
 80047a2:	f016 0303 	ands.w	r3, r6, #3
 80047a6:	d01b      	beq.n	80047e0 <arm_correlate_f32+0x490>
 80047a8:	edd5 7a00 	vldr	s15, [r5]
 80047ac:	ed91 7a00 	vldr	s14, [r1]
 80047b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047b4:	3b01      	subs	r3, #1
 80047b6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80047ba:	d011      	beq.n	80047e0 <arm_correlate_f32+0x490>
 80047bc:	edd5 7a01 	vldr	s15, [r5, #4]
 80047c0:	ed91 7a01 	vldr	s14, [r1, #4]
 80047c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80047ce:	d007      	beq.n	80047e0 <arm_correlate_f32+0x490>
 80047d0:	edd1 7a02 	vldr	s15, [r1, #8]
 80047d4:	ed95 7a02 	vldr	s14, [r5, #8]
 80047d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047dc:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80047e0:	3e01      	subs	r6, #1
 80047e2:	edcc 5a00 	vstr	s11, [ip]
 80047e6:	f100 0004 	add.w	r0, r0, #4
 80047ea:	44f4      	add	ip, lr
 80047ec:	d1a6      	bne.n	800473c <arm_correlate_f32+0x3ec>
 80047ee:	b00d      	add	sp, #52	; 0x34
 80047f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047f4:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 80047f8:	4606      	mov	r6, r0
 80047fa:	3c02      	subs	r4, #2
 80047fc:	4610      	mov	r0, r2
 80047fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004800:	440c      	add	r4, r1
 8004802:	460d      	mov	r5, r1
 8004804:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 8004808:	4619      	mov	r1, r3
 800480a:	4632      	mov	r2, r6
 800480c:	f06f 0e03 	mvn.w	lr, #3
 8004810:	462b      	mov	r3, r5
 8004812:	e5aa      	b.n	800436a <arm_correlate_f32+0x1a>
 8004814:	9902      	ldr	r1, [sp, #8]
 8004816:	2900      	cmp	r1, #0
 8004818:	d090      	beq.n	800473c <arm_correlate_f32+0x3ec>
 800481a:	9902      	ldr	r1, [sp, #8]
 800481c:	ed1f 6ad4 	vldr	s12, [pc, #-848]	; 80044d0 <arm_correlate_f32+0x180>
 8004820:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8004824:	eb00 0708 	add.w	r7, r0, r8
 8004828:	4601      	mov	r1, r0
 800482a:	4665      	mov	r5, ip
 800482c:	e020      	b.n	8004870 <arm_correlate_f32+0x520>
 800482e:	edd2 7a00 	vldr	s15, [r2]
 8004832:	ecb4 7a01 	vldmia	r4!, {s14}
 8004836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800483a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800483e:	b18e      	cbz	r6, 8004864 <arm_correlate_f32+0x514>
 8004840:	ed92 7a01 	vldr	s14, [r2, #4]
 8004844:	edd1 6a01 	vldr	s13, [r1, #4]
 8004848:	ee27 7a26 	vmul.f32	s14, s14, s13
 800484c:	2b02      	cmp	r3, #2
 800484e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004852:	d007      	beq.n	8004864 <arm_correlate_f32+0x514>
 8004854:	ed91 7a02 	vldr	s14, [r1, #8]
 8004858:	edd2 6a02 	vldr	s13, [r2, #8]
 800485c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004860:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004864:	42bc      	cmp	r4, r7
 8004866:	edc5 7a00 	vstr	s15, [r5]
 800486a:	4621      	mov	r1, r4
 800486c:	4475      	add	r5, lr
 800486e:	d00b      	beq.n	8004888 <arm_correlate_f32+0x538>
 8004870:	460c      	mov	r4, r1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1db      	bne.n	800482e <arm_correlate_f32+0x4de>
 8004876:	1d0c      	adds	r4, r1, #4
 8004878:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80048b8 <arm_correlate_f32+0x568>
 800487c:	42bc      	cmp	r4, r7
 800487e:	edc5 7a00 	vstr	s15, [r5]
 8004882:	4621      	mov	r1, r4
 8004884:	4475      	add	r5, lr
 8004886:	d1f3      	bne.n	8004870 <arm_correlate_f32+0x520>
 8004888:	9b02      	ldr	r3, [sp, #8]
 800488a:	4440      	add	r0, r8
 800488c:	fb0e cc03 	mla	ip, lr, r3, ip
 8004890:	2e00      	cmp	r6, #0
 8004892:	d0ac      	beq.n	80047ee <arm_correlate_f32+0x49e>
 8004894:	08b5      	lsrs	r5, r6, #2
 8004896:	eddf 5a08 	vldr	s11, [pc, #32]	; 80048b8 <arm_correlate_f32+0x568>
 800489a:	f47f af54 	bne.w	8004746 <arm_correlate_f32+0x3f6>
 800489e:	4615      	mov	r5, r2
 80048a0:	4601      	mov	r1, r0
 80048a2:	e77e      	b.n	80047a2 <arm_correlate_f32+0x452>
 80048a4:	4605      	mov	r5, r0
 80048a6:	e6cf      	b.n	8004648 <arm_correlate_f32+0x2f8>
 80048a8:	9902      	ldr	r1, [sp, #8]
 80048aa:	2900      	cmp	r1, #0
 80048ac:	d1b5      	bne.n	800481a <arm_correlate_f32+0x4ca>
 80048ae:	e79e      	b.n	80047ee <arm_correlate_f32+0x49e>
 80048b0:	eddf 7a01 	vldr	s15, [pc, #4]	; 80048b8 <arm_correlate_f32+0x568>
 80048b4:	4605      	mov	r5, r0
 80048b6:	e5c7      	b.n	8004448 <arm_correlate_f32+0xf8>
 80048b8:	00000000 	.word	0x00000000

080048bc <arm_cmplx_mag_f32>:
 80048bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048c0:	ed2d 8b02 	vpush	{d8}
 80048c4:	0897      	lsrs	r7, r2, #2
 80048c6:	b084      	sub	sp, #16
 80048c8:	d077      	beq.n	80049ba <arm_cmplx_mag_f32+0xfe>
 80048ca:	f04f 0800 	mov.w	r8, #0
 80048ce:	f100 0420 	add.w	r4, r0, #32
 80048d2:	f101 0510 	add.w	r5, r1, #16
 80048d6:	463e      	mov	r6, r7
 80048d8:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 80048dc:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 80048e0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80048e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80048e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80048ec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80048f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f4:	f2c0 80c5 	blt.w	8004a82 <arm_cmplx_mag_f32+0x1c6>
 80048f8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80048fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004900:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004904:	f100 80cb 	bmi.w	8004a9e <arm_cmplx_mag_f32+0x1e2>
 8004908:	ed05 8a04 	vstr	s16, [r5, #-16]
 800490c:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 8004910:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8004914:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004918:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800491c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004920:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004928:	f2c0 80a8 	blt.w	8004a7c <arm_cmplx_mag_f32+0x1c0>
 800492c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004934:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004938:	f100 80a8 	bmi.w	8004a8c <arm_cmplx_mag_f32+0x1d0>
 800493c:	ed05 8a03 	vstr	s16, [r5, #-12]
 8004940:	ed14 0a04 	vldr	s0, [r4, #-16]
 8004944:	ed54 7a03 	vldr	s15, [r4, #-12]
 8004948:	ee20 0a00 	vmul.f32	s0, s0, s0
 800494c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004950:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004954:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800495c:	f2c0 808b 	blt.w	8004a76 <arm_cmplx_mag_f32+0x1ba>
 8004960:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004968:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800496c:	f100 80a9 	bmi.w	8004ac2 <arm_cmplx_mag_f32+0x206>
 8004970:	ed05 8a02 	vstr	s16, [r5, #-8]
 8004974:	ed14 0a02 	vldr	s0, [r4, #-8]
 8004978:	ed54 7a01 	vldr	s15, [r4, #-4]
 800497c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004980:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004984:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004988:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800498c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004990:	db6e      	blt.n	8004a70 <arm_cmplx_mag_f32+0x1b4>
 8004992:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800499a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800499e:	f100 8087 	bmi.w	8004ab0 <arm_cmplx_mag_f32+0x1f4>
 80049a2:	ed05 8a01 	vstr	s16, [r5, #-4]
 80049a6:	3e01      	subs	r6, #1
 80049a8:	f104 0420 	add.w	r4, r4, #32
 80049ac:	f105 0510 	add.w	r5, r5, #16
 80049b0:	d192      	bne.n	80048d8 <arm_cmplx_mag_f32+0x1c>
 80049b2:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 80049b6:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 80049ba:	f012 0203 	ands.w	r2, r2, #3
 80049be:	d052      	beq.n	8004a66 <arm_cmplx_mag_f32+0x1aa>
 80049c0:	ed90 0a00 	vldr	s0, [r0]
 80049c4:	edd0 7a01 	vldr	s15, [r0, #4]
 80049c8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80049cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80049d0:	2300      	movs	r3, #0
 80049d2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80049d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80049da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049de:	bfb8      	it	lt
 80049e0:	600b      	strlt	r3, [r1, #0]
 80049e2:	db08      	blt.n	80049f6 <arm_cmplx_mag_f32+0x13a>
 80049e4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80049e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ec:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80049f0:	d479      	bmi.n	8004ae6 <arm_cmplx_mag_f32+0x22a>
 80049f2:	ed81 8a00 	vstr	s16, [r1]
 80049f6:	3a01      	subs	r2, #1
 80049f8:	d035      	beq.n	8004a66 <arm_cmplx_mag_f32+0x1aa>
 80049fa:	ed90 0a02 	vldr	s0, [r0, #8]
 80049fe:	edd0 7a03 	vldr	s15, [r0, #12]
 8004a02:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004a06:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004a10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a18:	bfb8      	it	lt
 8004a1a:	604b      	strlt	r3, [r1, #4]
 8004a1c:	db08      	blt.n	8004a30 <arm_cmplx_mag_f32+0x174>
 8004a1e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a26:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004a2a:	d453      	bmi.n	8004ad4 <arm_cmplx_mag_f32+0x218>
 8004a2c:	ed81 8a01 	vstr	s16, [r1, #4]
 8004a30:	2a01      	cmp	r2, #1
 8004a32:	d018      	beq.n	8004a66 <arm_cmplx_mag_f32+0x1aa>
 8004a34:	ed90 0a04 	vldr	s0, [r0, #16]
 8004a38:	edd0 7a05 	vldr	s15, [r0, #20]
 8004a3c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004a40:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a44:	2300      	movs	r3, #0
 8004a46:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004a4a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a52:	db19      	blt.n	8004a88 <arm_cmplx_mag_f32+0x1cc>
 8004a54:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a5c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004a60:	d44a      	bmi.n	8004af8 <arm_cmplx_mag_f32+0x23c>
 8004a62:	ed81 8a02 	vstr	s16, [r1, #8]
 8004a66:	b004      	add	sp, #16
 8004a68:	ecbd 8b02 	vpop	{d8}
 8004a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a70:	f845 8c04 	str.w	r8, [r5, #-4]
 8004a74:	e797      	b.n	80049a6 <arm_cmplx_mag_f32+0xea>
 8004a76:	f845 8c08 	str.w	r8, [r5, #-8]
 8004a7a:	e77b      	b.n	8004974 <arm_cmplx_mag_f32+0xb8>
 8004a7c:	f845 8c0c 	str.w	r8, [r5, #-12]
 8004a80:	e75e      	b.n	8004940 <arm_cmplx_mag_f32+0x84>
 8004a82:	f845 8c10 	str.w	r8, [r5, #-16]
 8004a86:	e741      	b.n	800490c <arm_cmplx_mag_f32+0x50>
 8004a88:	608b      	str	r3, [r1, #8]
 8004a8a:	e7ec      	b.n	8004a66 <arm_cmplx_mag_f32+0x1aa>
 8004a8c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004a90:	9001      	str	r0, [sp, #4]
 8004a92:	f000 fb85 	bl	80051a0 <sqrtf>
 8004a96:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004a9a:	9801      	ldr	r0, [sp, #4]
 8004a9c:	e74e      	b.n	800493c <arm_cmplx_mag_f32+0x80>
 8004a9e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004aa2:	9001      	str	r0, [sp, #4]
 8004aa4:	f000 fb7c 	bl	80051a0 <sqrtf>
 8004aa8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004aac:	9801      	ldr	r0, [sp, #4]
 8004aae:	e72b      	b.n	8004908 <arm_cmplx_mag_f32+0x4c>
 8004ab0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004ab4:	9001      	str	r0, [sp, #4]
 8004ab6:	f000 fb73 	bl	80051a0 <sqrtf>
 8004aba:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004abe:	9801      	ldr	r0, [sp, #4]
 8004ac0:	e76f      	b.n	80049a2 <arm_cmplx_mag_f32+0xe6>
 8004ac2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004ac6:	9001      	str	r0, [sp, #4]
 8004ac8:	f000 fb6a 	bl	80051a0 <sqrtf>
 8004acc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8004ad0:	9801      	ldr	r0, [sp, #4]
 8004ad2:	e74d      	b.n	8004970 <arm_cmplx_mag_f32+0xb4>
 8004ad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ad8:	9201      	str	r2, [sp, #4]
 8004ada:	f000 fb61 	bl	80051a0 <sqrtf>
 8004ade:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8004ae2:	9903      	ldr	r1, [sp, #12]
 8004ae4:	e7a2      	b.n	8004a2c <arm_cmplx_mag_f32+0x170>
 8004ae6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004aea:	9201      	str	r2, [sp, #4]
 8004aec:	f000 fb58 	bl	80051a0 <sqrtf>
 8004af0:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8004af4:	9903      	ldr	r1, [sp, #12]
 8004af6:	e77c      	b.n	80049f2 <arm_cmplx_mag_f32+0x136>
 8004af8:	9101      	str	r1, [sp, #4]
 8004afa:	f000 fb51 	bl	80051a0 <sqrtf>
 8004afe:	9901      	ldr	r1, [sp, #4]
 8004b00:	e7af      	b.n	8004a62 <arm_cmplx_mag_f32+0x1a6>
 8004b02:	bf00      	nop

08004b04 <arm_sub_f32>:
 8004b04:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8004b08:	b4f0      	push	{r4, r5, r6, r7}
 8004b0a:	d033      	beq.n	8004b74 <arm_sub_f32+0x70>
 8004b0c:	f100 0610 	add.w	r6, r0, #16
 8004b10:	f101 0510 	add.w	r5, r1, #16
 8004b14:	f102 0410 	add.w	r4, r2, #16
 8004b18:	4667      	mov	r7, ip
 8004b1a:	ed15 7a04 	vldr	s14, [r5, #-16]
 8004b1e:	ed56 7a04 	vldr	s15, [r6, #-16]
 8004b22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b26:	3f01      	subs	r7, #1
 8004b28:	ed44 7a04 	vstr	s15, [r4, #-16]
 8004b2c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8004b30:	ed56 7a03 	vldr	s15, [r6, #-12]
 8004b34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b38:	f106 0610 	add.w	r6, r6, #16
 8004b3c:	ed44 7a03 	vstr	s15, [r4, #-12]
 8004b40:	ed15 7a02 	vldr	s14, [r5, #-8]
 8004b44:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8004b48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b4c:	f105 0510 	add.w	r5, r5, #16
 8004b50:	ed44 7a02 	vstr	s15, [r4, #-8]
 8004b54:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8004b58:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8004b5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b60:	f104 0410 	add.w	r4, r4, #16
 8004b64:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8004b68:	d1d7      	bne.n	8004b1a <arm_sub_f32+0x16>
 8004b6a:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8004b6e:	4420      	add	r0, r4
 8004b70:	4421      	add	r1, r4
 8004b72:	4422      	add	r2, r4
 8004b74:	f013 0303 	ands.w	r3, r3, #3
 8004b78:	d01b      	beq.n	8004bb2 <arm_sub_f32+0xae>
 8004b7a:	edd0 7a00 	vldr	s15, [r0]
 8004b7e:	ed91 7a00 	vldr	s14, [r1]
 8004b82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b86:	3b01      	subs	r3, #1
 8004b88:	edc2 7a00 	vstr	s15, [r2]
 8004b8c:	d011      	beq.n	8004bb2 <arm_sub_f32+0xae>
 8004b8e:	edd0 7a01 	vldr	s15, [r0, #4]
 8004b92:	ed91 7a01 	vldr	s14, [r1, #4]
 8004b96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	edc2 7a01 	vstr	s15, [r2, #4]
 8004ba0:	d007      	beq.n	8004bb2 <arm_sub_f32+0xae>
 8004ba2:	edd0 7a02 	vldr	s15, [r0, #8]
 8004ba6:	ed91 7a02 	vldr	s14, [r1, #8]
 8004baa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004bae:	edc2 7a02 	vstr	s15, [r2, #8]
 8004bb2:	bcf0      	pop	{r4, r5, r6, r7}
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop

08004bb8 <arm_radix8_butterfly_f32>:
 8004bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bbc:	ed2d 8b10 	vpush	{d8-d15}
 8004bc0:	b095      	sub	sp, #84	; 0x54
 8004bc2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	3304      	adds	r3, #4
 8004bca:	ed9f bab9 	vldr	s22, [pc, #740]	; 8004eb0 <arm_radix8_butterfly_f32+0x2f8>
 8004bce:	9012      	str	r0, [sp, #72]	; 0x48
 8004bd0:	468b      	mov	fp, r1
 8004bd2:	9313      	str	r3, [sp, #76]	; 0x4c
 8004bd4:	4689      	mov	r9, r1
 8004bd6:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8004bda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004bdc:	960f      	str	r6, [sp, #60]	; 0x3c
 8004bde:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8004be2:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8004be6:	eb03 0508 	add.w	r5, r3, r8
 8004bea:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8004bee:	eb05 040e 	add.w	r4, r5, lr
 8004bf2:	0137      	lsls	r7, r6, #4
 8004bf4:	eba6 030a 	sub.w	r3, r6, sl
 8004bf8:	eb04 000e 	add.w	r0, r4, lr
 8004bfc:	44b2      	add	sl, r6
 8004bfe:	1d3a      	adds	r2, r7, #4
 8004c00:	9702      	str	r7, [sp, #8]
 8004c02:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8004c06:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8004c0a:	ebae 0c06 	sub.w	ip, lr, r6
 8004c0e:	9703      	str	r7, [sp, #12]
 8004c10:	eb03 0708 	add.w	r7, r3, r8
 8004c14:	9701      	str	r7, [sp, #4]
 8004c16:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8004c1a:	9706      	str	r7, [sp, #24]
 8004c1c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8004c1e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8004c22:	f10e 0104 	add.w	r1, lr, #4
 8004c26:	4439      	add	r1, r7
 8004c28:	443a      	add	r2, r7
 8004c2a:	0137      	lsls	r7, r6, #4
 8004c2c:	00f6      	lsls	r6, r6, #3
 8004c2e:	9704      	str	r7, [sp, #16]
 8004c30:	9605      	str	r6, [sp, #20]
 8004c32:	9f01      	ldr	r7, [sp, #4]
 8004c34:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8004c36:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8004c3a:	f04f 0c00 	mov.w	ip, #0
 8004c3e:	edd4 6a00 	vldr	s13, [r4]
 8004c42:	edd7 1a00 	vldr	s3, [r7]
 8004c46:	ed16 aa01 	vldr	s20, [r6, #-4]
 8004c4a:	edd5 5a00 	vldr	s11, [r5]
 8004c4e:	ed52 9a01 	vldr	s19, [r2, #-4]
 8004c52:	ed90 6a00 	vldr	s12, [r0]
 8004c56:	ed51 7a01 	vldr	s15, [r1, #-4]
 8004c5a:	ed93 3a00 	vldr	s6, [r3]
 8004c5e:	ee39 0a86 	vadd.f32	s0, s19, s12
 8004c62:	ee33 2a21 	vadd.f32	s4, s6, s3
 8004c66:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8004c6a:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8004c6e:	ee35 7a02 	vadd.f32	s14, s10, s4
 8004c72:	ee34 4a80 	vadd.f32	s8, s9, s0
 8004c76:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004c7a:	ee74 6a07 	vadd.f32	s13, s8, s14
 8004c7e:	ee34 4a47 	vsub.f32	s8, s8, s14
 8004c82:	ed46 6a01 	vstr	s13, [r6, #-4]
 8004c86:	ed85 4a00 	vstr	s8, [r5]
 8004c8a:	edd1 6a00 	vldr	s13, [r1]
 8004c8e:	ed94 9a01 	vldr	s18, [r4, #4]
 8004c92:	edd3 2a01 	vldr	s5, [r3, #4]
 8004c96:	edd7 8a01 	vldr	s17, [r7, #4]
 8004c9a:	edd6 0a00 	vldr	s1, [r6]
 8004c9e:	edd5 3a01 	vldr	s7, [r5, #4]
 8004ca2:	ed90 8a01 	vldr	s16, [r0, #4]
 8004ca6:	ed92 7a00 	vldr	s14, [r2]
 8004caa:	ee33 3a61 	vsub.f32	s6, s6, s3
 8004cae:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8004cb2:	ee72 aae8 	vsub.f32	s21, s5, s17
 8004cb6:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8004cba:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8004cbe:	ee77 7a83 	vadd.f32	s15, s15, s6
 8004cc2:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8004cc6:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8004cca:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8004cce:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8004cd2:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8004cd6:	ee77 0a08 	vadd.f32	s1, s14, s16
 8004cda:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8004cde:	ee37 7a48 	vsub.f32	s14, s14, s16
 8004ce2:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8004ce6:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8004cea:	ee76 6a89 	vadd.f32	s13, s13, s18
 8004cee:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8004cf2:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004cf6:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8004cfa:	ee35 5a42 	vsub.f32	s10, s10, s4
 8004cfe:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8004d02:	ee33 2a20 	vadd.f32	s4, s6, s1
 8004d06:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8004d0a:	ee33 3a60 	vsub.f32	s6, s6, s1
 8004d0e:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8004d12:	ee77 0a01 	vadd.f32	s1, s14, s2
 8004d16:	ee75 5ae1 	vsub.f32	s11, s11, s3
 8004d1a:	ee37 7a41 	vsub.f32	s14, s14, s2
 8004d1e:	ee73 1a84 	vadd.f32	s3, s7, s8
 8004d22:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8004d26:	ee76 3a27 	vadd.f32	s7, s12, s15
 8004d2a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004d2e:	ee32 8a00 	vadd.f32	s16, s4, s0
 8004d32:	ee33 1a45 	vsub.f32	s2, s6, s10
 8004d36:	ee32 2a40 	vsub.f32	s4, s4, s0
 8004d3a:	ee35 5a03 	vadd.f32	s10, s10, s6
 8004d3e:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8004d42:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8004d46:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8004d4a:	ee34 6a67 	vsub.f32	s12, s8, s15
 8004d4e:	ee75 4a87 	vadd.f32	s9, s11, s14
 8004d52:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8004d56:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8004d5a:	ee77 7a84 	vadd.f32	s15, s15, s8
 8004d5e:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8004d62:	44dc      	add	ip, fp
 8004d64:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8004d68:	45e1      	cmp	r9, ip
 8004d6a:	ed86 8a00 	vstr	s16, [r6]
 8004d6e:	ed85 2a01 	vstr	s4, [r5, #4]
 8004d72:	4456      	add	r6, sl
 8004d74:	ed02 0a01 	vstr	s0, [r2, #-4]
 8004d78:	4455      	add	r5, sl
 8004d7a:	edc0 6a00 	vstr	s13, [r0]
 8004d7e:	ed82 1a00 	vstr	s2, [r2]
 8004d82:	ed80 5a01 	vstr	s10, [r0, #4]
 8004d86:	4452      	add	r2, sl
 8004d88:	ed01 3a01 	vstr	s6, [r1, #-4]
 8004d8c:	4450      	add	r0, sl
 8004d8e:	edc7 2a00 	vstr	s5, [r7]
 8004d92:	edc4 4a00 	vstr	s9, [r4]
 8004d96:	ed83 7a00 	vstr	s14, [r3]
 8004d9a:	edc1 5a00 	vstr	s11, [r1]
 8004d9e:	edc7 3a01 	vstr	s7, [r7, #4]
 8004da2:	4451      	add	r1, sl
 8004da4:	ed84 6a01 	vstr	s12, [r4, #4]
 8004da8:	4457      	add	r7, sl
 8004daa:	edc3 7a01 	vstr	s15, [r3, #4]
 8004dae:	4454      	add	r4, sl
 8004db0:	4453      	add	r3, sl
 8004db2:	f63f af44 	bhi.w	8004c3e <arm_radix8_butterfly_f32+0x86>
 8004db6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004db8:	2b07      	cmp	r3, #7
 8004dba:	f240 81b7 	bls.w	800512c <arm_radix8_butterfly_f32+0x574>
 8004dbe:	9b06      	ldr	r3, [sp, #24]
 8004dc0:	9903      	ldr	r1, [sp, #12]
 8004dc2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004dc4:	9e05      	ldr	r6, [sp, #20]
 8004dc6:	9a04      	ldr	r2, [sp, #16]
 8004dc8:	f103 0c08 	add.w	ip, r3, #8
 8004dcc:	9b02      	ldr	r3, [sp, #8]
 8004dce:	3108      	adds	r1, #8
 8004dd0:	f108 0808 	add.w	r8, r8, #8
 8004dd4:	1841      	adds	r1, r0, r1
 8004dd6:	3608      	adds	r6, #8
 8004dd8:	330c      	adds	r3, #12
 8004dda:	4604      	mov	r4, r0
 8004ddc:	4444      	add	r4, r8
 8004dde:	18c3      	adds	r3, r0, r3
 8004de0:	9109      	str	r1, [sp, #36]	; 0x24
 8004de2:	1981      	adds	r1, r0, r6
 8004de4:	f10e 0e08 	add.w	lr, lr, #8
 8004de8:	3208      	adds	r2, #8
 8004dea:	940b      	str	r4, [sp, #44]	; 0x2c
 8004dec:	9107      	str	r1, [sp, #28]
 8004dee:	4604      	mov	r4, r0
 8004df0:	4601      	mov	r1, r0
 8004df2:	9304      	str	r3, [sp, #16]
 8004df4:	f100 030c 	add.w	r3, r0, #12
 8004df8:	4474      	add	r4, lr
 8004dfa:	f04f 0801 	mov.w	r8, #1
 8004dfe:	1882      	adds	r2, r0, r2
 8004e00:	4461      	add	r1, ip
 8004e02:	9305      	str	r3, [sp, #20]
 8004e04:	464b      	mov	r3, r9
 8004e06:	940a      	str	r4, [sp, #40]	; 0x28
 8004e08:	46c1      	mov	r9, r8
 8004e0a:	9208      	str	r2, [sp, #32]
 8004e0c:	46d8      	mov	r8, fp
 8004e0e:	9106      	str	r1, [sp, #24]
 8004e10:	f04f 0e00 	mov.w	lr, #0
 8004e14:	469b      	mov	fp, r3
 8004e16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004e18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004e1a:	449e      	add	lr, r3
 8004e1c:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8004e20:	441a      	add	r2, r3
 8004e22:	920e      	str	r2, [sp, #56]	; 0x38
 8004e24:	441a      	add	r2, r3
 8004e26:	18d4      	adds	r4, r2, r3
 8004e28:	18e5      	adds	r5, r4, r3
 8004e2a:	18ee      	adds	r6, r5, r3
 8004e2c:	18f7      	adds	r7, r6, r3
 8004e2e:	eb07 0c03 	add.w	ip, r7, r3
 8004e32:	920d      	str	r2, [sp, #52]	; 0x34
 8004e34:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8004e38:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8004e3c:	910c      	str	r1, [sp, #48]	; 0x30
 8004e3e:	4419      	add	r1, r3
 8004e40:	9103      	str	r1, [sp, #12]
 8004e42:	4419      	add	r1, r3
 8004e44:	18ca      	adds	r2, r1, r3
 8004e46:	9202      	str	r2, [sp, #8]
 8004e48:	441a      	add	r2, r3
 8004e4a:	18d0      	adds	r0, r2, r3
 8004e4c:	ed92 ea01 	vldr	s28, [r2, #4]
 8004e50:	9a02      	ldr	r2, [sp, #8]
 8004e52:	edd4 7a00 	vldr	s15, [r4]
 8004e56:	edd2 da01 	vldr	s27, [r2, #4]
 8004e5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e5c:	ed91 da01 	vldr	s26, [r1, #4]
 8004e60:	ed92 ca01 	vldr	s24, [r2, #4]
 8004e64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e66:	9903      	ldr	r1, [sp, #12]
 8004e68:	edcd 7a03 	vstr	s15, [sp, #12]
 8004e6c:	edd2 7a00 	vldr	s15, [r2]
 8004e70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e72:	edcd 7a02 	vstr	s15, [sp, #8]
 8004e76:	edd2 7a00 	vldr	s15, [r2]
 8004e7a:	edd0 ea01 	vldr	s29, [r0, #4]
 8004e7e:	edd1 ca01 	vldr	s25, [r1, #4]
 8004e82:	eddc ba00 	vldr	s23, [ip]
 8004e86:	edd7 aa00 	vldr	s21, [r7]
 8004e8a:	ed96 aa00 	vldr	s20, [r6]
 8004e8e:	edd5 9a00 	vldr	s19, [r5]
 8004e92:	edcd 7a01 	vstr	s15, [sp, #4]
 8004e96:	4403      	add	r3, r0
 8004e98:	ed93 fa01 	vldr	s30, [r3, #4]
 8004e9c:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8004ea0:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8004ea4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004ea8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004eac:	46cc      	mov	ip, r9
 8004eae:	e001      	b.n	8004eb4 <arm_radix8_butterfly_f32+0x2fc>
 8004eb0:	3f3504f3 	.word	0x3f3504f3
 8004eb4:	ed91 6a00 	vldr	s12, [r1]
 8004eb8:	ed93 5a00 	vldr	s10, [r3]
 8004ebc:	edd0 fa00 	vldr	s31, [r0]
 8004ec0:	edd4 7a00 	vldr	s15, [r4]
 8004ec4:	ed95 7a00 	vldr	s14, [r5]
 8004ec8:	ed56 3a01 	vldr	s7, [r6, #-4]
 8004ecc:	ed17 3a01 	vldr	s6, [r7, #-4]
 8004ed0:	ed92 2a00 	vldr	s4, [r2]
 8004ed4:	ed96 0a00 	vldr	s0, [r6]
 8004ed8:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004edc:	ee32 1a06 	vadd.f32	s2, s4, s12
 8004ee0:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8004ee4:	ee77 4a87 	vadd.f32	s9, s15, s14
 8004ee8:	ee78 1a04 	vadd.f32	s3, s16, s8
 8004eec:	ee71 6a24 	vadd.f32	s13, s2, s9
 8004ef0:	ee32 2a46 	vsub.f32	s4, s4, s12
 8004ef4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8004ef8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004efc:	ed06 6a01 	vstr	s12, [r6, #-4]
 8004f00:	edd4 8a01 	vldr	s17, [r4, #4]
 8004f04:	ed92 9a01 	vldr	s18, [r2, #4]
 8004f08:	edd7 0a00 	vldr	s1, [r7]
 8004f0c:	edd1 2a01 	vldr	s5, [r1, #4]
 8004f10:	ed95 7a01 	vldr	s14, [r5, #4]
 8004f14:	ed93 6a01 	vldr	s12, [r3, #4]
 8004f18:	edd0 5a01 	vldr	s11, [r0, #4]
 8004f1c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8004f20:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8004f24:	ee39 5a62 	vsub.f32	s10, s18, s5
 8004f28:	ee78 fac7 	vsub.f32	s31, s17, s14
 8004f2c:	ee38 4a44 	vsub.f32	s8, s16, s8
 8004f30:	ee38 7a87 	vadd.f32	s14, s17, s14
 8004f34:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8004f38:	ee79 2a22 	vadd.f32	s5, s18, s5
 8004f3c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8004f40:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004f44:	ee30 2a06 	vadd.f32	s4, s0, s12
 8004f48:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8004f4c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8004f50:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8004f54:	ee32 1a08 	vadd.f32	s2, s4, s16
 8004f58:	ee72 fa87 	vadd.f32	s31, s5, s14
 8004f5c:	ee32 2a48 	vsub.f32	s4, s4, s16
 8004f60:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8004f64:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8004f68:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8004f6c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8004f70:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8004f74:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8004f78:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8004f7c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004f80:	ee30 6a46 	vsub.f32	s12, s0, s12
 8004f84:	ee74 0a22 	vadd.f32	s1, s8, s5
 8004f88:	ee36 0a28 	vadd.f32	s0, s12, s17
 8004f8c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8004f90:	ee36 6a68 	vsub.f32	s12, s12, s17
 8004f94:	ee32 4a64 	vsub.f32	s8, s4, s9
 8004f98:	ee73 8a09 	vadd.f32	s17, s6, s18
 8004f9c:	ee74 4a82 	vadd.f32	s9, s9, s4
 8004fa0:	ee33 9a49 	vsub.f32	s18, s6, s18
 8004fa4:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8004fa8:	ee35 3a85 	vadd.f32	s6, s11, s10
 8004fac:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8004fb0:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8004fb4:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8004fb8:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8004fbc:	ee30 7a68 	vsub.f32	s14, s0, s17
 8004fc0:	ee35 8a03 	vadd.f32	s16, s10, s6
 8004fc4:	ee38 0a80 	vadd.f32	s0, s17, s0
 8004fc8:	ee73 3a82 	vadd.f32	s7, s7, s4
 8004fcc:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8004fd0:	ed9d 2a01 	vldr	s4, [sp, #4]
 8004fd4:	eddd 1a02 	vldr	s3, [sp, #8]
 8004fd8:	ee35 5a43 	vsub.f32	s10, s10, s6
 8004fdc:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8004fe0:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8004fe4:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8004fe8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8004fec:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8004ff0:	ee76 5a49 	vsub.f32	s11, s12, s18
 8004ff4:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8004ff8:	ee39 6a06 	vadd.f32	s12, s18, s12
 8004ffc:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8005000:	ee21 4a84 	vmul.f32	s8, s3, s8
 8005004:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8005008:	ee22 7a07 	vmul.f32	s14, s4, s14
 800500c:	ee22 2a08 	vmul.f32	s4, s4, s16
 8005010:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8005014:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8005018:	ee31 1a09 	vadd.f32	s2, s2, s18
 800501c:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8005020:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8005024:	ee74 0a60 	vsub.f32	s1, s8, s1
 8005028:	ee37 7a48 	vsub.f32	s14, s14, s16
 800502c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8005030:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8005034:	ee72 1a21 	vadd.f32	s3, s4, s3
 8005038:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800503c:	ee38 2a89 	vadd.f32	s4, s17, s18
 8005040:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8005044:	ee38 8a04 	vadd.f32	s16, s16, s8
 8005048:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800504c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8005050:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8005054:	eddd 5a03 	vldr	s11, [sp, #12]
 8005058:	edc6 fa00 	vstr	s31, [r6]
 800505c:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8005060:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8005064:	ee30 0a45 	vsub.f32	s0, s0, s10
 8005068:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800506c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8005070:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8005074:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8005078:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800507c:	ee25 6a86 	vmul.f32	s12, s11, s12
 8005080:	ee74 4a89 	vadd.f32	s9, s9, s18
 8005084:	ee34 3a43 	vsub.f32	s6, s8, s6
 8005088:	ee78 8a85 	vadd.f32	s17, s17, s10
 800508c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005090:	44c4      	add	ip, r8
 8005092:	45e3      	cmp	fp, ip
 8005094:	edc3 3a00 	vstr	s7, [r3]
 8005098:	edc3 6a01 	vstr	s13, [r3, #4]
 800509c:	4456      	add	r6, sl
 800509e:	ed07 1a01 	vstr	s2, [r7, #-4]
 80050a2:	edc7 0a00 	vstr	s1, [r7]
 80050a6:	4453      	add	r3, sl
 80050a8:	ed80 2a00 	vstr	s4, [r0]
 80050ac:	edc0 2a01 	vstr	s5, [r0, #4]
 80050b0:	4457      	add	r7, sl
 80050b2:	edc2 1a00 	vstr	s3, [r2]
 80050b6:	ed82 7a01 	vstr	s14, [r2, #4]
 80050ba:	4450      	add	r0, sl
 80050bc:	ed85 8a00 	vstr	s16, [r5]
 80050c0:	ed85 0a01 	vstr	s0, [r5, #4]
 80050c4:	4452      	add	r2, sl
 80050c6:	edc1 4a00 	vstr	s9, [r1]
 80050ca:	4455      	add	r5, sl
 80050cc:	ed81 3a01 	vstr	s6, [r1, #4]
 80050d0:	edc4 8a00 	vstr	s17, [r4]
 80050d4:	ed84 6a01 	vstr	s12, [r4, #4]
 80050d8:	4451      	add	r1, sl
 80050da:	4454      	add	r4, sl
 80050dc:	f63f aeea 	bhi.w	8004eb4 <arm_radix8_butterfly_f32+0x2fc>
 80050e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050e2:	3308      	adds	r3, #8
 80050e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80050e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050e8:	3308      	adds	r3, #8
 80050ea:	930a      	str	r3, [sp, #40]	; 0x28
 80050ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050ee:	3308      	adds	r3, #8
 80050f0:	9309      	str	r3, [sp, #36]	; 0x24
 80050f2:	9b08      	ldr	r3, [sp, #32]
 80050f4:	3308      	adds	r3, #8
 80050f6:	9308      	str	r3, [sp, #32]
 80050f8:	9b07      	ldr	r3, [sp, #28]
 80050fa:	3308      	adds	r3, #8
 80050fc:	9307      	str	r3, [sp, #28]
 80050fe:	9b06      	ldr	r3, [sp, #24]
 8005100:	3308      	adds	r3, #8
 8005102:	9306      	str	r3, [sp, #24]
 8005104:	9b05      	ldr	r3, [sp, #20]
 8005106:	3308      	adds	r3, #8
 8005108:	9305      	str	r3, [sp, #20]
 800510a:	9b04      	ldr	r3, [sp, #16]
 800510c:	3308      	adds	r3, #8
 800510e:	9304      	str	r3, [sp, #16]
 8005110:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005112:	f109 0901 	add.w	r9, r9, #1
 8005116:	454b      	cmp	r3, r9
 8005118:	f47f ae7d 	bne.w	8004e16 <arm_radix8_butterfly_f32+0x25e>
 800511c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	b29b      	uxth	r3, r3
 8005122:	46d9      	mov	r9, fp
 8005124:	9310      	str	r3, [sp, #64]	; 0x40
 8005126:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800512a:	e554      	b.n	8004bd6 <arm_radix8_butterfly_f32+0x1e>
 800512c:	b015      	add	sp, #84	; 0x54
 800512e:	ecbd 8b10 	vpop	{d8-d15}
 8005132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005136:	bf00      	nop

08005138 <sqrt>:
 8005138:	b538      	push	{r3, r4, r5, lr}
 800513a:	ed2d 8b02 	vpush	{d8}
 800513e:	ec55 4b10 	vmov	r4, r5, d0
 8005142:	f000 f853 	bl	80051ec <__ieee754_sqrt>
 8005146:	4b15      	ldr	r3, [pc, #84]	; (800519c <sqrt+0x64>)
 8005148:	eeb0 8a40 	vmov.f32	s16, s0
 800514c:	eef0 8a60 	vmov.f32	s17, s1
 8005150:	f993 3000 	ldrsb.w	r3, [r3]
 8005154:	3301      	adds	r3, #1
 8005156:	d019      	beq.n	800518c <sqrt+0x54>
 8005158:	4622      	mov	r2, r4
 800515a:	462b      	mov	r3, r5
 800515c:	4620      	mov	r0, r4
 800515e:	4629      	mov	r1, r5
 8005160:	f7fb fcec 	bl	8000b3c <__aeabi_dcmpun>
 8005164:	b990      	cbnz	r0, 800518c <sqrt+0x54>
 8005166:	2200      	movs	r2, #0
 8005168:	2300      	movs	r3, #0
 800516a:	4620      	mov	r0, r4
 800516c:	4629      	mov	r1, r5
 800516e:	f7fb fcbd 	bl	8000aec <__aeabi_dcmplt>
 8005172:	b158      	cbz	r0, 800518c <sqrt+0x54>
 8005174:	f000 f8f2 	bl	800535c <__errno>
 8005178:	2321      	movs	r3, #33	; 0x21
 800517a:	6003      	str	r3, [r0, #0]
 800517c:	2200      	movs	r2, #0
 800517e:	2300      	movs	r3, #0
 8005180:	4610      	mov	r0, r2
 8005182:	4619      	mov	r1, r3
 8005184:	f7fb fb6a 	bl	800085c <__aeabi_ddiv>
 8005188:	ec41 0b18 	vmov	d8, r0, r1
 800518c:	eeb0 0a48 	vmov.f32	s0, s16
 8005190:	eef0 0a68 	vmov.f32	s1, s17
 8005194:	ecbd 8b02 	vpop	{d8}
 8005198:	bd38      	pop	{r3, r4, r5, pc}
 800519a:	bf00      	nop
 800519c:	20000009 	.word	0x20000009

080051a0 <sqrtf>:
 80051a0:	b508      	push	{r3, lr}
 80051a2:	ed2d 8b02 	vpush	{d8}
 80051a6:	eeb0 8a40 	vmov.f32	s16, s0
 80051aa:	f000 f8d3 	bl	8005354 <__ieee754_sqrtf>
 80051ae:	4b0d      	ldr	r3, [pc, #52]	; (80051e4 <sqrtf+0x44>)
 80051b0:	f993 3000 	ldrsb.w	r3, [r3]
 80051b4:	3301      	adds	r3, #1
 80051b6:	d011      	beq.n	80051dc <sqrtf+0x3c>
 80051b8:	eeb4 8a48 	vcmp.f32	s16, s16
 80051bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c0:	d60c      	bvs.n	80051dc <sqrtf+0x3c>
 80051c2:	eddf 8a09 	vldr	s17, [pc, #36]	; 80051e8 <sqrtf+0x48>
 80051c6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80051ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ce:	d505      	bpl.n	80051dc <sqrtf+0x3c>
 80051d0:	f000 f8c4 	bl	800535c <__errno>
 80051d4:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80051d8:	2321      	movs	r3, #33	; 0x21
 80051da:	6003      	str	r3, [r0, #0]
 80051dc:	ecbd 8b02 	vpop	{d8}
 80051e0:	bd08      	pop	{r3, pc}
 80051e2:	bf00      	nop
 80051e4:	20000009 	.word	0x20000009
 80051e8:	00000000 	.word	0x00000000

080051ec <__ieee754_sqrt>:
 80051ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051f0:	ec55 4b10 	vmov	r4, r5, d0
 80051f4:	4e56      	ldr	r6, [pc, #344]	; (8005350 <__ieee754_sqrt+0x164>)
 80051f6:	43ae      	bics	r6, r5
 80051f8:	ee10 0a10 	vmov	r0, s0
 80051fc:	ee10 3a10 	vmov	r3, s0
 8005200:	4629      	mov	r1, r5
 8005202:	462a      	mov	r2, r5
 8005204:	d110      	bne.n	8005228 <__ieee754_sqrt+0x3c>
 8005206:	ee10 2a10 	vmov	r2, s0
 800520a:	462b      	mov	r3, r5
 800520c:	f7fb f9fc 	bl	8000608 <__aeabi_dmul>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	4620      	mov	r0, r4
 8005216:	4629      	mov	r1, r5
 8005218:	f7fb f840 	bl	800029c <__adddf3>
 800521c:	4604      	mov	r4, r0
 800521e:	460d      	mov	r5, r1
 8005220:	ec45 4b10 	vmov	d0, r4, r5
 8005224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005228:	2d00      	cmp	r5, #0
 800522a:	dc10      	bgt.n	800524e <__ieee754_sqrt+0x62>
 800522c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005230:	4330      	orrs	r0, r6
 8005232:	d0f5      	beq.n	8005220 <__ieee754_sqrt+0x34>
 8005234:	b15d      	cbz	r5, 800524e <__ieee754_sqrt+0x62>
 8005236:	ee10 2a10 	vmov	r2, s0
 800523a:	462b      	mov	r3, r5
 800523c:	ee10 0a10 	vmov	r0, s0
 8005240:	f7fb f82a 	bl	8000298 <__aeabi_dsub>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	f7fb fb08 	bl	800085c <__aeabi_ddiv>
 800524c:	e7e6      	b.n	800521c <__ieee754_sqrt+0x30>
 800524e:	1509      	asrs	r1, r1, #20
 8005250:	d076      	beq.n	8005340 <__ieee754_sqrt+0x154>
 8005252:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005256:	07ce      	lsls	r6, r1, #31
 8005258:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800525c:	bf5e      	ittt	pl
 800525e:	0fda      	lsrpl	r2, r3, #31
 8005260:	005b      	lslpl	r3, r3, #1
 8005262:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8005266:	0fda      	lsrs	r2, r3, #31
 8005268:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800526c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8005270:	2000      	movs	r0, #0
 8005272:	106d      	asrs	r5, r5, #1
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	f04f 0e16 	mov.w	lr, #22
 800527a:	4684      	mov	ip, r0
 800527c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005280:	eb0c 0401 	add.w	r4, ip, r1
 8005284:	4294      	cmp	r4, r2
 8005286:	bfde      	ittt	le
 8005288:	1b12      	suble	r2, r2, r4
 800528a:	eb04 0c01 	addle.w	ip, r4, r1
 800528e:	1840      	addle	r0, r0, r1
 8005290:	0052      	lsls	r2, r2, #1
 8005292:	f1be 0e01 	subs.w	lr, lr, #1
 8005296:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800529a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800529e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80052a2:	d1ed      	bne.n	8005280 <__ieee754_sqrt+0x94>
 80052a4:	4671      	mov	r1, lr
 80052a6:	2720      	movs	r7, #32
 80052a8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80052ac:	4562      	cmp	r2, ip
 80052ae:	eb04 060e 	add.w	r6, r4, lr
 80052b2:	dc02      	bgt.n	80052ba <__ieee754_sqrt+0xce>
 80052b4:	d113      	bne.n	80052de <__ieee754_sqrt+0xf2>
 80052b6:	429e      	cmp	r6, r3
 80052b8:	d811      	bhi.n	80052de <__ieee754_sqrt+0xf2>
 80052ba:	2e00      	cmp	r6, #0
 80052bc:	eb06 0e04 	add.w	lr, r6, r4
 80052c0:	da43      	bge.n	800534a <__ieee754_sqrt+0x15e>
 80052c2:	f1be 0f00 	cmp.w	lr, #0
 80052c6:	db40      	blt.n	800534a <__ieee754_sqrt+0x15e>
 80052c8:	f10c 0801 	add.w	r8, ip, #1
 80052cc:	eba2 020c 	sub.w	r2, r2, ip
 80052d0:	429e      	cmp	r6, r3
 80052d2:	bf88      	it	hi
 80052d4:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80052d8:	1b9b      	subs	r3, r3, r6
 80052da:	4421      	add	r1, r4
 80052dc:	46c4      	mov	ip, r8
 80052de:	0052      	lsls	r2, r2, #1
 80052e0:	3f01      	subs	r7, #1
 80052e2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80052e6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80052ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80052ee:	d1dd      	bne.n	80052ac <__ieee754_sqrt+0xc0>
 80052f0:	4313      	orrs	r3, r2
 80052f2:	d006      	beq.n	8005302 <__ieee754_sqrt+0x116>
 80052f4:	1c4c      	adds	r4, r1, #1
 80052f6:	bf13      	iteet	ne
 80052f8:	3101      	addne	r1, #1
 80052fa:	3001      	addeq	r0, #1
 80052fc:	4639      	moveq	r1, r7
 80052fe:	f021 0101 	bicne.w	r1, r1, #1
 8005302:	1043      	asrs	r3, r0, #1
 8005304:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005308:	0849      	lsrs	r1, r1, #1
 800530a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800530e:	07c2      	lsls	r2, r0, #31
 8005310:	bf48      	it	mi
 8005312:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005316:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800531a:	460c      	mov	r4, r1
 800531c:	463d      	mov	r5, r7
 800531e:	e77f      	b.n	8005220 <__ieee754_sqrt+0x34>
 8005320:	0ada      	lsrs	r2, r3, #11
 8005322:	3815      	subs	r0, #21
 8005324:	055b      	lsls	r3, r3, #21
 8005326:	2a00      	cmp	r2, #0
 8005328:	d0fa      	beq.n	8005320 <__ieee754_sqrt+0x134>
 800532a:	02d7      	lsls	r7, r2, #11
 800532c:	d50a      	bpl.n	8005344 <__ieee754_sqrt+0x158>
 800532e:	f1c1 0420 	rsb	r4, r1, #32
 8005332:	fa23 f404 	lsr.w	r4, r3, r4
 8005336:	1e4d      	subs	r5, r1, #1
 8005338:	408b      	lsls	r3, r1
 800533a:	4322      	orrs	r2, r4
 800533c:	1b41      	subs	r1, r0, r5
 800533e:	e788      	b.n	8005252 <__ieee754_sqrt+0x66>
 8005340:	4608      	mov	r0, r1
 8005342:	e7f0      	b.n	8005326 <__ieee754_sqrt+0x13a>
 8005344:	0052      	lsls	r2, r2, #1
 8005346:	3101      	adds	r1, #1
 8005348:	e7ef      	b.n	800532a <__ieee754_sqrt+0x13e>
 800534a:	46e0      	mov	r8, ip
 800534c:	e7be      	b.n	80052cc <__ieee754_sqrt+0xe0>
 800534e:	bf00      	nop
 8005350:	7ff00000 	.word	0x7ff00000

08005354 <__ieee754_sqrtf>:
 8005354:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005358:	4770      	bx	lr
	...

0800535c <__errno>:
 800535c:	4b01      	ldr	r3, [pc, #4]	; (8005364 <__errno+0x8>)
 800535e:	6818      	ldr	r0, [r3, #0]
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	2000000c 	.word	0x2000000c

08005368 <__libc_init_array>:
 8005368:	b570      	push	{r4, r5, r6, lr}
 800536a:	4d0d      	ldr	r5, [pc, #52]	; (80053a0 <__libc_init_array+0x38>)
 800536c:	4c0d      	ldr	r4, [pc, #52]	; (80053a4 <__libc_init_array+0x3c>)
 800536e:	1b64      	subs	r4, r4, r5
 8005370:	10a4      	asrs	r4, r4, #2
 8005372:	2600      	movs	r6, #0
 8005374:	42a6      	cmp	r6, r4
 8005376:	d109      	bne.n	800538c <__libc_init_array+0x24>
 8005378:	4d0b      	ldr	r5, [pc, #44]	; (80053a8 <__libc_init_array+0x40>)
 800537a:	4c0c      	ldr	r4, [pc, #48]	; (80053ac <__libc_init_array+0x44>)
 800537c:	f002 fcf0 	bl	8007d60 <_init>
 8005380:	1b64      	subs	r4, r4, r5
 8005382:	10a4      	asrs	r4, r4, #2
 8005384:	2600      	movs	r6, #0
 8005386:	42a6      	cmp	r6, r4
 8005388:	d105      	bne.n	8005396 <__libc_init_array+0x2e>
 800538a:	bd70      	pop	{r4, r5, r6, pc}
 800538c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005390:	4798      	blx	r3
 8005392:	3601      	adds	r6, #1
 8005394:	e7ee      	b.n	8005374 <__libc_init_array+0xc>
 8005396:	f855 3b04 	ldr.w	r3, [r5], #4
 800539a:	4798      	blx	r3
 800539c:	3601      	adds	r6, #1
 800539e:	e7f2      	b.n	8005386 <__libc_init_array+0x1e>
 80053a0:	0801b264 	.word	0x0801b264
 80053a4:	0801b264 	.word	0x0801b264
 80053a8:	0801b264 	.word	0x0801b264
 80053ac:	0801b268 	.word	0x0801b268

080053b0 <memcpy>:
 80053b0:	440a      	add	r2, r1
 80053b2:	4291      	cmp	r1, r2
 80053b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80053b8:	d100      	bne.n	80053bc <memcpy+0xc>
 80053ba:	4770      	bx	lr
 80053bc:	b510      	push	{r4, lr}
 80053be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053c6:	4291      	cmp	r1, r2
 80053c8:	d1f9      	bne.n	80053be <memcpy+0xe>
 80053ca:	bd10      	pop	{r4, pc}

080053cc <memset>:
 80053cc:	4402      	add	r2, r0
 80053ce:	4603      	mov	r3, r0
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d100      	bne.n	80053d6 <memset+0xa>
 80053d4:	4770      	bx	lr
 80053d6:	f803 1b01 	strb.w	r1, [r3], #1
 80053da:	e7f9      	b.n	80053d0 <memset+0x4>

080053dc <__cvt>:
 80053dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053e0:	ec55 4b10 	vmov	r4, r5, d0
 80053e4:	2d00      	cmp	r5, #0
 80053e6:	460e      	mov	r6, r1
 80053e8:	4619      	mov	r1, r3
 80053ea:	462b      	mov	r3, r5
 80053ec:	bfbb      	ittet	lt
 80053ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80053f2:	461d      	movlt	r5, r3
 80053f4:	2300      	movge	r3, #0
 80053f6:	232d      	movlt	r3, #45	; 0x2d
 80053f8:	700b      	strb	r3, [r1, #0]
 80053fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005400:	4691      	mov	r9, r2
 8005402:	f023 0820 	bic.w	r8, r3, #32
 8005406:	bfbc      	itt	lt
 8005408:	4622      	movlt	r2, r4
 800540a:	4614      	movlt	r4, r2
 800540c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005410:	d005      	beq.n	800541e <__cvt+0x42>
 8005412:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005416:	d100      	bne.n	800541a <__cvt+0x3e>
 8005418:	3601      	adds	r6, #1
 800541a:	2102      	movs	r1, #2
 800541c:	e000      	b.n	8005420 <__cvt+0x44>
 800541e:	2103      	movs	r1, #3
 8005420:	ab03      	add	r3, sp, #12
 8005422:	9301      	str	r3, [sp, #4]
 8005424:	ab02      	add	r3, sp, #8
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	ec45 4b10 	vmov	d0, r4, r5
 800542c:	4653      	mov	r3, sl
 800542e:	4632      	mov	r2, r6
 8005430:	f000 fcca 	bl	8005dc8 <_dtoa_r>
 8005434:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005438:	4607      	mov	r7, r0
 800543a:	d102      	bne.n	8005442 <__cvt+0x66>
 800543c:	f019 0f01 	tst.w	r9, #1
 8005440:	d022      	beq.n	8005488 <__cvt+0xac>
 8005442:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005446:	eb07 0906 	add.w	r9, r7, r6
 800544a:	d110      	bne.n	800546e <__cvt+0x92>
 800544c:	783b      	ldrb	r3, [r7, #0]
 800544e:	2b30      	cmp	r3, #48	; 0x30
 8005450:	d10a      	bne.n	8005468 <__cvt+0x8c>
 8005452:	2200      	movs	r2, #0
 8005454:	2300      	movs	r3, #0
 8005456:	4620      	mov	r0, r4
 8005458:	4629      	mov	r1, r5
 800545a:	f7fb fb3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800545e:	b918      	cbnz	r0, 8005468 <__cvt+0x8c>
 8005460:	f1c6 0601 	rsb	r6, r6, #1
 8005464:	f8ca 6000 	str.w	r6, [sl]
 8005468:	f8da 3000 	ldr.w	r3, [sl]
 800546c:	4499      	add	r9, r3
 800546e:	2200      	movs	r2, #0
 8005470:	2300      	movs	r3, #0
 8005472:	4620      	mov	r0, r4
 8005474:	4629      	mov	r1, r5
 8005476:	f7fb fb2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800547a:	b108      	cbz	r0, 8005480 <__cvt+0xa4>
 800547c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005480:	2230      	movs	r2, #48	; 0x30
 8005482:	9b03      	ldr	r3, [sp, #12]
 8005484:	454b      	cmp	r3, r9
 8005486:	d307      	bcc.n	8005498 <__cvt+0xbc>
 8005488:	9b03      	ldr	r3, [sp, #12]
 800548a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800548c:	1bdb      	subs	r3, r3, r7
 800548e:	4638      	mov	r0, r7
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	b004      	add	sp, #16
 8005494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005498:	1c59      	adds	r1, r3, #1
 800549a:	9103      	str	r1, [sp, #12]
 800549c:	701a      	strb	r2, [r3, #0]
 800549e:	e7f0      	b.n	8005482 <__cvt+0xa6>

080054a0 <__exponent>:
 80054a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054a2:	4603      	mov	r3, r0
 80054a4:	2900      	cmp	r1, #0
 80054a6:	bfb8      	it	lt
 80054a8:	4249      	neglt	r1, r1
 80054aa:	f803 2b02 	strb.w	r2, [r3], #2
 80054ae:	bfb4      	ite	lt
 80054b0:	222d      	movlt	r2, #45	; 0x2d
 80054b2:	222b      	movge	r2, #43	; 0x2b
 80054b4:	2909      	cmp	r1, #9
 80054b6:	7042      	strb	r2, [r0, #1]
 80054b8:	dd2a      	ble.n	8005510 <__exponent+0x70>
 80054ba:	f10d 0407 	add.w	r4, sp, #7
 80054be:	46a4      	mov	ip, r4
 80054c0:	270a      	movs	r7, #10
 80054c2:	46a6      	mov	lr, r4
 80054c4:	460a      	mov	r2, r1
 80054c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80054ca:	fb07 1516 	mls	r5, r7, r6, r1
 80054ce:	3530      	adds	r5, #48	; 0x30
 80054d0:	2a63      	cmp	r2, #99	; 0x63
 80054d2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80054d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80054da:	4631      	mov	r1, r6
 80054dc:	dcf1      	bgt.n	80054c2 <__exponent+0x22>
 80054de:	3130      	adds	r1, #48	; 0x30
 80054e0:	f1ae 0502 	sub.w	r5, lr, #2
 80054e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80054e8:	1c44      	adds	r4, r0, #1
 80054ea:	4629      	mov	r1, r5
 80054ec:	4561      	cmp	r1, ip
 80054ee:	d30a      	bcc.n	8005506 <__exponent+0x66>
 80054f0:	f10d 0209 	add.w	r2, sp, #9
 80054f4:	eba2 020e 	sub.w	r2, r2, lr
 80054f8:	4565      	cmp	r5, ip
 80054fa:	bf88      	it	hi
 80054fc:	2200      	movhi	r2, #0
 80054fe:	4413      	add	r3, r2
 8005500:	1a18      	subs	r0, r3, r0
 8005502:	b003      	add	sp, #12
 8005504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005506:	f811 2b01 	ldrb.w	r2, [r1], #1
 800550a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800550e:	e7ed      	b.n	80054ec <__exponent+0x4c>
 8005510:	2330      	movs	r3, #48	; 0x30
 8005512:	3130      	adds	r1, #48	; 0x30
 8005514:	7083      	strb	r3, [r0, #2]
 8005516:	70c1      	strb	r1, [r0, #3]
 8005518:	1d03      	adds	r3, r0, #4
 800551a:	e7f1      	b.n	8005500 <__exponent+0x60>

0800551c <_printf_float>:
 800551c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005520:	ed2d 8b02 	vpush	{d8}
 8005524:	b08d      	sub	sp, #52	; 0x34
 8005526:	460c      	mov	r4, r1
 8005528:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800552c:	4616      	mov	r6, r2
 800552e:	461f      	mov	r7, r3
 8005530:	4605      	mov	r5, r0
 8005532:	f001 fa35 	bl	80069a0 <_localeconv_r>
 8005536:	f8d0 a000 	ldr.w	sl, [r0]
 800553a:	4650      	mov	r0, sl
 800553c:	f7fa fe50 	bl	80001e0 <strlen>
 8005540:	2300      	movs	r3, #0
 8005542:	930a      	str	r3, [sp, #40]	; 0x28
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	9305      	str	r3, [sp, #20]
 8005548:	f8d8 3000 	ldr.w	r3, [r8]
 800554c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005550:	3307      	adds	r3, #7
 8005552:	f023 0307 	bic.w	r3, r3, #7
 8005556:	f103 0208 	add.w	r2, r3, #8
 800555a:	f8c8 2000 	str.w	r2, [r8]
 800555e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005562:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005566:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800556a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800556e:	9307      	str	r3, [sp, #28]
 8005570:	f8cd 8018 	str.w	r8, [sp, #24]
 8005574:	ee08 0a10 	vmov	s16, r0
 8005578:	4b9f      	ldr	r3, [pc, #636]	; (80057f8 <_printf_float+0x2dc>)
 800557a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800557e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005582:	f7fb fadb 	bl	8000b3c <__aeabi_dcmpun>
 8005586:	bb88      	cbnz	r0, 80055ec <_printf_float+0xd0>
 8005588:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800558c:	4b9a      	ldr	r3, [pc, #616]	; (80057f8 <_printf_float+0x2dc>)
 800558e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005592:	f7fb fab5 	bl	8000b00 <__aeabi_dcmple>
 8005596:	bb48      	cbnz	r0, 80055ec <_printf_float+0xd0>
 8005598:	2200      	movs	r2, #0
 800559a:	2300      	movs	r3, #0
 800559c:	4640      	mov	r0, r8
 800559e:	4649      	mov	r1, r9
 80055a0:	f7fb faa4 	bl	8000aec <__aeabi_dcmplt>
 80055a4:	b110      	cbz	r0, 80055ac <_printf_float+0x90>
 80055a6:	232d      	movs	r3, #45	; 0x2d
 80055a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055ac:	4b93      	ldr	r3, [pc, #588]	; (80057fc <_printf_float+0x2e0>)
 80055ae:	4894      	ldr	r0, [pc, #592]	; (8005800 <_printf_float+0x2e4>)
 80055b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80055b4:	bf94      	ite	ls
 80055b6:	4698      	movls	r8, r3
 80055b8:	4680      	movhi	r8, r0
 80055ba:	2303      	movs	r3, #3
 80055bc:	6123      	str	r3, [r4, #16]
 80055be:	9b05      	ldr	r3, [sp, #20]
 80055c0:	f023 0204 	bic.w	r2, r3, #4
 80055c4:	6022      	str	r2, [r4, #0]
 80055c6:	f04f 0900 	mov.w	r9, #0
 80055ca:	9700      	str	r7, [sp, #0]
 80055cc:	4633      	mov	r3, r6
 80055ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80055d0:	4621      	mov	r1, r4
 80055d2:	4628      	mov	r0, r5
 80055d4:	f000 f9d8 	bl	8005988 <_printf_common>
 80055d8:	3001      	adds	r0, #1
 80055da:	f040 8090 	bne.w	80056fe <_printf_float+0x1e2>
 80055de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055e2:	b00d      	add	sp, #52	; 0x34
 80055e4:	ecbd 8b02 	vpop	{d8}
 80055e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ec:	4642      	mov	r2, r8
 80055ee:	464b      	mov	r3, r9
 80055f0:	4640      	mov	r0, r8
 80055f2:	4649      	mov	r1, r9
 80055f4:	f7fb faa2 	bl	8000b3c <__aeabi_dcmpun>
 80055f8:	b140      	cbz	r0, 800560c <_printf_float+0xf0>
 80055fa:	464b      	mov	r3, r9
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	bfbc      	itt	lt
 8005600:	232d      	movlt	r3, #45	; 0x2d
 8005602:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005606:	487f      	ldr	r0, [pc, #508]	; (8005804 <_printf_float+0x2e8>)
 8005608:	4b7f      	ldr	r3, [pc, #508]	; (8005808 <_printf_float+0x2ec>)
 800560a:	e7d1      	b.n	80055b0 <_printf_float+0x94>
 800560c:	6863      	ldr	r3, [r4, #4]
 800560e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005612:	9206      	str	r2, [sp, #24]
 8005614:	1c5a      	adds	r2, r3, #1
 8005616:	d13f      	bne.n	8005698 <_printf_float+0x17c>
 8005618:	2306      	movs	r3, #6
 800561a:	6063      	str	r3, [r4, #4]
 800561c:	9b05      	ldr	r3, [sp, #20]
 800561e:	6861      	ldr	r1, [r4, #4]
 8005620:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005624:	2300      	movs	r3, #0
 8005626:	9303      	str	r3, [sp, #12]
 8005628:	ab0a      	add	r3, sp, #40	; 0x28
 800562a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800562e:	ab09      	add	r3, sp, #36	; 0x24
 8005630:	ec49 8b10 	vmov	d0, r8, r9
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	6022      	str	r2, [r4, #0]
 8005638:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800563c:	4628      	mov	r0, r5
 800563e:	f7ff fecd 	bl	80053dc <__cvt>
 8005642:	9b06      	ldr	r3, [sp, #24]
 8005644:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005646:	2b47      	cmp	r3, #71	; 0x47
 8005648:	4680      	mov	r8, r0
 800564a:	d108      	bne.n	800565e <_printf_float+0x142>
 800564c:	1cc8      	adds	r0, r1, #3
 800564e:	db02      	blt.n	8005656 <_printf_float+0x13a>
 8005650:	6863      	ldr	r3, [r4, #4]
 8005652:	4299      	cmp	r1, r3
 8005654:	dd41      	ble.n	80056da <_printf_float+0x1be>
 8005656:	f1ab 0b02 	sub.w	fp, fp, #2
 800565a:	fa5f fb8b 	uxtb.w	fp, fp
 800565e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005662:	d820      	bhi.n	80056a6 <_printf_float+0x18a>
 8005664:	3901      	subs	r1, #1
 8005666:	465a      	mov	r2, fp
 8005668:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800566c:	9109      	str	r1, [sp, #36]	; 0x24
 800566e:	f7ff ff17 	bl	80054a0 <__exponent>
 8005672:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005674:	1813      	adds	r3, r2, r0
 8005676:	2a01      	cmp	r2, #1
 8005678:	4681      	mov	r9, r0
 800567a:	6123      	str	r3, [r4, #16]
 800567c:	dc02      	bgt.n	8005684 <_printf_float+0x168>
 800567e:	6822      	ldr	r2, [r4, #0]
 8005680:	07d2      	lsls	r2, r2, #31
 8005682:	d501      	bpl.n	8005688 <_printf_float+0x16c>
 8005684:	3301      	adds	r3, #1
 8005686:	6123      	str	r3, [r4, #16]
 8005688:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800568c:	2b00      	cmp	r3, #0
 800568e:	d09c      	beq.n	80055ca <_printf_float+0xae>
 8005690:	232d      	movs	r3, #45	; 0x2d
 8005692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005696:	e798      	b.n	80055ca <_printf_float+0xae>
 8005698:	9a06      	ldr	r2, [sp, #24]
 800569a:	2a47      	cmp	r2, #71	; 0x47
 800569c:	d1be      	bne.n	800561c <_printf_float+0x100>
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1bc      	bne.n	800561c <_printf_float+0x100>
 80056a2:	2301      	movs	r3, #1
 80056a4:	e7b9      	b.n	800561a <_printf_float+0xfe>
 80056a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80056aa:	d118      	bne.n	80056de <_printf_float+0x1c2>
 80056ac:	2900      	cmp	r1, #0
 80056ae:	6863      	ldr	r3, [r4, #4]
 80056b0:	dd0b      	ble.n	80056ca <_printf_float+0x1ae>
 80056b2:	6121      	str	r1, [r4, #16]
 80056b4:	b913      	cbnz	r3, 80056bc <_printf_float+0x1a0>
 80056b6:	6822      	ldr	r2, [r4, #0]
 80056b8:	07d0      	lsls	r0, r2, #31
 80056ba:	d502      	bpl.n	80056c2 <_printf_float+0x1a6>
 80056bc:	3301      	adds	r3, #1
 80056be:	440b      	add	r3, r1
 80056c0:	6123      	str	r3, [r4, #16]
 80056c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80056c4:	f04f 0900 	mov.w	r9, #0
 80056c8:	e7de      	b.n	8005688 <_printf_float+0x16c>
 80056ca:	b913      	cbnz	r3, 80056d2 <_printf_float+0x1b6>
 80056cc:	6822      	ldr	r2, [r4, #0]
 80056ce:	07d2      	lsls	r2, r2, #31
 80056d0:	d501      	bpl.n	80056d6 <_printf_float+0x1ba>
 80056d2:	3302      	adds	r3, #2
 80056d4:	e7f4      	b.n	80056c0 <_printf_float+0x1a4>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e7f2      	b.n	80056c0 <_printf_float+0x1a4>
 80056da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80056de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056e0:	4299      	cmp	r1, r3
 80056e2:	db05      	blt.n	80056f0 <_printf_float+0x1d4>
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	6121      	str	r1, [r4, #16]
 80056e8:	07d8      	lsls	r0, r3, #31
 80056ea:	d5ea      	bpl.n	80056c2 <_printf_float+0x1a6>
 80056ec:	1c4b      	adds	r3, r1, #1
 80056ee:	e7e7      	b.n	80056c0 <_printf_float+0x1a4>
 80056f0:	2900      	cmp	r1, #0
 80056f2:	bfd4      	ite	le
 80056f4:	f1c1 0202 	rsble	r2, r1, #2
 80056f8:	2201      	movgt	r2, #1
 80056fa:	4413      	add	r3, r2
 80056fc:	e7e0      	b.n	80056c0 <_printf_float+0x1a4>
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	055a      	lsls	r2, r3, #21
 8005702:	d407      	bmi.n	8005714 <_printf_float+0x1f8>
 8005704:	6923      	ldr	r3, [r4, #16]
 8005706:	4642      	mov	r2, r8
 8005708:	4631      	mov	r1, r6
 800570a:	4628      	mov	r0, r5
 800570c:	47b8      	blx	r7
 800570e:	3001      	adds	r0, #1
 8005710:	d12c      	bne.n	800576c <_printf_float+0x250>
 8005712:	e764      	b.n	80055de <_printf_float+0xc2>
 8005714:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005718:	f240 80e0 	bls.w	80058dc <_printf_float+0x3c0>
 800571c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005720:	2200      	movs	r2, #0
 8005722:	2300      	movs	r3, #0
 8005724:	f7fb f9d8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005728:	2800      	cmp	r0, #0
 800572a:	d034      	beq.n	8005796 <_printf_float+0x27a>
 800572c:	4a37      	ldr	r2, [pc, #220]	; (800580c <_printf_float+0x2f0>)
 800572e:	2301      	movs	r3, #1
 8005730:	4631      	mov	r1, r6
 8005732:	4628      	mov	r0, r5
 8005734:	47b8      	blx	r7
 8005736:	3001      	adds	r0, #1
 8005738:	f43f af51 	beq.w	80055de <_printf_float+0xc2>
 800573c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005740:	429a      	cmp	r2, r3
 8005742:	db02      	blt.n	800574a <_printf_float+0x22e>
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	07d8      	lsls	r0, r3, #31
 8005748:	d510      	bpl.n	800576c <_printf_float+0x250>
 800574a:	ee18 3a10 	vmov	r3, s16
 800574e:	4652      	mov	r2, sl
 8005750:	4631      	mov	r1, r6
 8005752:	4628      	mov	r0, r5
 8005754:	47b8      	blx	r7
 8005756:	3001      	adds	r0, #1
 8005758:	f43f af41 	beq.w	80055de <_printf_float+0xc2>
 800575c:	f04f 0800 	mov.w	r8, #0
 8005760:	f104 091a 	add.w	r9, r4, #26
 8005764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005766:	3b01      	subs	r3, #1
 8005768:	4543      	cmp	r3, r8
 800576a:	dc09      	bgt.n	8005780 <_printf_float+0x264>
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	079b      	lsls	r3, r3, #30
 8005770:	f100 8105 	bmi.w	800597e <_printf_float+0x462>
 8005774:	68e0      	ldr	r0, [r4, #12]
 8005776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005778:	4298      	cmp	r0, r3
 800577a:	bfb8      	it	lt
 800577c:	4618      	movlt	r0, r3
 800577e:	e730      	b.n	80055e2 <_printf_float+0xc6>
 8005780:	2301      	movs	r3, #1
 8005782:	464a      	mov	r2, r9
 8005784:	4631      	mov	r1, r6
 8005786:	4628      	mov	r0, r5
 8005788:	47b8      	blx	r7
 800578a:	3001      	adds	r0, #1
 800578c:	f43f af27 	beq.w	80055de <_printf_float+0xc2>
 8005790:	f108 0801 	add.w	r8, r8, #1
 8005794:	e7e6      	b.n	8005764 <_printf_float+0x248>
 8005796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005798:	2b00      	cmp	r3, #0
 800579a:	dc39      	bgt.n	8005810 <_printf_float+0x2f4>
 800579c:	4a1b      	ldr	r2, [pc, #108]	; (800580c <_printf_float+0x2f0>)
 800579e:	2301      	movs	r3, #1
 80057a0:	4631      	mov	r1, r6
 80057a2:	4628      	mov	r0, r5
 80057a4:	47b8      	blx	r7
 80057a6:	3001      	adds	r0, #1
 80057a8:	f43f af19 	beq.w	80055de <_printf_float+0xc2>
 80057ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057b0:	4313      	orrs	r3, r2
 80057b2:	d102      	bne.n	80057ba <_printf_float+0x29e>
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	07d9      	lsls	r1, r3, #31
 80057b8:	d5d8      	bpl.n	800576c <_printf_float+0x250>
 80057ba:	ee18 3a10 	vmov	r3, s16
 80057be:	4652      	mov	r2, sl
 80057c0:	4631      	mov	r1, r6
 80057c2:	4628      	mov	r0, r5
 80057c4:	47b8      	blx	r7
 80057c6:	3001      	adds	r0, #1
 80057c8:	f43f af09 	beq.w	80055de <_printf_float+0xc2>
 80057cc:	f04f 0900 	mov.w	r9, #0
 80057d0:	f104 0a1a 	add.w	sl, r4, #26
 80057d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057d6:	425b      	negs	r3, r3
 80057d8:	454b      	cmp	r3, r9
 80057da:	dc01      	bgt.n	80057e0 <_printf_float+0x2c4>
 80057dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057de:	e792      	b.n	8005706 <_printf_float+0x1ea>
 80057e0:	2301      	movs	r3, #1
 80057e2:	4652      	mov	r2, sl
 80057e4:	4631      	mov	r1, r6
 80057e6:	4628      	mov	r0, r5
 80057e8:	47b8      	blx	r7
 80057ea:	3001      	adds	r0, #1
 80057ec:	f43f aef7 	beq.w	80055de <_printf_float+0xc2>
 80057f0:	f109 0901 	add.w	r9, r9, #1
 80057f4:	e7ee      	b.n	80057d4 <_printf_float+0x2b8>
 80057f6:	bf00      	nop
 80057f8:	7fefffff 	.word	0x7fefffff
 80057fc:	0801ae7c 	.word	0x0801ae7c
 8005800:	0801ae80 	.word	0x0801ae80
 8005804:	0801ae88 	.word	0x0801ae88
 8005808:	0801ae84 	.word	0x0801ae84
 800580c:	0801ae8c 	.word	0x0801ae8c
 8005810:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005812:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005814:	429a      	cmp	r2, r3
 8005816:	bfa8      	it	ge
 8005818:	461a      	movge	r2, r3
 800581a:	2a00      	cmp	r2, #0
 800581c:	4691      	mov	r9, r2
 800581e:	dc37      	bgt.n	8005890 <_printf_float+0x374>
 8005820:	f04f 0b00 	mov.w	fp, #0
 8005824:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005828:	f104 021a 	add.w	r2, r4, #26
 800582c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800582e:	9305      	str	r3, [sp, #20]
 8005830:	eba3 0309 	sub.w	r3, r3, r9
 8005834:	455b      	cmp	r3, fp
 8005836:	dc33      	bgt.n	80058a0 <_printf_float+0x384>
 8005838:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800583c:	429a      	cmp	r2, r3
 800583e:	db3b      	blt.n	80058b8 <_printf_float+0x39c>
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	07da      	lsls	r2, r3, #31
 8005844:	d438      	bmi.n	80058b8 <_printf_float+0x39c>
 8005846:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005848:	9b05      	ldr	r3, [sp, #20]
 800584a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	eba2 0901 	sub.w	r9, r2, r1
 8005852:	4599      	cmp	r9, r3
 8005854:	bfa8      	it	ge
 8005856:	4699      	movge	r9, r3
 8005858:	f1b9 0f00 	cmp.w	r9, #0
 800585c:	dc35      	bgt.n	80058ca <_printf_float+0x3ae>
 800585e:	f04f 0800 	mov.w	r8, #0
 8005862:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005866:	f104 0a1a 	add.w	sl, r4, #26
 800586a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800586e:	1a9b      	subs	r3, r3, r2
 8005870:	eba3 0309 	sub.w	r3, r3, r9
 8005874:	4543      	cmp	r3, r8
 8005876:	f77f af79 	ble.w	800576c <_printf_float+0x250>
 800587a:	2301      	movs	r3, #1
 800587c:	4652      	mov	r2, sl
 800587e:	4631      	mov	r1, r6
 8005880:	4628      	mov	r0, r5
 8005882:	47b8      	blx	r7
 8005884:	3001      	adds	r0, #1
 8005886:	f43f aeaa 	beq.w	80055de <_printf_float+0xc2>
 800588a:	f108 0801 	add.w	r8, r8, #1
 800588e:	e7ec      	b.n	800586a <_printf_float+0x34e>
 8005890:	4613      	mov	r3, r2
 8005892:	4631      	mov	r1, r6
 8005894:	4642      	mov	r2, r8
 8005896:	4628      	mov	r0, r5
 8005898:	47b8      	blx	r7
 800589a:	3001      	adds	r0, #1
 800589c:	d1c0      	bne.n	8005820 <_printf_float+0x304>
 800589e:	e69e      	b.n	80055de <_printf_float+0xc2>
 80058a0:	2301      	movs	r3, #1
 80058a2:	4631      	mov	r1, r6
 80058a4:	4628      	mov	r0, r5
 80058a6:	9205      	str	r2, [sp, #20]
 80058a8:	47b8      	blx	r7
 80058aa:	3001      	adds	r0, #1
 80058ac:	f43f ae97 	beq.w	80055de <_printf_float+0xc2>
 80058b0:	9a05      	ldr	r2, [sp, #20]
 80058b2:	f10b 0b01 	add.w	fp, fp, #1
 80058b6:	e7b9      	b.n	800582c <_printf_float+0x310>
 80058b8:	ee18 3a10 	vmov	r3, s16
 80058bc:	4652      	mov	r2, sl
 80058be:	4631      	mov	r1, r6
 80058c0:	4628      	mov	r0, r5
 80058c2:	47b8      	blx	r7
 80058c4:	3001      	adds	r0, #1
 80058c6:	d1be      	bne.n	8005846 <_printf_float+0x32a>
 80058c8:	e689      	b.n	80055de <_printf_float+0xc2>
 80058ca:	9a05      	ldr	r2, [sp, #20]
 80058cc:	464b      	mov	r3, r9
 80058ce:	4442      	add	r2, r8
 80058d0:	4631      	mov	r1, r6
 80058d2:	4628      	mov	r0, r5
 80058d4:	47b8      	blx	r7
 80058d6:	3001      	adds	r0, #1
 80058d8:	d1c1      	bne.n	800585e <_printf_float+0x342>
 80058da:	e680      	b.n	80055de <_printf_float+0xc2>
 80058dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058de:	2a01      	cmp	r2, #1
 80058e0:	dc01      	bgt.n	80058e6 <_printf_float+0x3ca>
 80058e2:	07db      	lsls	r3, r3, #31
 80058e4:	d538      	bpl.n	8005958 <_printf_float+0x43c>
 80058e6:	2301      	movs	r3, #1
 80058e8:	4642      	mov	r2, r8
 80058ea:	4631      	mov	r1, r6
 80058ec:	4628      	mov	r0, r5
 80058ee:	47b8      	blx	r7
 80058f0:	3001      	adds	r0, #1
 80058f2:	f43f ae74 	beq.w	80055de <_printf_float+0xc2>
 80058f6:	ee18 3a10 	vmov	r3, s16
 80058fa:	4652      	mov	r2, sl
 80058fc:	4631      	mov	r1, r6
 80058fe:	4628      	mov	r0, r5
 8005900:	47b8      	blx	r7
 8005902:	3001      	adds	r0, #1
 8005904:	f43f ae6b 	beq.w	80055de <_printf_float+0xc2>
 8005908:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800590c:	2200      	movs	r2, #0
 800590e:	2300      	movs	r3, #0
 8005910:	f7fb f8e2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005914:	b9d8      	cbnz	r0, 800594e <_printf_float+0x432>
 8005916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005918:	f108 0201 	add.w	r2, r8, #1
 800591c:	3b01      	subs	r3, #1
 800591e:	4631      	mov	r1, r6
 8005920:	4628      	mov	r0, r5
 8005922:	47b8      	blx	r7
 8005924:	3001      	adds	r0, #1
 8005926:	d10e      	bne.n	8005946 <_printf_float+0x42a>
 8005928:	e659      	b.n	80055de <_printf_float+0xc2>
 800592a:	2301      	movs	r3, #1
 800592c:	4652      	mov	r2, sl
 800592e:	4631      	mov	r1, r6
 8005930:	4628      	mov	r0, r5
 8005932:	47b8      	blx	r7
 8005934:	3001      	adds	r0, #1
 8005936:	f43f ae52 	beq.w	80055de <_printf_float+0xc2>
 800593a:	f108 0801 	add.w	r8, r8, #1
 800593e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005940:	3b01      	subs	r3, #1
 8005942:	4543      	cmp	r3, r8
 8005944:	dcf1      	bgt.n	800592a <_printf_float+0x40e>
 8005946:	464b      	mov	r3, r9
 8005948:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800594c:	e6dc      	b.n	8005708 <_printf_float+0x1ec>
 800594e:	f04f 0800 	mov.w	r8, #0
 8005952:	f104 0a1a 	add.w	sl, r4, #26
 8005956:	e7f2      	b.n	800593e <_printf_float+0x422>
 8005958:	2301      	movs	r3, #1
 800595a:	4642      	mov	r2, r8
 800595c:	e7df      	b.n	800591e <_printf_float+0x402>
 800595e:	2301      	movs	r3, #1
 8005960:	464a      	mov	r2, r9
 8005962:	4631      	mov	r1, r6
 8005964:	4628      	mov	r0, r5
 8005966:	47b8      	blx	r7
 8005968:	3001      	adds	r0, #1
 800596a:	f43f ae38 	beq.w	80055de <_printf_float+0xc2>
 800596e:	f108 0801 	add.w	r8, r8, #1
 8005972:	68e3      	ldr	r3, [r4, #12]
 8005974:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005976:	1a5b      	subs	r3, r3, r1
 8005978:	4543      	cmp	r3, r8
 800597a:	dcf0      	bgt.n	800595e <_printf_float+0x442>
 800597c:	e6fa      	b.n	8005774 <_printf_float+0x258>
 800597e:	f04f 0800 	mov.w	r8, #0
 8005982:	f104 0919 	add.w	r9, r4, #25
 8005986:	e7f4      	b.n	8005972 <_printf_float+0x456>

08005988 <_printf_common>:
 8005988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800598c:	4616      	mov	r6, r2
 800598e:	4699      	mov	r9, r3
 8005990:	688a      	ldr	r2, [r1, #8]
 8005992:	690b      	ldr	r3, [r1, #16]
 8005994:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005998:	4293      	cmp	r3, r2
 800599a:	bfb8      	it	lt
 800599c:	4613      	movlt	r3, r2
 800599e:	6033      	str	r3, [r6, #0]
 80059a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059a4:	4607      	mov	r7, r0
 80059a6:	460c      	mov	r4, r1
 80059a8:	b10a      	cbz	r2, 80059ae <_printf_common+0x26>
 80059aa:	3301      	adds	r3, #1
 80059ac:	6033      	str	r3, [r6, #0]
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	0699      	lsls	r1, r3, #26
 80059b2:	bf42      	ittt	mi
 80059b4:	6833      	ldrmi	r3, [r6, #0]
 80059b6:	3302      	addmi	r3, #2
 80059b8:	6033      	strmi	r3, [r6, #0]
 80059ba:	6825      	ldr	r5, [r4, #0]
 80059bc:	f015 0506 	ands.w	r5, r5, #6
 80059c0:	d106      	bne.n	80059d0 <_printf_common+0x48>
 80059c2:	f104 0a19 	add.w	sl, r4, #25
 80059c6:	68e3      	ldr	r3, [r4, #12]
 80059c8:	6832      	ldr	r2, [r6, #0]
 80059ca:	1a9b      	subs	r3, r3, r2
 80059cc:	42ab      	cmp	r3, r5
 80059ce:	dc26      	bgt.n	8005a1e <_printf_common+0x96>
 80059d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059d4:	1e13      	subs	r3, r2, #0
 80059d6:	6822      	ldr	r2, [r4, #0]
 80059d8:	bf18      	it	ne
 80059da:	2301      	movne	r3, #1
 80059dc:	0692      	lsls	r2, r2, #26
 80059de:	d42b      	bmi.n	8005a38 <_printf_common+0xb0>
 80059e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059e4:	4649      	mov	r1, r9
 80059e6:	4638      	mov	r0, r7
 80059e8:	47c0      	blx	r8
 80059ea:	3001      	adds	r0, #1
 80059ec:	d01e      	beq.n	8005a2c <_printf_common+0xa4>
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	68e5      	ldr	r5, [r4, #12]
 80059f2:	6832      	ldr	r2, [r6, #0]
 80059f4:	f003 0306 	and.w	r3, r3, #6
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	bf08      	it	eq
 80059fc:	1aad      	subeq	r5, r5, r2
 80059fe:	68a3      	ldr	r3, [r4, #8]
 8005a00:	6922      	ldr	r2, [r4, #16]
 8005a02:	bf0c      	ite	eq
 8005a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a08:	2500      	movne	r5, #0
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	bfc4      	itt	gt
 8005a0e:	1a9b      	subgt	r3, r3, r2
 8005a10:	18ed      	addgt	r5, r5, r3
 8005a12:	2600      	movs	r6, #0
 8005a14:	341a      	adds	r4, #26
 8005a16:	42b5      	cmp	r5, r6
 8005a18:	d11a      	bne.n	8005a50 <_printf_common+0xc8>
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	e008      	b.n	8005a30 <_printf_common+0xa8>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	4652      	mov	r2, sl
 8005a22:	4649      	mov	r1, r9
 8005a24:	4638      	mov	r0, r7
 8005a26:	47c0      	blx	r8
 8005a28:	3001      	adds	r0, #1
 8005a2a:	d103      	bne.n	8005a34 <_printf_common+0xac>
 8005a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a34:	3501      	adds	r5, #1
 8005a36:	e7c6      	b.n	80059c6 <_printf_common+0x3e>
 8005a38:	18e1      	adds	r1, r4, r3
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	2030      	movs	r0, #48	; 0x30
 8005a3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a42:	4422      	add	r2, r4
 8005a44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a4c:	3302      	adds	r3, #2
 8005a4e:	e7c7      	b.n	80059e0 <_printf_common+0x58>
 8005a50:	2301      	movs	r3, #1
 8005a52:	4622      	mov	r2, r4
 8005a54:	4649      	mov	r1, r9
 8005a56:	4638      	mov	r0, r7
 8005a58:	47c0      	blx	r8
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	d0e6      	beq.n	8005a2c <_printf_common+0xa4>
 8005a5e:	3601      	adds	r6, #1
 8005a60:	e7d9      	b.n	8005a16 <_printf_common+0x8e>
	...

08005a64 <_printf_i>:
 8005a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a68:	460c      	mov	r4, r1
 8005a6a:	4691      	mov	r9, r2
 8005a6c:	7e27      	ldrb	r7, [r4, #24]
 8005a6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005a70:	2f78      	cmp	r7, #120	; 0x78
 8005a72:	4680      	mov	r8, r0
 8005a74:	469a      	mov	sl, r3
 8005a76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a7a:	d807      	bhi.n	8005a8c <_printf_i+0x28>
 8005a7c:	2f62      	cmp	r7, #98	; 0x62
 8005a7e:	d80a      	bhi.n	8005a96 <_printf_i+0x32>
 8005a80:	2f00      	cmp	r7, #0
 8005a82:	f000 80d8 	beq.w	8005c36 <_printf_i+0x1d2>
 8005a86:	2f58      	cmp	r7, #88	; 0x58
 8005a88:	f000 80a3 	beq.w	8005bd2 <_printf_i+0x16e>
 8005a8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a94:	e03a      	b.n	8005b0c <_printf_i+0xa8>
 8005a96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a9a:	2b15      	cmp	r3, #21
 8005a9c:	d8f6      	bhi.n	8005a8c <_printf_i+0x28>
 8005a9e:	a001      	add	r0, pc, #4	; (adr r0, 8005aa4 <_printf_i+0x40>)
 8005aa0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005aa4:	08005afd 	.word	0x08005afd
 8005aa8:	08005b11 	.word	0x08005b11
 8005aac:	08005a8d 	.word	0x08005a8d
 8005ab0:	08005a8d 	.word	0x08005a8d
 8005ab4:	08005a8d 	.word	0x08005a8d
 8005ab8:	08005a8d 	.word	0x08005a8d
 8005abc:	08005b11 	.word	0x08005b11
 8005ac0:	08005a8d 	.word	0x08005a8d
 8005ac4:	08005a8d 	.word	0x08005a8d
 8005ac8:	08005a8d 	.word	0x08005a8d
 8005acc:	08005a8d 	.word	0x08005a8d
 8005ad0:	08005c1d 	.word	0x08005c1d
 8005ad4:	08005b41 	.word	0x08005b41
 8005ad8:	08005bff 	.word	0x08005bff
 8005adc:	08005a8d 	.word	0x08005a8d
 8005ae0:	08005a8d 	.word	0x08005a8d
 8005ae4:	08005c3f 	.word	0x08005c3f
 8005ae8:	08005a8d 	.word	0x08005a8d
 8005aec:	08005b41 	.word	0x08005b41
 8005af0:	08005a8d 	.word	0x08005a8d
 8005af4:	08005a8d 	.word	0x08005a8d
 8005af8:	08005c07 	.word	0x08005c07
 8005afc:	680b      	ldr	r3, [r1, #0]
 8005afe:	1d1a      	adds	r2, r3, #4
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	600a      	str	r2, [r1, #0]
 8005b04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e0a3      	b.n	8005c58 <_printf_i+0x1f4>
 8005b10:	6825      	ldr	r5, [r4, #0]
 8005b12:	6808      	ldr	r0, [r1, #0]
 8005b14:	062e      	lsls	r6, r5, #24
 8005b16:	f100 0304 	add.w	r3, r0, #4
 8005b1a:	d50a      	bpl.n	8005b32 <_printf_i+0xce>
 8005b1c:	6805      	ldr	r5, [r0, #0]
 8005b1e:	600b      	str	r3, [r1, #0]
 8005b20:	2d00      	cmp	r5, #0
 8005b22:	da03      	bge.n	8005b2c <_printf_i+0xc8>
 8005b24:	232d      	movs	r3, #45	; 0x2d
 8005b26:	426d      	negs	r5, r5
 8005b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b2c:	485e      	ldr	r0, [pc, #376]	; (8005ca8 <_printf_i+0x244>)
 8005b2e:	230a      	movs	r3, #10
 8005b30:	e019      	b.n	8005b66 <_printf_i+0x102>
 8005b32:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b36:	6805      	ldr	r5, [r0, #0]
 8005b38:	600b      	str	r3, [r1, #0]
 8005b3a:	bf18      	it	ne
 8005b3c:	b22d      	sxthne	r5, r5
 8005b3e:	e7ef      	b.n	8005b20 <_printf_i+0xbc>
 8005b40:	680b      	ldr	r3, [r1, #0]
 8005b42:	6825      	ldr	r5, [r4, #0]
 8005b44:	1d18      	adds	r0, r3, #4
 8005b46:	6008      	str	r0, [r1, #0]
 8005b48:	0628      	lsls	r0, r5, #24
 8005b4a:	d501      	bpl.n	8005b50 <_printf_i+0xec>
 8005b4c:	681d      	ldr	r5, [r3, #0]
 8005b4e:	e002      	b.n	8005b56 <_printf_i+0xf2>
 8005b50:	0669      	lsls	r1, r5, #25
 8005b52:	d5fb      	bpl.n	8005b4c <_printf_i+0xe8>
 8005b54:	881d      	ldrh	r5, [r3, #0]
 8005b56:	4854      	ldr	r0, [pc, #336]	; (8005ca8 <_printf_i+0x244>)
 8005b58:	2f6f      	cmp	r7, #111	; 0x6f
 8005b5a:	bf0c      	ite	eq
 8005b5c:	2308      	moveq	r3, #8
 8005b5e:	230a      	movne	r3, #10
 8005b60:	2100      	movs	r1, #0
 8005b62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b66:	6866      	ldr	r6, [r4, #4]
 8005b68:	60a6      	str	r6, [r4, #8]
 8005b6a:	2e00      	cmp	r6, #0
 8005b6c:	bfa2      	ittt	ge
 8005b6e:	6821      	ldrge	r1, [r4, #0]
 8005b70:	f021 0104 	bicge.w	r1, r1, #4
 8005b74:	6021      	strge	r1, [r4, #0]
 8005b76:	b90d      	cbnz	r5, 8005b7c <_printf_i+0x118>
 8005b78:	2e00      	cmp	r6, #0
 8005b7a:	d04d      	beq.n	8005c18 <_printf_i+0x1b4>
 8005b7c:	4616      	mov	r6, r2
 8005b7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b82:	fb03 5711 	mls	r7, r3, r1, r5
 8005b86:	5dc7      	ldrb	r7, [r0, r7]
 8005b88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b8c:	462f      	mov	r7, r5
 8005b8e:	42bb      	cmp	r3, r7
 8005b90:	460d      	mov	r5, r1
 8005b92:	d9f4      	bls.n	8005b7e <_printf_i+0x11a>
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d10b      	bne.n	8005bb0 <_printf_i+0x14c>
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	07df      	lsls	r7, r3, #31
 8005b9c:	d508      	bpl.n	8005bb0 <_printf_i+0x14c>
 8005b9e:	6923      	ldr	r3, [r4, #16]
 8005ba0:	6861      	ldr	r1, [r4, #4]
 8005ba2:	4299      	cmp	r1, r3
 8005ba4:	bfde      	ittt	le
 8005ba6:	2330      	movle	r3, #48	; 0x30
 8005ba8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bac:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005bb0:	1b92      	subs	r2, r2, r6
 8005bb2:	6122      	str	r2, [r4, #16]
 8005bb4:	f8cd a000 	str.w	sl, [sp]
 8005bb8:	464b      	mov	r3, r9
 8005bba:	aa03      	add	r2, sp, #12
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	4640      	mov	r0, r8
 8005bc0:	f7ff fee2 	bl	8005988 <_printf_common>
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	d14c      	bne.n	8005c62 <_printf_i+0x1fe>
 8005bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bcc:	b004      	add	sp, #16
 8005bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd2:	4835      	ldr	r0, [pc, #212]	; (8005ca8 <_printf_i+0x244>)
 8005bd4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	680e      	ldr	r6, [r1, #0]
 8005bdc:	061f      	lsls	r7, r3, #24
 8005bde:	f856 5b04 	ldr.w	r5, [r6], #4
 8005be2:	600e      	str	r6, [r1, #0]
 8005be4:	d514      	bpl.n	8005c10 <_printf_i+0x1ac>
 8005be6:	07d9      	lsls	r1, r3, #31
 8005be8:	bf44      	itt	mi
 8005bea:	f043 0320 	orrmi.w	r3, r3, #32
 8005bee:	6023      	strmi	r3, [r4, #0]
 8005bf0:	b91d      	cbnz	r5, 8005bfa <_printf_i+0x196>
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	f023 0320 	bic.w	r3, r3, #32
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	2310      	movs	r3, #16
 8005bfc:	e7b0      	b.n	8005b60 <_printf_i+0xfc>
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	f043 0320 	orr.w	r3, r3, #32
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	2378      	movs	r3, #120	; 0x78
 8005c08:	4828      	ldr	r0, [pc, #160]	; (8005cac <_printf_i+0x248>)
 8005c0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c0e:	e7e3      	b.n	8005bd8 <_printf_i+0x174>
 8005c10:	065e      	lsls	r6, r3, #25
 8005c12:	bf48      	it	mi
 8005c14:	b2ad      	uxthmi	r5, r5
 8005c16:	e7e6      	b.n	8005be6 <_printf_i+0x182>
 8005c18:	4616      	mov	r6, r2
 8005c1a:	e7bb      	b.n	8005b94 <_printf_i+0x130>
 8005c1c:	680b      	ldr	r3, [r1, #0]
 8005c1e:	6826      	ldr	r6, [r4, #0]
 8005c20:	6960      	ldr	r0, [r4, #20]
 8005c22:	1d1d      	adds	r5, r3, #4
 8005c24:	600d      	str	r5, [r1, #0]
 8005c26:	0635      	lsls	r5, r6, #24
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	d501      	bpl.n	8005c30 <_printf_i+0x1cc>
 8005c2c:	6018      	str	r0, [r3, #0]
 8005c2e:	e002      	b.n	8005c36 <_printf_i+0x1d2>
 8005c30:	0671      	lsls	r1, r6, #25
 8005c32:	d5fb      	bpl.n	8005c2c <_printf_i+0x1c8>
 8005c34:	8018      	strh	r0, [r3, #0]
 8005c36:	2300      	movs	r3, #0
 8005c38:	6123      	str	r3, [r4, #16]
 8005c3a:	4616      	mov	r6, r2
 8005c3c:	e7ba      	b.n	8005bb4 <_printf_i+0x150>
 8005c3e:	680b      	ldr	r3, [r1, #0]
 8005c40:	1d1a      	adds	r2, r3, #4
 8005c42:	600a      	str	r2, [r1, #0]
 8005c44:	681e      	ldr	r6, [r3, #0]
 8005c46:	6862      	ldr	r2, [r4, #4]
 8005c48:	2100      	movs	r1, #0
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	f7fa fad0 	bl	80001f0 <memchr>
 8005c50:	b108      	cbz	r0, 8005c56 <_printf_i+0x1f2>
 8005c52:	1b80      	subs	r0, r0, r6
 8005c54:	6060      	str	r0, [r4, #4]
 8005c56:	6863      	ldr	r3, [r4, #4]
 8005c58:	6123      	str	r3, [r4, #16]
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c60:	e7a8      	b.n	8005bb4 <_printf_i+0x150>
 8005c62:	6923      	ldr	r3, [r4, #16]
 8005c64:	4632      	mov	r2, r6
 8005c66:	4649      	mov	r1, r9
 8005c68:	4640      	mov	r0, r8
 8005c6a:	47d0      	blx	sl
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	d0ab      	beq.n	8005bc8 <_printf_i+0x164>
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	079b      	lsls	r3, r3, #30
 8005c74:	d413      	bmi.n	8005c9e <_printf_i+0x23a>
 8005c76:	68e0      	ldr	r0, [r4, #12]
 8005c78:	9b03      	ldr	r3, [sp, #12]
 8005c7a:	4298      	cmp	r0, r3
 8005c7c:	bfb8      	it	lt
 8005c7e:	4618      	movlt	r0, r3
 8005c80:	e7a4      	b.n	8005bcc <_printf_i+0x168>
 8005c82:	2301      	movs	r3, #1
 8005c84:	4632      	mov	r2, r6
 8005c86:	4649      	mov	r1, r9
 8005c88:	4640      	mov	r0, r8
 8005c8a:	47d0      	blx	sl
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	d09b      	beq.n	8005bc8 <_printf_i+0x164>
 8005c90:	3501      	adds	r5, #1
 8005c92:	68e3      	ldr	r3, [r4, #12]
 8005c94:	9903      	ldr	r1, [sp, #12]
 8005c96:	1a5b      	subs	r3, r3, r1
 8005c98:	42ab      	cmp	r3, r5
 8005c9a:	dcf2      	bgt.n	8005c82 <_printf_i+0x21e>
 8005c9c:	e7eb      	b.n	8005c76 <_printf_i+0x212>
 8005c9e:	2500      	movs	r5, #0
 8005ca0:	f104 0619 	add.w	r6, r4, #25
 8005ca4:	e7f5      	b.n	8005c92 <_printf_i+0x22e>
 8005ca6:	bf00      	nop
 8005ca8:	0801ae8e 	.word	0x0801ae8e
 8005cac:	0801ae9f 	.word	0x0801ae9f

08005cb0 <quorem>:
 8005cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb4:	6903      	ldr	r3, [r0, #16]
 8005cb6:	690c      	ldr	r4, [r1, #16]
 8005cb8:	42a3      	cmp	r3, r4
 8005cba:	4607      	mov	r7, r0
 8005cbc:	f2c0 8081 	blt.w	8005dc2 <quorem+0x112>
 8005cc0:	3c01      	subs	r4, #1
 8005cc2:	f101 0814 	add.w	r8, r1, #20
 8005cc6:	f100 0514 	add.w	r5, r0, #20
 8005cca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cce:	9301      	str	r3, [sp, #4]
 8005cd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ce0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ce4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ce8:	d331      	bcc.n	8005d4e <quorem+0x9e>
 8005cea:	f04f 0e00 	mov.w	lr, #0
 8005cee:	4640      	mov	r0, r8
 8005cf0:	46ac      	mov	ip, r5
 8005cf2:	46f2      	mov	sl, lr
 8005cf4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005cf8:	b293      	uxth	r3, r2
 8005cfa:	fb06 e303 	mla	r3, r6, r3, lr
 8005cfe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	ebaa 0303 	sub.w	r3, sl, r3
 8005d08:	0c12      	lsrs	r2, r2, #16
 8005d0a:	f8dc a000 	ldr.w	sl, [ip]
 8005d0e:	fb06 e202 	mla	r2, r6, r2, lr
 8005d12:	fa13 f38a 	uxtah	r3, r3, sl
 8005d16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d1a:	fa1f fa82 	uxth.w	sl, r2
 8005d1e:	f8dc 2000 	ldr.w	r2, [ip]
 8005d22:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005d26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d30:	4581      	cmp	r9, r0
 8005d32:	f84c 3b04 	str.w	r3, [ip], #4
 8005d36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d3a:	d2db      	bcs.n	8005cf4 <quorem+0x44>
 8005d3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d40:	b92b      	cbnz	r3, 8005d4e <quorem+0x9e>
 8005d42:	9b01      	ldr	r3, [sp, #4]
 8005d44:	3b04      	subs	r3, #4
 8005d46:	429d      	cmp	r5, r3
 8005d48:	461a      	mov	r2, r3
 8005d4a:	d32e      	bcc.n	8005daa <quorem+0xfa>
 8005d4c:	613c      	str	r4, [r7, #16]
 8005d4e:	4638      	mov	r0, r7
 8005d50:	f001 f8b0 	bl	8006eb4 <__mcmp>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	db24      	blt.n	8005da2 <quorem+0xf2>
 8005d58:	3601      	adds	r6, #1
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	f04f 0c00 	mov.w	ip, #0
 8005d60:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d64:	f8d0 e000 	ldr.w	lr, [r0]
 8005d68:	b293      	uxth	r3, r2
 8005d6a:	ebac 0303 	sub.w	r3, ip, r3
 8005d6e:	0c12      	lsrs	r2, r2, #16
 8005d70:	fa13 f38e 	uxtah	r3, r3, lr
 8005d74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d82:	45c1      	cmp	r9, r8
 8005d84:	f840 3b04 	str.w	r3, [r0], #4
 8005d88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d8c:	d2e8      	bcs.n	8005d60 <quorem+0xb0>
 8005d8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d96:	b922      	cbnz	r2, 8005da2 <quorem+0xf2>
 8005d98:	3b04      	subs	r3, #4
 8005d9a:	429d      	cmp	r5, r3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	d30a      	bcc.n	8005db6 <quorem+0x106>
 8005da0:	613c      	str	r4, [r7, #16]
 8005da2:	4630      	mov	r0, r6
 8005da4:	b003      	add	sp, #12
 8005da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005daa:	6812      	ldr	r2, [r2, #0]
 8005dac:	3b04      	subs	r3, #4
 8005dae:	2a00      	cmp	r2, #0
 8005db0:	d1cc      	bne.n	8005d4c <quorem+0x9c>
 8005db2:	3c01      	subs	r4, #1
 8005db4:	e7c7      	b.n	8005d46 <quorem+0x96>
 8005db6:	6812      	ldr	r2, [r2, #0]
 8005db8:	3b04      	subs	r3, #4
 8005dba:	2a00      	cmp	r2, #0
 8005dbc:	d1f0      	bne.n	8005da0 <quorem+0xf0>
 8005dbe:	3c01      	subs	r4, #1
 8005dc0:	e7eb      	b.n	8005d9a <quorem+0xea>
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	e7ee      	b.n	8005da4 <quorem+0xf4>
	...

08005dc8 <_dtoa_r>:
 8005dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dcc:	ed2d 8b02 	vpush	{d8}
 8005dd0:	ec57 6b10 	vmov	r6, r7, d0
 8005dd4:	b095      	sub	sp, #84	; 0x54
 8005dd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005dd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005ddc:	9105      	str	r1, [sp, #20]
 8005dde:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005de2:	4604      	mov	r4, r0
 8005de4:	9209      	str	r2, [sp, #36]	; 0x24
 8005de6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005de8:	b975      	cbnz	r5, 8005e08 <_dtoa_r+0x40>
 8005dea:	2010      	movs	r0, #16
 8005dec:	f000 fddc 	bl	80069a8 <malloc>
 8005df0:	4602      	mov	r2, r0
 8005df2:	6260      	str	r0, [r4, #36]	; 0x24
 8005df4:	b920      	cbnz	r0, 8005e00 <_dtoa_r+0x38>
 8005df6:	4bb2      	ldr	r3, [pc, #712]	; (80060c0 <_dtoa_r+0x2f8>)
 8005df8:	21ea      	movs	r1, #234	; 0xea
 8005dfa:	48b2      	ldr	r0, [pc, #712]	; (80060c4 <_dtoa_r+0x2fc>)
 8005dfc:	f001 fa24 	bl	8007248 <__assert_func>
 8005e00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e04:	6005      	str	r5, [r0, #0]
 8005e06:	60c5      	str	r5, [r0, #12]
 8005e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e0a:	6819      	ldr	r1, [r3, #0]
 8005e0c:	b151      	cbz	r1, 8005e24 <_dtoa_r+0x5c>
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	604a      	str	r2, [r1, #4]
 8005e12:	2301      	movs	r3, #1
 8005e14:	4093      	lsls	r3, r2
 8005e16:	608b      	str	r3, [r1, #8]
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f000 fe0d 	bl	8006a38 <_Bfree>
 8005e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e20:	2200      	movs	r2, #0
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	1e3b      	subs	r3, r7, #0
 8005e26:	bfb9      	ittee	lt
 8005e28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005e2c:	9303      	strlt	r3, [sp, #12]
 8005e2e:	2300      	movge	r3, #0
 8005e30:	f8c8 3000 	strge.w	r3, [r8]
 8005e34:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005e38:	4ba3      	ldr	r3, [pc, #652]	; (80060c8 <_dtoa_r+0x300>)
 8005e3a:	bfbc      	itt	lt
 8005e3c:	2201      	movlt	r2, #1
 8005e3e:	f8c8 2000 	strlt.w	r2, [r8]
 8005e42:	ea33 0309 	bics.w	r3, r3, r9
 8005e46:	d11b      	bne.n	8005e80 <_dtoa_r+0xb8>
 8005e48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e4e:	6013      	str	r3, [r2, #0]
 8005e50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e54:	4333      	orrs	r3, r6
 8005e56:	f000 857a 	beq.w	800694e <_dtoa_r+0xb86>
 8005e5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e5c:	b963      	cbnz	r3, 8005e78 <_dtoa_r+0xb0>
 8005e5e:	4b9b      	ldr	r3, [pc, #620]	; (80060cc <_dtoa_r+0x304>)
 8005e60:	e024      	b.n	8005eac <_dtoa_r+0xe4>
 8005e62:	4b9b      	ldr	r3, [pc, #620]	; (80060d0 <_dtoa_r+0x308>)
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	3308      	adds	r3, #8
 8005e68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	9800      	ldr	r0, [sp, #0]
 8005e6e:	b015      	add	sp, #84	; 0x54
 8005e70:	ecbd 8b02 	vpop	{d8}
 8005e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e78:	4b94      	ldr	r3, [pc, #592]	; (80060cc <_dtoa_r+0x304>)
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	3303      	adds	r3, #3
 8005e7e:	e7f3      	b.n	8005e68 <_dtoa_r+0xa0>
 8005e80:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e84:	2200      	movs	r2, #0
 8005e86:	ec51 0b17 	vmov	r0, r1, d7
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005e90:	f7fa fe22 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e94:	4680      	mov	r8, r0
 8005e96:	b158      	cbz	r0, 8005eb0 <_dtoa_r+0xe8>
 8005e98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 8551 	beq.w	8006948 <_dtoa_r+0xb80>
 8005ea6:	488b      	ldr	r0, [pc, #556]	; (80060d4 <_dtoa_r+0x30c>)
 8005ea8:	6018      	str	r0, [r3, #0]
 8005eaa:	1e43      	subs	r3, r0, #1
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	e7dd      	b.n	8005e6c <_dtoa_r+0xa4>
 8005eb0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005eb4:	aa12      	add	r2, sp, #72	; 0x48
 8005eb6:	a913      	add	r1, sp, #76	; 0x4c
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f001 f89f 	bl	8006ffc <__d2b>
 8005ebe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005ec2:	4683      	mov	fp, r0
 8005ec4:	2d00      	cmp	r5, #0
 8005ec6:	d07c      	beq.n	8005fc2 <_dtoa_r+0x1fa>
 8005ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005ece:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ed2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005ed6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005eda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005ede:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005ee2:	4b7d      	ldr	r3, [pc, #500]	; (80060d8 <_dtoa_r+0x310>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	4639      	mov	r1, r7
 8005eea:	f7fa f9d5 	bl	8000298 <__aeabi_dsub>
 8005eee:	a36e      	add	r3, pc, #440	; (adr r3, 80060a8 <_dtoa_r+0x2e0>)
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	f7fa fb88 	bl	8000608 <__aeabi_dmul>
 8005ef8:	a36d      	add	r3, pc, #436	; (adr r3, 80060b0 <_dtoa_r+0x2e8>)
 8005efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efe:	f7fa f9cd 	bl	800029c <__adddf3>
 8005f02:	4606      	mov	r6, r0
 8005f04:	4628      	mov	r0, r5
 8005f06:	460f      	mov	r7, r1
 8005f08:	f7fa fb14 	bl	8000534 <__aeabi_i2d>
 8005f0c:	a36a      	add	r3, pc, #424	; (adr r3, 80060b8 <_dtoa_r+0x2f0>)
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	f7fa fb79 	bl	8000608 <__aeabi_dmul>
 8005f16:	4602      	mov	r2, r0
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4630      	mov	r0, r6
 8005f1c:	4639      	mov	r1, r7
 8005f1e:	f7fa f9bd 	bl	800029c <__adddf3>
 8005f22:	4606      	mov	r6, r0
 8005f24:	460f      	mov	r7, r1
 8005f26:	f7fa fe1f 	bl	8000b68 <__aeabi_d2iz>
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	4682      	mov	sl, r0
 8005f2e:	2300      	movs	r3, #0
 8005f30:	4630      	mov	r0, r6
 8005f32:	4639      	mov	r1, r7
 8005f34:	f7fa fdda 	bl	8000aec <__aeabi_dcmplt>
 8005f38:	b148      	cbz	r0, 8005f4e <_dtoa_r+0x186>
 8005f3a:	4650      	mov	r0, sl
 8005f3c:	f7fa fafa 	bl	8000534 <__aeabi_i2d>
 8005f40:	4632      	mov	r2, r6
 8005f42:	463b      	mov	r3, r7
 8005f44:	f7fa fdc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f48:	b908      	cbnz	r0, 8005f4e <_dtoa_r+0x186>
 8005f4a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005f4e:	f1ba 0f16 	cmp.w	sl, #22
 8005f52:	d854      	bhi.n	8005ffe <_dtoa_r+0x236>
 8005f54:	4b61      	ldr	r3, [pc, #388]	; (80060dc <_dtoa_r+0x314>)
 8005f56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f62:	f7fa fdc3 	bl	8000aec <__aeabi_dcmplt>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	d04b      	beq.n	8006002 <_dtoa_r+0x23a>
 8005f6a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005f6e:	2300      	movs	r3, #0
 8005f70:	930e      	str	r3, [sp, #56]	; 0x38
 8005f72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f74:	1b5d      	subs	r5, r3, r5
 8005f76:	1e6b      	subs	r3, r5, #1
 8005f78:	9304      	str	r3, [sp, #16]
 8005f7a:	bf43      	ittte	mi
 8005f7c:	2300      	movmi	r3, #0
 8005f7e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005f82:	9304      	strmi	r3, [sp, #16]
 8005f84:	f04f 0800 	movpl.w	r8, #0
 8005f88:	f1ba 0f00 	cmp.w	sl, #0
 8005f8c:	db3b      	blt.n	8006006 <_dtoa_r+0x23e>
 8005f8e:	9b04      	ldr	r3, [sp, #16]
 8005f90:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005f94:	4453      	add	r3, sl
 8005f96:	9304      	str	r3, [sp, #16]
 8005f98:	2300      	movs	r3, #0
 8005f9a:	9306      	str	r3, [sp, #24]
 8005f9c:	9b05      	ldr	r3, [sp, #20]
 8005f9e:	2b09      	cmp	r3, #9
 8005fa0:	d869      	bhi.n	8006076 <_dtoa_r+0x2ae>
 8005fa2:	2b05      	cmp	r3, #5
 8005fa4:	bfc4      	itt	gt
 8005fa6:	3b04      	subgt	r3, #4
 8005fa8:	9305      	strgt	r3, [sp, #20]
 8005faa:	9b05      	ldr	r3, [sp, #20]
 8005fac:	f1a3 0302 	sub.w	r3, r3, #2
 8005fb0:	bfcc      	ite	gt
 8005fb2:	2500      	movgt	r5, #0
 8005fb4:	2501      	movle	r5, #1
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	d869      	bhi.n	800608e <_dtoa_r+0x2c6>
 8005fba:	e8df f003 	tbb	[pc, r3]
 8005fbe:	4e2c      	.short	0x4e2c
 8005fc0:	5a4c      	.short	0x5a4c
 8005fc2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005fc6:	441d      	add	r5, r3
 8005fc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005fcc:	2b20      	cmp	r3, #32
 8005fce:	bfc1      	itttt	gt
 8005fd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005fd4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005fd8:	fa09 f303 	lslgt.w	r3, r9, r3
 8005fdc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005fe0:	bfda      	itte	le
 8005fe2:	f1c3 0320 	rsble	r3, r3, #32
 8005fe6:	fa06 f003 	lslle.w	r0, r6, r3
 8005fea:	4318      	orrgt	r0, r3
 8005fec:	f7fa fa92 	bl	8000514 <__aeabi_ui2d>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	4606      	mov	r6, r0
 8005ff4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005ff8:	3d01      	subs	r5, #1
 8005ffa:	9310      	str	r3, [sp, #64]	; 0x40
 8005ffc:	e771      	b.n	8005ee2 <_dtoa_r+0x11a>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e7b6      	b.n	8005f70 <_dtoa_r+0x1a8>
 8006002:	900e      	str	r0, [sp, #56]	; 0x38
 8006004:	e7b5      	b.n	8005f72 <_dtoa_r+0x1aa>
 8006006:	f1ca 0300 	rsb	r3, sl, #0
 800600a:	9306      	str	r3, [sp, #24]
 800600c:	2300      	movs	r3, #0
 800600e:	eba8 080a 	sub.w	r8, r8, sl
 8006012:	930d      	str	r3, [sp, #52]	; 0x34
 8006014:	e7c2      	b.n	8005f9c <_dtoa_r+0x1d4>
 8006016:	2300      	movs	r3, #0
 8006018:	9308      	str	r3, [sp, #32]
 800601a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800601c:	2b00      	cmp	r3, #0
 800601e:	dc39      	bgt.n	8006094 <_dtoa_r+0x2cc>
 8006020:	f04f 0901 	mov.w	r9, #1
 8006024:	f8cd 9004 	str.w	r9, [sp, #4]
 8006028:	464b      	mov	r3, r9
 800602a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800602e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006030:	2200      	movs	r2, #0
 8006032:	6042      	str	r2, [r0, #4]
 8006034:	2204      	movs	r2, #4
 8006036:	f102 0614 	add.w	r6, r2, #20
 800603a:	429e      	cmp	r6, r3
 800603c:	6841      	ldr	r1, [r0, #4]
 800603e:	d92f      	bls.n	80060a0 <_dtoa_r+0x2d8>
 8006040:	4620      	mov	r0, r4
 8006042:	f000 fcb9 	bl	80069b8 <_Balloc>
 8006046:	9000      	str	r0, [sp, #0]
 8006048:	2800      	cmp	r0, #0
 800604a:	d14b      	bne.n	80060e4 <_dtoa_r+0x31c>
 800604c:	4b24      	ldr	r3, [pc, #144]	; (80060e0 <_dtoa_r+0x318>)
 800604e:	4602      	mov	r2, r0
 8006050:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006054:	e6d1      	b.n	8005dfa <_dtoa_r+0x32>
 8006056:	2301      	movs	r3, #1
 8006058:	e7de      	b.n	8006018 <_dtoa_r+0x250>
 800605a:	2300      	movs	r3, #0
 800605c:	9308      	str	r3, [sp, #32]
 800605e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006060:	eb0a 0903 	add.w	r9, sl, r3
 8006064:	f109 0301 	add.w	r3, r9, #1
 8006068:	2b01      	cmp	r3, #1
 800606a:	9301      	str	r3, [sp, #4]
 800606c:	bfb8      	it	lt
 800606e:	2301      	movlt	r3, #1
 8006070:	e7dd      	b.n	800602e <_dtoa_r+0x266>
 8006072:	2301      	movs	r3, #1
 8006074:	e7f2      	b.n	800605c <_dtoa_r+0x294>
 8006076:	2501      	movs	r5, #1
 8006078:	2300      	movs	r3, #0
 800607a:	9305      	str	r3, [sp, #20]
 800607c:	9508      	str	r5, [sp, #32]
 800607e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006082:	2200      	movs	r2, #0
 8006084:	f8cd 9004 	str.w	r9, [sp, #4]
 8006088:	2312      	movs	r3, #18
 800608a:	9209      	str	r2, [sp, #36]	; 0x24
 800608c:	e7cf      	b.n	800602e <_dtoa_r+0x266>
 800608e:	2301      	movs	r3, #1
 8006090:	9308      	str	r3, [sp, #32]
 8006092:	e7f4      	b.n	800607e <_dtoa_r+0x2b6>
 8006094:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006098:	f8cd 9004 	str.w	r9, [sp, #4]
 800609c:	464b      	mov	r3, r9
 800609e:	e7c6      	b.n	800602e <_dtoa_r+0x266>
 80060a0:	3101      	adds	r1, #1
 80060a2:	6041      	str	r1, [r0, #4]
 80060a4:	0052      	lsls	r2, r2, #1
 80060a6:	e7c6      	b.n	8006036 <_dtoa_r+0x26e>
 80060a8:	636f4361 	.word	0x636f4361
 80060ac:	3fd287a7 	.word	0x3fd287a7
 80060b0:	8b60c8b3 	.word	0x8b60c8b3
 80060b4:	3fc68a28 	.word	0x3fc68a28
 80060b8:	509f79fb 	.word	0x509f79fb
 80060bc:	3fd34413 	.word	0x3fd34413
 80060c0:	0801aebd 	.word	0x0801aebd
 80060c4:	0801aed4 	.word	0x0801aed4
 80060c8:	7ff00000 	.word	0x7ff00000
 80060cc:	0801aeb9 	.word	0x0801aeb9
 80060d0:	0801aeb0 	.word	0x0801aeb0
 80060d4:	0801ae8d 	.word	0x0801ae8d
 80060d8:	3ff80000 	.word	0x3ff80000
 80060dc:	0801afd0 	.word	0x0801afd0
 80060e0:	0801af33 	.word	0x0801af33
 80060e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060e6:	9a00      	ldr	r2, [sp, #0]
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	9b01      	ldr	r3, [sp, #4]
 80060ec:	2b0e      	cmp	r3, #14
 80060ee:	f200 80ad 	bhi.w	800624c <_dtoa_r+0x484>
 80060f2:	2d00      	cmp	r5, #0
 80060f4:	f000 80aa 	beq.w	800624c <_dtoa_r+0x484>
 80060f8:	f1ba 0f00 	cmp.w	sl, #0
 80060fc:	dd36      	ble.n	800616c <_dtoa_r+0x3a4>
 80060fe:	4ac3      	ldr	r2, [pc, #780]	; (800640c <_dtoa_r+0x644>)
 8006100:	f00a 030f 	and.w	r3, sl, #15
 8006104:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006108:	ed93 7b00 	vldr	d7, [r3]
 800610c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006110:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006114:	eeb0 8a47 	vmov.f32	s16, s14
 8006118:	eef0 8a67 	vmov.f32	s17, s15
 800611c:	d016      	beq.n	800614c <_dtoa_r+0x384>
 800611e:	4bbc      	ldr	r3, [pc, #752]	; (8006410 <_dtoa_r+0x648>)
 8006120:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006124:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006128:	f7fa fb98 	bl	800085c <__aeabi_ddiv>
 800612c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006130:	f007 070f 	and.w	r7, r7, #15
 8006134:	2503      	movs	r5, #3
 8006136:	4eb6      	ldr	r6, [pc, #728]	; (8006410 <_dtoa_r+0x648>)
 8006138:	b957      	cbnz	r7, 8006150 <_dtoa_r+0x388>
 800613a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800613e:	ec53 2b18 	vmov	r2, r3, d8
 8006142:	f7fa fb8b 	bl	800085c <__aeabi_ddiv>
 8006146:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800614a:	e029      	b.n	80061a0 <_dtoa_r+0x3d8>
 800614c:	2502      	movs	r5, #2
 800614e:	e7f2      	b.n	8006136 <_dtoa_r+0x36e>
 8006150:	07f9      	lsls	r1, r7, #31
 8006152:	d508      	bpl.n	8006166 <_dtoa_r+0x39e>
 8006154:	ec51 0b18 	vmov	r0, r1, d8
 8006158:	e9d6 2300 	ldrd	r2, r3, [r6]
 800615c:	f7fa fa54 	bl	8000608 <__aeabi_dmul>
 8006160:	ec41 0b18 	vmov	d8, r0, r1
 8006164:	3501      	adds	r5, #1
 8006166:	107f      	asrs	r7, r7, #1
 8006168:	3608      	adds	r6, #8
 800616a:	e7e5      	b.n	8006138 <_dtoa_r+0x370>
 800616c:	f000 80a6 	beq.w	80062bc <_dtoa_r+0x4f4>
 8006170:	f1ca 0600 	rsb	r6, sl, #0
 8006174:	4ba5      	ldr	r3, [pc, #660]	; (800640c <_dtoa_r+0x644>)
 8006176:	4fa6      	ldr	r7, [pc, #664]	; (8006410 <_dtoa_r+0x648>)
 8006178:	f006 020f 	and.w	r2, r6, #15
 800617c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006184:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006188:	f7fa fa3e 	bl	8000608 <__aeabi_dmul>
 800618c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006190:	1136      	asrs	r6, r6, #4
 8006192:	2300      	movs	r3, #0
 8006194:	2502      	movs	r5, #2
 8006196:	2e00      	cmp	r6, #0
 8006198:	f040 8085 	bne.w	80062a6 <_dtoa_r+0x4de>
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1d2      	bne.n	8006146 <_dtoa_r+0x37e>
 80061a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 808c 	beq.w	80062c0 <_dtoa_r+0x4f8>
 80061a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80061ac:	4b99      	ldr	r3, [pc, #612]	; (8006414 <_dtoa_r+0x64c>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	4630      	mov	r0, r6
 80061b2:	4639      	mov	r1, r7
 80061b4:	f7fa fc9a 	bl	8000aec <__aeabi_dcmplt>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	f000 8081 	beq.w	80062c0 <_dtoa_r+0x4f8>
 80061be:	9b01      	ldr	r3, [sp, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d07d      	beq.n	80062c0 <_dtoa_r+0x4f8>
 80061c4:	f1b9 0f00 	cmp.w	r9, #0
 80061c8:	dd3c      	ble.n	8006244 <_dtoa_r+0x47c>
 80061ca:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80061ce:	9307      	str	r3, [sp, #28]
 80061d0:	2200      	movs	r2, #0
 80061d2:	4b91      	ldr	r3, [pc, #580]	; (8006418 <_dtoa_r+0x650>)
 80061d4:	4630      	mov	r0, r6
 80061d6:	4639      	mov	r1, r7
 80061d8:	f7fa fa16 	bl	8000608 <__aeabi_dmul>
 80061dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061e0:	3501      	adds	r5, #1
 80061e2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80061e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80061ea:	4628      	mov	r0, r5
 80061ec:	f7fa f9a2 	bl	8000534 <__aeabi_i2d>
 80061f0:	4632      	mov	r2, r6
 80061f2:	463b      	mov	r3, r7
 80061f4:	f7fa fa08 	bl	8000608 <__aeabi_dmul>
 80061f8:	4b88      	ldr	r3, [pc, #544]	; (800641c <_dtoa_r+0x654>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	f7fa f84e 	bl	800029c <__adddf3>
 8006200:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006204:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006208:	9303      	str	r3, [sp, #12]
 800620a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800620c:	2b00      	cmp	r3, #0
 800620e:	d15c      	bne.n	80062ca <_dtoa_r+0x502>
 8006210:	4b83      	ldr	r3, [pc, #524]	; (8006420 <_dtoa_r+0x658>)
 8006212:	2200      	movs	r2, #0
 8006214:	4630      	mov	r0, r6
 8006216:	4639      	mov	r1, r7
 8006218:	f7fa f83e 	bl	8000298 <__aeabi_dsub>
 800621c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006220:	4606      	mov	r6, r0
 8006222:	460f      	mov	r7, r1
 8006224:	f7fa fc80 	bl	8000b28 <__aeabi_dcmpgt>
 8006228:	2800      	cmp	r0, #0
 800622a:	f040 8296 	bne.w	800675a <_dtoa_r+0x992>
 800622e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006232:	4630      	mov	r0, r6
 8006234:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006238:	4639      	mov	r1, r7
 800623a:	f7fa fc57 	bl	8000aec <__aeabi_dcmplt>
 800623e:	2800      	cmp	r0, #0
 8006240:	f040 8288 	bne.w	8006754 <_dtoa_r+0x98c>
 8006244:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006248:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800624c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800624e:	2b00      	cmp	r3, #0
 8006250:	f2c0 8158 	blt.w	8006504 <_dtoa_r+0x73c>
 8006254:	f1ba 0f0e 	cmp.w	sl, #14
 8006258:	f300 8154 	bgt.w	8006504 <_dtoa_r+0x73c>
 800625c:	4b6b      	ldr	r3, [pc, #428]	; (800640c <_dtoa_r+0x644>)
 800625e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006262:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006268:	2b00      	cmp	r3, #0
 800626a:	f280 80e3 	bge.w	8006434 <_dtoa_r+0x66c>
 800626e:	9b01      	ldr	r3, [sp, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	f300 80df 	bgt.w	8006434 <_dtoa_r+0x66c>
 8006276:	f040 826d 	bne.w	8006754 <_dtoa_r+0x98c>
 800627a:	4b69      	ldr	r3, [pc, #420]	; (8006420 <_dtoa_r+0x658>)
 800627c:	2200      	movs	r2, #0
 800627e:	4640      	mov	r0, r8
 8006280:	4649      	mov	r1, r9
 8006282:	f7fa f9c1 	bl	8000608 <__aeabi_dmul>
 8006286:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800628a:	f7fa fc43 	bl	8000b14 <__aeabi_dcmpge>
 800628e:	9e01      	ldr	r6, [sp, #4]
 8006290:	4637      	mov	r7, r6
 8006292:	2800      	cmp	r0, #0
 8006294:	f040 8243 	bne.w	800671e <_dtoa_r+0x956>
 8006298:	9d00      	ldr	r5, [sp, #0]
 800629a:	2331      	movs	r3, #49	; 0x31
 800629c:	f805 3b01 	strb.w	r3, [r5], #1
 80062a0:	f10a 0a01 	add.w	sl, sl, #1
 80062a4:	e23f      	b.n	8006726 <_dtoa_r+0x95e>
 80062a6:	07f2      	lsls	r2, r6, #31
 80062a8:	d505      	bpl.n	80062b6 <_dtoa_r+0x4ee>
 80062aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062ae:	f7fa f9ab 	bl	8000608 <__aeabi_dmul>
 80062b2:	3501      	adds	r5, #1
 80062b4:	2301      	movs	r3, #1
 80062b6:	1076      	asrs	r6, r6, #1
 80062b8:	3708      	adds	r7, #8
 80062ba:	e76c      	b.n	8006196 <_dtoa_r+0x3ce>
 80062bc:	2502      	movs	r5, #2
 80062be:	e76f      	b.n	80061a0 <_dtoa_r+0x3d8>
 80062c0:	9b01      	ldr	r3, [sp, #4]
 80062c2:	f8cd a01c 	str.w	sl, [sp, #28]
 80062c6:	930c      	str	r3, [sp, #48]	; 0x30
 80062c8:	e78d      	b.n	80061e6 <_dtoa_r+0x41e>
 80062ca:	9900      	ldr	r1, [sp, #0]
 80062cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80062ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062d0:	4b4e      	ldr	r3, [pc, #312]	; (800640c <_dtoa_r+0x644>)
 80062d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80062d6:	4401      	add	r1, r0
 80062d8:	9102      	str	r1, [sp, #8]
 80062da:	9908      	ldr	r1, [sp, #32]
 80062dc:	eeb0 8a47 	vmov.f32	s16, s14
 80062e0:	eef0 8a67 	vmov.f32	s17, s15
 80062e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062ec:	2900      	cmp	r1, #0
 80062ee:	d045      	beq.n	800637c <_dtoa_r+0x5b4>
 80062f0:	494c      	ldr	r1, [pc, #304]	; (8006424 <_dtoa_r+0x65c>)
 80062f2:	2000      	movs	r0, #0
 80062f4:	f7fa fab2 	bl	800085c <__aeabi_ddiv>
 80062f8:	ec53 2b18 	vmov	r2, r3, d8
 80062fc:	f7f9 ffcc 	bl	8000298 <__aeabi_dsub>
 8006300:	9d00      	ldr	r5, [sp, #0]
 8006302:	ec41 0b18 	vmov	d8, r0, r1
 8006306:	4639      	mov	r1, r7
 8006308:	4630      	mov	r0, r6
 800630a:	f7fa fc2d 	bl	8000b68 <__aeabi_d2iz>
 800630e:	900c      	str	r0, [sp, #48]	; 0x30
 8006310:	f7fa f910 	bl	8000534 <__aeabi_i2d>
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	4630      	mov	r0, r6
 800631a:	4639      	mov	r1, r7
 800631c:	f7f9 ffbc 	bl	8000298 <__aeabi_dsub>
 8006320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006322:	3330      	adds	r3, #48	; 0x30
 8006324:	f805 3b01 	strb.w	r3, [r5], #1
 8006328:	ec53 2b18 	vmov	r2, r3, d8
 800632c:	4606      	mov	r6, r0
 800632e:	460f      	mov	r7, r1
 8006330:	f7fa fbdc 	bl	8000aec <__aeabi_dcmplt>
 8006334:	2800      	cmp	r0, #0
 8006336:	d165      	bne.n	8006404 <_dtoa_r+0x63c>
 8006338:	4632      	mov	r2, r6
 800633a:	463b      	mov	r3, r7
 800633c:	4935      	ldr	r1, [pc, #212]	; (8006414 <_dtoa_r+0x64c>)
 800633e:	2000      	movs	r0, #0
 8006340:	f7f9 ffaa 	bl	8000298 <__aeabi_dsub>
 8006344:	ec53 2b18 	vmov	r2, r3, d8
 8006348:	f7fa fbd0 	bl	8000aec <__aeabi_dcmplt>
 800634c:	2800      	cmp	r0, #0
 800634e:	f040 80b9 	bne.w	80064c4 <_dtoa_r+0x6fc>
 8006352:	9b02      	ldr	r3, [sp, #8]
 8006354:	429d      	cmp	r5, r3
 8006356:	f43f af75 	beq.w	8006244 <_dtoa_r+0x47c>
 800635a:	4b2f      	ldr	r3, [pc, #188]	; (8006418 <_dtoa_r+0x650>)
 800635c:	ec51 0b18 	vmov	r0, r1, d8
 8006360:	2200      	movs	r2, #0
 8006362:	f7fa f951 	bl	8000608 <__aeabi_dmul>
 8006366:	4b2c      	ldr	r3, [pc, #176]	; (8006418 <_dtoa_r+0x650>)
 8006368:	ec41 0b18 	vmov	d8, r0, r1
 800636c:	2200      	movs	r2, #0
 800636e:	4630      	mov	r0, r6
 8006370:	4639      	mov	r1, r7
 8006372:	f7fa f949 	bl	8000608 <__aeabi_dmul>
 8006376:	4606      	mov	r6, r0
 8006378:	460f      	mov	r7, r1
 800637a:	e7c4      	b.n	8006306 <_dtoa_r+0x53e>
 800637c:	ec51 0b17 	vmov	r0, r1, d7
 8006380:	f7fa f942 	bl	8000608 <__aeabi_dmul>
 8006384:	9b02      	ldr	r3, [sp, #8]
 8006386:	9d00      	ldr	r5, [sp, #0]
 8006388:	930c      	str	r3, [sp, #48]	; 0x30
 800638a:	ec41 0b18 	vmov	d8, r0, r1
 800638e:	4639      	mov	r1, r7
 8006390:	4630      	mov	r0, r6
 8006392:	f7fa fbe9 	bl	8000b68 <__aeabi_d2iz>
 8006396:	9011      	str	r0, [sp, #68]	; 0x44
 8006398:	f7fa f8cc 	bl	8000534 <__aeabi_i2d>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	4630      	mov	r0, r6
 80063a2:	4639      	mov	r1, r7
 80063a4:	f7f9 ff78 	bl	8000298 <__aeabi_dsub>
 80063a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063aa:	3330      	adds	r3, #48	; 0x30
 80063ac:	f805 3b01 	strb.w	r3, [r5], #1
 80063b0:	9b02      	ldr	r3, [sp, #8]
 80063b2:	429d      	cmp	r5, r3
 80063b4:	4606      	mov	r6, r0
 80063b6:	460f      	mov	r7, r1
 80063b8:	f04f 0200 	mov.w	r2, #0
 80063bc:	d134      	bne.n	8006428 <_dtoa_r+0x660>
 80063be:	4b19      	ldr	r3, [pc, #100]	; (8006424 <_dtoa_r+0x65c>)
 80063c0:	ec51 0b18 	vmov	r0, r1, d8
 80063c4:	f7f9 ff6a 	bl	800029c <__adddf3>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4630      	mov	r0, r6
 80063ce:	4639      	mov	r1, r7
 80063d0:	f7fa fbaa 	bl	8000b28 <__aeabi_dcmpgt>
 80063d4:	2800      	cmp	r0, #0
 80063d6:	d175      	bne.n	80064c4 <_dtoa_r+0x6fc>
 80063d8:	ec53 2b18 	vmov	r2, r3, d8
 80063dc:	4911      	ldr	r1, [pc, #68]	; (8006424 <_dtoa_r+0x65c>)
 80063de:	2000      	movs	r0, #0
 80063e0:	f7f9 ff5a 	bl	8000298 <__aeabi_dsub>
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	4630      	mov	r0, r6
 80063ea:	4639      	mov	r1, r7
 80063ec:	f7fa fb7e 	bl	8000aec <__aeabi_dcmplt>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	f43f af27 	beq.w	8006244 <_dtoa_r+0x47c>
 80063f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063f8:	1e6b      	subs	r3, r5, #1
 80063fa:	930c      	str	r3, [sp, #48]	; 0x30
 80063fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006400:	2b30      	cmp	r3, #48	; 0x30
 8006402:	d0f8      	beq.n	80063f6 <_dtoa_r+0x62e>
 8006404:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006408:	e04a      	b.n	80064a0 <_dtoa_r+0x6d8>
 800640a:	bf00      	nop
 800640c:	0801afd0 	.word	0x0801afd0
 8006410:	0801afa8 	.word	0x0801afa8
 8006414:	3ff00000 	.word	0x3ff00000
 8006418:	40240000 	.word	0x40240000
 800641c:	401c0000 	.word	0x401c0000
 8006420:	40140000 	.word	0x40140000
 8006424:	3fe00000 	.word	0x3fe00000
 8006428:	4baf      	ldr	r3, [pc, #700]	; (80066e8 <_dtoa_r+0x920>)
 800642a:	f7fa f8ed 	bl	8000608 <__aeabi_dmul>
 800642e:	4606      	mov	r6, r0
 8006430:	460f      	mov	r7, r1
 8006432:	e7ac      	b.n	800638e <_dtoa_r+0x5c6>
 8006434:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006438:	9d00      	ldr	r5, [sp, #0]
 800643a:	4642      	mov	r2, r8
 800643c:	464b      	mov	r3, r9
 800643e:	4630      	mov	r0, r6
 8006440:	4639      	mov	r1, r7
 8006442:	f7fa fa0b 	bl	800085c <__aeabi_ddiv>
 8006446:	f7fa fb8f 	bl	8000b68 <__aeabi_d2iz>
 800644a:	9002      	str	r0, [sp, #8]
 800644c:	f7fa f872 	bl	8000534 <__aeabi_i2d>
 8006450:	4642      	mov	r2, r8
 8006452:	464b      	mov	r3, r9
 8006454:	f7fa f8d8 	bl	8000608 <__aeabi_dmul>
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	4630      	mov	r0, r6
 800645e:	4639      	mov	r1, r7
 8006460:	f7f9 ff1a 	bl	8000298 <__aeabi_dsub>
 8006464:	9e02      	ldr	r6, [sp, #8]
 8006466:	9f01      	ldr	r7, [sp, #4]
 8006468:	3630      	adds	r6, #48	; 0x30
 800646a:	f805 6b01 	strb.w	r6, [r5], #1
 800646e:	9e00      	ldr	r6, [sp, #0]
 8006470:	1bae      	subs	r6, r5, r6
 8006472:	42b7      	cmp	r7, r6
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	d137      	bne.n	80064ea <_dtoa_r+0x722>
 800647a:	f7f9 ff0f 	bl	800029c <__adddf3>
 800647e:	4642      	mov	r2, r8
 8006480:	464b      	mov	r3, r9
 8006482:	4606      	mov	r6, r0
 8006484:	460f      	mov	r7, r1
 8006486:	f7fa fb4f 	bl	8000b28 <__aeabi_dcmpgt>
 800648a:	b9c8      	cbnz	r0, 80064c0 <_dtoa_r+0x6f8>
 800648c:	4642      	mov	r2, r8
 800648e:	464b      	mov	r3, r9
 8006490:	4630      	mov	r0, r6
 8006492:	4639      	mov	r1, r7
 8006494:	f7fa fb20 	bl	8000ad8 <__aeabi_dcmpeq>
 8006498:	b110      	cbz	r0, 80064a0 <_dtoa_r+0x6d8>
 800649a:	9b02      	ldr	r3, [sp, #8]
 800649c:	07d9      	lsls	r1, r3, #31
 800649e:	d40f      	bmi.n	80064c0 <_dtoa_r+0x6f8>
 80064a0:	4620      	mov	r0, r4
 80064a2:	4659      	mov	r1, fp
 80064a4:	f000 fac8 	bl	8006a38 <_Bfree>
 80064a8:	2300      	movs	r3, #0
 80064aa:	702b      	strb	r3, [r5, #0]
 80064ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064ae:	f10a 0001 	add.w	r0, sl, #1
 80064b2:	6018      	str	r0, [r3, #0]
 80064b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f43f acd8 	beq.w	8005e6c <_dtoa_r+0xa4>
 80064bc:	601d      	str	r5, [r3, #0]
 80064be:	e4d5      	b.n	8005e6c <_dtoa_r+0xa4>
 80064c0:	f8cd a01c 	str.w	sl, [sp, #28]
 80064c4:	462b      	mov	r3, r5
 80064c6:	461d      	mov	r5, r3
 80064c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064cc:	2a39      	cmp	r2, #57	; 0x39
 80064ce:	d108      	bne.n	80064e2 <_dtoa_r+0x71a>
 80064d0:	9a00      	ldr	r2, [sp, #0]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d1f7      	bne.n	80064c6 <_dtoa_r+0x6fe>
 80064d6:	9a07      	ldr	r2, [sp, #28]
 80064d8:	9900      	ldr	r1, [sp, #0]
 80064da:	3201      	adds	r2, #1
 80064dc:	9207      	str	r2, [sp, #28]
 80064de:	2230      	movs	r2, #48	; 0x30
 80064e0:	700a      	strb	r2, [r1, #0]
 80064e2:	781a      	ldrb	r2, [r3, #0]
 80064e4:	3201      	adds	r2, #1
 80064e6:	701a      	strb	r2, [r3, #0]
 80064e8:	e78c      	b.n	8006404 <_dtoa_r+0x63c>
 80064ea:	4b7f      	ldr	r3, [pc, #508]	; (80066e8 <_dtoa_r+0x920>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	f7fa f88b 	bl	8000608 <__aeabi_dmul>
 80064f2:	2200      	movs	r2, #0
 80064f4:	2300      	movs	r3, #0
 80064f6:	4606      	mov	r6, r0
 80064f8:	460f      	mov	r7, r1
 80064fa:	f7fa faed 	bl	8000ad8 <__aeabi_dcmpeq>
 80064fe:	2800      	cmp	r0, #0
 8006500:	d09b      	beq.n	800643a <_dtoa_r+0x672>
 8006502:	e7cd      	b.n	80064a0 <_dtoa_r+0x6d8>
 8006504:	9a08      	ldr	r2, [sp, #32]
 8006506:	2a00      	cmp	r2, #0
 8006508:	f000 80c4 	beq.w	8006694 <_dtoa_r+0x8cc>
 800650c:	9a05      	ldr	r2, [sp, #20]
 800650e:	2a01      	cmp	r2, #1
 8006510:	f300 80a8 	bgt.w	8006664 <_dtoa_r+0x89c>
 8006514:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006516:	2a00      	cmp	r2, #0
 8006518:	f000 80a0 	beq.w	800665c <_dtoa_r+0x894>
 800651c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006520:	9e06      	ldr	r6, [sp, #24]
 8006522:	4645      	mov	r5, r8
 8006524:	9a04      	ldr	r2, [sp, #16]
 8006526:	2101      	movs	r1, #1
 8006528:	441a      	add	r2, r3
 800652a:	4620      	mov	r0, r4
 800652c:	4498      	add	r8, r3
 800652e:	9204      	str	r2, [sp, #16]
 8006530:	f000 fb3e 	bl	8006bb0 <__i2b>
 8006534:	4607      	mov	r7, r0
 8006536:	2d00      	cmp	r5, #0
 8006538:	dd0b      	ble.n	8006552 <_dtoa_r+0x78a>
 800653a:	9b04      	ldr	r3, [sp, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	dd08      	ble.n	8006552 <_dtoa_r+0x78a>
 8006540:	42ab      	cmp	r3, r5
 8006542:	9a04      	ldr	r2, [sp, #16]
 8006544:	bfa8      	it	ge
 8006546:	462b      	movge	r3, r5
 8006548:	eba8 0803 	sub.w	r8, r8, r3
 800654c:	1aed      	subs	r5, r5, r3
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	9304      	str	r3, [sp, #16]
 8006552:	9b06      	ldr	r3, [sp, #24]
 8006554:	b1fb      	cbz	r3, 8006596 <_dtoa_r+0x7ce>
 8006556:	9b08      	ldr	r3, [sp, #32]
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 809f 	beq.w	800669c <_dtoa_r+0x8d4>
 800655e:	2e00      	cmp	r6, #0
 8006560:	dd11      	ble.n	8006586 <_dtoa_r+0x7be>
 8006562:	4639      	mov	r1, r7
 8006564:	4632      	mov	r2, r6
 8006566:	4620      	mov	r0, r4
 8006568:	f000 fbde 	bl	8006d28 <__pow5mult>
 800656c:	465a      	mov	r2, fp
 800656e:	4601      	mov	r1, r0
 8006570:	4607      	mov	r7, r0
 8006572:	4620      	mov	r0, r4
 8006574:	f000 fb32 	bl	8006bdc <__multiply>
 8006578:	4659      	mov	r1, fp
 800657a:	9007      	str	r0, [sp, #28]
 800657c:	4620      	mov	r0, r4
 800657e:	f000 fa5b 	bl	8006a38 <_Bfree>
 8006582:	9b07      	ldr	r3, [sp, #28]
 8006584:	469b      	mov	fp, r3
 8006586:	9b06      	ldr	r3, [sp, #24]
 8006588:	1b9a      	subs	r2, r3, r6
 800658a:	d004      	beq.n	8006596 <_dtoa_r+0x7ce>
 800658c:	4659      	mov	r1, fp
 800658e:	4620      	mov	r0, r4
 8006590:	f000 fbca 	bl	8006d28 <__pow5mult>
 8006594:	4683      	mov	fp, r0
 8006596:	2101      	movs	r1, #1
 8006598:	4620      	mov	r0, r4
 800659a:	f000 fb09 	bl	8006bb0 <__i2b>
 800659e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	4606      	mov	r6, r0
 80065a4:	dd7c      	ble.n	80066a0 <_dtoa_r+0x8d8>
 80065a6:	461a      	mov	r2, r3
 80065a8:	4601      	mov	r1, r0
 80065aa:	4620      	mov	r0, r4
 80065ac:	f000 fbbc 	bl	8006d28 <__pow5mult>
 80065b0:	9b05      	ldr	r3, [sp, #20]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	4606      	mov	r6, r0
 80065b6:	dd76      	ble.n	80066a6 <_dtoa_r+0x8de>
 80065b8:	2300      	movs	r3, #0
 80065ba:	9306      	str	r3, [sp, #24]
 80065bc:	6933      	ldr	r3, [r6, #16]
 80065be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80065c2:	6918      	ldr	r0, [r3, #16]
 80065c4:	f000 faa4 	bl	8006b10 <__hi0bits>
 80065c8:	f1c0 0020 	rsb	r0, r0, #32
 80065cc:	9b04      	ldr	r3, [sp, #16]
 80065ce:	4418      	add	r0, r3
 80065d0:	f010 001f 	ands.w	r0, r0, #31
 80065d4:	f000 8086 	beq.w	80066e4 <_dtoa_r+0x91c>
 80065d8:	f1c0 0320 	rsb	r3, r0, #32
 80065dc:	2b04      	cmp	r3, #4
 80065de:	dd7f      	ble.n	80066e0 <_dtoa_r+0x918>
 80065e0:	f1c0 001c 	rsb	r0, r0, #28
 80065e4:	9b04      	ldr	r3, [sp, #16]
 80065e6:	4403      	add	r3, r0
 80065e8:	4480      	add	r8, r0
 80065ea:	4405      	add	r5, r0
 80065ec:	9304      	str	r3, [sp, #16]
 80065ee:	f1b8 0f00 	cmp.w	r8, #0
 80065f2:	dd05      	ble.n	8006600 <_dtoa_r+0x838>
 80065f4:	4659      	mov	r1, fp
 80065f6:	4642      	mov	r2, r8
 80065f8:	4620      	mov	r0, r4
 80065fa:	f000 fbef 	bl	8006ddc <__lshift>
 80065fe:	4683      	mov	fp, r0
 8006600:	9b04      	ldr	r3, [sp, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	dd05      	ble.n	8006612 <_dtoa_r+0x84a>
 8006606:	4631      	mov	r1, r6
 8006608:	461a      	mov	r2, r3
 800660a:	4620      	mov	r0, r4
 800660c:	f000 fbe6 	bl	8006ddc <__lshift>
 8006610:	4606      	mov	r6, r0
 8006612:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006614:	2b00      	cmp	r3, #0
 8006616:	d069      	beq.n	80066ec <_dtoa_r+0x924>
 8006618:	4631      	mov	r1, r6
 800661a:	4658      	mov	r0, fp
 800661c:	f000 fc4a 	bl	8006eb4 <__mcmp>
 8006620:	2800      	cmp	r0, #0
 8006622:	da63      	bge.n	80066ec <_dtoa_r+0x924>
 8006624:	2300      	movs	r3, #0
 8006626:	4659      	mov	r1, fp
 8006628:	220a      	movs	r2, #10
 800662a:	4620      	mov	r0, r4
 800662c:	f000 fa26 	bl	8006a7c <__multadd>
 8006630:	9b08      	ldr	r3, [sp, #32]
 8006632:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006636:	4683      	mov	fp, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 818f 	beq.w	800695c <_dtoa_r+0xb94>
 800663e:	4639      	mov	r1, r7
 8006640:	2300      	movs	r3, #0
 8006642:	220a      	movs	r2, #10
 8006644:	4620      	mov	r0, r4
 8006646:	f000 fa19 	bl	8006a7c <__multadd>
 800664a:	f1b9 0f00 	cmp.w	r9, #0
 800664e:	4607      	mov	r7, r0
 8006650:	f300 808e 	bgt.w	8006770 <_dtoa_r+0x9a8>
 8006654:	9b05      	ldr	r3, [sp, #20]
 8006656:	2b02      	cmp	r3, #2
 8006658:	dc50      	bgt.n	80066fc <_dtoa_r+0x934>
 800665a:	e089      	b.n	8006770 <_dtoa_r+0x9a8>
 800665c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800665e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006662:	e75d      	b.n	8006520 <_dtoa_r+0x758>
 8006664:	9b01      	ldr	r3, [sp, #4]
 8006666:	1e5e      	subs	r6, r3, #1
 8006668:	9b06      	ldr	r3, [sp, #24]
 800666a:	42b3      	cmp	r3, r6
 800666c:	bfbf      	itttt	lt
 800666e:	9b06      	ldrlt	r3, [sp, #24]
 8006670:	9606      	strlt	r6, [sp, #24]
 8006672:	1af2      	sublt	r2, r6, r3
 8006674:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006676:	bfb6      	itet	lt
 8006678:	189b      	addlt	r3, r3, r2
 800667a:	1b9e      	subge	r6, r3, r6
 800667c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800667e:	9b01      	ldr	r3, [sp, #4]
 8006680:	bfb8      	it	lt
 8006682:	2600      	movlt	r6, #0
 8006684:	2b00      	cmp	r3, #0
 8006686:	bfb5      	itete	lt
 8006688:	eba8 0503 	sublt.w	r5, r8, r3
 800668c:	9b01      	ldrge	r3, [sp, #4]
 800668e:	2300      	movlt	r3, #0
 8006690:	4645      	movge	r5, r8
 8006692:	e747      	b.n	8006524 <_dtoa_r+0x75c>
 8006694:	9e06      	ldr	r6, [sp, #24]
 8006696:	9f08      	ldr	r7, [sp, #32]
 8006698:	4645      	mov	r5, r8
 800669a:	e74c      	b.n	8006536 <_dtoa_r+0x76e>
 800669c:	9a06      	ldr	r2, [sp, #24]
 800669e:	e775      	b.n	800658c <_dtoa_r+0x7c4>
 80066a0:	9b05      	ldr	r3, [sp, #20]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	dc18      	bgt.n	80066d8 <_dtoa_r+0x910>
 80066a6:	9b02      	ldr	r3, [sp, #8]
 80066a8:	b9b3      	cbnz	r3, 80066d8 <_dtoa_r+0x910>
 80066aa:	9b03      	ldr	r3, [sp, #12]
 80066ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066b0:	b9a3      	cbnz	r3, 80066dc <_dtoa_r+0x914>
 80066b2:	9b03      	ldr	r3, [sp, #12]
 80066b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066b8:	0d1b      	lsrs	r3, r3, #20
 80066ba:	051b      	lsls	r3, r3, #20
 80066bc:	b12b      	cbz	r3, 80066ca <_dtoa_r+0x902>
 80066be:	9b04      	ldr	r3, [sp, #16]
 80066c0:	3301      	adds	r3, #1
 80066c2:	9304      	str	r3, [sp, #16]
 80066c4:	f108 0801 	add.w	r8, r8, #1
 80066c8:	2301      	movs	r3, #1
 80066ca:	9306      	str	r3, [sp, #24]
 80066cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f47f af74 	bne.w	80065bc <_dtoa_r+0x7f4>
 80066d4:	2001      	movs	r0, #1
 80066d6:	e779      	b.n	80065cc <_dtoa_r+0x804>
 80066d8:	2300      	movs	r3, #0
 80066da:	e7f6      	b.n	80066ca <_dtoa_r+0x902>
 80066dc:	9b02      	ldr	r3, [sp, #8]
 80066de:	e7f4      	b.n	80066ca <_dtoa_r+0x902>
 80066e0:	d085      	beq.n	80065ee <_dtoa_r+0x826>
 80066e2:	4618      	mov	r0, r3
 80066e4:	301c      	adds	r0, #28
 80066e6:	e77d      	b.n	80065e4 <_dtoa_r+0x81c>
 80066e8:	40240000 	.word	0x40240000
 80066ec:	9b01      	ldr	r3, [sp, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	dc38      	bgt.n	8006764 <_dtoa_r+0x99c>
 80066f2:	9b05      	ldr	r3, [sp, #20]
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	dd35      	ble.n	8006764 <_dtoa_r+0x99c>
 80066f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80066fc:	f1b9 0f00 	cmp.w	r9, #0
 8006700:	d10d      	bne.n	800671e <_dtoa_r+0x956>
 8006702:	4631      	mov	r1, r6
 8006704:	464b      	mov	r3, r9
 8006706:	2205      	movs	r2, #5
 8006708:	4620      	mov	r0, r4
 800670a:	f000 f9b7 	bl	8006a7c <__multadd>
 800670e:	4601      	mov	r1, r0
 8006710:	4606      	mov	r6, r0
 8006712:	4658      	mov	r0, fp
 8006714:	f000 fbce 	bl	8006eb4 <__mcmp>
 8006718:	2800      	cmp	r0, #0
 800671a:	f73f adbd 	bgt.w	8006298 <_dtoa_r+0x4d0>
 800671e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006720:	9d00      	ldr	r5, [sp, #0]
 8006722:	ea6f 0a03 	mvn.w	sl, r3
 8006726:	f04f 0800 	mov.w	r8, #0
 800672a:	4631      	mov	r1, r6
 800672c:	4620      	mov	r0, r4
 800672e:	f000 f983 	bl	8006a38 <_Bfree>
 8006732:	2f00      	cmp	r7, #0
 8006734:	f43f aeb4 	beq.w	80064a0 <_dtoa_r+0x6d8>
 8006738:	f1b8 0f00 	cmp.w	r8, #0
 800673c:	d005      	beq.n	800674a <_dtoa_r+0x982>
 800673e:	45b8      	cmp	r8, r7
 8006740:	d003      	beq.n	800674a <_dtoa_r+0x982>
 8006742:	4641      	mov	r1, r8
 8006744:	4620      	mov	r0, r4
 8006746:	f000 f977 	bl	8006a38 <_Bfree>
 800674a:	4639      	mov	r1, r7
 800674c:	4620      	mov	r0, r4
 800674e:	f000 f973 	bl	8006a38 <_Bfree>
 8006752:	e6a5      	b.n	80064a0 <_dtoa_r+0x6d8>
 8006754:	2600      	movs	r6, #0
 8006756:	4637      	mov	r7, r6
 8006758:	e7e1      	b.n	800671e <_dtoa_r+0x956>
 800675a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800675c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006760:	4637      	mov	r7, r6
 8006762:	e599      	b.n	8006298 <_dtoa_r+0x4d0>
 8006764:	9b08      	ldr	r3, [sp, #32]
 8006766:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 80fd 	beq.w	800696a <_dtoa_r+0xba2>
 8006770:	2d00      	cmp	r5, #0
 8006772:	dd05      	ble.n	8006780 <_dtoa_r+0x9b8>
 8006774:	4639      	mov	r1, r7
 8006776:	462a      	mov	r2, r5
 8006778:	4620      	mov	r0, r4
 800677a:	f000 fb2f 	bl	8006ddc <__lshift>
 800677e:	4607      	mov	r7, r0
 8006780:	9b06      	ldr	r3, [sp, #24]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d05c      	beq.n	8006840 <_dtoa_r+0xa78>
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	4620      	mov	r0, r4
 800678a:	f000 f915 	bl	80069b8 <_Balloc>
 800678e:	4605      	mov	r5, r0
 8006790:	b928      	cbnz	r0, 800679e <_dtoa_r+0x9d6>
 8006792:	4b80      	ldr	r3, [pc, #512]	; (8006994 <_dtoa_r+0xbcc>)
 8006794:	4602      	mov	r2, r0
 8006796:	f240 21ea 	movw	r1, #746	; 0x2ea
 800679a:	f7ff bb2e 	b.w	8005dfa <_dtoa_r+0x32>
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	3202      	adds	r2, #2
 80067a2:	0092      	lsls	r2, r2, #2
 80067a4:	f107 010c 	add.w	r1, r7, #12
 80067a8:	300c      	adds	r0, #12
 80067aa:	f7fe fe01 	bl	80053b0 <memcpy>
 80067ae:	2201      	movs	r2, #1
 80067b0:	4629      	mov	r1, r5
 80067b2:	4620      	mov	r0, r4
 80067b4:	f000 fb12 	bl	8006ddc <__lshift>
 80067b8:	9b00      	ldr	r3, [sp, #0]
 80067ba:	3301      	adds	r3, #1
 80067bc:	9301      	str	r3, [sp, #4]
 80067be:	9b00      	ldr	r3, [sp, #0]
 80067c0:	444b      	add	r3, r9
 80067c2:	9307      	str	r3, [sp, #28]
 80067c4:	9b02      	ldr	r3, [sp, #8]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	46b8      	mov	r8, r7
 80067cc:	9306      	str	r3, [sp, #24]
 80067ce:	4607      	mov	r7, r0
 80067d0:	9b01      	ldr	r3, [sp, #4]
 80067d2:	4631      	mov	r1, r6
 80067d4:	3b01      	subs	r3, #1
 80067d6:	4658      	mov	r0, fp
 80067d8:	9302      	str	r3, [sp, #8]
 80067da:	f7ff fa69 	bl	8005cb0 <quorem>
 80067de:	4603      	mov	r3, r0
 80067e0:	3330      	adds	r3, #48	; 0x30
 80067e2:	9004      	str	r0, [sp, #16]
 80067e4:	4641      	mov	r1, r8
 80067e6:	4658      	mov	r0, fp
 80067e8:	9308      	str	r3, [sp, #32]
 80067ea:	f000 fb63 	bl	8006eb4 <__mcmp>
 80067ee:	463a      	mov	r2, r7
 80067f0:	4681      	mov	r9, r0
 80067f2:	4631      	mov	r1, r6
 80067f4:	4620      	mov	r0, r4
 80067f6:	f000 fb79 	bl	8006eec <__mdiff>
 80067fa:	68c2      	ldr	r2, [r0, #12]
 80067fc:	9b08      	ldr	r3, [sp, #32]
 80067fe:	4605      	mov	r5, r0
 8006800:	bb02      	cbnz	r2, 8006844 <_dtoa_r+0xa7c>
 8006802:	4601      	mov	r1, r0
 8006804:	4658      	mov	r0, fp
 8006806:	f000 fb55 	bl	8006eb4 <__mcmp>
 800680a:	9b08      	ldr	r3, [sp, #32]
 800680c:	4602      	mov	r2, r0
 800680e:	4629      	mov	r1, r5
 8006810:	4620      	mov	r0, r4
 8006812:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006816:	f000 f90f 	bl	8006a38 <_Bfree>
 800681a:	9b05      	ldr	r3, [sp, #20]
 800681c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800681e:	9d01      	ldr	r5, [sp, #4]
 8006820:	ea43 0102 	orr.w	r1, r3, r2
 8006824:	9b06      	ldr	r3, [sp, #24]
 8006826:	430b      	orrs	r3, r1
 8006828:	9b08      	ldr	r3, [sp, #32]
 800682a:	d10d      	bne.n	8006848 <_dtoa_r+0xa80>
 800682c:	2b39      	cmp	r3, #57	; 0x39
 800682e:	d029      	beq.n	8006884 <_dtoa_r+0xabc>
 8006830:	f1b9 0f00 	cmp.w	r9, #0
 8006834:	dd01      	ble.n	800683a <_dtoa_r+0xa72>
 8006836:	9b04      	ldr	r3, [sp, #16]
 8006838:	3331      	adds	r3, #49	; 0x31
 800683a:	9a02      	ldr	r2, [sp, #8]
 800683c:	7013      	strb	r3, [r2, #0]
 800683e:	e774      	b.n	800672a <_dtoa_r+0x962>
 8006840:	4638      	mov	r0, r7
 8006842:	e7b9      	b.n	80067b8 <_dtoa_r+0x9f0>
 8006844:	2201      	movs	r2, #1
 8006846:	e7e2      	b.n	800680e <_dtoa_r+0xa46>
 8006848:	f1b9 0f00 	cmp.w	r9, #0
 800684c:	db06      	blt.n	800685c <_dtoa_r+0xa94>
 800684e:	9905      	ldr	r1, [sp, #20]
 8006850:	ea41 0909 	orr.w	r9, r1, r9
 8006854:	9906      	ldr	r1, [sp, #24]
 8006856:	ea59 0101 	orrs.w	r1, r9, r1
 800685a:	d120      	bne.n	800689e <_dtoa_r+0xad6>
 800685c:	2a00      	cmp	r2, #0
 800685e:	ddec      	ble.n	800683a <_dtoa_r+0xa72>
 8006860:	4659      	mov	r1, fp
 8006862:	2201      	movs	r2, #1
 8006864:	4620      	mov	r0, r4
 8006866:	9301      	str	r3, [sp, #4]
 8006868:	f000 fab8 	bl	8006ddc <__lshift>
 800686c:	4631      	mov	r1, r6
 800686e:	4683      	mov	fp, r0
 8006870:	f000 fb20 	bl	8006eb4 <__mcmp>
 8006874:	2800      	cmp	r0, #0
 8006876:	9b01      	ldr	r3, [sp, #4]
 8006878:	dc02      	bgt.n	8006880 <_dtoa_r+0xab8>
 800687a:	d1de      	bne.n	800683a <_dtoa_r+0xa72>
 800687c:	07da      	lsls	r2, r3, #31
 800687e:	d5dc      	bpl.n	800683a <_dtoa_r+0xa72>
 8006880:	2b39      	cmp	r3, #57	; 0x39
 8006882:	d1d8      	bne.n	8006836 <_dtoa_r+0xa6e>
 8006884:	9a02      	ldr	r2, [sp, #8]
 8006886:	2339      	movs	r3, #57	; 0x39
 8006888:	7013      	strb	r3, [r2, #0]
 800688a:	462b      	mov	r3, r5
 800688c:	461d      	mov	r5, r3
 800688e:	3b01      	subs	r3, #1
 8006890:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006894:	2a39      	cmp	r2, #57	; 0x39
 8006896:	d050      	beq.n	800693a <_dtoa_r+0xb72>
 8006898:	3201      	adds	r2, #1
 800689a:	701a      	strb	r2, [r3, #0]
 800689c:	e745      	b.n	800672a <_dtoa_r+0x962>
 800689e:	2a00      	cmp	r2, #0
 80068a0:	dd03      	ble.n	80068aa <_dtoa_r+0xae2>
 80068a2:	2b39      	cmp	r3, #57	; 0x39
 80068a4:	d0ee      	beq.n	8006884 <_dtoa_r+0xabc>
 80068a6:	3301      	adds	r3, #1
 80068a8:	e7c7      	b.n	800683a <_dtoa_r+0xa72>
 80068aa:	9a01      	ldr	r2, [sp, #4]
 80068ac:	9907      	ldr	r1, [sp, #28]
 80068ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80068b2:	428a      	cmp	r2, r1
 80068b4:	d02a      	beq.n	800690c <_dtoa_r+0xb44>
 80068b6:	4659      	mov	r1, fp
 80068b8:	2300      	movs	r3, #0
 80068ba:	220a      	movs	r2, #10
 80068bc:	4620      	mov	r0, r4
 80068be:	f000 f8dd 	bl	8006a7c <__multadd>
 80068c2:	45b8      	cmp	r8, r7
 80068c4:	4683      	mov	fp, r0
 80068c6:	f04f 0300 	mov.w	r3, #0
 80068ca:	f04f 020a 	mov.w	r2, #10
 80068ce:	4641      	mov	r1, r8
 80068d0:	4620      	mov	r0, r4
 80068d2:	d107      	bne.n	80068e4 <_dtoa_r+0xb1c>
 80068d4:	f000 f8d2 	bl	8006a7c <__multadd>
 80068d8:	4680      	mov	r8, r0
 80068da:	4607      	mov	r7, r0
 80068dc:	9b01      	ldr	r3, [sp, #4]
 80068de:	3301      	adds	r3, #1
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	e775      	b.n	80067d0 <_dtoa_r+0xa08>
 80068e4:	f000 f8ca 	bl	8006a7c <__multadd>
 80068e8:	4639      	mov	r1, r7
 80068ea:	4680      	mov	r8, r0
 80068ec:	2300      	movs	r3, #0
 80068ee:	220a      	movs	r2, #10
 80068f0:	4620      	mov	r0, r4
 80068f2:	f000 f8c3 	bl	8006a7c <__multadd>
 80068f6:	4607      	mov	r7, r0
 80068f8:	e7f0      	b.n	80068dc <_dtoa_r+0xb14>
 80068fa:	f1b9 0f00 	cmp.w	r9, #0
 80068fe:	9a00      	ldr	r2, [sp, #0]
 8006900:	bfcc      	ite	gt
 8006902:	464d      	movgt	r5, r9
 8006904:	2501      	movle	r5, #1
 8006906:	4415      	add	r5, r2
 8006908:	f04f 0800 	mov.w	r8, #0
 800690c:	4659      	mov	r1, fp
 800690e:	2201      	movs	r2, #1
 8006910:	4620      	mov	r0, r4
 8006912:	9301      	str	r3, [sp, #4]
 8006914:	f000 fa62 	bl	8006ddc <__lshift>
 8006918:	4631      	mov	r1, r6
 800691a:	4683      	mov	fp, r0
 800691c:	f000 faca 	bl	8006eb4 <__mcmp>
 8006920:	2800      	cmp	r0, #0
 8006922:	dcb2      	bgt.n	800688a <_dtoa_r+0xac2>
 8006924:	d102      	bne.n	800692c <_dtoa_r+0xb64>
 8006926:	9b01      	ldr	r3, [sp, #4]
 8006928:	07db      	lsls	r3, r3, #31
 800692a:	d4ae      	bmi.n	800688a <_dtoa_r+0xac2>
 800692c:	462b      	mov	r3, r5
 800692e:	461d      	mov	r5, r3
 8006930:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006934:	2a30      	cmp	r2, #48	; 0x30
 8006936:	d0fa      	beq.n	800692e <_dtoa_r+0xb66>
 8006938:	e6f7      	b.n	800672a <_dtoa_r+0x962>
 800693a:	9a00      	ldr	r2, [sp, #0]
 800693c:	429a      	cmp	r2, r3
 800693e:	d1a5      	bne.n	800688c <_dtoa_r+0xac4>
 8006940:	f10a 0a01 	add.w	sl, sl, #1
 8006944:	2331      	movs	r3, #49	; 0x31
 8006946:	e779      	b.n	800683c <_dtoa_r+0xa74>
 8006948:	4b13      	ldr	r3, [pc, #76]	; (8006998 <_dtoa_r+0xbd0>)
 800694a:	f7ff baaf 	b.w	8005eac <_dtoa_r+0xe4>
 800694e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006950:	2b00      	cmp	r3, #0
 8006952:	f47f aa86 	bne.w	8005e62 <_dtoa_r+0x9a>
 8006956:	4b11      	ldr	r3, [pc, #68]	; (800699c <_dtoa_r+0xbd4>)
 8006958:	f7ff baa8 	b.w	8005eac <_dtoa_r+0xe4>
 800695c:	f1b9 0f00 	cmp.w	r9, #0
 8006960:	dc03      	bgt.n	800696a <_dtoa_r+0xba2>
 8006962:	9b05      	ldr	r3, [sp, #20]
 8006964:	2b02      	cmp	r3, #2
 8006966:	f73f aec9 	bgt.w	80066fc <_dtoa_r+0x934>
 800696a:	9d00      	ldr	r5, [sp, #0]
 800696c:	4631      	mov	r1, r6
 800696e:	4658      	mov	r0, fp
 8006970:	f7ff f99e 	bl	8005cb0 <quorem>
 8006974:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006978:	f805 3b01 	strb.w	r3, [r5], #1
 800697c:	9a00      	ldr	r2, [sp, #0]
 800697e:	1aaa      	subs	r2, r5, r2
 8006980:	4591      	cmp	r9, r2
 8006982:	ddba      	ble.n	80068fa <_dtoa_r+0xb32>
 8006984:	4659      	mov	r1, fp
 8006986:	2300      	movs	r3, #0
 8006988:	220a      	movs	r2, #10
 800698a:	4620      	mov	r0, r4
 800698c:	f000 f876 	bl	8006a7c <__multadd>
 8006990:	4683      	mov	fp, r0
 8006992:	e7eb      	b.n	800696c <_dtoa_r+0xba4>
 8006994:	0801af33 	.word	0x0801af33
 8006998:	0801ae8c 	.word	0x0801ae8c
 800699c:	0801aeb0 	.word	0x0801aeb0

080069a0 <_localeconv_r>:
 80069a0:	4800      	ldr	r0, [pc, #0]	; (80069a4 <_localeconv_r+0x4>)
 80069a2:	4770      	bx	lr
 80069a4:	20000160 	.word	0x20000160

080069a8 <malloc>:
 80069a8:	4b02      	ldr	r3, [pc, #8]	; (80069b4 <malloc+0xc>)
 80069aa:	4601      	mov	r1, r0
 80069ac:	6818      	ldr	r0, [r3, #0]
 80069ae:	f000 bbe1 	b.w	8007174 <_malloc_r>
 80069b2:	bf00      	nop
 80069b4:	2000000c 	.word	0x2000000c

080069b8 <_Balloc>:
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80069bc:	4604      	mov	r4, r0
 80069be:	460d      	mov	r5, r1
 80069c0:	b976      	cbnz	r6, 80069e0 <_Balloc+0x28>
 80069c2:	2010      	movs	r0, #16
 80069c4:	f7ff fff0 	bl	80069a8 <malloc>
 80069c8:	4602      	mov	r2, r0
 80069ca:	6260      	str	r0, [r4, #36]	; 0x24
 80069cc:	b920      	cbnz	r0, 80069d8 <_Balloc+0x20>
 80069ce:	4b18      	ldr	r3, [pc, #96]	; (8006a30 <_Balloc+0x78>)
 80069d0:	4818      	ldr	r0, [pc, #96]	; (8006a34 <_Balloc+0x7c>)
 80069d2:	2166      	movs	r1, #102	; 0x66
 80069d4:	f000 fc38 	bl	8007248 <__assert_func>
 80069d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069dc:	6006      	str	r6, [r0, #0]
 80069de:	60c6      	str	r6, [r0, #12]
 80069e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80069e2:	68f3      	ldr	r3, [r6, #12]
 80069e4:	b183      	cbz	r3, 8006a08 <_Balloc+0x50>
 80069e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069ee:	b9b8      	cbnz	r0, 8006a20 <_Balloc+0x68>
 80069f0:	2101      	movs	r1, #1
 80069f2:	fa01 f605 	lsl.w	r6, r1, r5
 80069f6:	1d72      	adds	r2, r6, #5
 80069f8:	0092      	lsls	r2, r2, #2
 80069fa:	4620      	mov	r0, r4
 80069fc:	f000 fb5a 	bl	80070b4 <_calloc_r>
 8006a00:	b160      	cbz	r0, 8006a1c <_Balloc+0x64>
 8006a02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a06:	e00e      	b.n	8006a26 <_Balloc+0x6e>
 8006a08:	2221      	movs	r2, #33	; 0x21
 8006a0a:	2104      	movs	r1, #4
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f000 fb51 	bl	80070b4 <_calloc_r>
 8006a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a14:	60f0      	str	r0, [r6, #12]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1e4      	bne.n	80069e6 <_Balloc+0x2e>
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	bd70      	pop	{r4, r5, r6, pc}
 8006a20:	6802      	ldr	r2, [r0, #0]
 8006a22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a26:	2300      	movs	r3, #0
 8006a28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a2c:	e7f7      	b.n	8006a1e <_Balloc+0x66>
 8006a2e:	bf00      	nop
 8006a30:	0801aebd 	.word	0x0801aebd
 8006a34:	0801af44 	.word	0x0801af44

08006a38 <_Bfree>:
 8006a38:	b570      	push	{r4, r5, r6, lr}
 8006a3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	460c      	mov	r4, r1
 8006a40:	b976      	cbnz	r6, 8006a60 <_Bfree+0x28>
 8006a42:	2010      	movs	r0, #16
 8006a44:	f7ff ffb0 	bl	80069a8 <malloc>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	6268      	str	r0, [r5, #36]	; 0x24
 8006a4c:	b920      	cbnz	r0, 8006a58 <_Bfree+0x20>
 8006a4e:	4b09      	ldr	r3, [pc, #36]	; (8006a74 <_Bfree+0x3c>)
 8006a50:	4809      	ldr	r0, [pc, #36]	; (8006a78 <_Bfree+0x40>)
 8006a52:	218a      	movs	r1, #138	; 0x8a
 8006a54:	f000 fbf8 	bl	8007248 <__assert_func>
 8006a58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a5c:	6006      	str	r6, [r0, #0]
 8006a5e:	60c6      	str	r6, [r0, #12]
 8006a60:	b13c      	cbz	r4, 8006a72 <_Bfree+0x3a>
 8006a62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a64:	6862      	ldr	r2, [r4, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a6c:	6021      	str	r1, [r4, #0]
 8006a6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a72:	bd70      	pop	{r4, r5, r6, pc}
 8006a74:	0801aebd 	.word	0x0801aebd
 8006a78:	0801af44 	.word	0x0801af44

08006a7c <__multadd>:
 8006a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a80:	690e      	ldr	r6, [r1, #16]
 8006a82:	4607      	mov	r7, r0
 8006a84:	4698      	mov	r8, r3
 8006a86:	460c      	mov	r4, r1
 8006a88:	f101 0014 	add.w	r0, r1, #20
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	6805      	ldr	r5, [r0, #0]
 8006a90:	b2a9      	uxth	r1, r5
 8006a92:	fb02 8101 	mla	r1, r2, r1, r8
 8006a96:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006a9a:	0c2d      	lsrs	r5, r5, #16
 8006a9c:	fb02 c505 	mla	r5, r2, r5, ip
 8006aa0:	b289      	uxth	r1, r1
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006aa8:	429e      	cmp	r6, r3
 8006aaa:	f840 1b04 	str.w	r1, [r0], #4
 8006aae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006ab2:	dcec      	bgt.n	8006a8e <__multadd+0x12>
 8006ab4:	f1b8 0f00 	cmp.w	r8, #0
 8006ab8:	d022      	beq.n	8006b00 <__multadd+0x84>
 8006aba:	68a3      	ldr	r3, [r4, #8]
 8006abc:	42b3      	cmp	r3, r6
 8006abe:	dc19      	bgt.n	8006af4 <__multadd+0x78>
 8006ac0:	6861      	ldr	r1, [r4, #4]
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	3101      	adds	r1, #1
 8006ac6:	f7ff ff77 	bl	80069b8 <_Balloc>
 8006aca:	4605      	mov	r5, r0
 8006acc:	b928      	cbnz	r0, 8006ada <__multadd+0x5e>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	4b0d      	ldr	r3, [pc, #52]	; (8006b08 <__multadd+0x8c>)
 8006ad2:	480e      	ldr	r0, [pc, #56]	; (8006b0c <__multadd+0x90>)
 8006ad4:	21b5      	movs	r1, #181	; 0xb5
 8006ad6:	f000 fbb7 	bl	8007248 <__assert_func>
 8006ada:	6922      	ldr	r2, [r4, #16]
 8006adc:	3202      	adds	r2, #2
 8006ade:	f104 010c 	add.w	r1, r4, #12
 8006ae2:	0092      	lsls	r2, r2, #2
 8006ae4:	300c      	adds	r0, #12
 8006ae6:	f7fe fc63 	bl	80053b0 <memcpy>
 8006aea:	4621      	mov	r1, r4
 8006aec:	4638      	mov	r0, r7
 8006aee:	f7ff ffa3 	bl	8006a38 <_Bfree>
 8006af2:	462c      	mov	r4, r5
 8006af4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006af8:	3601      	adds	r6, #1
 8006afa:	f8c3 8014 	str.w	r8, [r3, #20]
 8006afe:	6126      	str	r6, [r4, #16]
 8006b00:	4620      	mov	r0, r4
 8006b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b06:	bf00      	nop
 8006b08:	0801af33 	.word	0x0801af33
 8006b0c:	0801af44 	.word	0x0801af44

08006b10 <__hi0bits>:
 8006b10:	0c03      	lsrs	r3, r0, #16
 8006b12:	041b      	lsls	r3, r3, #16
 8006b14:	b9d3      	cbnz	r3, 8006b4c <__hi0bits+0x3c>
 8006b16:	0400      	lsls	r0, r0, #16
 8006b18:	2310      	movs	r3, #16
 8006b1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006b1e:	bf04      	itt	eq
 8006b20:	0200      	lsleq	r0, r0, #8
 8006b22:	3308      	addeq	r3, #8
 8006b24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006b28:	bf04      	itt	eq
 8006b2a:	0100      	lsleq	r0, r0, #4
 8006b2c:	3304      	addeq	r3, #4
 8006b2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006b32:	bf04      	itt	eq
 8006b34:	0080      	lsleq	r0, r0, #2
 8006b36:	3302      	addeq	r3, #2
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	db05      	blt.n	8006b48 <__hi0bits+0x38>
 8006b3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006b40:	f103 0301 	add.w	r3, r3, #1
 8006b44:	bf08      	it	eq
 8006b46:	2320      	moveq	r3, #32
 8006b48:	4618      	mov	r0, r3
 8006b4a:	4770      	bx	lr
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	e7e4      	b.n	8006b1a <__hi0bits+0xa>

08006b50 <__lo0bits>:
 8006b50:	6803      	ldr	r3, [r0, #0]
 8006b52:	f013 0207 	ands.w	r2, r3, #7
 8006b56:	4601      	mov	r1, r0
 8006b58:	d00b      	beq.n	8006b72 <__lo0bits+0x22>
 8006b5a:	07da      	lsls	r2, r3, #31
 8006b5c:	d424      	bmi.n	8006ba8 <__lo0bits+0x58>
 8006b5e:	0798      	lsls	r0, r3, #30
 8006b60:	bf49      	itett	mi
 8006b62:	085b      	lsrmi	r3, r3, #1
 8006b64:	089b      	lsrpl	r3, r3, #2
 8006b66:	2001      	movmi	r0, #1
 8006b68:	600b      	strmi	r3, [r1, #0]
 8006b6a:	bf5c      	itt	pl
 8006b6c:	600b      	strpl	r3, [r1, #0]
 8006b6e:	2002      	movpl	r0, #2
 8006b70:	4770      	bx	lr
 8006b72:	b298      	uxth	r0, r3
 8006b74:	b9b0      	cbnz	r0, 8006ba4 <__lo0bits+0x54>
 8006b76:	0c1b      	lsrs	r3, r3, #16
 8006b78:	2010      	movs	r0, #16
 8006b7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006b7e:	bf04      	itt	eq
 8006b80:	0a1b      	lsreq	r3, r3, #8
 8006b82:	3008      	addeq	r0, #8
 8006b84:	071a      	lsls	r2, r3, #28
 8006b86:	bf04      	itt	eq
 8006b88:	091b      	lsreq	r3, r3, #4
 8006b8a:	3004      	addeq	r0, #4
 8006b8c:	079a      	lsls	r2, r3, #30
 8006b8e:	bf04      	itt	eq
 8006b90:	089b      	lsreq	r3, r3, #2
 8006b92:	3002      	addeq	r0, #2
 8006b94:	07da      	lsls	r2, r3, #31
 8006b96:	d403      	bmi.n	8006ba0 <__lo0bits+0x50>
 8006b98:	085b      	lsrs	r3, r3, #1
 8006b9a:	f100 0001 	add.w	r0, r0, #1
 8006b9e:	d005      	beq.n	8006bac <__lo0bits+0x5c>
 8006ba0:	600b      	str	r3, [r1, #0]
 8006ba2:	4770      	bx	lr
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	e7e8      	b.n	8006b7a <__lo0bits+0x2a>
 8006ba8:	2000      	movs	r0, #0
 8006baa:	4770      	bx	lr
 8006bac:	2020      	movs	r0, #32
 8006bae:	4770      	bx	lr

08006bb0 <__i2b>:
 8006bb0:	b510      	push	{r4, lr}
 8006bb2:	460c      	mov	r4, r1
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	f7ff feff 	bl	80069b8 <_Balloc>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	b928      	cbnz	r0, 8006bca <__i2b+0x1a>
 8006bbe:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <__i2b+0x24>)
 8006bc0:	4805      	ldr	r0, [pc, #20]	; (8006bd8 <__i2b+0x28>)
 8006bc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006bc6:	f000 fb3f 	bl	8007248 <__assert_func>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	6144      	str	r4, [r0, #20]
 8006bce:	6103      	str	r3, [r0, #16]
 8006bd0:	bd10      	pop	{r4, pc}
 8006bd2:	bf00      	nop
 8006bd4:	0801af33 	.word	0x0801af33
 8006bd8:	0801af44 	.word	0x0801af44

08006bdc <__multiply>:
 8006bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be0:	4614      	mov	r4, r2
 8006be2:	690a      	ldr	r2, [r1, #16]
 8006be4:	6923      	ldr	r3, [r4, #16]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	bfb8      	it	lt
 8006bea:	460b      	movlt	r3, r1
 8006bec:	460d      	mov	r5, r1
 8006bee:	bfbc      	itt	lt
 8006bf0:	4625      	movlt	r5, r4
 8006bf2:	461c      	movlt	r4, r3
 8006bf4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006bf8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006bfc:	68ab      	ldr	r3, [r5, #8]
 8006bfe:	6869      	ldr	r1, [r5, #4]
 8006c00:	eb0a 0709 	add.w	r7, sl, r9
 8006c04:	42bb      	cmp	r3, r7
 8006c06:	b085      	sub	sp, #20
 8006c08:	bfb8      	it	lt
 8006c0a:	3101      	addlt	r1, #1
 8006c0c:	f7ff fed4 	bl	80069b8 <_Balloc>
 8006c10:	b930      	cbnz	r0, 8006c20 <__multiply+0x44>
 8006c12:	4602      	mov	r2, r0
 8006c14:	4b42      	ldr	r3, [pc, #264]	; (8006d20 <__multiply+0x144>)
 8006c16:	4843      	ldr	r0, [pc, #268]	; (8006d24 <__multiply+0x148>)
 8006c18:	f240 115d 	movw	r1, #349	; 0x15d
 8006c1c:	f000 fb14 	bl	8007248 <__assert_func>
 8006c20:	f100 0614 	add.w	r6, r0, #20
 8006c24:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006c28:	4633      	mov	r3, r6
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	4543      	cmp	r3, r8
 8006c2e:	d31e      	bcc.n	8006c6e <__multiply+0x92>
 8006c30:	f105 0c14 	add.w	ip, r5, #20
 8006c34:	f104 0314 	add.w	r3, r4, #20
 8006c38:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006c3c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006c40:	9202      	str	r2, [sp, #8]
 8006c42:	ebac 0205 	sub.w	r2, ip, r5
 8006c46:	3a15      	subs	r2, #21
 8006c48:	f022 0203 	bic.w	r2, r2, #3
 8006c4c:	3204      	adds	r2, #4
 8006c4e:	f105 0115 	add.w	r1, r5, #21
 8006c52:	458c      	cmp	ip, r1
 8006c54:	bf38      	it	cc
 8006c56:	2204      	movcc	r2, #4
 8006c58:	9201      	str	r2, [sp, #4]
 8006c5a:	9a02      	ldr	r2, [sp, #8]
 8006c5c:	9303      	str	r3, [sp, #12]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d808      	bhi.n	8006c74 <__multiply+0x98>
 8006c62:	2f00      	cmp	r7, #0
 8006c64:	dc55      	bgt.n	8006d12 <__multiply+0x136>
 8006c66:	6107      	str	r7, [r0, #16]
 8006c68:	b005      	add	sp, #20
 8006c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c6e:	f843 2b04 	str.w	r2, [r3], #4
 8006c72:	e7db      	b.n	8006c2c <__multiply+0x50>
 8006c74:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c78:	f1ba 0f00 	cmp.w	sl, #0
 8006c7c:	d020      	beq.n	8006cc0 <__multiply+0xe4>
 8006c7e:	f105 0e14 	add.w	lr, r5, #20
 8006c82:	46b1      	mov	r9, r6
 8006c84:	2200      	movs	r2, #0
 8006c86:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006c8a:	f8d9 b000 	ldr.w	fp, [r9]
 8006c8e:	b2a1      	uxth	r1, r4
 8006c90:	fa1f fb8b 	uxth.w	fp, fp
 8006c94:	fb0a b101 	mla	r1, sl, r1, fp
 8006c98:	4411      	add	r1, r2
 8006c9a:	f8d9 2000 	ldr.w	r2, [r9]
 8006c9e:	0c24      	lsrs	r4, r4, #16
 8006ca0:	0c12      	lsrs	r2, r2, #16
 8006ca2:	fb0a 2404 	mla	r4, sl, r4, r2
 8006ca6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006caa:	b289      	uxth	r1, r1
 8006cac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006cb0:	45f4      	cmp	ip, lr
 8006cb2:	f849 1b04 	str.w	r1, [r9], #4
 8006cb6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006cba:	d8e4      	bhi.n	8006c86 <__multiply+0xaa>
 8006cbc:	9901      	ldr	r1, [sp, #4]
 8006cbe:	5072      	str	r2, [r6, r1]
 8006cc0:	9a03      	ldr	r2, [sp, #12]
 8006cc2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	f1b9 0f00 	cmp.w	r9, #0
 8006ccc:	d01f      	beq.n	8006d0e <__multiply+0x132>
 8006cce:	6834      	ldr	r4, [r6, #0]
 8006cd0:	f105 0114 	add.w	r1, r5, #20
 8006cd4:	46b6      	mov	lr, r6
 8006cd6:	f04f 0a00 	mov.w	sl, #0
 8006cda:	880a      	ldrh	r2, [r1, #0]
 8006cdc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006ce0:	fb09 b202 	mla	r2, r9, r2, fp
 8006ce4:	4492      	add	sl, r2
 8006ce6:	b2a4      	uxth	r4, r4
 8006ce8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006cec:	f84e 4b04 	str.w	r4, [lr], #4
 8006cf0:	f851 4b04 	ldr.w	r4, [r1], #4
 8006cf4:	f8be 2000 	ldrh.w	r2, [lr]
 8006cf8:	0c24      	lsrs	r4, r4, #16
 8006cfa:	fb09 2404 	mla	r4, r9, r4, r2
 8006cfe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006d02:	458c      	cmp	ip, r1
 8006d04:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006d08:	d8e7      	bhi.n	8006cda <__multiply+0xfe>
 8006d0a:	9a01      	ldr	r2, [sp, #4]
 8006d0c:	50b4      	str	r4, [r6, r2]
 8006d0e:	3604      	adds	r6, #4
 8006d10:	e7a3      	b.n	8006c5a <__multiply+0x7e>
 8006d12:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1a5      	bne.n	8006c66 <__multiply+0x8a>
 8006d1a:	3f01      	subs	r7, #1
 8006d1c:	e7a1      	b.n	8006c62 <__multiply+0x86>
 8006d1e:	bf00      	nop
 8006d20:	0801af33 	.word	0x0801af33
 8006d24:	0801af44 	.word	0x0801af44

08006d28 <__pow5mult>:
 8006d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d2c:	4615      	mov	r5, r2
 8006d2e:	f012 0203 	ands.w	r2, r2, #3
 8006d32:	4606      	mov	r6, r0
 8006d34:	460f      	mov	r7, r1
 8006d36:	d007      	beq.n	8006d48 <__pow5mult+0x20>
 8006d38:	4c25      	ldr	r4, [pc, #148]	; (8006dd0 <__pow5mult+0xa8>)
 8006d3a:	3a01      	subs	r2, #1
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d42:	f7ff fe9b 	bl	8006a7c <__multadd>
 8006d46:	4607      	mov	r7, r0
 8006d48:	10ad      	asrs	r5, r5, #2
 8006d4a:	d03d      	beq.n	8006dc8 <__pow5mult+0xa0>
 8006d4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d4e:	b97c      	cbnz	r4, 8006d70 <__pow5mult+0x48>
 8006d50:	2010      	movs	r0, #16
 8006d52:	f7ff fe29 	bl	80069a8 <malloc>
 8006d56:	4602      	mov	r2, r0
 8006d58:	6270      	str	r0, [r6, #36]	; 0x24
 8006d5a:	b928      	cbnz	r0, 8006d68 <__pow5mult+0x40>
 8006d5c:	4b1d      	ldr	r3, [pc, #116]	; (8006dd4 <__pow5mult+0xac>)
 8006d5e:	481e      	ldr	r0, [pc, #120]	; (8006dd8 <__pow5mult+0xb0>)
 8006d60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006d64:	f000 fa70 	bl	8007248 <__assert_func>
 8006d68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d6c:	6004      	str	r4, [r0, #0]
 8006d6e:	60c4      	str	r4, [r0, #12]
 8006d70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006d74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d78:	b94c      	cbnz	r4, 8006d8e <__pow5mult+0x66>
 8006d7a:	f240 2171 	movw	r1, #625	; 0x271
 8006d7e:	4630      	mov	r0, r6
 8006d80:	f7ff ff16 	bl	8006bb0 <__i2b>
 8006d84:	2300      	movs	r3, #0
 8006d86:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	6003      	str	r3, [r0, #0]
 8006d8e:	f04f 0900 	mov.w	r9, #0
 8006d92:	07eb      	lsls	r3, r5, #31
 8006d94:	d50a      	bpl.n	8006dac <__pow5mult+0x84>
 8006d96:	4639      	mov	r1, r7
 8006d98:	4622      	mov	r2, r4
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	f7ff ff1e 	bl	8006bdc <__multiply>
 8006da0:	4639      	mov	r1, r7
 8006da2:	4680      	mov	r8, r0
 8006da4:	4630      	mov	r0, r6
 8006da6:	f7ff fe47 	bl	8006a38 <_Bfree>
 8006daa:	4647      	mov	r7, r8
 8006dac:	106d      	asrs	r5, r5, #1
 8006dae:	d00b      	beq.n	8006dc8 <__pow5mult+0xa0>
 8006db0:	6820      	ldr	r0, [r4, #0]
 8006db2:	b938      	cbnz	r0, 8006dc4 <__pow5mult+0x9c>
 8006db4:	4622      	mov	r2, r4
 8006db6:	4621      	mov	r1, r4
 8006db8:	4630      	mov	r0, r6
 8006dba:	f7ff ff0f 	bl	8006bdc <__multiply>
 8006dbe:	6020      	str	r0, [r4, #0]
 8006dc0:	f8c0 9000 	str.w	r9, [r0]
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	e7e4      	b.n	8006d92 <__pow5mult+0x6a>
 8006dc8:	4638      	mov	r0, r7
 8006dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dce:	bf00      	nop
 8006dd0:	0801b098 	.word	0x0801b098
 8006dd4:	0801aebd 	.word	0x0801aebd
 8006dd8:	0801af44 	.word	0x0801af44

08006ddc <__lshift>:
 8006ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006de0:	460c      	mov	r4, r1
 8006de2:	6849      	ldr	r1, [r1, #4]
 8006de4:	6923      	ldr	r3, [r4, #16]
 8006de6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006dea:	68a3      	ldr	r3, [r4, #8]
 8006dec:	4607      	mov	r7, r0
 8006dee:	4691      	mov	r9, r2
 8006df0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006df4:	f108 0601 	add.w	r6, r8, #1
 8006df8:	42b3      	cmp	r3, r6
 8006dfa:	db0b      	blt.n	8006e14 <__lshift+0x38>
 8006dfc:	4638      	mov	r0, r7
 8006dfe:	f7ff fddb 	bl	80069b8 <_Balloc>
 8006e02:	4605      	mov	r5, r0
 8006e04:	b948      	cbnz	r0, 8006e1a <__lshift+0x3e>
 8006e06:	4602      	mov	r2, r0
 8006e08:	4b28      	ldr	r3, [pc, #160]	; (8006eac <__lshift+0xd0>)
 8006e0a:	4829      	ldr	r0, [pc, #164]	; (8006eb0 <__lshift+0xd4>)
 8006e0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006e10:	f000 fa1a 	bl	8007248 <__assert_func>
 8006e14:	3101      	adds	r1, #1
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	e7ee      	b.n	8006df8 <__lshift+0x1c>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f100 0114 	add.w	r1, r0, #20
 8006e20:	f100 0210 	add.w	r2, r0, #16
 8006e24:	4618      	mov	r0, r3
 8006e26:	4553      	cmp	r3, sl
 8006e28:	db33      	blt.n	8006e92 <__lshift+0xb6>
 8006e2a:	6920      	ldr	r0, [r4, #16]
 8006e2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e30:	f104 0314 	add.w	r3, r4, #20
 8006e34:	f019 091f 	ands.w	r9, r9, #31
 8006e38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e40:	d02b      	beq.n	8006e9a <__lshift+0xbe>
 8006e42:	f1c9 0e20 	rsb	lr, r9, #32
 8006e46:	468a      	mov	sl, r1
 8006e48:	2200      	movs	r2, #0
 8006e4a:	6818      	ldr	r0, [r3, #0]
 8006e4c:	fa00 f009 	lsl.w	r0, r0, r9
 8006e50:	4302      	orrs	r2, r0
 8006e52:	f84a 2b04 	str.w	r2, [sl], #4
 8006e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e5a:	459c      	cmp	ip, r3
 8006e5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e60:	d8f3      	bhi.n	8006e4a <__lshift+0x6e>
 8006e62:	ebac 0304 	sub.w	r3, ip, r4
 8006e66:	3b15      	subs	r3, #21
 8006e68:	f023 0303 	bic.w	r3, r3, #3
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	f104 0015 	add.w	r0, r4, #21
 8006e72:	4584      	cmp	ip, r0
 8006e74:	bf38      	it	cc
 8006e76:	2304      	movcc	r3, #4
 8006e78:	50ca      	str	r2, [r1, r3]
 8006e7a:	b10a      	cbz	r2, 8006e80 <__lshift+0xa4>
 8006e7c:	f108 0602 	add.w	r6, r8, #2
 8006e80:	3e01      	subs	r6, #1
 8006e82:	4638      	mov	r0, r7
 8006e84:	612e      	str	r6, [r5, #16]
 8006e86:	4621      	mov	r1, r4
 8006e88:	f7ff fdd6 	bl	8006a38 <_Bfree>
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e92:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e96:	3301      	adds	r3, #1
 8006e98:	e7c5      	b.n	8006e26 <__lshift+0x4a>
 8006e9a:	3904      	subs	r1, #4
 8006e9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ea0:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ea4:	459c      	cmp	ip, r3
 8006ea6:	d8f9      	bhi.n	8006e9c <__lshift+0xc0>
 8006ea8:	e7ea      	b.n	8006e80 <__lshift+0xa4>
 8006eaa:	bf00      	nop
 8006eac:	0801af33 	.word	0x0801af33
 8006eb0:	0801af44 	.word	0x0801af44

08006eb4 <__mcmp>:
 8006eb4:	b530      	push	{r4, r5, lr}
 8006eb6:	6902      	ldr	r2, [r0, #16]
 8006eb8:	690c      	ldr	r4, [r1, #16]
 8006eba:	1b12      	subs	r2, r2, r4
 8006ebc:	d10e      	bne.n	8006edc <__mcmp+0x28>
 8006ebe:	f100 0314 	add.w	r3, r0, #20
 8006ec2:	3114      	adds	r1, #20
 8006ec4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006ec8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006ecc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006ed0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006ed4:	42a5      	cmp	r5, r4
 8006ed6:	d003      	beq.n	8006ee0 <__mcmp+0x2c>
 8006ed8:	d305      	bcc.n	8006ee6 <__mcmp+0x32>
 8006eda:	2201      	movs	r2, #1
 8006edc:	4610      	mov	r0, r2
 8006ede:	bd30      	pop	{r4, r5, pc}
 8006ee0:	4283      	cmp	r3, r0
 8006ee2:	d3f3      	bcc.n	8006ecc <__mcmp+0x18>
 8006ee4:	e7fa      	b.n	8006edc <__mcmp+0x28>
 8006ee6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006eea:	e7f7      	b.n	8006edc <__mcmp+0x28>

08006eec <__mdiff>:
 8006eec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef0:	460c      	mov	r4, r1
 8006ef2:	4606      	mov	r6, r0
 8006ef4:	4611      	mov	r1, r2
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	4617      	mov	r7, r2
 8006efa:	f7ff ffdb 	bl	8006eb4 <__mcmp>
 8006efe:	1e05      	subs	r5, r0, #0
 8006f00:	d110      	bne.n	8006f24 <__mdiff+0x38>
 8006f02:	4629      	mov	r1, r5
 8006f04:	4630      	mov	r0, r6
 8006f06:	f7ff fd57 	bl	80069b8 <_Balloc>
 8006f0a:	b930      	cbnz	r0, 8006f1a <__mdiff+0x2e>
 8006f0c:	4b39      	ldr	r3, [pc, #228]	; (8006ff4 <__mdiff+0x108>)
 8006f0e:	4602      	mov	r2, r0
 8006f10:	f240 2132 	movw	r1, #562	; 0x232
 8006f14:	4838      	ldr	r0, [pc, #224]	; (8006ff8 <__mdiff+0x10c>)
 8006f16:	f000 f997 	bl	8007248 <__assert_func>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f24:	bfa4      	itt	ge
 8006f26:	463b      	movge	r3, r7
 8006f28:	4627      	movge	r7, r4
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	bfa6      	itte	ge
 8006f30:	461c      	movge	r4, r3
 8006f32:	2500      	movge	r5, #0
 8006f34:	2501      	movlt	r5, #1
 8006f36:	f7ff fd3f 	bl	80069b8 <_Balloc>
 8006f3a:	b920      	cbnz	r0, 8006f46 <__mdiff+0x5a>
 8006f3c:	4b2d      	ldr	r3, [pc, #180]	; (8006ff4 <__mdiff+0x108>)
 8006f3e:	4602      	mov	r2, r0
 8006f40:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006f44:	e7e6      	b.n	8006f14 <__mdiff+0x28>
 8006f46:	693e      	ldr	r6, [r7, #16]
 8006f48:	60c5      	str	r5, [r0, #12]
 8006f4a:	6925      	ldr	r5, [r4, #16]
 8006f4c:	f107 0114 	add.w	r1, r7, #20
 8006f50:	f104 0914 	add.w	r9, r4, #20
 8006f54:	f100 0e14 	add.w	lr, r0, #20
 8006f58:	f107 0210 	add.w	r2, r7, #16
 8006f5c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006f60:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006f64:	46f2      	mov	sl, lr
 8006f66:	2700      	movs	r7, #0
 8006f68:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006f70:	fa1f f883 	uxth.w	r8, r3
 8006f74:	fa17 f78b 	uxtah	r7, r7, fp
 8006f78:	0c1b      	lsrs	r3, r3, #16
 8006f7a:	eba7 0808 	sub.w	r8, r7, r8
 8006f7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006f86:	fa1f f888 	uxth.w	r8, r8
 8006f8a:	141f      	asrs	r7, r3, #16
 8006f8c:	454d      	cmp	r5, r9
 8006f8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006f92:	f84a 3b04 	str.w	r3, [sl], #4
 8006f96:	d8e7      	bhi.n	8006f68 <__mdiff+0x7c>
 8006f98:	1b2b      	subs	r3, r5, r4
 8006f9a:	3b15      	subs	r3, #21
 8006f9c:	f023 0303 	bic.w	r3, r3, #3
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	3415      	adds	r4, #21
 8006fa4:	42a5      	cmp	r5, r4
 8006fa6:	bf38      	it	cc
 8006fa8:	2304      	movcc	r3, #4
 8006faa:	4419      	add	r1, r3
 8006fac:	4473      	add	r3, lr
 8006fae:	469e      	mov	lr, r3
 8006fb0:	460d      	mov	r5, r1
 8006fb2:	4565      	cmp	r5, ip
 8006fb4:	d30e      	bcc.n	8006fd4 <__mdiff+0xe8>
 8006fb6:	f10c 0203 	add.w	r2, ip, #3
 8006fba:	1a52      	subs	r2, r2, r1
 8006fbc:	f022 0203 	bic.w	r2, r2, #3
 8006fc0:	3903      	subs	r1, #3
 8006fc2:	458c      	cmp	ip, r1
 8006fc4:	bf38      	it	cc
 8006fc6:	2200      	movcc	r2, #0
 8006fc8:	441a      	add	r2, r3
 8006fca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006fce:	b17b      	cbz	r3, 8006ff0 <__mdiff+0x104>
 8006fd0:	6106      	str	r6, [r0, #16]
 8006fd2:	e7a5      	b.n	8006f20 <__mdiff+0x34>
 8006fd4:	f855 8b04 	ldr.w	r8, [r5], #4
 8006fd8:	fa17 f488 	uxtah	r4, r7, r8
 8006fdc:	1422      	asrs	r2, r4, #16
 8006fde:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006fe2:	b2a4      	uxth	r4, r4
 8006fe4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006fe8:	f84e 4b04 	str.w	r4, [lr], #4
 8006fec:	1417      	asrs	r7, r2, #16
 8006fee:	e7e0      	b.n	8006fb2 <__mdiff+0xc6>
 8006ff0:	3e01      	subs	r6, #1
 8006ff2:	e7ea      	b.n	8006fca <__mdiff+0xde>
 8006ff4:	0801af33 	.word	0x0801af33
 8006ff8:	0801af44 	.word	0x0801af44

08006ffc <__d2b>:
 8006ffc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007000:	4689      	mov	r9, r1
 8007002:	2101      	movs	r1, #1
 8007004:	ec57 6b10 	vmov	r6, r7, d0
 8007008:	4690      	mov	r8, r2
 800700a:	f7ff fcd5 	bl	80069b8 <_Balloc>
 800700e:	4604      	mov	r4, r0
 8007010:	b930      	cbnz	r0, 8007020 <__d2b+0x24>
 8007012:	4602      	mov	r2, r0
 8007014:	4b25      	ldr	r3, [pc, #148]	; (80070ac <__d2b+0xb0>)
 8007016:	4826      	ldr	r0, [pc, #152]	; (80070b0 <__d2b+0xb4>)
 8007018:	f240 310a 	movw	r1, #778	; 0x30a
 800701c:	f000 f914 	bl	8007248 <__assert_func>
 8007020:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007024:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007028:	bb35      	cbnz	r5, 8007078 <__d2b+0x7c>
 800702a:	2e00      	cmp	r6, #0
 800702c:	9301      	str	r3, [sp, #4]
 800702e:	d028      	beq.n	8007082 <__d2b+0x86>
 8007030:	4668      	mov	r0, sp
 8007032:	9600      	str	r6, [sp, #0]
 8007034:	f7ff fd8c 	bl	8006b50 <__lo0bits>
 8007038:	9900      	ldr	r1, [sp, #0]
 800703a:	b300      	cbz	r0, 800707e <__d2b+0x82>
 800703c:	9a01      	ldr	r2, [sp, #4]
 800703e:	f1c0 0320 	rsb	r3, r0, #32
 8007042:	fa02 f303 	lsl.w	r3, r2, r3
 8007046:	430b      	orrs	r3, r1
 8007048:	40c2      	lsrs	r2, r0
 800704a:	6163      	str	r3, [r4, #20]
 800704c:	9201      	str	r2, [sp, #4]
 800704e:	9b01      	ldr	r3, [sp, #4]
 8007050:	61a3      	str	r3, [r4, #24]
 8007052:	2b00      	cmp	r3, #0
 8007054:	bf14      	ite	ne
 8007056:	2202      	movne	r2, #2
 8007058:	2201      	moveq	r2, #1
 800705a:	6122      	str	r2, [r4, #16]
 800705c:	b1d5      	cbz	r5, 8007094 <__d2b+0x98>
 800705e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007062:	4405      	add	r5, r0
 8007064:	f8c9 5000 	str.w	r5, [r9]
 8007068:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800706c:	f8c8 0000 	str.w	r0, [r8]
 8007070:	4620      	mov	r0, r4
 8007072:	b003      	add	sp, #12
 8007074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800707c:	e7d5      	b.n	800702a <__d2b+0x2e>
 800707e:	6161      	str	r1, [r4, #20]
 8007080:	e7e5      	b.n	800704e <__d2b+0x52>
 8007082:	a801      	add	r0, sp, #4
 8007084:	f7ff fd64 	bl	8006b50 <__lo0bits>
 8007088:	9b01      	ldr	r3, [sp, #4]
 800708a:	6163      	str	r3, [r4, #20]
 800708c:	2201      	movs	r2, #1
 800708e:	6122      	str	r2, [r4, #16]
 8007090:	3020      	adds	r0, #32
 8007092:	e7e3      	b.n	800705c <__d2b+0x60>
 8007094:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007098:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800709c:	f8c9 0000 	str.w	r0, [r9]
 80070a0:	6918      	ldr	r0, [r3, #16]
 80070a2:	f7ff fd35 	bl	8006b10 <__hi0bits>
 80070a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80070aa:	e7df      	b.n	800706c <__d2b+0x70>
 80070ac:	0801af33 	.word	0x0801af33
 80070b0:	0801af44 	.word	0x0801af44

080070b4 <_calloc_r>:
 80070b4:	b513      	push	{r0, r1, r4, lr}
 80070b6:	434a      	muls	r2, r1
 80070b8:	4611      	mov	r1, r2
 80070ba:	9201      	str	r2, [sp, #4]
 80070bc:	f000 f85a 	bl	8007174 <_malloc_r>
 80070c0:	4604      	mov	r4, r0
 80070c2:	b118      	cbz	r0, 80070cc <_calloc_r+0x18>
 80070c4:	9a01      	ldr	r2, [sp, #4]
 80070c6:	2100      	movs	r1, #0
 80070c8:	f7fe f980 	bl	80053cc <memset>
 80070cc:	4620      	mov	r0, r4
 80070ce:	b002      	add	sp, #8
 80070d0:	bd10      	pop	{r4, pc}
	...

080070d4 <_free_r>:
 80070d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070d6:	2900      	cmp	r1, #0
 80070d8:	d048      	beq.n	800716c <_free_r+0x98>
 80070da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070de:	9001      	str	r0, [sp, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f1a1 0404 	sub.w	r4, r1, #4
 80070e6:	bfb8      	it	lt
 80070e8:	18e4      	addlt	r4, r4, r3
 80070ea:	f000 f8ef 	bl	80072cc <__malloc_lock>
 80070ee:	4a20      	ldr	r2, [pc, #128]	; (8007170 <_free_r+0x9c>)
 80070f0:	9801      	ldr	r0, [sp, #4]
 80070f2:	6813      	ldr	r3, [r2, #0]
 80070f4:	4615      	mov	r5, r2
 80070f6:	b933      	cbnz	r3, 8007106 <_free_r+0x32>
 80070f8:	6063      	str	r3, [r4, #4]
 80070fa:	6014      	str	r4, [r2, #0]
 80070fc:	b003      	add	sp, #12
 80070fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007102:	f000 b8e9 	b.w	80072d8 <__malloc_unlock>
 8007106:	42a3      	cmp	r3, r4
 8007108:	d90b      	bls.n	8007122 <_free_r+0x4e>
 800710a:	6821      	ldr	r1, [r4, #0]
 800710c:	1862      	adds	r2, r4, r1
 800710e:	4293      	cmp	r3, r2
 8007110:	bf04      	itt	eq
 8007112:	681a      	ldreq	r2, [r3, #0]
 8007114:	685b      	ldreq	r3, [r3, #4]
 8007116:	6063      	str	r3, [r4, #4]
 8007118:	bf04      	itt	eq
 800711a:	1852      	addeq	r2, r2, r1
 800711c:	6022      	streq	r2, [r4, #0]
 800711e:	602c      	str	r4, [r5, #0]
 8007120:	e7ec      	b.n	80070fc <_free_r+0x28>
 8007122:	461a      	mov	r2, r3
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	b10b      	cbz	r3, 800712c <_free_r+0x58>
 8007128:	42a3      	cmp	r3, r4
 800712a:	d9fa      	bls.n	8007122 <_free_r+0x4e>
 800712c:	6811      	ldr	r1, [r2, #0]
 800712e:	1855      	adds	r5, r2, r1
 8007130:	42a5      	cmp	r5, r4
 8007132:	d10b      	bne.n	800714c <_free_r+0x78>
 8007134:	6824      	ldr	r4, [r4, #0]
 8007136:	4421      	add	r1, r4
 8007138:	1854      	adds	r4, r2, r1
 800713a:	42a3      	cmp	r3, r4
 800713c:	6011      	str	r1, [r2, #0]
 800713e:	d1dd      	bne.n	80070fc <_free_r+0x28>
 8007140:	681c      	ldr	r4, [r3, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	6053      	str	r3, [r2, #4]
 8007146:	4421      	add	r1, r4
 8007148:	6011      	str	r1, [r2, #0]
 800714a:	e7d7      	b.n	80070fc <_free_r+0x28>
 800714c:	d902      	bls.n	8007154 <_free_r+0x80>
 800714e:	230c      	movs	r3, #12
 8007150:	6003      	str	r3, [r0, #0]
 8007152:	e7d3      	b.n	80070fc <_free_r+0x28>
 8007154:	6825      	ldr	r5, [r4, #0]
 8007156:	1961      	adds	r1, r4, r5
 8007158:	428b      	cmp	r3, r1
 800715a:	bf04      	itt	eq
 800715c:	6819      	ldreq	r1, [r3, #0]
 800715e:	685b      	ldreq	r3, [r3, #4]
 8007160:	6063      	str	r3, [r4, #4]
 8007162:	bf04      	itt	eq
 8007164:	1949      	addeq	r1, r1, r5
 8007166:	6021      	streq	r1, [r4, #0]
 8007168:	6054      	str	r4, [r2, #4]
 800716a:	e7c7      	b.n	80070fc <_free_r+0x28>
 800716c:	b003      	add	sp, #12
 800716e:	bd30      	pop	{r4, r5, pc}
 8007170:	20001508 	.word	0x20001508

08007174 <_malloc_r>:
 8007174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007176:	1ccd      	adds	r5, r1, #3
 8007178:	f025 0503 	bic.w	r5, r5, #3
 800717c:	3508      	adds	r5, #8
 800717e:	2d0c      	cmp	r5, #12
 8007180:	bf38      	it	cc
 8007182:	250c      	movcc	r5, #12
 8007184:	2d00      	cmp	r5, #0
 8007186:	4606      	mov	r6, r0
 8007188:	db01      	blt.n	800718e <_malloc_r+0x1a>
 800718a:	42a9      	cmp	r1, r5
 800718c:	d903      	bls.n	8007196 <_malloc_r+0x22>
 800718e:	230c      	movs	r3, #12
 8007190:	6033      	str	r3, [r6, #0]
 8007192:	2000      	movs	r0, #0
 8007194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007196:	f000 f899 	bl	80072cc <__malloc_lock>
 800719a:	4921      	ldr	r1, [pc, #132]	; (8007220 <_malloc_r+0xac>)
 800719c:	680a      	ldr	r2, [r1, #0]
 800719e:	4614      	mov	r4, r2
 80071a0:	b99c      	cbnz	r4, 80071ca <_malloc_r+0x56>
 80071a2:	4f20      	ldr	r7, [pc, #128]	; (8007224 <_malloc_r+0xb0>)
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	b923      	cbnz	r3, 80071b2 <_malloc_r+0x3e>
 80071a8:	4621      	mov	r1, r4
 80071aa:	4630      	mov	r0, r6
 80071ac:	f000 f83c 	bl	8007228 <_sbrk_r>
 80071b0:	6038      	str	r0, [r7, #0]
 80071b2:	4629      	mov	r1, r5
 80071b4:	4630      	mov	r0, r6
 80071b6:	f000 f837 	bl	8007228 <_sbrk_r>
 80071ba:	1c43      	adds	r3, r0, #1
 80071bc:	d123      	bne.n	8007206 <_malloc_r+0x92>
 80071be:	230c      	movs	r3, #12
 80071c0:	6033      	str	r3, [r6, #0]
 80071c2:	4630      	mov	r0, r6
 80071c4:	f000 f888 	bl	80072d8 <__malloc_unlock>
 80071c8:	e7e3      	b.n	8007192 <_malloc_r+0x1e>
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	1b5b      	subs	r3, r3, r5
 80071ce:	d417      	bmi.n	8007200 <_malloc_r+0x8c>
 80071d0:	2b0b      	cmp	r3, #11
 80071d2:	d903      	bls.n	80071dc <_malloc_r+0x68>
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	441c      	add	r4, r3
 80071d8:	6025      	str	r5, [r4, #0]
 80071da:	e004      	b.n	80071e6 <_malloc_r+0x72>
 80071dc:	6863      	ldr	r3, [r4, #4]
 80071de:	42a2      	cmp	r2, r4
 80071e0:	bf0c      	ite	eq
 80071e2:	600b      	streq	r3, [r1, #0]
 80071e4:	6053      	strne	r3, [r2, #4]
 80071e6:	4630      	mov	r0, r6
 80071e8:	f000 f876 	bl	80072d8 <__malloc_unlock>
 80071ec:	f104 000b 	add.w	r0, r4, #11
 80071f0:	1d23      	adds	r3, r4, #4
 80071f2:	f020 0007 	bic.w	r0, r0, #7
 80071f6:	1ac2      	subs	r2, r0, r3
 80071f8:	d0cc      	beq.n	8007194 <_malloc_r+0x20>
 80071fa:	1a1b      	subs	r3, r3, r0
 80071fc:	50a3      	str	r3, [r4, r2]
 80071fe:	e7c9      	b.n	8007194 <_malloc_r+0x20>
 8007200:	4622      	mov	r2, r4
 8007202:	6864      	ldr	r4, [r4, #4]
 8007204:	e7cc      	b.n	80071a0 <_malloc_r+0x2c>
 8007206:	1cc4      	adds	r4, r0, #3
 8007208:	f024 0403 	bic.w	r4, r4, #3
 800720c:	42a0      	cmp	r0, r4
 800720e:	d0e3      	beq.n	80071d8 <_malloc_r+0x64>
 8007210:	1a21      	subs	r1, r4, r0
 8007212:	4630      	mov	r0, r6
 8007214:	f000 f808 	bl	8007228 <_sbrk_r>
 8007218:	3001      	adds	r0, #1
 800721a:	d1dd      	bne.n	80071d8 <_malloc_r+0x64>
 800721c:	e7cf      	b.n	80071be <_malloc_r+0x4a>
 800721e:	bf00      	nop
 8007220:	20001508 	.word	0x20001508
 8007224:	2000150c 	.word	0x2000150c

08007228 <_sbrk_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	4d06      	ldr	r5, [pc, #24]	; (8007244 <_sbrk_r+0x1c>)
 800722c:	2300      	movs	r3, #0
 800722e:	4604      	mov	r4, r0
 8007230:	4608      	mov	r0, r1
 8007232:	602b      	str	r3, [r5, #0]
 8007234:	f7fa fc84 	bl	8001b40 <_sbrk>
 8007238:	1c43      	adds	r3, r0, #1
 800723a:	d102      	bne.n	8007242 <_sbrk_r+0x1a>
 800723c:	682b      	ldr	r3, [r5, #0]
 800723e:	b103      	cbz	r3, 8007242 <_sbrk_r+0x1a>
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	20001bdc 	.word	0x20001bdc

08007248 <__assert_func>:
 8007248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800724a:	4614      	mov	r4, r2
 800724c:	461a      	mov	r2, r3
 800724e:	4b09      	ldr	r3, [pc, #36]	; (8007274 <__assert_func+0x2c>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4605      	mov	r5, r0
 8007254:	68d8      	ldr	r0, [r3, #12]
 8007256:	b14c      	cbz	r4, 800726c <__assert_func+0x24>
 8007258:	4b07      	ldr	r3, [pc, #28]	; (8007278 <__assert_func+0x30>)
 800725a:	9100      	str	r1, [sp, #0]
 800725c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007260:	4906      	ldr	r1, [pc, #24]	; (800727c <__assert_func+0x34>)
 8007262:	462b      	mov	r3, r5
 8007264:	f000 f80e 	bl	8007284 <fiprintf>
 8007268:	f000 fa64 	bl	8007734 <abort>
 800726c:	4b04      	ldr	r3, [pc, #16]	; (8007280 <__assert_func+0x38>)
 800726e:	461c      	mov	r4, r3
 8007270:	e7f3      	b.n	800725a <__assert_func+0x12>
 8007272:	bf00      	nop
 8007274:	2000000c 	.word	0x2000000c
 8007278:	0801b0a4 	.word	0x0801b0a4
 800727c:	0801b0b1 	.word	0x0801b0b1
 8007280:	0801b0df 	.word	0x0801b0df

08007284 <fiprintf>:
 8007284:	b40e      	push	{r1, r2, r3}
 8007286:	b503      	push	{r0, r1, lr}
 8007288:	4601      	mov	r1, r0
 800728a:	ab03      	add	r3, sp, #12
 800728c:	4805      	ldr	r0, [pc, #20]	; (80072a4 <fiprintf+0x20>)
 800728e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007292:	6800      	ldr	r0, [r0, #0]
 8007294:	9301      	str	r3, [sp, #4]
 8007296:	f000 f84f 	bl	8007338 <_vfiprintf_r>
 800729a:	b002      	add	sp, #8
 800729c:	f85d eb04 	ldr.w	lr, [sp], #4
 80072a0:	b003      	add	sp, #12
 80072a2:	4770      	bx	lr
 80072a4:	2000000c 	.word	0x2000000c

080072a8 <__ascii_mbtowc>:
 80072a8:	b082      	sub	sp, #8
 80072aa:	b901      	cbnz	r1, 80072ae <__ascii_mbtowc+0x6>
 80072ac:	a901      	add	r1, sp, #4
 80072ae:	b142      	cbz	r2, 80072c2 <__ascii_mbtowc+0x1a>
 80072b0:	b14b      	cbz	r3, 80072c6 <__ascii_mbtowc+0x1e>
 80072b2:	7813      	ldrb	r3, [r2, #0]
 80072b4:	600b      	str	r3, [r1, #0]
 80072b6:	7812      	ldrb	r2, [r2, #0]
 80072b8:	1e10      	subs	r0, r2, #0
 80072ba:	bf18      	it	ne
 80072bc:	2001      	movne	r0, #1
 80072be:	b002      	add	sp, #8
 80072c0:	4770      	bx	lr
 80072c2:	4610      	mov	r0, r2
 80072c4:	e7fb      	b.n	80072be <__ascii_mbtowc+0x16>
 80072c6:	f06f 0001 	mvn.w	r0, #1
 80072ca:	e7f8      	b.n	80072be <__ascii_mbtowc+0x16>

080072cc <__malloc_lock>:
 80072cc:	4801      	ldr	r0, [pc, #4]	; (80072d4 <__malloc_lock+0x8>)
 80072ce:	f000 bbf1 	b.w	8007ab4 <__retarget_lock_acquire_recursive>
 80072d2:	bf00      	nop
 80072d4:	20001be4 	.word	0x20001be4

080072d8 <__malloc_unlock>:
 80072d8:	4801      	ldr	r0, [pc, #4]	; (80072e0 <__malloc_unlock+0x8>)
 80072da:	f000 bbec 	b.w	8007ab6 <__retarget_lock_release_recursive>
 80072de:	bf00      	nop
 80072e0:	20001be4 	.word	0x20001be4

080072e4 <__sfputc_r>:
 80072e4:	6893      	ldr	r3, [r2, #8]
 80072e6:	3b01      	subs	r3, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	b410      	push	{r4}
 80072ec:	6093      	str	r3, [r2, #8]
 80072ee:	da08      	bge.n	8007302 <__sfputc_r+0x1e>
 80072f0:	6994      	ldr	r4, [r2, #24]
 80072f2:	42a3      	cmp	r3, r4
 80072f4:	db01      	blt.n	80072fa <__sfputc_r+0x16>
 80072f6:	290a      	cmp	r1, #10
 80072f8:	d103      	bne.n	8007302 <__sfputc_r+0x1e>
 80072fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072fe:	f000 b94b 	b.w	8007598 <__swbuf_r>
 8007302:	6813      	ldr	r3, [r2, #0]
 8007304:	1c58      	adds	r0, r3, #1
 8007306:	6010      	str	r0, [r2, #0]
 8007308:	7019      	strb	r1, [r3, #0]
 800730a:	4608      	mov	r0, r1
 800730c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007310:	4770      	bx	lr

08007312 <__sfputs_r>:
 8007312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007314:	4606      	mov	r6, r0
 8007316:	460f      	mov	r7, r1
 8007318:	4614      	mov	r4, r2
 800731a:	18d5      	adds	r5, r2, r3
 800731c:	42ac      	cmp	r4, r5
 800731e:	d101      	bne.n	8007324 <__sfputs_r+0x12>
 8007320:	2000      	movs	r0, #0
 8007322:	e007      	b.n	8007334 <__sfputs_r+0x22>
 8007324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007328:	463a      	mov	r2, r7
 800732a:	4630      	mov	r0, r6
 800732c:	f7ff ffda 	bl	80072e4 <__sfputc_r>
 8007330:	1c43      	adds	r3, r0, #1
 8007332:	d1f3      	bne.n	800731c <__sfputs_r+0xa>
 8007334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007338 <_vfiprintf_r>:
 8007338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800733c:	460d      	mov	r5, r1
 800733e:	b09d      	sub	sp, #116	; 0x74
 8007340:	4614      	mov	r4, r2
 8007342:	4698      	mov	r8, r3
 8007344:	4606      	mov	r6, r0
 8007346:	b118      	cbz	r0, 8007350 <_vfiprintf_r+0x18>
 8007348:	6983      	ldr	r3, [r0, #24]
 800734a:	b90b      	cbnz	r3, 8007350 <_vfiprintf_r+0x18>
 800734c:	f000 fb14 	bl	8007978 <__sinit>
 8007350:	4b89      	ldr	r3, [pc, #548]	; (8007578 <_vfiprintf_r+0x240>)
 8007352:	429d      	cmp	r5, r3
 8007354:	d11b      	bne.n	800738e <_vfiprintf_r+0x56>
 8007356:	6875      	ldr	r5, [r6, #4]
 8007358:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800735a:	07d9      	lsls	r1, r3, #31
 800735c:	d405      	bmi.n	800736a <_vfiprintf_r+0x32>
 800735e:	89ab      	ldrh	r3, [r5, #12]
 8007360:	059a      	lsls	r2, r3, #22
 8007362:	d402      	bmi.n	800736a <_vfiprintf_r+0x32>
 8007364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007366:	f000 fba5 	bl	8007ab4 <__retarget_lock_acquire_recursive>
 800736a:	89ab      	ldrh	r3, [r5, #12]
 800736c:	071b      	lsls	r3, r3, #28
 800736e:	d501      	bpl.n	8007374 <_vfiprintf_r+0x3c>
 8007370:	692b      	ldr	r3, [r5, #16]
 8007372:	b9eb      	cbnz	r3, 80073b0 <_vfiprintf_r+0x78>
 8007374:	4629      	mov	r1, r5
 8007376:	4630      	mov	r0, r6
 8007378:	f000 f96e 	bl	8007658 <__swsetup_r>
 800737c:	b1c0      	cbz	r0, 80073b0 <_vfiprintf_r+0x78>
 800737e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007380:	07dc      	lsls	r4, r3, #31
 8007382:	d50e      	bpl.n	80073a2 <_vfiprintf_r+0x6a>
 8007384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007388:	b01d      	add	sp, #116	; 0x74
 800738a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800738e:	4b7b      	ldr	r3, [pc, #492]	; (800757c <_vfiprintf_r+0x244>)
 8007390:	429d      	cmp	r5, r3
 8007392:	d101      	bne.n	8007398 <_vfiprintf_r+0x60>
 8007394:	68b5      	ldr	r5, [r6, #8]
 8007396:	e7df      	b.n	8007358 <_vfiprintf_r+0x20>
 8007398:	4b79      	ldr	r3, [pc, #484]	; (8007580 <_vfiprintf_r+0x248>)
 800739a:	429d      	cmp	r5, r3
 800739c:	bf08      	it	eq
 800739e:	68f5      	ldreq	r5, [r6, #12]
 80073a0:	e7da      	b.n	8007358 <_vfiprintf_r+0x20>
 80073a2:	89ab      	ldrh	r3, [r5, #12]
 80073a4:	0598      	lsls	r0, r3, #22
 80073a6:	d4ed      	bmi.n	8007384 <_vfiprintf_r+0x4c>
 80073a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073aa:	f000 fb84 	bl	8007ab6 <__retarget_lock_release_recursive>
 80073ae:	e7e9      	b.n	8007384 <_vfiprintf_r+0x4c>
 80073b0:	2300      	movs	r3, #0
 80073b2:	9309      	str	r3, [sp, #36]	; 0x24
 80073b4:	2320      	movs	r3, #32
 80073b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80073be:	2330      	movs	r3, #48	; 0x30
 80073c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007584 <_vfiprintf_r+0x24c>
 80073c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073c8:	f04f 0901 	mov.w	r9, #1
 80073cc:	4623      	mov	r3, r4
 80073ce:	469a      	mov	sl, r3
 80073d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073d4:	b10a      	cbz	r2, 80073da <_vfiprintf_r+0xa2>
 80073d6:	2a25      	cmp	r2, #37	; 0x25
 80073d8:	d1f9      	bne.n	80073ce <_vfiprintf_r+0x96>
 80073da:	ebba 0b04 	subs.w	fp, sl, r4
 80073de:	d00b      	beq.n	80073f8 <_vfiprintf_r+0xc0>
 80073e0:	465b      	mov	r3, fp
 80073e2:	4622      	mov	r2, r4
 80073e4:	4629      	mov	r1, r5
 80073e6:	4630      	mov	r0, r6
 80073e8:	f7ff ff93 	bl	8007312 <__sfputs_r>
 80073ec:	3001      	adds	r0, #1
 80073ee:	f000 80aa 	beq.w	8007546 <_vfiprintf_r+0x20e>
 80073f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073f4:	445a      	add	r2, fp
 80073f6:	9209      	str	r2, [sp, #36]	; 0x24
 80073f8:	f89a 3000 	ldrb.w	r3, [sl]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 80a2 	beq.w	8007546 <_vfiprintf_r+0x20e>
 8007402:	2300      	movs	r3, #0
 8007404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007408:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800740c:	f10a 0a01 	add.w	sl, sl, #1
 8007410:	9304      	str	r3, [sp, #16]
 8007412:	9307      	str	r3, [sp, #28]
 8007414:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007418:	931a      	str	r3, [sp, #104]	; 0x68
 800741a:	4654      	mov	r4, sl
 800741c:	2205      	movs	r2, #5
 800741e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007422:	4858      	ldr	r0, [pc, #352]	; (8007584 <_vfiprintf_r+0x24c>)
 8007424:	f7f8 fee4 	bl	80001f0 <memchr>
 8007428:	9a04      	ldr	r2, [sp, #16]
 800742a:	b9d8      	cbnz	r0, 8007464 <_vfiprintf_r+0x12c>
 800742c:	06d1      	lsls	r1, r2, #27
 800742e:	bf44      	itt	mi
 8007430:	2320      	movmi	r3, #32
 8007432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007436:	0713      	lsls	r3, r2, #28
 8007438:	bf44      	itt	mi
 800743a:	232b      	movmi	r3, #43	; 0x2b
 800743c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007440:	f89a 3000 	ldrb.w	r3, [sl]
 8007444:	2b2a      	cmp	r3, #42	; 0x2a
 8007446:	d015      	beq.n	8007474 <_vfiprintf_r+0x13c>
 8007448:	9a07      	ldr	r2, [sp, #28]
 800744a:	4654      	mov	r4, sl
 800744c:	2000      	movs	r0, #0
 800744e:	f04f 0c0a 	mov.w	ip, #10
 8007452:	4621      	mov	r1, r4
 8007454:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007458:	3b30      	subs	r3, #48	; 0x30
 800745a:	2b09      	cmp	r3, #9
 800745c:	d94e      	bls.n	80074fc <_vfiprintf_r+0x1c4>
 800745e:	b1b0      	cbz	r0, 800748e <_vfiprintf_r+0x156>
 8007460:	9207      	str	r2, [sp, #28]
 8007462:	e014      	b.n	800748e <_vfiprintf_r+0x156>
 8007464:	eba0 0308 	sub.w	r3, r0, r8
 8007468:	fa09 f303 	lsl.w	r3, r9, r3
 800746c:	4313      	orrs	r3, r2
 800746e:	9304      	str	r3, [sp, #16]
 8007470:	46a2      	mov	sl, r4
 8007472:	e7d2      	b.n	800741a <_vfiprintf_r+0xe2>
 8007474:	9b03      	ldr	r3, [sp, #12]
 8007476:	1d19      	adds	r1, r3, #4
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	9103      	str	r1, [sp, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	bfbb      	ittet	lt
 8007480:	425b      	neglt	r3, r3
 8007482:	f042 0202 	orrlt.w	r2, r2, #2
 8007486:	9307      	strge	r3, [sp, #28]
 8007488:	9307      	strlt	r3, [sp, #28]
 800748a:	bfb8      	it	lt
 800748c:	9204      	strlt	r2, [sp, #16]
 800748e:	7823      	ldrb	r3, [r4, #0]
 8007490:	2b2e      	cmp	r3, #46	; 0x2e
 8007492:	d10c      	bne.n	80074ae <_vfiprintf_r+0x176>
 8007494:	7863      	ldrb	r3, [r4, #1]
 8007496:	2b2a      	cmp	r3, #42	; 0x2a
 8007498:	d135      	bne.n	8007506 <_vfiprintf_r+0x1ce>
 800749a:	9b03      	ldr	r3, [sp, #12]
 800749c:	1d1a      	adds	r2, r3, #4
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	9203      	str	r2, [sp, #12]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	bfb8      	it	lt
 80074a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80074aa:	3402      	adds	r4, #2
 80074ac:	9305      	str	r3, [sp, #20]
 80074ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007594 <_vfiprintf_r+0x25c>
 80074b2:	7821      	ldrb	r1, [r4, #0]
 80074b4:	2203      	movs	r2, #3
 80074b6:	4650      	mov	r0, sl
 80074b8:	f7f8 fe9a 	bl	80001f0 <memchr>
 80074bc:	b140      	cbz	r0, 80074d0 <_vfiprintf_r+0x198>
 80074be:	2340      	movs	r3, #64	; 0x40
 80074c0:	eba0 000a 	sub.w	r0, r0, sl
 80074c4:	fa03 f000 	lsl.w	r0, r3, r0
 80074c8:	9b04      	ldr	r3, [sp, #16]
 80074ca:	4303      	orrs	r3, r0
 80074cc:	3401      	adds	r4, #1
 80074ce:	9304      	str	r3, [sp, #16]
 80074d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074d4:	482c      	ldr	r0, [pc, #176]	; (8007588 <_vfiprintf_r+0x250>)
 80074d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074da:	2206      	movs	r2, #6
 80074dc:	f7f8 fe88 	bl	80001f0 <memchr>
 80074e0:	2800      	cmp	r0, #0
 80074e2:	d03f      	beq.n	8007564 <_vfiprintf_r+0x22c>
 80074e4:	4b29      	ldr	r3, [pc, #164]	; (800758c <_vfiprintf_r+0x254>)
 80074e6:	bb1b      	cbnz	r3, 8007530 <_vfiprintf_r+0x1f8>
 80074e8:	9b03      	ldr	r3, [sp, #12]
 80074ea:	3307      	adds	r3, #7
 80074ec:	f023 0307 	bic.w	r3, r3, #7
 80074f0:	3308      	adds	r3, #8
 80074f2:	9303      	str	r3, [sp, #12]
 80074f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074f6:	443b      	add	r3, r7
 80074f8:	9309      	str	r3, [sp, #36]	; 0x24
 80074fa:	e767      	b.n	80073cc <_vfiprintf_r+0x94>
 80074fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007500:	460c      	mov	r4, r1
 8007502:	2001      	movs	r0, #1
 8007504:	e7a5      	b.n	8007452 <_vfiprintf_r+0x11a>
 8007506:	2300      	movs	r3, #0
 8007508:	3401      	adds	r4, #1
 800750a:	9305      	str	r3, [sp, #20]
 800750c:	4619      	mov	r1, r3
 800750e:	f04f 0c0a 	mov.w	ip, #10
 8007512:	4620      	mov	r0, r4
 8007514:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007518:	3a30      	subs	r2, #48	; 0x30
 800751a:	2a09      	cmp	r2, #9
 800751c:	d903      	bls.n	8007526 <_vfiprintf_r+0x1ee>
 800751e:	2b00      	cmp	r3, #0
 8007520:	d0c5      	beq.n	80074ae <_vfiprintf_r+0x176>
 8007522:	9105      	str	r1, [sp, #20]
 8007524:	e7c3      	b.n	80074ae <_vfiprintf_r+0x176>
 8007526:	fb0c 2101 	mla	r1, ip, r1, r2
 800752a:	4604      	mov	r4, r0
 800752c:	2301      	movs	r3, #1
 800752e:	e7f0      	b.n	8007512 <_vfiprintf_r+0x1da>
 8007530:	ab03      	add	r3, sp, #12
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	462a      	mov	r2, r5
 8007536:	4b16      	ldr	r3, [pc, #88]	; (8007590 <_vfiprintf_r+0x258>)
 8007538:	a904      	add	r1, sp, #16
 800753a:	4630      	mov	r0, r6
 800753c:	f7fd ffee 	bl	800551c <_printf_float>
 8007540:	4607      	mov	r7, r0
 8007542:	1c78      	adds	r0, r7, #1
 8007544:	d1d6      	bne.n	80074f4 <_vfiprintf_r+0x1bc>
 8007546:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007548:	07d9      	lsls	r1, r3, #31
 800754a:	d405      	bmi.n	8007558 <_vfiprintf_r+0x220>
 800754c:	89ab      	ldrh	r3, [r5, #12]
 800754e:	059a      	lsls	r2, r3, #22
 8007550:	d402      	bmi.n	8007558 <_vfiprintf_r+0x220>
 8007552:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007554:	f000 faaf 	bl	8007ab6 <__retarget_lock_release_recursive>
 8007558:	89ab      	ldrh	r3, [r5, #12]
 800755a:	065b      	lsls	r3, r3, #25
 800755c:	f53f af12 	bmi.w	8007384 <_vfiprintf_r+0x4c>
 8007560:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007562:	e711      	b.n	8007388 <_vfiprintf_r+0x50>
 8007564:	ab03      	add	r3, sp, #12
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	462a      	mov	r2, r5
 800756a:	4b09      	ldr	r3, [pc, #36]	; (8007590 <_vfiprintf_r+0x258>)
 800756c:	a904      	add	r1, sp, #16
 800756e:	4630      	mov	r0, r6
 8007570:	f7fe fa78 	bl	8005a64 <_printf_i>
 8007574:	e7e4      	b.n	8007540 <_vfiprintf_r+0x208>
 8007576:	bf00      	nop
 8007578:	0801b21c 	.word	0x0801b21c
 800757c:	0801b23c 	.word	0x0801b23c
 8007580:	0801b1fc 	.word	0x0801b1fc
 8007584:	0801b0ea 	.word	0x0801b0ea
 8007588:	0801b0f4 	.word	0x0801b0f4
 800758c:	0800551d 	.word	0x0800551d
 8007590:	08007313 	.word	0x08007313
 8007594:	0801b0f0 	.word	0x0801b0f0

08007598 <__swbuf_r>:
 8007598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759a:	460e      	mov	r6, r1
 800759c:	4614      	mov	r4, r2
 800759e:	4605      	mov	r5, r0
 80075a0:	b118      	cbz	r0, 80075aa <__swbuf_r+0x12>
 80075a2:	6983      	ldr	r3, [r0, #24]
 80075a4:	b90b      	cbnz	r3, 80075aa <__swbuf_r+0x12>
 80075a6:	f000 f9e7 	bl	8007978 <__sinit>
 80075aa:	4b21      	ldr	r3, [pc, #132]	; (8007630 <__swbuf_r+0x98>)
 80075ac:	429c      	cmp	r4, r3
 80075ae:	d12b      	bne.n	8007608 <__swbuf_r+0x70>
 80075b0:	686c      	ldr	r4, [r5, #4]
 80075b2:	69a3      	ldr	r3, [r4, #24]
 80075b4:	60a3      	str	r3, [r4, #8]
 80075b6:	89a3      	ldrh	r3, [r4, #12]
 80075b8:	071a      	lsls	r2, r3, #28
 80075ba:	d52f      	bpl.n	800761c <__swbuf_r+0x84>
 80075bc:	6923      	ldr	r3, [r4, #16]
 80075be:	b36b      	cbz	r3, 800761c <__swbuf_r+0x84>
 80075c0:	6923      	ldr	r3, [r4, #16]
 80075c2:	6820      	ldr	r0, [r4, #0]
 80075c4:	1ac0      	subs	r0, r0, r3
 80075c6:	6963      	ldr	r3, [r4, #20]
 80075c8:	b2f6      	uxtb	r6, r6
 80075ca:	4283      	cmp	r3, r0
 80075cc:	4637      	mov	r7, r6
 80075ce:	dc04      	bgt.n	80075da <__swbuf_r+0x42>
 80075d0:	4621      	mov	r1, r4
 80075d2:	4628      	mov	r0, r5
 80075d4:	f000 f93c 	bl	8007850 <_fflush_r>
 80075d8:	bb30      	cbnz	r0, 8007628 <__swbuf_r+0x90>
 80075da:	68a3      	ldr	r3, [r4, #8]
 80075dc:	3b01      	subs	r3, #1
 80075de:	60a3      	str	r3, [r4, #8]
 80075e0:	6823      	ldr	r3, [r4, #0]
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	6022      	str	r2, [r4, #0]
 80075e6:	701e      	strb	r6, [r3, #0]
 80075e8:	6963      	ldr	r3, [r4, #20]
 80075ea:	3001      	adds	r0, #1
 80075ec:	4283      	cmp	r3, r0
 80075ee:	d004      	beq.n	80075fa <__swbuf_r+0x62>
 80075f0:	89a3      	ldrh	r3, [r4, #12]
 80075f2:	07db      	lsls	r3, r3, #31
 80075f4:	d506      	bpl.n	8007604 <__swbuf_r+0x6c>
 80075f6:	2e0a      	cmp	r6, #10
 80075f8:	d104      	bne.n	8007604 <__swbuf_r+0x6c>
 80075fa:	4621      	mov	r1, r4
 80075fc:	4628      	mov	r0, r5
 80075fe:	f000 f927 	bl	8007850 <_fflush_r>
 8007602:	b988      	cbnz	r0, 8007628 <__swbuf_r+0x90>
 8007604:	4638      	mov	r0, r7
 8007606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007608:	4b0a      	ldr	r3, [pc, #40]	; (8007634 <__swbuf_r+0x9c>)
 800760a:	429c      	cmp	r4, r3
 800760c:	d101      	bne.n	8007612 <__swbuf_r+0x7a>
 800760e:	68ac      	ldr	r4, [r5, #8]
 8007610:	e7cf      	b.n	80075b2 <__swbuf_r+0x1a>
 8007612:	4b09      	ldr	r3, [pc, #36]	; (8007638 <__swbuf_r+0xa0>)
 8007614:	429c      	cmp	r4, r3
 8007616:	bf08      	it	eq
 8007618:	68ec      	ldreq	r4, [r5, #12]
 800761a:	e7ca      	b.n	80075b2 <__swbuf_r+0x1a>
 800761c:	4621      	mov	r1, r4
 800761e:	4628      	mov	r0, r5
 8007620:	f000 f81a 	bl	8007658 <__swsetup_r>
 8007624:	2800      	cmp	r0, #0
 8007626:	d0cb      	beq.n	80075c0 <__swbuf_r+0x28>
 8007628:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800762c:	e7ea      	b.n	8007604 <__swbuf_r+0x6c>
 800762e:	bf00      	nop
 8007630:	0801b21c 	.word	0x0801b21c
 8007634:	0801b23c 	.word	0x0801b23c
 8007638:	0801b1fc 	.word	0x0801b1fc

0800763c <__ascii_wctomb>:
 800763c:	b149      	cbz	r1, 8007652 <__ascii_wctomb+0x16>
 800763e:	2aff      	cmp	r2, #255	; 0xff
 8007640:	bf85      	ittet	hi
 8007642:	238a      	movhi	r3, #138	; 0x8a
 8007644:	6003      	strhi	r3, [r0, #0]
 8007646:	700a      	strbls	r2, [r1, #0]
 8007648:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800764c:	bf98      	it	ls
 800764e:	2001      	movls	r0, #1
 8007650:	4770      	bx	lr
 8007652:	4608      	mov	r0, r1
 8007654:	4770      	bx	lr
	...

08007658 <__swsetup_r>:
 8007658:	4b32      	ldr	r3, [pc, #200]	; (8007724 <__swsetup_r+0xcc>)
 800765a:	b570      	push	{r4, r5, r6, lr}
 800765c:	681d      	ldr	r5, [r3, #0]
 800765e:	4606      	mov	r6, r0
 8007660:	460c      	mov	r4, r1
 8007662:	b125      	cbz	r5, 800766e <__swsetup_r+0x16>
 8007664:	69ab      	ldr	r3, [r5, #24]
 8007666:	b913      	cbnz	r3, 800766e <__swsetup_r+0x16>
 8007668:	4628      	mov	r0, r5
 800766a:	f000 f985 	bl	8007978 <__sinit>
 800766e:	4b2e      	ldr	r3, [pc, #184]	; (8007728 <__swsetup_r+0xd0>)
 8007670:	429c      	cmp	r4, r3
 8007672:	d10f      	bne.n	8007694 <__swsetup_r+0x3c>
 8007674:	686c      	ldr	r4, [r5, #4]
 8007676:	89a3      	ldrh	r3, [r4, #12]
 8007678:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800767c:	0719      	lsls	r1, r3, #28
 800767e:	d42c      	bmi.n	80076da <__swsetup_r+0x82>
 8007680:	06dd      	lsls	r5, r3, #27
 8007682:	d411      	bmi.n	80076a8 <__swsetup_r+0x50>
 8007684:	2309      	movs	r3, #9
 8007686:	6033      	str	r3, [r6, #0]
 8007688:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800768c:	81a3      	strh	r3, [r4, #12]
 800768e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007692:	e03e      	b.n	8007712 <__swsetup_r+0xba>
 8007694:	4b25      	ldr	r3, [pc, #148]	; (800772c <__swsetup_r+0xd4>)
 8007696:	429c      	cmp	r4, r3
 8007698:	d101      	bne.n	800769e <__swsetup_r+0x46>
 800769a:	68ac      	ldr	r4, [r5, #8]
 800769c:	e7eb      	b.n	8007676 <__swsetup_r+0x1e>
 800769e:	4b24      	ldr	r3, [pc, #144]	; (8007730 <__swsetup_r+0xd8>)
 80076a0:	429c      	cmp	r4, r3
 80076a2:	bf08      	it	eq
 80076a4:	68ec      	ldreq	r4, [r5, #12]
 80076a6:	e7e6      	b.n	8007676 <__swsetup_r+0x1e>
 80076a8:	0758      	lsls	r0, r3, #29
 80076aa:	d512      	bpl.n	80076d2 <__swsetup_r+0x7a>
 80076ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076ae:	b141      	cbz	r1, 80076c2 <__swsetup_r+0x6a>
 80076b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076b4:	4299      	cmp	r1, r3
 80076b6:	d002      	beq.n	80076be <__swsetup_r+0x66>
 80076b8:	4630      	mov	r0, r6
 80076ba:	f7ff fd0b 	bl	80070d4 <_free_r>
 80076be:	2300      	movs	r3, #0
 80076c0:	6363      	str	r3, [r4, #52]	; 0x34
 80076c2:	89a3      	ldrh	r3, [r4, #12]
 80076c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076c8:	81a3      	strh	r3, [r4, #12]
 80076ca:	2300      	movs	r3, #0
 80076cc:	6063      	str	r3, [r4, #4]
 80076ce:	6923      	ldr	r3, [r4, #16]
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	89a3      	ldrh	r3, [r4, #12]
 80076d4:	f043 0308 	orr.w	r3, r3, #8
 80076d8:	81a3      	strh	r3, [r4, #12]
 80076da:	6923      	ldr	r3, [r4, #16]
 80076dc:	b94b      	cbnz	r3, 80076f2 <__swsetup_r+0x9a>
 80076de:	89a3      	ldrh	r3, [r4, #12]
 80076e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80076e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076e8:	d003      	beq.n	80076f2 <__swsetup_r+0x9a>
 80076ea:	4621      	mov	r1, r4
 80076ec:	4630      	mov	r0, r6
 80076ee:	f000 fa07 	bl	8007b00 <__smakebuf_r>
 80076f2:	89a0      	ldrh	r0, [r4, #12]
 80076f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076f8:	f010 0301 	ands.w	r3, r0, #1
 80076fc:	d00a      	beq.n	8007714 <__swsetup_r+0xbc>
 80076fe:	2300      	movs	r3, #0
 8007700:	60a3      	str	r3, [r4, #8]
 8007702:	6963      	ldr	r3, [r4, #20]
 8007704:	425b      	negs	r3, r3
 8007706:	61a3      	str	r3, [r4, #24]
 8007708:	6923      	ldr	r3, [r4, #16]
 800770a:	b943      	cbnz	r3, 800771e <__swsetup_r+0xc6>
 800770c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007710:	d1ba      	bne.n	8007688 <__swsetup_r+0x30>
 8007712:	bd70      	pop	{r4, r5, r6, pc}
 8007714:	0781      	lsls	r1, r0, #30
 8007716:	bf58      	it	pl
 8007718:	6963      	ldrpl	r3, [r4, #20]
 800771a:	60a3      	str	r3, [r4, #8]
 800771c:	e7f4      	b.n	8007708 <__swsetup_r+0xb0>
 800771e:	2000      	movs	r0, #0
 8007720:	e7f7      	b.n	8007712 <__swsetup_r+0xba>
 8007722:	bf00      	nop
 8007724:	2000000c 	.word	0x2000000c
 8007728:	0801b21c 	.word	0x0801b21c
 800772c:	0801b23c 	.word	0x0801b23c
 8007730:	0801b1fc 	.word	0x0801b1fc

08007734 <abort>:
 8007734:	b508      	push	{r3, lr}
 8007736:	2006      	movs	r0, #6
 8007738:	f000 fa4a 	bl	8007bd0 <raise>
 800773c:	2001      	movs	r0, #1
 800773e:	f7fa f987 	bl	8001a50 <_exit>
	...

08007744 <__sflush_r>:
 8007744:	898a      	ldrh	r2, [r1, #12]
 8007746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800774a:	4605      	mov	r5, r0
 800774c:	0710      	lsls	r0, r2, #28
 800774e:	460c      	mov	r4, r1
 8007750:	d458      	bmi.n	8007804 <__sflush_r+0xc0>
 8007752:	684b      	ldr	r3, [r1, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	dc05      	bgt.n	8007764 <__sflush_r+0x20>
 8007758:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800775a:	2b00      	cmp	r3, #0
 800775c:	dc02      	bgt.n	8007764 <__sflush_r+0x20>
 800775e:	2000      	movs	r0, #0
 8007760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007764:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007766:	2e00      	cmp	r6, #0
 8007768:	d0f9      	beq.n	800775e <__sflush_r+0x1a>
 800776a:	2300      	movs	r3, #0
 800776c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007770:	682f      	ldr	r7, [r5, #0]
 8007772:	602b      	str	r3, [r5, #0]
 8007774:	d032      	beq.n	80077dc <__sflush_r+0x98>
 8007776:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007778:	89a3      	ldrh	r3, [r4, #12]
 800777a:	075a      	lsls	r2, r3, #29
 800777c:	d505      	bpl.n	800778a <__sflush_r+0x46>
 800777e:	6863      	ldr	r3, [r4, #4]
 8007780:	1ac0      	subs	r0, r0, r3
 8007782:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007784:	b10b      	cbz	r3, 800778a <__sflush_r+0x46>
 8007786:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007788:	1ac0      	subs	r0, r0, r3
 800778a:	2300      	movs	r3, #0
 800778c:	4602      	mov	r2, r0
 800778e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007790:	6a21      	ldr	r1, [r4, #32]
 8007792:	4628      	mov	r0, r5
 8007794:	47b0      	blx	r6
 8007796:	1c43      	adds	r3, r0, #1
 8007798:	89a3      	ldrh	r3, [r4, #12]
 800779a:	d106      	bne.n	80077aa <__sflush_r+0x66>
 800779c:	6829      	ldr	r1, [r5, #0]
 800779e:	291d      	cmp	r1, #29
 80077a0:	d82c      	bhi.n	80077fc <__sflush_r+0xb8>
 80077a2:	4a2a      	ldr	r2, [pc, #168]	; (800784c <__sflush_r+0x108>)
 80077a4:	40ca      	lsrs	r2, r1
 80077a6:	07d6      	lsls	r6, r2, #31
 80077a8:	d528      	bpl.n	80077fc <__sflush_r+0xb8>
 80077aa:	2200      	movs	r2, #0
 80077ac:	6062      	str	r2, [r4, #4]
 80077ae:	04d9      	lsls	r1, r3, #19
 80077b0:	6922      	ldr	r2, [r4, #16]
 80077b2:	6022      	str	r2, [r4, #0]
 80077b4:	d504      	bpl.n	80077c0 <__sflush_r+0x7c>
 80077b6:	1c42      	adds	r2, r0, #1
 80077b8:	d101      	bne.n	80077be <__sflush_r+0x7a>
 80077ba:	682b      	ldr	r3, [r5, #0]
 80077bc:	b903      	cbnz	r3, 80077c0 <__sflush_r+0x7c>
 80077be:	6560      	str	r0, [r4, #84]	; 0x54
 80077c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077c2:	602f      	str	r7, [r5, #0]
 80077c4:	2900      	cmp	r1, #0
 80077c6:	d0ca      	beq.n	800775e <__sflush_r+0x1a>
 80077c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077cc:	4299      	cmp	r1, r3
 80077ce:	d002      	beq.n	80077d6 <__sflush_r+0x92>
 80077d0:	4628      	mov	r0, r5
 80077d2:	f7ff fc7f 	bl	80070d4 <_free_r>
 80077d6:	2000      	movs	r0, #0
 80077d8:	6360      	str	r0, [r4, #52]	; 0x34
 80077da:	e7c1      	b.n	8007760 <__sflush_r+0x1c>
 80077dc:	6a21      	ldr	r1, [r4, #32]
 80077de:	2301      	movs	r3, #1
 80077e0:	4628      	mov	r0, r5
 80077e2:	47b0      	blx	r6
 80077e4:	1c41      	adds	r1, r0, #1
 80077e6:	d1c7      	bne.n	8007778 <__sflush_r+0x34>
 80077e8:	682b      	ldr	r3, [r5, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d0c4      	beq.n	8007778 <__sflush_r+0x34>
 80077ee:	2b1d      	cmp	r3, #29
 80077f0:	d001      	beq.n	80077f6 <__sflush_r+0xb2>
 80077f2:	2b16      	cmp	r3, #22
 80077f4:	d101      	bne.n	80077fa <__sflush_r+0xb6>
 80077f6:	602f      	str	r7, [r5, #0]
 80077f8:	e7b1      	b.n	800775e <__sflush_r+0x1a>
 80077fa:	89a3      	ldrh	r3, [r4, #12]
 80077fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007800:	81a3      	strh	r3, [r4, #12]
 8007802:	e7ad      	b.n	8007760 <__sflush_r+0x1c>
 8007804:	690f      	ldr	r7, [r1, #16]
 8007806:	2f00      	cmp	r7, #0
 8007808:	d0a9      	beq.n	800775e <__sflush_r+0x1a>
 800780a:	0793      	lsls	r3, r2, #30
 800780c:	680e      	ldr	r6, [r1, #0]
 800780e:	bf08      	it	eq
 8007810:	694b      	ldreq	r3, [r1, #20]
 8007812:	600f      	str	r7, [r1, #0]
 8007814:	bf18      	it	ne
 8007816:	2300      	movne	r3, #0
 8007818:	eba6 0807 	sub.w	r8, r6, r7
 800781c:	608b      	str	r3, [r1, #8]
 800781e:	f1b8 0f00 	cmp.w	r8, #0
 8007822:	dd9c      	ble.n	800775e <__sflush_r+0x1a>
 8007824:	6a21      	ldr	r1, [r4, #32]
 8007826:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007828:	4643      	mov	r3, r8
 800782a:	463a      	mov	r2, r7
 800782c:	4628      	mov	r0, r5
 800782e:	47b0      	blx	r6
 8007830:	2800      	cmp	r0, #0
 8007832:	dc06      	bgt.n	8007842 <__sflush_r+0xfe>
 8007834:	89a3      	ldrh	r3, [r4, #12]
 8007836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800783a:	81a3      	strh	r3, [r4, #12]
 800783c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007840:	e78e      	b.n	8007760 <__sflush_r+0x1c>
 8007842:	4407      	add	r7, r0
 8007844:	eba8 0800 	sub.w	r8, r8, r0
 8007848:	e7e9      	b.n	800781e <__sflush_r+0xda>
 800784a:	bf00      	nop
 800784c:	20400001 	.word	0x20400001

08007850 <_fflush_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	690b      	ldr	r3, [r1, #16]
 8007854:	4605      	mov	r5, r0
 8007856:	460c      	mov	r4, r1
 8007858:	b913      	cbnz	r3, 8007860 <_fflush_r+0x10>
 800785a:	2500      	movs	r5, #0
 800785c:	4628      	mov	r0, r5
 800785e:	bd38      	pop	{r3, r4, r5, pc}
 8007860:	b118      	cbz	r0, 800786a <_fflush_r+0x1a>
 8007862:	6983      	ldr	r3, [r0, #24]
 8007864:	b90b      	cbnz	r3, 800786a <_fflush_r+0x1a>
 8007866:	f000 f887 	bl	8007978 <__sinit>
 800786a:	4b14      	ldr	r3, [pc, #80]	; (80078bc <_fflush_r+0x6c>)
 800786c:	429c      	cmp	r4, r3
 800786e:	d11b      	bne.n	80078a8 <_fflush_r+0x58>
 8007870:	686c      	ldr	r4, [r5, #4]
 8007872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d0ef      	beq.n	800785a <_fflush_r+0xa>
 800787a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800787c:	07d0      	lsls	r0, r2, #31
 800787e:	d404      	bmi.n	800788a <_fflush_r+0x3a>
 8007880:	0599      	lsls	r1, r3, #22
 8007882:	d402      	bmi.n	800788a <_fflush_r+0x3a>
 8007884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007886:	f000 f915 	bl	8007ab4 <__retarget_lock_acquire_recursive>
 800788a:	4628      	mov	r0, r5
 800788c:	4621      	mov	r1, r4
 800788e:	f7ff ff59 	bl	8007744 <__sflush_r>
 8007892:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007894:	07da      	lsls	r2, r3, #31
 8007896:	4605      	mov	r5, r0
 8007898:	d4e0      	bmi.n	800785c <_fflush_r+0xc>
 800789a:	89a3      	ldrh	r3, [r4, #12]
 800789c:	059b      	lsls	r3, r3, #22
 800789e:	d4dd      	bmi.n	800785c <_fflush_r+0xc>
 80078a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078a2:	f000 f908 	bl	8007ab6 <__retarget_lock_release_recursive>
 80078a6:	e7d9      	b.n	800785c <_fflush_r+0xc>
 80078a8:	4b05      	ldr	r3, [pc, #20]	; (80078c0 <_fflush_r+0x70>)
 80078aa:	429c      	cmp	r4, r3
 80078ac:	d101      	bne.n	80078b2 <_fflush_r+0x62>
 80078ae:	68ac      	ldr	r4, [r5, #8]
 80078b0:	e7df      	b.n	8007872 <_fflush_r+0x22>
 80078b2:	4b04      	ldr	r3, [pc, #16]	; (80078c4 <_fflush_r+0x74>)
 80078b4:	429c      	cmp	r4, r3
 80078b6:	bf08      	it	eq
 80078b8:	68ec      	ldreq	r4, [r5, #12]
 80078ba:	e7da      	b.n	8007872 <_fflush_r+0x22>
 80078bc:	0801b21c 	.word	0x0801b21c
 80078c0:	0801b23c 	.word	0x0801b23c
 80078c4:	0801b1fc 	.word	0x0801b1fc

080078c8 <std>:
 80078c8:	2300      	movs	r3, #0
 80078ca:	b510      	push	{r4, lr}
 80078cc:	4604      	mov	r4, r0
 80078ce:	e9c0 3300 	strd	r3, r3, [r0]
 80078d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078d6:	6083      	str	r3, [r0, #8]
 80078d8:	8181      	strh	r1, [r0, #12]
 80078da:	6643      	str	r3, [r0, #100]	; 0x64
 80078dc:	81c2      	strh	r2, [r0, #14]
 80078de:	6183      	str	r3, [r0, #24]
 80078e0:	4619      	mov	r1, r3
 80078e2:	2208      	movs	r2, #8
 80078e4:	305c      	adds	r0, #92	; 0x5c
 80078e6:	f7fd fd71 	bl	80053cc <memset>
 80078ea:	4b05      	ldr	r3, [pc, #20]	; (8007900 <std+0x38>)
 80078ec:	6263      	str	r3, [r4, #36]	; 0x24
 80078ee:	4b05      	ldr	r3, [pc, #20]	; (8007904 <std+0x3c>)
 80078f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80078f2:	4b05      	ldr	r3, [pc, #20]	; (8007908 <std+0x40>)
 80078f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078f6:	4b05      	ldr	r3, [pc, #20]	; (800790c <std+0x44>)
 80078f8:	6224      	str	r4, [r4, #32]
 80078fa:	6323      	str	r3, [r4, #48]	; 0x30
 80078fc:	bd10      	pop	{r4, pc}
 80078fe:	bf00      	nop
 8007900:	08007c09 	.word	0x08007c09
 8007904:	08007c2b 	.word	0x08007c2b
 8007908:	08007c63 	.word	0x08007c63
 800790c:	08007c87 	.word	0x08007c87

08007910 <_cleanup_r>:
 8007910:	4901      	ldr	r1, [pc, #4]	; (8007918 <_cleanup_r+0x8>)
 8007912:	f000 b8af 	b.w	8007a74 <_fwalk_reent>
 8007916:	bf00      	nop
 8007918:	08007851 	.word	0x08007851

0800791c <__sfmoreglue>:
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	1e4a      	subs	r2, r1, #1
 8007920:	2568      	movs	r5, #104	; 0x68
 8007922:	4355      	muls	r5, r2
 8007924:	460e      	mov	r6, r1
 8007926:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800792a:	f7ff fc23 	bl	8007174 <_malloc_r>
 800792e:	4604      	mov	r4, r0
 8007930:	b140      	cbz	r0, 8007944 <__sfmoreglue+0x28>
 8007932:	2100      	movs	r1, #0
 8007934:	e9c0 1600 	strd	r1, r6, [r0]
 8007938:	300c      	adds	r0, #12
 800793a:	60a0      	str	r0, [r4, #8]
 800793c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007940:	f7fd fd44 	bl	80053cc <memset>
 8007944:	4620      	mov	r0, r4
 8007946:	bd70      	pop	{r4, r5, r6, pc}

08007948 <__sfp_lock_acquire>:
 8007948:	4801      	ldr	r0, [pc, #4]	; (8007950 <__sfp_lock_acquire+0x8>)
 800794a:	f000 b8b3 	b.w	8007ab4 <__retarget_lock_acquire_recursive>
 800794e:	bf00      	nop
 8007950:	20001be8 	.word	0x20001be8

08007954 <__sfp_lock_release>:
 8007954:	4801      	ldr	r0, [pc, #4]	; (800795c <__sfp_lock_release+0x8>)
 8007956:	f000 b8ae 	b.w	8007ab6 <__retarget_lock_release_recursive>
 800795a:	bf00      	nop
 800795c:	20001be8 	.word	0x20001be8

08007960 <__sinit_lock_acquire>:
 8007960:	4801      	ldr	r0, [pc, #4]	; (8007968 <__sinit_lock_acquire+0x8>)
 8007962:	f000 b8a7 	b.w	8007ab4 <__retarget_lock_acquire_recursive>
 8007966:	bf00      	nop
 8007968:	20001be3 	.word	0x20001be3

0800796c <__sinit_lock_release>:
 800796c:	4801      	ldr	r0, [pc, #4]	; (8007974 <__sinit_lock_release+0x8>)
 800796e:	f000 b8a2 	b.w	8007ab6 <__retarget_lock_release_recursive>
 8007972:	bf00      	nop
 8007974:	20001be3 	.word	0x20001be3

08007978 <__sinit>:
 8007978:	b510      	push	{r4, lr}
 800797a:	4604      	mov	r4, r0
 800797c:	f7ff fff0 	bl	8007960 <__sinit_lock_acquire>
 8007980:	69a3      	ldr	r3, [r4, #24]
 8007982:	b11b      	cbz	r3, 800798c <__sinit+0x14>
 8007984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007988:	f7ff bff0 	b.w	800796c <__sinit_lock_release>
 800798c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007990:	6523      	str	r3, [r4, #80]	; 0x50
 8007992:	4b13      	ldr	r3, [pc, #76]	; (80079e0 <__sinit+0x68>)
 8007994:	4a13      	ldr	r2, [pc, #76]	; (80079e4 <__sinit+0x6c>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	62a2      	str	r2, [r4, #40]	; 0x28
 800799a:	42a3      	cmp	r3, r4
 800799c:	bf04      	itt	eq
 800799e:	2301      	moveq	r3, #1
 80079a0:	61a3      	streq	r3, [r4, #24]
 80079a2:	4620      	mov	r0, r4
 80079a4:	f000 f820 	bl	80079e8 <__sfp>
 80079a8:	6060      	str	r0, [r4, #4]
 80079aa:	4620      	mov	r0, r4
 80079ac:	f000 f81c 	bl	80079e8 <__sfp>
 80079b0:	60a0      	str	r0, [r4, #8]
 80079b2:	4620      	mov	r0, r4
 80079b4:	f000 f818 	bl	80079e8 <__sfp>
 80079b8:	2200      	movs	r2, #0
 80079ba:	60e0      	str	r0, [r4, #12]
 80079bc:	2104      	movs	r1, #4
 80079be:	6860      	ldr	r0, [r4, #4]
 80079c0:	f7ff ff82 	bl	80078c8 <std>
 80079c4:	68a0      	ldr	r0, [r4, #8]
 80079c6:	2201      	movs	r2, #1
 80079c8:	2109      	movs	r1, #9
 80079ca:	f7ff ff7d 	bl	80078c8 <std>
 80079ce:	68e0      	ldr	r0, [r4, #12]
 80079d0:	2202      	movs	r2, #2
 80079d2:	2112      	movs	r1, #18
 80079d4:	f7ff ff78 	bl	80078c8 <std>
 80079d8:	2301      	movs	r3, #1
 80079da:	61a3      	str	r3, [r4, #24]
 80079dc:	e7d2      	b.n	8007984 <__sinit+0xc>
 80079de:	bf00      	nop
 80079e0:	0801ae78 	.word	0x0801ae78
 80079e4:	08007911 	.word	0x08007911

080079e8 <__sfp>:
 80079e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ea:	4607      	mov	r7, r0
 80079ec:	f7ff ffac 	bl	8007948 <__sfp_lock_acquire>
 80079f0:	4b1e      	ldr	r3, [pc, #120]	; (8007a6c <__sfp+0x84>)
 80079f2:	681e      	ldr	r6, [r3, #0]
 80079f4:	69b3      	ldr	r3, [r6, #24]
 80079f6:	b913      	cbnz	r3, 80079fe <__sfp+0x16>
 80079f8:	4630      	mov	r0, r6
 80079fa:	f7ff ffbd 	bl	8007978 <__sinit>
 80079fe:	3648      	adds	r6, #72	; 0x48
 8007a00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a04:	3b01      	subs	r3, #1
 8007a06:	d503      	bpl.n	8007a10 <__sfp+0x28>
 8007a08:	6833      	ldr	r3, [r6, #0]
 8007a0a:	b30b      	cbz	r3, 8007a50 <__sfp+0x68>
 8007a0c:	6836      	ldr	r6, [r6, #0]
 8007a0e:	e7f7      	b.n	8007a00 <__sfp+0x18>
 8007a10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a14:	b9d5      	cbnz	r5, 8007a4c <__sfp+0x64>
 8007a16:	4b16      	ldr	r3, [pc, #88]	; (8007a70 <__sfp+0x88>)
 8007a18:	60e3      	str	r3, [r4, #12]
 8007a1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a1e:	6665      	str	r5, [r4, #100]	; 0x64
 8007a20:	f000 f847 	bl	8007ab2 <__retarget_lock_init_recursive>
 8007a24:	f7ff ff96 	bl	8007954 <__sfp_lock_release>
 8007a28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a30:	6025      	str	r5, [r4, #0]
 8007a32:	61a5      	str	r5, [r4, #24]
 8007a34:	2208      	movs	r2, #8
 8007a36:	4629      	mov	r1, r5
 8007a38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a3c:	f7fd fcc6 	bl	80053cc <memset>
 8007a40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a48:	4620      	mov	r0, r4
 8007a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a4c:	3468      	adds	r4, #104	; 0x68
 8007a4e:	e7d9      	b.n	8007a04 <__sfp+0x1c>
 8007a50:	2104      	movs	r1, #4
 8007a52:	4638      	mov	r0, r7
 8007a54:	f7ff ff62 	bl	800791c <__sfmoreglue>
 8007a58:	4604      	mov	r4, r0
 8007a5a:	6030      	str	r0, [r6, #0]
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	d1d5      	bne.n	8007a0c <__sfp+0x24>
 8007a60:	f7ff ff78 	bl	8007954 <__sfp_lock_release>
 8007a64:	230c      	movs	r3, #12
 8007a66:	603b      	str	r3, [r7, #0]
 8007a68:	e7ee      	b.n	8007a48 <__sfp+0x60>
 8007a6a:	bf00      	nop
 8007a6c:	0801ae78 	.word	0x0801ae78
 8007a70:	ffff0001 	.word	0xffff0001

08007a74 <_fwalk_reent>:
 8007a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a78:	4606      	mov	r6, r0
 8007a7a:	4688      	mov	r8, r1
 8007a7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a80:	2700      	movs	r7, #0
 8007a82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a86:	f1b9 0901 	subs.w	r9, r9, #1
 8007a8a:	d505      	bpl.n	8007a98 <_fwalk_reent+0x24>
 8007a8c:	6824      	ldr	r4, [r4, #0]
 8007a8e:	2c00      	cmp	r4, #0
 8007a90:	d1f7      	bne.n	8007a82 <_fwalk_reent+0xe>
 8007a92:	4638      	mov	r0, r7
 8007a94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a98:	89ab      	ldrh	r3, [r5, #12]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d907      	bls.n	8007aae <_fwalk_reent+0x3a>
 8007a9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	d003      	beq.n	8007aae <_fwalk_reent+0x3a>
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	47c0      	blx	r8
 8007aac:	4307      	orrs	r7, r0
 8007aae:	3568      	adds	r5, #104	; 0x68
 8007ab0:	e7e9      	b.n	8007a86 <_fwalk_reent+0x12>

08007ab2 <__retarget_lock_init_recursive>:
 8007ab2:	4770      	bx	lr

08007ab4 <__retarget_lock_acquire_recursive>:
 8007ab4:	4770      	bx	lr

08007ab6 <__retarget_lock_release_recursive>:
 8007ab6:	4770      	bx	lr

08007ab8 <__swhatbuf_r>:
 8007ab8:	b570      	push	{r4, r5, r6, lr}
 8007aba:	460e      	mov	r6, r1
 8007abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac0:	2900      	cmp	r1, #0
 8007ac2:	b096      	sub	sp, #88	; 0x58
 8007ac4:	4614      	mov	r4, r2
 8007ac6:	461d      	mov	r5, r3
 8007ac8:	da07      	bge.n	8007ada <__swhatbuf_r+0x22>
 8007aca:	2300      	movs	r3, #0
 8007acc:	602b      	str	r3, [r5, #0]
 8007ace:	89b3      	ldrh	r3, [r6, #12]
 8007ad0:	061a      	lsls	r2, r3, #24
 8007ad2:	d410      	bmi.n	8007af6 <__swhatbuf_r+0x3e>
 8007ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ad8:	e00e      	b.n	8007af8 <__swhatbuf_r+0x40>
 8007ada:	466a      	mov	r2, sp
 8007adc:	f000 f8fa 	bl	8007cd4 <_fstat_r>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	dbf2      	blt.n	8007aca <__swhatbuf_r+0x12>
 8007ae4:	9a01      	ldr	r2, [sp, #4]
 8007ae6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007aea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007aee:	425a      	negs	r2, r3
 8007af0:	415a      	adcs	r2, r3
 8007af2:	602a      	str	r2, [r5, #0]
 8007af4:	e7ee      	b.n	8007ad4 <__swhatbuf_r+0x1c>
 8007af6:	2340      	movs	r3, #64	; 0x40
 8007af8:	2000      	movs	r0, #0
 8007afa:	6023      	str	r3, [r4, #0]
 8007afc:	b016      	add	sp, #88	; 0x58
 8007afe:	bd70      	pop	{r4, r5, r6, pc}

08007b00 <__smakebuf_r>:
 8007b00:	898b      	ldrh	r3, [r1, #12]
 8007b02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b04:	079d      	lsls	r5, r3, #30
 8007b06:	4606      	mov	r6, r0
 8007b08:	460c      	mov	r4, r1
 8007b0a:	d507      	bpl.n	8007b1c <__smakebuf_r+0x1c>
 8007b0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	6123      	str	r3, [r4, #16]
 8007b14:	2301      	movs	r3, #1
 8007b16:	6163      	str	r3, [r4, #20]
 8007b18:	b002      	add	sp, #8
 8007b1a:	bd70      	pop	{r4, r5, r6, pc}
 8007b1c:	ab01      	add	r3, sp, #4
 8007b1e:	466a      	mov	r2, sp
 8007b20:	f7ff ffca 	bl	8007ab8 <__swhatbuf_r>
 8007b24:	9900      	ldr	r1, [sp, #0]
 8007b26:	4605      	mov	r5, r0
 8007b28:	4630      	mov	r0, r6
 8007b2a:	f7ff fb23 	bl	8007174 <_malloc_r>
 8007b2e:	b948      	cbnz	r0, 8007b44 <__smakebuf_r+0x44>
 8007b30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b34:	059a      	lsls	r2, r3, #22
 8007b36:	d4ef      	bmi.n	8007b18 <__smakebuf_r+0x18>
 8007b38:	f023 0303 	bic.w	r3, r3, #3
 8007b3c:	f043 0302 	orr.w	r3, r3, #2
 8007b40:	81a3      	strh	r3, [r4, #12]
 8007b42:	e7e3      	b.n	8007b0c <__smakebuf_r+0xc>
 8007b44:	4b0d      	ldr	r3, [pc, #52]	; (8007b7c <__smakebuf_r+0x7c>)
 8007b46:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b48:	89a3      	ldrh	r3, [r4, #12]
 8007b4a:	6020      	str	r0, [r4, #0]
 8007b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b50:	81a3      	strh	r3, [r4, #12]
 8007b52:	9b00      	ldr	r3, [sp, #0]
 8007b54:	6163      	str	r3, [r4, #20]
 8007b56:	9b01      	ldr	r3, [sp, #4]
 8007b58:	6120      	str	r0, [r4, #16]
 8007b5a:	b15b      	cbz	r3, 8007b74 <__smakebuf_r+0x74>
 8007b5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b60:	4630      	mov	r0, r6
 8007b62:	f000 f8c9 	bl	8007cf8 <_isatty_r>
 8007b66:	b128      	cbz	r0, 8007b74 <__smakebuf_r+0x74>
 8007b68:	89a3      	ldrh	r3, [r4, #12]
 8007b6a:	f023 0303 	bic.w	r3, r3, #3
 8007b6e:	f043 0301 	orr.w	r3, r3, #1
 8007b72:	81a3      	strh	r3, [r4, #12]
 8007b74:	89a0      	ldrh	r0, [r4, #12]
 8007b76:	4305      	orrs	r5, r0
 8007b78:	81a5      	strh	r5, [r4, #12]
 8007b7a:	e7cd      	b.n	8007b18 <__smakebuf_r+0x18>
 8007b7c:	08007911 	.word	0x08007911

08007b80 <_raise_r>:
 8007b80:	291f      	cmp	r1, #31
 8007b82:	b538      	push	{r3, r4, r5, lr}
 8007b84:	4604      	mov	r4, r0
 8007b86:	460d      	mov	r5, r1
 8007b88:	d904      	bls.n	8007b94 <_raise_r+0x14>
 8007b8a:	2316      	movs	r3, #22
 8007b8c:	6003      	str	r3, [r0, #0]
 8007b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b92:	bd38      	pop	{r3, r4, r5, pc}
 8007b94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b96:	b112      	cbz	r2, 8007b9e <_raise_r+0x1e>
 8007b98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b9c:	b94b      	cbnz	r3, 8007bb2 <_raise_r+0x32>
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f000 f830 	bl	8007c04 <_getpid_r>
 8007ba4:	462a      	mov	r2, r5
 8007ba6:	4601      	mov	r1, r0
 8007ba8:	4620      	mov	r0, r4
 8007baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bae:	f000 b817 	b.w	8007be0 <_kill_r>
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d00a      	beq.n	8007bcc <_raise_r+0x4c>
 8007bb6:	1c59      	adds	r1, r3, #1
 8007bb8:	d103      	bne.n	8007bc2 <_raise_r+0x42>
 8007bba:	2316      	movs	r3, #22
 8007bbc:	6003      	str	r3, [r0, #0]
 8007bbe:	2001      	movs	r0, #1
 8007bc0:	e7e7      	b.n	8007b92 <_raise_r+0x12>
 8007bc2:	2400      	movs	r4, #0
 8007bc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007bc8:	4628      	mov	r0, r5
 8007bca:	4798      	blx	r3
 8007bcc:	2000      	movs	r0, #0
 8007bce:	e7e0      	b.n	8007b92 <_raise_r+0x12>

08007bd0 <raise>:
 8007bd0:	4b02      	ldr	r3, [pc, #8]	; (8007bdc <raise+0xc>)
 8007bd2:	4601      	mov	r1, r0
 8007bd4:	6818      	ldr	r0, [r3, #0]
 8007bd6:	f7ff bfd3 	b.w	8007b80 <_raise_r>
 8007bda:	bf00      	nop
 8007bdc:	2000000c 	.word	0x2000000c

08007be0 <_kill_r>:
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	4d07      	ldr	r5, [pc, #28]	; (8007c00 <_kill_r+0x20>)
 8007be4:	2300      	movs	r3, #0
 8007be6:	4604      	mov	r4, r0
 8007be8:	4608      	mov	r0, r1
 8007bea:	4611      	mov	r1, r2
 8007bec:	602b      	str	r3, [r5, #0]
 8007bee:	f7f9 ff1f 	bl	8001a30 <_kill>
 8007bf2:	1c43      	adds	r3, r0, #1
 8007bf4:	d102      	bne.n	8007bfc <_kill_r+0x1c>
 8007bf6:	682b      	ldr	r3, [r5, #0]
 8007bf8:	b103      	cbz	r3, 8007bfc <_kill_r+0x1c>
 8007bfa:	6023      	str	r3, [r4, #0]
 8007bfc:	bd38      	pop	{r3, r4, r5, pc}
 8007bfe:	bf00      	nop
 8007c00:	20001bdc 	.word	0x20001bdc

08007c04 <_getpid_r>:
 8007c04:	f7f9 bf0c 	b.w	8001a20 <_getpid>

08007c08 <__sread>:
 8007c08:	b510      	push	{r4, lr}
 8007c0a:	460c      	mov	r4, r1
 8007c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c10:	f000 f894 	bl	8007d3c <_read_r>
 8007c14:	2800      	cmp	r0, #0
 8007c16:	bfab      	itete	ge
 8007c18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c1a:	89a3      	ldrhlt	r3, [r4, #12]
 8007c1c:	181b      	addge	r3, r3, r0
 8007c1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c22:	bfac      	ite	ge
 8007c24:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c26:	81a3      	strhlt	r3, [r4, #12]
 8007c28:	bd10      	pop	{r4, pc}

08007c2a <__swrite>:
 8007c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c2e:	461f      	mov	r7, r3
 8007c30:	898b      	ldrh	r3, [r1, #12]
 8007c32:	05db      	lsls	r3, r3, #23
 8007c34:	4605      	mov	r5, r0
 8007c36:	460c      	mov	r4, r1
 8007c38:	4616      	mov	r6, r2
 8007c3a:	d505      	bpl.n	8007c48 <__swrite+0x1e>
 8007c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c40:	2302      	movs	r3, #2
 8007c42:	2200      	movs	r2, #0
 8007c44:	f000 f868 	bl	8007d18 <_lseek_r>
 8007c48:	89a3      	ldrh	r3, [r4, #12]
 8007c4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c52:	81a3      	strh	r3, [r4, #12]
 8007c54:	4632      	mov	r2, r6
 8007c56:	463b      	mov	r3, r7
 8007c58:	4628      	mov	r0, r5
 8007c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c5e:	f000 b817 	b.w	8007c90 <_write_r>

08007c62 <__sseek>:
 8007c62:	b510      	push	{r4, lr}
 8007c64:	460c      	mov	r4, r1
 8007c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c6a:	f000 f855 	bl	8007d18 <_lseek_r>
 8007c6e:	1c43      	adds	r3, r0, #1
 8007c70:	89a3      	ldrh	r3, [r4, #12]
 8007c72:	bf15      	itete	ne
 8007c74:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c7e:	81a3      	strheq	r3, [r4, #12]
 8007c80:	bf18      	it	ne
 8007c82:	81a3      	strhne	r3, [r4, #12]
 8007c84:	bd10      	pop	{r4, pc}

08007c86 <__sclose>:
 8007c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c8a:	f000 b813 	b.w	8007cb4 <_close_r>
	...

08007c90 <_write_r>:
 8007c90:	b538      	push	{r3, r4, r5, lr}
 8007c92:	4d07      	ldr	r5, [pc, #28]	; (8007cb0 <_write_r+0x20>)
 8007c94:	4604      	mov	r4, r0
 8007c96:	4608      	mov	r0, r1
 8007c98:	4611      	mov	r1, r2
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	602a      	str	r2, [r5, #0]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	f7f9 fefd 	bl	8001a9e <_write>
 8007ca4:	1c43      	adds	r3, r0, #1
 8007ca6:	d102      	bne.n	8007cae <_write_r+0x1e>
 8007ca8:	682b      	ldr	r3, [r5, #0]
 8007caa:	b103      	cbz	r3, 8007cae <_write_r+0x1e>
 8007cac:	6023      	str	r3, [r4, #0]
 8007cae:	bd38      	pop	{r3, r4, r5, pc}
 8007cb0:	20001bdc 	.word	0x20001bdc

08007cb4 <_close_r>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	4d06      	ldr	r5, [pc, #24]	; (8007cd0 <_close_r+0x1c>)
 8007cb8:	2300      	movs	r3, #0
 8007cba:	4604      	mov	r4, r0
 8007cbc:	4608      	mov	r0, r1
 8007cbe:	602b      	str	r3, [r5, #0]
 8007cc0:	f7f9 ff09 	bl	8001ad6 <_close>
 8007cc4:	1c43      	adds	r3, r0, #1
 8007cc6:	d102      	bne.n	8007cce <_close_r+0x1a>
 8007cc8:	682b      	ldr	r3, [r5, #0]
 8007cca:	b103      	cbz	r3, 8007cce <_close_r+0x1a>
 8007ccc:	6023      	str	r3, [r4, #0]
 8007cce:	bd38      	pop	{r3, r4, r5, pc}
 8007cd0:	20001bdc 	.word	0x20001bdc

08007cd4 <_fstat_r>:
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	4d07      	ldr	r5, [pc, #28]	; (8007cf4 <_fstat_r+0x20>)
 8007cd8:	2300      	movs	r3, #0
 8007cda:	4604      	mov	r4, r0
 8007cdc:	4608      	mov	r0, r1
 8007cde:	4611      	mov	r1, r2
 8007ce0:	602b      	str	r3, [r5, #0]
 8007ce2:	f7f9 ff04 	bl	8001aee <_fstat>
 8007ce6:	1c43      	adds	r3, r0, #1
 8007ce8:	d102      	bne.n	8007cf0 <_fstat_r+0x1c>
 8007cea:	682b      	ldr	r3, [r5, #0]
 8007cec:	b103      	cbz	r3, 8007cf0 <_fstat_r+0x1c>
 8007cee:	6023      	str	r3, [r4, #0]
 8007cf0:	bd38      	pop	{r3, r4, r5, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20001bdc 	.word	0x20001bdc

08007cf8 <_isatty_r>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	4d06      	ldr	r5, [pc, #24]	; (8007d14 <_isatty_r+0x1c>)
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	4604      	mov	r4, r0
 8007d00:	4608      	mov	r0, r1
 8007d02:	602b      	str	r3, [r5, #0]
 8007d04:	f7f9 ff03 	bl	8001b0e <_isatty>
 8007d08:	1c43      	adds	r3, r0, #1
 8007d0a:	d102      	bne.n	8007d12 <_isatty_r+0x1a>
 8007d0c:	682b      	ldr	r3, [r5, #0]
 8007d0e:	b103      	cbz	r3, 8007d12 <_isatty_r+0x1a>
 8007d10:	6023      	str	r3, [r4, #0]
 8007d12:	bd38      	pop	{r3, r4, r5, pc}
 8007d14:	20001bdc 	.word	0x20001bdc

08007d18 <_lseek_r>:
 8007d18:	b538      	push	{r3, r4, r5, lr}
 8007d1a:	4d07      	ldr	r5, [pc, #28]	; (8007d38 <_lseek_r+0x20>)
 8007d1c:	4604      	mov	r4, r0
 8007d1e:	4608      	mov	r0, r1
 8007d20:	4611      	mov	r1, r2
 8007d22:	2200      	movs	r2, #0
 8007d24:	602a      	str	r2, [r5, #0]
 8007d26:	461a      	mov	r2, r3
 8007d28:	f7f9 fefc 	bl	8001b24 <_lseek>
 8007d2c:	1c43      	adds	r3, r0, #1
 8007d2e:	d102      	bne.n	8007d36 <_lseek_r+0x1e>
 8007d30:	682b      	ldr	r3, [r5, #0]
 8007d32:	b103      	cbz	r3, 8007d36 <_lseek_r+0x1e>
 8007d34:	6023      	str	r3, [r4, #0]
 8007d36:	bd38      	pop	{r3, r4, r5, pc}
 8007d38:	20001bdc 	.word	0x20001bdc

08007d3c <_read_r>:
 8007d3c:	b538      	push	{r3, r4, r5, lr}
 8007d3e:	4d07      	ldr	r5, [pc, #28]	; (8007d5c <_read_r+0x20>)
 8007d40:	4604      	mov	r4, r0
 8007d42:	4608      	mov	r0, r1
 8007d44:	4611      	mov	r1, r2
 8007d46:	2200      	movs	r2, #0
 8007d48:	602a      	str	r2, [r5, #0]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	f7f9 fe8a 	bl	8001a64 <_read>
 8007d50:	1c43      	adds	r3, r0, #1
 8007d52:	d102      	bne.n	8007d5a <_read_r+0x1e>
 8007d54:	682b      	ldr	r3, [r5, #0]
 8007d56:	b103      	cbz	r3, 8007d5a <_read_r+0x1e>
 8007d58:	6023      	str	r3, [r4, #0]
 8007d5a:	bd38      	pop	{r3, r4, r5, pc}
 8007d5c:	20001bdc 	.word	0x20001bdc

08007d60 <_init>:
 8007d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d62:	bf00      	nop
 8007d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d66:	bc08      	pop	{r3}
 8007d68:	469e      	mov	lr, r3
 8007d6a:	4770      	bx	lr

08007d6c <_fini>:
 8007d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6e:	bf00      	nop
 8007d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d72:	bc08      	pop	{r3}
 8007d74:	469e      	mov	lr, r3
 8007d76:	4770      	bx	lr
